-------------------------
Testing Function: getCost
-------------------------
-----
Curse
-----

------
Estate
------
------
Duchy
------

--------
Province
--------
------
Copper
------

------
Silver
------

----
Gold
----

----------
Adventurer
----------

------------
Council_room
------------

-----
Feast
-----

-------
Gardens
-------

----
Mine
----

-------
Remodel
-------

------
Smithy
------

-------
Village
-------

-----
Baron
-----

----------
Great_Hall
----------

------
Minion
------

-------
Steward
-------

-------
Tribute
-------

----------
Ambassador
----------

--------
Cutpurse
--------

-------
Embargo
-------

-------
Outpost
-------

--------
Salvager
--------

-------
Sea_Hag
-------

------------
Treasure_Map
------------

----------------------------
Testing Function: isGameOver
----------------------------
----------------------
Province cards is empty
----------------------
-----------------------------------
Three or more supply piles are at 0
-----------------------------------
--------------------------------
Testing Function: initializeGame
--------------------------------

-------------------------
Testing number of players
-------------------------

------------------------------------
Testing selected cards are different
------------------------------------

------------------------------
Testing shuffle player decks
------------------------------
--------------------
Testing numHandCards
--------------------
---------------------
Testing Card: Gardens
---------------------

---------------------
Testing Card: Outpost
---------------------

Testing Card: File 'dominion.c'
No executable lines
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
        -:    9:  if (*(int*)a > *(int*)b)
        -:   10:    return 1;
        -:   11:  if (*(int*)a < *(int*)b)
        -:   12:    return -1;
        -:   13:  return 0;
        -:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
        -:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        -:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        -:   23:  int* k = malloc(10 * sizeof(int));
        -:   24:  k[0] = k1;
        -:   25:  k[1] = k2;
        -:   26:  k[2] = k3;
        -:   27:  k[3] = k4;
        -:   28:  k[4] = k5;
        -:   29:  k[5] = k6;
        -:   30:  k[6] = k7;
        -:   31:  k[7] = k8;
        -:   32:  k[8] = k9;
        -:   33:  k[9] = k10;
        -:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        -:   44:  SelectStream(1);
        -:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        -:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        -:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        -:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
        -:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
        -:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
        -:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        -:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        -:   73:  if (numPlayers == 2)
        -:   74:    {
        -:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        -:   77:  else if (numPlayers == 3)
        -:   78:    {
        -:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        -:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        -:   87:  if (numPlayers == 2)
        -:   88:    {
        -:   89:      state->supplyCount[estate] = 8;
        -:   90:      state->supplyCount[duchy] = 8;
        -:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        -:   95:      state->supplyCount[estate] = 12;
        -:   96:      state->supplyCount[duchy] = 12;
        -:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        -:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        -:  102:  state->supplyCount[silver] = 40;
        -:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
        -:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
        -:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
        -:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
        -:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        -:  115:		  if (numPlayers == 2){ 
        -:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        -:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        -:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
        -:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
        -:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        -:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        -:  140:      state->deckCount[i] = 0;
        -:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        -:  143:	  state->deck[i][j] = estate;
        -:  144:	  state->deckCount[i]++;
        -:  145:	}
        -:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
        -:  148:	  state->deck[i][j] = copper;
        -:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        -:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        -:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
        -:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        -:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        -:  166:      state->handCount[i] = 0;
        -:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
        -:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
        -:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        -:  182:  state->outpostPlayed = 0;
        -:  183:  state->phase = 0;
        -:  184:  state->numActions = 1;
        -:  185:  state->numBuys = 1;
        -:  186:  state->playedCardCount = 0;
        -:  187:  state->whoseTurn = 0;
        -:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        -:  192:  for (it = 0; it < 5; it++){
        -:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        -:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        -:  198:  return 0;
        -:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        -:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        -:  209:  if (state->deckCount[player] < 1)
        -:  210:    return -1;
        -:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
        -:  214:  while (state->deckCount[player] > 0) {
        -:  215:    card = floor(Random() * state->deckCount[player]);
        -:  216:    newDeck[newDeckPos] = state->deck[player][card];
        -:  217:    newDeckPos++;
        -:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
        -:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
        -:  221:    state->deckCount[player]--;
        -:  222:  }
        -:  223:  for (i = 0; i < newDeckPos; i++) {
        -:  224:    state->deck[player][i] = newDeck[i];
        -:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        -:  228:  return 0;
        -:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        -:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        -:  237:  if (state->phase != 0)
        -:  238:    {
        -:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        -:  243:  if ( state->numActions < 1 )
        -:  244:    {
        -:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        -:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        -:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        -:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        -:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
        -:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        -:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        -:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        -:  269:  return 0;
        -:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        -:  280:  who = state->whoseTurn;
        -:  281:
        -:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        -:  285:    return -1;
        -:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        -:  289:    return -1;
        -:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        -:  293:    return -1;
        -:  294:  } else {
        -:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        -:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        -:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        -:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        -:  308:  return 0;
        -:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
        -:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
        -:  316:  int currentPlayer = whoseTurn(state);
        -:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
        -:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        -:  326:  int count = 0;
        -:  327:
        -:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
        -:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
        -:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
        -:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
        -:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
        -:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
        -:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        -:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        -:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
        -:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        -:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        -:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        -:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        -:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        -:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        -:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        -:  370:  state->outpostPlayed = 0;
        -:  371:  state->phase = 0;
        -:  372:  state->numActions = 1;
        -:  373:  state->coins = 0;
        -:  374:  state->numBuys = 1;
        -:  375:  state->playedCardCount = 0;
        -:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
        -:  380:  for (k = 0; k < 5; k++){
        -:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        -:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        -:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        -:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        -:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        -:  401:  j = 0;
        -:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
        -:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        -:  406:	  j++;
        -:  407:	}
        -:  408:    }
        -:  409:  if ( j >= 3)
        -:  410:    {
        -:  411:      return 1;
        -:  412:    }
        -:  413:
        -:  414:  return 0;
        -:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        -:  420:  int score = 0;
        -:  421:  //score from hand
        -:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
        -:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
        -:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
        -:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
        -:  427:      if (state->hand[player][i] == province) { score = score + 6; };
        -:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        -:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
        -:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
        -:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
        -:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
        -:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
        -:  438:      if (state->discard[player][i] == province) { score = score + 6; };
        -:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        -:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
        -:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
        -:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
        -:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
        -:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
        -:  449:      if (state->deck[player][i] == province) { score = score + 6; };
        -:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        -:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        -:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
        -:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
        -:  467:      if (i >= state->numPlayers)
        -:  468:	{
        -:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
        -:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
        -:  478:  j = 0;
        -:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
        -:  481:      if (players[i] > players[j])
        -:  482:	{
        -:  483:	  j = i;
        -:  484:	}
        -:  485:    }
        -:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
        -:  489:  currentPlayer = whoseTurn(state);
        -:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
        -:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
        -:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
        -:  499:  j = 0;
        -:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
        -:  502:      if ( players[i] > players[j] )
        -:  503:	{
        -:  504:	  j = i;
        -:  505:	}
        -:  506:    }
        -:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
        -:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
        -:  512:      if ( players[i] == highScore )
        -:  513:	{
        -:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
        -:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
        -:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        -:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        -:  533:    for (i = 0; i < state->discardCount[player];i++){
        -:  534:      state->deck[player][i] = state->discard[player][i];
        -:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        -:  538:    state->deckCount[player] = state->discardCount[player];
        -:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        -:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        -:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        -:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        -:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        -:  559:    if (deckCounter == 0)
        -:  560:      return -1;
        -:  561:
        -:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        -:  563:    state->deckCount[player]--;
        -:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        -:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        -:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        -:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        -:  576:    state->deckCount[player]--;
        -:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        -:  580:  return 0;
        -:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
        -:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        -:  588:      return 0;
        -:  589:    case estate:
        -:  590:      return 2;
        -:  591:    case duchy:
        -:  592:      return 5;
        -:  593:    case province:
        -:  594:      return 8;
        -:  595:    case copper:
        -:  596:      return 0;
        -:  597:    case silver:
        -:  598:      return 3;
        -:  599:    case gold:
        -:  600:      return 6;
        -:  601:    case adventurer:
        -:  602:      return 6;
        -:  603:    case council_room:
        -:  604:      return 5;
        -:  605:    case feast:
        -:  606:      return 4;
        -:  607:    case gardens:
        -:  608:      return 4;
        -:  609:    case mine:
        -:  610:      return 5;
        -:  611:    case remodel:
        -:  612:      return 4;
        -:  613:    case smithy:
        -:  614:      return 4;
        -:  615:    case village:
        -:  616:      return 3;
        -:  617:    case baron:
        -:  618:      return 4;
        -:  619:    case great_hall:
        -:  620:      return 3;
        -:  621:    case minion:
        -:  622:      return 5;
        -:  623:    case steward:
        -:  624:      return 3;
        -:  625:    case tribute:
        -:  626:      return 5;
        -:  627:    case ambassador:
        -:  628:      return 3;
        -:  629:    case cutpurse:
        -:  630:      return 4;
        -:  631:    case embargo: 
        -:  632:      return 2;
        -:  633:    case outpost:
        -:  634:      return 5;
        -:  635:    case salvager:
        -:  636:      return 4;
        -:  637:    case sea_hag:
        -:  638:      return 4;
        -:  639:    case treasure_map:
        -:  640:      return 4;
        -:  641:    }
        -:  642:	
        -:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:int adventurer_card(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  647:  int currentPlayer = whoseTurn(state);
        -:  648:  int temphand[MAX_HAND];// moved above the if statement
        -:  649:  int drawntreasure=0;
        -:  650:  int cardDrawn;
        -:  651:  int z = 0;// this is the counter for the temp hand
        -:  652:  //Should be while(drawntreasure<2)
        -:  653:  while(cardDrawn<2){
        -:  654:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  655:    shuffle(currentPlayer, state);
        -:  656:  }
        -:  657:  drawCard(currentPlayer, state);
        -:  658:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  659:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  660:    drawntreasure++;
        -:  661:  else{
        -:  662:    temphand[z]=cardDrawn;
        -:  663:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  664:    z++;
        -:  665:  }
        -:  666:      }
        -:  667:      while(z-1>=0){
        -:  668:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  669:  z=z-1;
        -:  670:      }
        -:  671:
        -:  672:      return 0;
        -:  673:}
        -:  674:
        -:  675:int council_room_card(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  676:  int i;
        -:  677:  int currentPlayer = whoseTurn(state);
        -:  678:
        -:  679:  //+4 Cards
        -:  680:      for (i = 0; i < 4; i++)
        -:  681:  {
        -:  682:    drawCard(currentPlayer, state);
        -:  683:  }
        -:  684:      
        -:  685:      //+1 Buy
        -:  686:      state->numBuys++;
        -:  687:      
        -:  688:      //Each other player draws a card
        -:  689:      for (i = 0; i < state->numPlayers; i++)
        -:  690:  {
        -:  691:    if ( i != currentPlayer )
        -:  692:      {
        -:  693:        drawCard(i, state);
        -:  694:      }
        -:  695:  }
        -:  696:      
        -:  697:      //put played card in played card pile
        -:  698:      discardCard(handPos, currentPlayer, state, 0);
        -:  699:
        -:  700:      return 0;
        -:  701:}
        -:  702:
        -:  703:int feast_card(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  704:  int i;
        -:  705:  int x;
        -:  706:  int currentPlayer = whoseTurn(state);
        -:  707:  int temphand[MAX_HAND];// moved above the if statement
        -:  708:  //gain card with cost up to 5
        -:  709:      //Backup hand
        -:  710:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  711:  temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  712:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  713:      }
        -:  714:      //Backup hand
        -:  715:
        -:  716:      //Update Coins for Buy
        -:  717:      updateCoins(currentPlayer, state, 5);
        -:  718:      x = 1;//Condition to loop on
        -:  719:      while( x == 1) {//Buy one card
        -:  720:  if (supplyCount(choice1, state) <= 0){
        -:  721:    if (DEBUG)
        -:  722:      printf("None of that card left, sorry!\n");
        -:  723:
        -:  724:    if (DEBUG){
        -:  725:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  726:    }
        -:  727:  }
        -:  728:  //This should be else if(state->coins < getCost(choice1))
        -:  729:  else if (state->coins > getCost(choice1)){
        -:  730:    printf("That card is too expensive!\n");
        -:  731:
        -:  732:    if (DEBUG){
        -:  733:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  734:    }
        -:  735:  }
        -:  736:  else{
        -:  737:
        -:  738:    if (DEBUG){
        -:  739:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  740:    }
        -:  741:
        -:  742:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  743:    x = 0;//No more buying cards
        -:  744:
        -:  745:    if (DEBUG){
        -:  746:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:    }
        -:  748:
        -:  749:  }
        -:  750:      }     
        -:  751:
        -:  752:      //Reset Hand
        -:  753:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  754:  state->hand[currentPlayer][i] = temphand[i];
        -:  755:  temphand[i] = -1;
        -:  756:      }
        -:  757:      //Reset Hand
        -:  758:            
        -:  759:      return 0;
        -:  760:}
        -:  761:
        -:  762:int gardens_card(){
        -:  763:  
        -:  764:   return -1;
        -:  765:}
        -:  766:
        -:  767:int mine_card(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  768:  int i;
        -:  769:  int j;
        -:  770:  int currentPlayer = whoseTurn(state);
        -:  771:  
        -:  772:   j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
        -:  774:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  775:  {
        -:  776:    return -1;
        -:  777:  }
        -:  778:    
        -:  779:      if (choice2 > treasure_map || choice2 < curse)
        -:  780:  {
        -:  781:    return -1;
        -:  782:  }
        -:  783:
        -:  784:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  785:  {
        -:  786:    return -1;
        -:  787:  }
        -:  788:
        -:  789:      gainCard(choice2, state, 2, currentPlayer);
        -:  790:
        -:  791:      //discard card from hand
        -:  792:      discardCard(handPos, currentPlayer, state, 0);
        -:  793:
        -:  794:      //discard trashed card
        -:  795:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  796:  {
        -:  797:    if (state->hand[currentPlayer][i] == j)
        -:  798:      {
        -:  799:        discardCard(i, currentPlayer, state, 0);      
        -:  800:        break;
        -:  801:      }
        -:  802:  }
        -:  803:      
        -:  804:      return 0;
        -:  805:}
        -:  806:
        -:  807:
        -:  808:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  809:{
        -:  810:  int i;
        -:  811:  int j;
        -:  812:  int k;
        -:  813: //int x;
        -:  814:  int index;
        -:  815:  int currentPlayer = whoseTurn(state);
        -:  816:  int nextPlayer = currentPlayer + 1;
        -:  817:
        -:  818:  int tributeRevealedCards[2] = {-1, -1};
        -:  819:  //int temphand[MAX_HAND];// moved above the if statement
        -:  820:  //int drawntreasure=0;
        -:  821:  //int cardDrawn;
        -:  822:  //int z = 0;// this is the counter for the temp hand
        -:  823:  if (nextPlayer > (state->numPlayers - 1)){
        -:  824:    nextPlayer = 0;
        -:  825:  }
        -:  826:  
        -:  827:	
        -:  828:  //uses switch to select card and perform actions
        -:  829:  switch( card ) 
        -:  830:    {
        -:  831:    case adventurer:
        -:  832:			return adventurer_card(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  833:    case council_room:
        -:  834:			return council_room_card(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  835:    case feast:
        -:  836:			return feast_card(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  837:    case gardens:
        -:  838:			return gardens_card();
        -:  839:    case mine:
        -:  840:			return mine_card(card, choice1, choice2, choice3, state, handPos, bonus);
        -:  841:    case remodel:
        -:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
        -:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  845:	{
        -:  846:	  return -1;
        -:  847:	}
        -:  848:
        -:  849:      gainCard(choice2, state, 0, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
        -:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
        -:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
        -:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
        -:  859:	      discardCard(i, currentPlayer, state, 0);			
        -:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
        -:  864:
        -:  865:      return 0;
        -:  866:		
        -:  867:    case smithy:
        -:  868:      //+3 Cards
        -:  869:      for (i = 0; i < 3; i++)
        -:  870:	{
        -:  871:	  drawCard(currentPlayer, state);
        -:  872:	}
        -:  873:			
        -:  874:      //discard card from hand
        -:  875:      discardCard(handPos, currentPlayer, state, 0);
        -:  876:      return 0;
        -:  877:		
        -:  878:    case village:
        -:  879:      //+1 Card
        -:  880:      drawCard(currentPlayer, state);
        -:  881:			
        -:  882:      //+2 Actions
        -:  883:      state->numActions = state->numActions + 2;
        -:  884:			
        -:  885:      //discard played card from hand
        -:  886:      discardCard(handPos, currentPlayer, state, 0);
        -:  887:      return 0;
        -:  888:		
        -:  889:    case baron:
        -:  890:      state->numBuys++;//Increase buys by 1!
        -:  891:      if (choice1 > 0){//Boolean true or going to discard an estate
        -:  892:	int p = 0;//Iterator for hand!
        -:  893:	int card_not_discarded = 1;//Flag for discard set!
        -:  894:	while(card_not_discarded){
        -:  895:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  896:	    state->coins += 4;//Add 4 coins to the amount of coins
        -:  897:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  898:	    state->discardCount[currentPlayer]++;
        -:  899:	    for (;p < state->handCount[currentPlayer]; p++){
        -:  900:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  901:	    }
        -:  902:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  903:	    state->handCount[currentPlayer]--;
        -:  904:	    card_not_discarded = 0;//Exit the loop
        -:  905:	  }
        -:  906:	  else if (p > state->handCount[currentPlayer]){
        -:  907:	    if(DEBUG) {
        -:  908:	      printf("No estate cards in your hand, invalid choice\n");
        -:  909:	      printf("Must gain an estate if there are any\n");
        -:  910:	    }
        -:  911:	    if (supplyCount(estate, state) > 0){
        -:  912:	      gainCard(estate, state, 0, currentPlayer);
        -:  913:	      state->supplyCount[estate]--;//Decrement estates
        -:  914:	      if (supplyCount(estate, state) == 0){
        -:  915:		isGameOver(state);
        -:  916:	      }
        -:  917:	    }
        -:  918:	    card_not_discarded = 0;//Exit the loop
        -:  919:	  }
        -:  920:			    
        -:  921:	  else{
        -:  922:	    p++;//Next card
        -:  923:	  }
        -:  924:	}
        -:  925:      }
        -:  926:			    
        -:  927:      else{
        -:  928:	if (supplyCount(estate, state) > 0){
        -:  929:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  930:	  state->supplyCount[estate]--;//Decrement Estates
        -:  931:	  if (supplyCount(estate, state) == 0){
        -:  932:	    isGameOver(state);
        -:  933:	  }
        -:  934:	}
        -:  935:      }
        -:  936:	    
        -:  937:      
        -:  938:      return 0;
        -:  939:		
        -:  940:    case great_hall:
        -:  941:      //+1 Card
        -:  942:      drawCard(currentPlayer, state);
        -:  943:			
        -:  944:      //+1 Actions
        -:  945:      state->numActions++;
        -:  946:			
        -:  947:      //discard card from hand
        -:  948:      discardCard(handPos, currentPlayer, state, 0);
        -:  949:      return 0;
        -:  950:		
        -:  951:    case minion:
        -:  952:      //+1 action
        -:  953:      state->numActions++;
        -:  954:			
        -:  955:      //discard card from hand
        -:  956:      discardCard(handPos, currentPlayer, state, 0);
        -:  957:			
        -:  958:      if (choice1)		//+2 coins
        -:  959:	{
        -:  960:	  state->coins = state->coins + 2;
        -:  961:	}
        -:  962:			
        -:  963:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  964:	{
        -:  965:	  //discard hand
        -:  966:	  while(numHandCards(state) > 0)
        -:  967:	    {
        -:  968:	      discardCard(handPos, currentPlayer, state, 0);
        -:  969:	    }
        -:  970:				
        -:  971:	  //draw 4
        -:  972:	  for (i = 0; i < 4; i++)
        -:  973:	    {
        -:  974:	      drawCard(currentPlayer, state);
        -:  975:	    }
        -:  976:				
        -:  977:	  //other players discard hand and redraw if hand size > 4
        -:  978:	  for (i = 0; i < state->numPlayers; i++)
        -:  979:	    {
        -:  980:	      if (i != currentPlayer)
        -:  981:		{
        -:  982:		  if ( state->handCount[i] > 4 )
        -:  983:		    {
        -:  984:		      //discard hand
        -:  985:		      while( state->handCount[i] > 0 )
        -:  986:			{
        -:  987:			  discardCard(handPos, i, state, 0);
        -:  988:			}
        -:  989:							
        -:  990:		      //draw 4
        -:  991:		      for (j = 0; j < 4; j++)
        -:  992:			{
        -:  993:			  drawCard(i, state);
        -:  994:			}
        -:  995:		    }
        -:  996:		}
        -:  997:	    }
        -:  998:				
        -:  999:	}
        -: 1000:      return 0;
        -: 1001:		
        -: 1002:    case steward:
        -: 1003:      if (choice1 == 1)
        -: 1004:	{
        -: 1005:	  //+2 cards
        -: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	  drawCard(currentPlayer, state);
        -: 1008:	}
        -: 1009:      else if (choice1 == 2)
        -: 1010:	{
        -: 1011:	  //+2 coins
        -: 1012:	  state->coins = state->coins + 2;
        -: 1013:	}
        -: 1014:      else
        -: 1015:	{
        -: 1016:	  //trash 2 cards in hand
        -: 1017:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1018:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1019:	}
        -: 1020:			
        -: 1021:      //discard card from hand
        -: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:      return 0;
        -: 1024:		
        -: 1025:    case tribute:
        -: 1026:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1027:	if (state->deckCount[nextPlayer] > 0){
        -: 1028:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1029:	  state->deckCount[nextPlayer]--;
        -: 1030:	}
        -: 1031:	else if (state->discardCount[nextPlayer] > 0){
        -: 1032:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1033:	  state->discardCount[nextPlayer]--;
        -: 1034:	}
        -: 1035:	else{
        -: 1036:	  //No Card to Reveal
        -: 1037:	  if (DEBUG){
        -: 1038:	    printf("No cards to reveal\n");
        -: 1039:	  }
        -: 1040:	}
        -: 1041:      }
        -: 1042:	    
        -: 1043:      else{
        -: 1044:	if (state->deckCount[nextPlayer] == 0){
        -: 1045:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1046:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1047:	    state->deckCount[nextPlayer]++;
        -: 1048:	    state->discard[nextPlayer][i] = -1;
        -: 1049:	    state->discardCount[nextPlayer]--;
        -: 1050:	  }
        -: 1051:			    
        -: 1052:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1053:	} 
        -: 1054:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1055:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1056:	state->deckCount[nextPlayer]--;
        -: 1057:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1059:	state->deckCount[nextPlayer]--;
        -: 1060:      }    
        -: 1061:		       
        -: 1062:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1063:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1064:	state->playedCardCount++;
        -: 1065:	tributeRevealedCards[1] = -1;
        -: 1066:      }
        -: 1067:
        -: 1068:      for (i = 0; i <= 2; i ++){
        -: 1069:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1070:	  state->coins += 2;
        -: 1071:	}
        -: 1072:		    
        -: 1073:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1074:	  drawCard(currentPlayer, state);
        -: 1075:	  drawCard(currentPlayer, state);
        -: 1076:	}
        -: 1077:	else{//Action Card
        -: 1078:	  state->numActions = state->numActions + 2;
        -: 1079:	}
        -: 1080:      }
        -: 1081:	    
        -: 1082:      return 0;
        -: 1083:		
        -: 1084:    case ambassador:
        -: 1085:      j = 0;		//used to check if player has enough cards to discard
        -: 1086:
        -: 1087:      if (choice2 > 2 || choice2 < 0)
        -: 1088:	{
        -: 1089:	  return -1;				
        -: 1090:	}
        -: 1091:
        -: 1092:      if (choice1 == handPos)
        -: 1093:	{
        -: 1094:	  return -1;
        -: 1095:	}
        -: 1096:
        -: 1097:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1098:	{
        -: 1099:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1100:	    {
        -: 1101:	      j++;
        -: 1102:	    }
        -: 1103:	}
        -: 1104:      if (j < choice2)
        -: 1105:	{
        -: 1106:	  return -1;				
        -: 1107:	}
        -: 1108:
        -: 1109:      if (DEBUG) 
        -: 1110:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1111:
        -: 1112:      //increase supply count for choosen card by amount being discarded
        -: 1113:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1114:			
        -: 1115:      //each other player gains a copy of revealed card
        -: 1116:      for (i = 0; i < state->numPlayers; i++)
        -: 1117:	{
        -: 1118:	  if (i != currentPlayer)
        -: 1119:	    {
        -: 1120:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1121:	    }
        -: 1122:	}
        -: 1123:
        -: 1124:      //discard played card from hand
        -: 1125:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1126:
        -: 1127:      //trash copies of cards returned to supply
        -: 1128:      for (j = 0; j < choice2; j++)
        -: 1129:	{
        -: 1130:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:	    {
        -: 1132:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1133:		{
        -: 1134:		  discardCard(i, currentPlayer, state, 1);
        -: 1135:		  break;
        -: 1136:		}
        -: 1137:	    }
        -: 1138:	}			
        -: 1139:
        -: 1140:      return 0;
        -: 1141:		
        -: 1142:    case cutpurse:
        -: 1143:
        -: 1144:      updateCoins(currentPlayer, state, 2);
        -: 1145:      for (i = 0; i < state->numPlayers; i++)
        -: 1146:	{
        -: 1147:	  if (i != currentPlayer)
        -: 1148:	    {
        -: 1149:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1150:		{
        -: 1151:		  if (state->hand[i][j] == copper)
        -: 1152:		    {
        -: 1153:		      discardCard(j, i, state, 0);
        -: 1154:		      break;
        -: 1155:		    }
        -: 1156:		  if (j == state->handCount[i])
        -: 1157:		    {
        -: 1158:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1159:			{
        -: 1160:			  if (DEBUG)
        -: 1161:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1162:			}	
        -: 1163:		      break;
        -: 1164:		    }		
        -: 1165:		}
        -: 1166:					
        -: 1167:	    }
        -: 1168:				
        -: 1169:	}				
        -: 1170:
        -: 1171:      //discard played card from hand
        -: 1172:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1173:
        -: 1174:      return 0;
        -: 1175:
        -: 1176:		
        -: 1177:    case embargo: 
        -: 1178:      //+2 Coins
        -: 1179:      state->coins = state->coins + 2;
        -: 1180:			
        -: 1181:      //see if selected pile is in play
        -: 1182:      if ( state->supplyCount[choice1] == -1 )
        -: 1183:	{
        -: 1184:	  return -1;
        -: 1185:	}
        -: 1186:			
        -: 1187:      //add embargo token to selected supply pile
        -: 1188:      state->embargoTokens[choice1]++;
        -: 1189:			
        -: 1190:      //trash card
        -: 1191:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1192:      return 0;
        -: 1193:		
        -: 1194:    case outpost:
        -: 1195:      //set outpost flag
        -: 1196:      state->outpostPlayed++;
        -: 1197:			
        -: 1198:      //discard card
        -: 1199:      discardCard(handPos, currentPlayer, state, 0);
        -: 1200:      return 0;
        -: 1201:		
        -: 1202:    case salvager:
        -: 1203:      //+1 buy
        -: 1204:      state->numBuys++;
        -: 1205:			
        -: 1206:      if (choice1)
        -: 1207:	{
        -: 1208:	  //gain coins equal to trashed card
        -: 1209:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1210:	  //trash card
        -: 1211:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1212:	}
        -: 1213:			
        -: 1214:      //discard card
        -: 1215:      discardCard(handPos, currentPlayer, state, 0);
        -: 1216:      return 0;
        -: 1217:		
        -: 1218:    case sea_hag:
        -: 1219:      for (i = 0; i < state->numPlayers; i++){
        -: 1220:	if (i != currentPlayer){
        -: 1221:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1222:	  state->discardCount[i]++;
        -: 1223:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1224:	}
        -: 1225:      }
        -: 1226:      return 0;
        -: 1227:		
        -: 1228:    case treasure_map:
        -: 1229:      //search hand for another treasure_map
        -: 1230:      index = -1;
        -: 1231:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1232:	{
        -: 1233:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1234:	    {
        -: 1235:	      index = i;
        -: 1236:	      break;
        -: 1237:	    }
        -: 1238:	}
        -: 1239:      if (index > -1)
        -: 1240:	{
        -: 1241:	  //trash both treasure cards
        -: 1242:	  discardCard(handPos, currentPlayer, state, 1);
        -: 1243:	  discardCard(index, currentPlayer, state, 1);
        -: 1244:
        -: 1245:	  //gain 4 Gold cards
        -: 1246:	  for (i = 0; i < 4; i++)
        -: 1247:	    {
        -: 1248:	      gainCard(gold, state, 1, currentPlayer);
        -: 1249:	    }
        -: 1250:				
        -: 1251:	  //return success
        -: 1252:	  return 1;
        -: 1253:	}
        -: 1254:			
        -: 1255:      //no second treasure_map found in hand
        -: 1256:      return -1;
        -: 1257:    }
        -: 1258:	
        -: 1259:  return -1;
        -: 1260:}
        -: 1261:
        -: 1262:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1263:{
        -: 1264:	
        -: 1265:  //if card is not trashed, added to Played pile 
        -: 1266:  if (trashFlag < 1)
        -: 1267:    {
        -: 1268:      //add card to played pile
        -: 1269:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        -: 1270:      state->playedCardCount++;
        -: 1271:    }
        -: 1272:	
        -: 1273:  //set played card to -1
        -: 1274:  state->hand[currentPlayer][handPos] = -1;
        -: 1275:	
        -: 1276:  //remove card from player's hand
        -: 1277:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
        -: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1283:    {
        -: 1284:      //reduce number of cards in hand
        -: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:  else 	
        -: 1288:    {
        -: 1289:      //replace discarded card with last card in hand
        -: 1290:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1291:      //set last card to -1
        -: 1292:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1293:      //reduce number of cards in hand
        -: 1294:      state->handCount[currentPlayer]--;
        -: 1295:    }
        -: 1296:	
        -: 1297:  return 0;
        -: 1298:}
        -: 1299:
        -: 1300:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1301:{
        -: 1302:  //Note: supplyPos is enum of choosen card
        -: 1303:	
        -: 1304:  //check if supply pile is empty (0) or card is not used in game (-1)
        -: 1305:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1306:    {
        -: 1307:      return -1;
        -: 1308:    }
        -: 1309:	
        -: 1310:  //added card for [whoseTurn] current player:
        -: 1311:  // toFlag = 0 : add to discard
        -: 1312:  // toFlag = 1 : add to deck
        -: 1313:  // toFlag = 2 : add to hand
        -: 1314:
        -: 1315:  if (toFlag == 1)
        -: 1316:    {
        -: 1317:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        -: 1318:      state->deckCount[player]++;
        -: 1319:    }
        -: 1320:  else if (toFlag == 2)
        -: 1321:    {
        -: 1322:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        -: 1323:      state->handCount[player]++;
        -: 1324:    }
        -: 1325:  else
        -: 1326:    {
        -: 1327:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        -: 1328:      state->discardCount[player]++;
        -: 1329:    }
        -: 1330:	
        -: 1331:  //decrease number in supply pile
        -: 1332:  state->supplyCount[supplyPos]--;
        -: 1333:	 
        -: 1334:  return 0;
        -: 1335:}
        -: 1336:
        -: 1337:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1338:{
        -: 1339:  int i;
        -: 1340:	
        -: 1341:  //reset coin count
        -: 1342:  state->coins = 0;
        -: 1343:
        -: 1344:  //add coins for each Treasure card in player's hand
        -: 1345:  for (i = 0; i < state->handCount[player]; i++)
        -: 1346:    {
        -: 1347:      if (state->hand[player][i] == copper)
        -: 1348:	{
        -: 1349:	  state->coins += 1;
        -: 1350:	}
        -: 1351:      else if (state->hand[player][i] == silver)
        -: 1352:	{
        -: 1353:	  state->coins += 2;
        -: 1354:	}
        -: 1355:      else if (state->hand[player][i] == gold)
        -: 1356:	{
        -: 1357:	  state->coins += 3;
        -: 1358:	}	
        -: 1359:    }	
        -: 1360:
        -: 1361:  //add bonus
        -: 1362:  state->coins += bonus;
        -: 1363:
        -: 1364:  return 0;
        -: 1365:}
        -: 1366:
        -: 1367:
        -: 1368://end of dominion.c
        -: 1369:
