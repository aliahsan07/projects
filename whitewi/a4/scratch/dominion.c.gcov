        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     5055:    8:int compare(const void* a, const void* b) {
     5055:    9:  if (*(int*)a > *(int*)b)
     2637:   10:    return 1;
     2418:   11:  if (*(int*)a < *(int*)b)
     1044:   12:    return -1;
     1374:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       35:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        5:  115:		  if (numPlayers == 2){ 
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        3:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       25:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       11:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        8:  140:      state->deckCount[i] = 0;
       32:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       24:  143:	  state->deck[i][j] = estate;
       24:  144:	  state->deckCount[i]++;
        -:  145:	}
       64:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       56:  148:	  state->deck[i][j] = copper;
       56:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       11:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        8:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       11:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        8:  166:      state->handCount[i] = 0;
        8:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
      550:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      550:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      550:  209:  if (state->deckCount[player] < 1)
      378:  210:    return -1;
      172:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2319:  214:  while (state->deckCount[player] > 0) {
     1975:  215:    card = floor(Random() * state->deckCount[player]);
     1975:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1975:  217:    newDeckPos++;
     8318:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     6343:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1975:  221:    state->deckCount[player]--;
        -:  222:  }
     2147:  223:  for (i = 0; i < newDeckPos; i++) {
     1975:  224:    state->deck[player][i] = newDeck[i];
     1975:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      172:  228:  return 0;
        -:  229:}
        -:  230:
     1582:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     1582:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     1582:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     1582:  243:  if ( state->numActions < 1 )
        -:  244:    {
      264:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     1318:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
     1318:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
     1018:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      300:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       67:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      233:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      233:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      233:  269:  return 0;
        -:  270:}
        -:  271:
      617:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
      617:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      617:  280:  who = state->whoseTurn;
        -:  281:
      617:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
      116:  284:      printf("You do not have any buys left\n");
      116:  285:    return -1;
      501:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        8:  288:      printf("There are not any of that type of card left\n");
        8:  289:    return -1;
      493:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
      254:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      254:  293:    return -1;
        -:  294:  } else {
      239:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      239:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      239:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      239:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
      239:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      239:  308:  return 0;
        -:  309:}
        -:  310:
     4139:  311:int numHandCards(struct gameState *state) {
     4139:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
     5458:  315:int handCard(int handPos, struct gameState *state) {
     5458:  316:  int currentPlayer = whoseTurn(state);
     5458:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      839:  320:int supplyCount(int card, struct gameState *state) {
      839:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
      231:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
      231:  326:  int count = 0;
        -:  327:
     1826:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     1595:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
     1389:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
     1158:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
     1593:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
     1362:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
      231:  343:  return count;
        -:  344:}
        -:  345:
    12066:  346:int whoseTurn(struct gameState *state) {
    12066:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      388:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      388:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     1943:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     1555:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     1555:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      388:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      388:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      231:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
      157:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      388:  370:  state->outpostPlayed = 0;
      388:  371:  state->phase = 0;
      388:  372:  state->numActions = 1;
      388:  373:  state->coins = 0;
      388:  374:  state->numBuys = 1;
      388:  375:  state->playedCardCount = 0;
      388:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     2328:  380:  for (k = 0; k < 5; k++){
     1940:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      388:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      388:  387:  return 0;
        -:  388:}
        -:  389:
      394:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      394:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      394:  401:  j = 0;
    10244:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     9850:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      279:  406:	  j++;
        -:  407:	}
        -:  408:    }
      394:  409:  if ( j >= 3)
        -:  410:    {
        3:  411:      return 1;
        -:  412:    }
        -:  413:
      391:  414:  return 0;
        -:  415:}
        -:  416:
      396:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      396:  420:  int score = 0;
        -:  421:  //score from hand
     1962:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     1566:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     1566:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     1566:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     1566:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     1566:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     1566:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     1982:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     1586:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     1586:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     1586:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     1586:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     1586:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     1586:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     2392:  444:  for (i = 0; i < state->deckCount[player]; i++)
        -:  445:    {
     1996:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     1996:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     1996:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     1996:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     1996:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     1996:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
      396:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return j;
        -:  523:}
        -:  524:
     2218:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2218:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     2399:  533:    for (i = 0; i < state->discardCount[player];i++){
     1894:  534:      state->deck[player][i] = state->discard[player][i];
     1894:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      505:  538:    state->deckCount[player] = state->discardCount[player];
      505:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      505:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
      505:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      505:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      505:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
      505:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      505:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      505:  559:    if (deckCounter == 0)
      342:  560:      return -1;
        -:  561:
      163:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      163:  563:    state->deckCount[player]--;
      163:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1713:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
     1713:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1713:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1713:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1713:  576:    state->deckCount[player]--;
     1713:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1876:  580:  return 0;
        -:  581:}
        -:  582:
     1014:  583:int getCost(int cardNumber)
        -:  584:{
     1014:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        5:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        8:  594:      return 8;
        -:  595:    case copper:
       12:  596:      return 0;
        -:  597:    case silver:
      227:  598:      return 3;
        -:  599:    case gold:
       13:  600:      return 6;
        -:  601:    case adventurer:
       26:  602:      return 6;
        -:  603:    case council_room:
       35:  604:      return 5;
        -:  605:    case feast:
       16:  606:      return 4;
        -:  607:    case gardens:
       47:  608:      return 4;
        -:  609:    case mine:
       28:  610:      return 5;
        -:  611:    case remodel:
        9:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
       50:  616:      return 3;
        -:  617:    case baron:
       72:  618:      return 4;
        -:  619:    case great_hall:
       90:  620:      return 3;
        -:  621:    case minion:
       43:  622:      return 5;
        -:  623:    case steward:
      104:  624:      return 3;
        -:  625:    case tribute:
       25:  626:      return 5;
        -:  627:    case ambassador:
       33:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
       51:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
       99:  636:      return 4;
        -:  637:    case sea_hag:
       16:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        6:  647:int play_council_room(int player, struct gameState *state, int handPos)
        -:  648:{
        -:  649:	int i;
        -:  650:	//+4 Cards
       30:  651:      for (i = 0; i < 4; i++)
        -:  652:	{
       24:  653:	  drawCard(player, state);
        -:  654:	}
        -:  655:			
        -:  656:      //+1 Buy
        6:  657:      state->numBuys++;
        -:  658:			
        -:  659:      //Each other player draws a card
       24:  660:      for (i = 0; i < state->numPlayers; i++)
        -:  661:	{
       18:  662:	  if ( i != player )
        -:  663:	    {
       12:  664:	      drawCard(i, state);
        -:  665:	    }
        -:  666:	}
        -:  667:			
        -:  668:      //put played card in played card pile
        6:  669:      discardCard(handPos, player, state, 0);
        -:  670:			
        6:  671:      return 0;			
        -:  672:}
        -:  673:
        4:  674:int play_mine(int player, struct gameState *state, int handPos, int choice1, int choice2)
        -:  675:{
        -:  676:	int i, j;
        4:  677:	j = state->hand[player][choice1];  //store card we will trash
        -:  678:
        4:  679:      if (state->hand[player][choice1] < copper || state->hand[player][choice1] > gold)
        -:  680:	{
        1:  681:	  return -1;
        -:  682:	}
        -:  683:		//this will be a bug/severe laziness i'll need to deal with later
        -:  684:     /* if (choice2 > treasure_map || choice2 < curse)
        -:  685:	{
        -:  686:	  return -1;
        -:  687:	}*/
        -:  688:
        3:  689:      if ( (getCost(state->hand[player][choice1]) + 3) > getCost(choice2) )
        -:  690:	{
        1:  691:	  return -1;
        -:  692:	}
        -:  693:
        2:  694:      gainCard(choice2, state, 2, player);
        -:  695:
        -:  696:      //discard card from hand
        2:  697:      discardCard(handPos, player, state, 0);
        -:  698:
        -:  699:      //discard trashed card
        3:  700:      for (i = 0; i < state->handCount[player]; i++)
        -:  701:	{
        3:  702:	  if (state->hand[player][i] == j)
        -:  703:	    {
        2:  704:	      discardCard(i, player, state, 0);			
        2:  705:	      break;
        -:  706:	    }
        -:  707:	}
        -:  708:			
        2:  709:      return 0;
        -:  710:}
        -:  711:
        6:  712:int play_remodel(int player, struct gameState *state, int handPos, int choice1, int choice2)
        -:  713:{	
        -:  714:	int i, j;
        6:  715:	 j = state->hand[player][choice1];  //store card we will trash
        -:  716:
        6:  717:      if ( (getCost(state->hand[player][choice1]) + 2) > getCost(choice2) )
        -:  718:	{
        4:  719:	  return -1;
        -:  720:	}
        -:  721:	
        2:  722:      gainCard(choice2, state, 0, player);
        -:  723:
        -:  724:      //discard card from hand
        2:  725:      discardCard(handPos, player, state, 0);
        -:  726:
        -:  727:      //discard trashed card
        6:  728:      for (i = 0; i < state->handCount[player]; i++)
        -:  729:	{
        4:  730:	  if (state->hand[player][i] == j)
        -:  731:	    {
        2:  732:	      discardCard(i, player, state, 0);			
        2:  733:	      i = state->handCount[player]+1; //break out of loop
        -:  734:	    }
        -:  735:	}
        -:  736:
        -:  737:
        2:  738:      return 0;
        -:  739:}
        -:  740:
        6:  741:int play_smithy(int player, struct gameState *state, int handPos)
        -:  742:{	int i;
        -:  743:	//+3 Cards
       24:  744:      for (i = 0; i < 3; i++)
        -:  745:	{
       18:  746:	  drawCard(player, state);
        -:  747:	}
        -:  748:			
        -:  749:      //discard card from hand
        6:  750:      discardCard(handPos, player, state, 0);
        6:  751:      return 0;
        -:  752:}
        -:  753:
       19:  754:int play_village(int player, struct gameState *state, int handPos)
        -:  755:{
        -:  756:	//+1 Card
       19:  757:      drawCard(player, state);
        -:  758:			
        -:  759:      //+2 Actions
       19:  760:      state->numActions = state->numActions + 2;
        -:  761:			
        -:  762:      //discard played card from hand
       19:  763:      discardCard(handPos, player, state, 0);
       19:  764:      return 0;
        -:  765:}
        -:  766:
        8:  767:int total_card(int player, struct gameState *state)
        -:  768:{
        -:  769:	int deck, hand, discard, total;
        8:  770:	deck = state->deckCount[player];
        8:  771:	hand = state->handCount[player];
        8:  772:	discard = state->discardCount[player];
        -:  773:
        8:  774:	total = deck + hand + discard;
        -:  775:	
        8:  776:	return total;	
        -:  777:	}
        -:  778:
      300:  779:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  780:{
        -:  781:  int i;
        -:  782:  int j;
        -:  783:  int k;
        -:  784:  int x;
        -:  785:  int index;
      300:  786:  int currentPlayer = whoseTurn(state);
      300:  787:  int nextPlayer = currentPlayer + 1;
        -:  788:
      300:  789:  int tributeRevealedCards[2] = {-1, -1};
        -:  790:  int temphand[MAX_HAND];// moved above the if statement
      300:  791:  int drawntreasure=0;
        -:  792:  int cardDrawn;
      300:  793:  int z = 0;// this is the counter for the temp hand
      300:  794:  if (nextPlayer > (state->numPlayers - 1)){
      174:  795:    nextPlayer = 0;
        -:  796:  }
        -:  797:  
        -:  798:	
        -:  799:  //uses switch to select card and perform actions
      300:  800:  switch( card ) 
        -:  801:    {
        -:  802:    case adventurer:
        8:  803:	i = total_card(currentPlayer, state)-state->handCount[currentPlayer];
      169:  804:    while(drawntreasure<10 && z < i){
      153:  805:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       36:  806:		  shuffle(currentPlayer, state);
        -:  807:		}
      153:  808:	drawCard(currentPlayer, state);
      153:  809:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      233:  810:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
       80:  811:		  drawntreasure++;
        -:  812:		}
        -:  813:		else{
       73:  814:		  temphand[z]=cardDrawn;
       73:  815:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       73:  816:		  z++;
        -:  817:		}
        -:  818:	}
       89:  819:    while(z > 0){
       73:  820:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       73:  821:		z = z-1;
        -:  822:      }
        -:  823:	 
        8:  824:	  return drawntreasure;
        -:  825:			
        -:  826:    case council_room:
        6:  827:      play_council_room(currentPlayer, state, handPos);
        -:  828:    case feast:
        -:  829:      //gain card with cost up to 5
        -:  830:      //Backup hand
       60:  831:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       54:  832:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       54:  833:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  834:      }
        -:  835:      //Backup hand
        -:  836:
        -:  837:      //Update Coins for Buy
        6:  838:      updateCoins(currentPlayer, state, 5);
        6:  839:      x = 1;//Condition to loop on
       18:  840:      while( x == 1) {//Buy one card
        6:  841:	if (supplyCount(choice1, state) <= 0){
        -:  842:	  if (DEBUG)
    #####:  843:	    printf("None of that card left, sorry!\n");
        -:  844:
        -:  845:	  if (DEBUG){
    #####:  846:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  847:	  }
        -:  848:	}
        6:  849:	else if (state->coins < getCost(choice1)){
    #####:  850:	  printf("That card is too expensive!\n");
        -:  851:
        -:  852:	  if (DEBUG){
    #####:  853:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  854:	  }
        -:  855:	}
        -:  856:	else{
        -:  857:
        -:  858:	  if (DEBUG){
        6:  859:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  860:	  }
        -:  861:
        6:  862:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        6:  863:	  x = 0;//No more buying cards
        -:  864:
        -:  865:	  if (DEBUG){
        6:  866:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  867:	  }
        -:  868:
        -:  869:	}
        -:  870:      }     
        -:  871:
        -:  872:      //Reset Hand
       60:  873:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       54:  874:	state->hand[currentPlayer][i] = temphand[i];
       54:  875:	temphand[i] = -1;
        -:  876:      }
        -:  877:      //Reset Hand
        -:  878:      			
        6:  879:      return 0;
        -:  880:			
        -:  881:    case gardens:
       48:  882:      return -1;
        -:  883:			
        -:  884:    case mine:
        4:  885:      play_mine(currentPlayer, state, handPos,choice1,choice2);
        -:  886:			
        -:  887:    case remodel:
        6:  888:	  play_remodel(currentPlayer, state, handPos, choice1, choice2);
        -:  889:		
        -:  890:    case smithy:
        6:  891:      play_smithy(currentPlayer, state, handPos);
        -:  892:		
        -:  893:    case village:
       19:  894:		play_village(currentPlayer, state, handPos);
        -:  895:		
        -:  896:    case baron:
       96:  897:      state->numBuys++;//Increase buys by 1!
       96:  898:      if (choice1 > 0){//Boolean true or going to discard an estate
       76:  899:	int p = 0;//Iterator for hand!
       76:  900:	int card_not_discarded = 1;//Flag for discard set!
      480:  901:	while(card_not_discarded){
      328:  902:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
       47:  903:	    state->coins += 4;//Add 4 coins to the amount of coins
       47:  904:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
       47:  905:	    state->discardCount[currentPlayer]++;
      215:  906:	    for (;p < state->handCount[currentPlayer]; p++){
      168:  907:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  908:	    }
       47:  909:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
       47:  910:	    state->handCount[currentPlayer]--;
       47:  911:	    card_not_discarded = 0;//Exit the loop
        -:  912:	  }
      281:  913:	  else if (p > state->handCount[currentPlayer]){
        -:  914:	    if(DEBUG) {
       29:  915:	      printf("No estate cards in your hand, invalid choice\n");
       29:  916:	      printf("Must gain an estate if there are any\n");
        -:  917:	    }
       29:  918:	    if (supplyCount(estate, state) > 0){
       10:  919:	      gainCard(estate, state, 0, currentPlayer);
       10:  920:	      state->supplyCount[estate]--;//Decrement estates
       10:  921:	      if (supplyCount(estate, state) == 0){
        2:  922:		isGameOver(state);
        -:  923:	      }
        -:  924:	    }
       29:  925:	    card_not_discarded = 0;//Exit the loop
        -:  926:	  }
        -:  927:			    
        -:  928:	  else{
      252:  929:	    p++;//Next card
        -:  930:	  }
        -:  931:	}
        -:  932:      }
        -:  933:			    
        -:  934:      else{
       20:  935:	if (supplyCount(estate, state) > 0){
        5:  936:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        5:  937:	  state->supplyCount[estate]--;//Decrement Estates
        5:  938:	  if (supplyCount(estate, state) == 0){
        1:  939:	    isGameOver(state);
        -:  940:	  }
        -:  941:	}
        -:  942:      }
        -:  943:	    
        -:  944:      
       96:  945:      return 0;
        -:  946:		
        -:  947:    case great_hall:
        -:  948:      //+1 Card
       21:  949:      drawCard(currentPlayer, state);
        -:  950:			
        -:  951:      //+1 Actions
       21:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
       21:  955:      discardCard(handPos, currentPlayer, state, 0);
       21:  956:      return 0;
        -:  957:		
        -:  958:    case minion:
        -:  959:      //+1 action
        6:  960:      state->numActions++;
        -:  961:			
        -:  962:      //discard card from hand
        6:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:			
        6:  965:      if (choice1)		//+2 coins
        -:  966:	{
        6:  967:	  state->coins = state->coins + 2;
        -:  968:	}
        -:  969:			
    #####:  970:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:	{
        -:  972:	  //discard hand
    #####:  973:	  while(numHandCards(state) > 0)
        -:  974:	    {
    #####:  975:	      discardCard(handPos, currentPlayer, state, 0);
        -:  976:	    }
        -:  977:				
        -:  978:	  //draw 4
    #####:  979:	  for (i = 0; i < 4; i++)
        -:  980:	    {
    #####:  981:	      drawCard(currentPlayer, state);
        -:  982:	    }
        -:  983:				
        -:  984:	  //other players discard hand and redraw if hand size > 4
    #####:  985:	  for (i = 0; i < state->numPlayers; i++)
        -:  986:	    {
    #####:  987:	      if (i != currentPlayer)
        -:  988:		{
    #####:  989:		  if ( state->handCount[i] > 4 )
        -:  990:		    {
        -:  991:		      //discard hand
    #####:  992:		      while( state->handCount[i] > 0 )
        -:  993:			{
    #####:  994:			  discardCard(handPos, i, state, 0);
        -:  995:			}
        -:  996:							
        -:  997:		      //draw 4
    #####:  998:		      for (j = 0; j < 4; j++)
        -:  999:			{
    #####: 1000:			  drawCard(i, state);
        -: 1001:			}
        -: 1002:		    }
        -: 1003:		}
        -: 1004:	    }
        -: 1005:				
        -: 1006:	}
        6: 1007:      return 0;
        -: 1008:		
        -: 1009:    case steward:
       25: 1010:      if (choice1 == 1)
        -: 1011:	{
        -: 1012:	  //+2 cards
        5: 1013:	  drawCard(currentPlayer, state);
        5: 1014:	  drawCard(currentPlayer, state);
        -: 1015:	}
       20: 1016:      else if (choice1 == 2)
        -: 1017:	{
        -: 1018:	  //+2 coins
        6: 1019:	  state->coins = state->coins + 2;
        -: 1020:	}
        -: 1021:      else
        -: 1022:	{
        -: 1023:	  //trash 2 cards in hand
       14: 1024:	  discardCard(choice2, currentPlayer, state, 1);
       14: 1025:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1026:	}
        -: 1027:			
        -: 1028:      //discard card from hand
       25: 1029:      discardCard(handPos, currentPlayer, state, 0);
       25: 1030:      return 0;
        -: 1031:		
        -: 1032:    case tribute:
       29: 1033:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       23: 1034:	if (state->deckCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	  state->deckCount[nextPlayer]--;
        -: 1037:	}
       23: 1038:	else if (state->discardCount[nextPlayer] > 0){
        1: 1039:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        1: 1040:	  state->discardCount[nextPlayer]--;
        -: 1041:	}
        -: 1042:	else{
        -: 1043:	  //No Card to Reveal
        -: 1044:	  if (DEBUG){
       22: 1045:	    printf("No cards to reveal\n");
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      else{
        6: 1051:	if (state->deckCount[nextPlayer] == 0){
        2: 1052:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        1: 1053:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        1: 1054:	    state->deckCount[nextPlayer]++;
        1: 1055:	    state->discard[nextPlayer][i] = -1;
        1: 1056:	    state->discardCount[nextPlayer]--;
        -: 1057:	  }
        -: 1058:			    
        1: 1059:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1060:	} 
        6: 1061:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        6: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        6: 1063:	state->deckCount[nextPlayer]--;
        6: 1064:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        6: 1065:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        6: 1066:	state->deckCount[nextPlayer]--;
        -: 1067:      }    
        -: 1068:		       
       29: 1069:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
       24: 1070:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       24: 1071:	state->playedCardCount++;
       24: 1072:	tributeRevealedCards[1] = -1;
        -: 1073:      }
        -: 1074:
      116: 1075:      for (i = 0; i <= 2; i ++){
       93: 1076:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        6: 1077:	  state->coins += 2;
        -: 1078:	}
        -: 1079:		    
       84: 1080:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        3: 1081:	  drawCard(currentPlayer, state);
        3: 1082:	  drawCard(currentPlayer, state);
        -: 1083:	}
        -: 1084:	else{//Action Card
       78: 1085:	  state->numActions = state->numActions + 2;
        -: 1086:	}
        -: 1087:      }
        -: 1088:	    
       29: 1089:      return 0;
        -: 1090:		
        -: 1091:    case ambassador:
       21: 1092:      j = 0;		//used to check if player has enough cards to discard
        -: 1093:
       21: 1094:      if (choice2 > 2 || choice2 < 0)
        -: 1095:	{
        9: 1096:	  return -1;				
        -: 1097:	}
        -: 1098:
       12: 1099:      if (choice1 == handPos)
        -: 1100:	{
        3: 1101:	  return -1;
        -: 1102:	}
        -: 1103:
       54: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
       45: 1106:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1107:	    {
        4: 1108:	      j++;
        -: 1109:	    }
        -: 1110:	}
        9: 1111:      if (j < choice2)
        -: 1112:	{
        7: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
        -: 1116:      if (DEBUG) 
        2: 1117:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1118:
        -: 1119:      //increase supply count for choosen card by amount being discarded
        2: 1120:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1121:			
        -: 1122:      //each other player gains a copy of revealed card
        8: 1123:      for (i = 0; i < state->numPlayers; i++)
        -: 1124:	{
        6: 1125:	  if (i != currentPlayer)
        -: 1126:	    {
        4: 1127:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1128:	    }
        -: 1129:	}
        -: 1130:
        -: 1131:      //discard played card from hand
        2: 1132:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1133:
        -: 1134:      //trash copies of cards returned to supply
        2: 1135:      for (j = 0; j < choice2; j++)
        -: 1136:	{
    #####: 1137:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1138:	    {
    #####: 1139:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1140:		{
    #####: 1141:		  discardCard(i, currentPlayer, state, 1);
    #####: 1142:		  break;
        -: 1143:		}
        -: 1144:	    }
        -: 1145:	}			
        -: 1146:
        2: 1147:      return 0;
        -: 1148:		
        -: 1149:    case cutpurse:
        -: 1150:
    #####: 1151:      updateCoins(currentPlayer, state, 2);
    #####: 1152:      for (i = 0; i < state->numPlayers; i++)
        -: 1153:	{
    #####: 1154:	  if (i != currentPlayer)
        -: 1155:	    {
    #####: 1156:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1157:		{
    #####: 1158:		  if (state->hand[i][j] == copper)
        -: 1159:		    {
    #####: 1160:		      discardCard(j, i, state, 0);
    #####: 1161:		      break;
        -: 1162:		    }
    #####: 1163:		  if (j == state->handCount[i])
        -: 1164:		    {
    #####: 1165:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1166:			{
        -: 1167:			  if (DEBUG)
    #####: 1168:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1169:			}	
    #####: 1170:		      break;
        -: 1171:		    }		
        -: 1172:		}
        -: 1173:					
        -: 1174:	    }
        -: 1175:				
        -: 1176:	}				
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1180:
    #####: 1181:      return 0;
        -: 1182:
        -: 1183:		
        -: 1184:    case embargo: 
        -: 1185:      //+2 Coins
       13: 1186:      state->coins = state->coins + 2;
        -: 1187:			
        -: 1188:      //see if selected pile is in play
       13: 1189:      if ( state->supplyCount[choice1] == -1 )
        -: 1190:	{
    #####: 1191:	  return -1;
        -: 1192:	}
        -: 1193:			
        -: 1194:      //add embargo token to selected supply pile
       13: 1195:      state->embargoTokens[choice1]++;
        -: 1196:			
        -: 1197:      //trash card
       13: 1198:      discardCard(handPos, currentPlayer, state, 1);		
       13: 1199:      return 0;
        -: 1200:		
        -: 1201:    case outpost:
        -: 1202:      //set outpost flag
    #####: 1203:      state->outpostPlayed++;
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case salvager:
        -: 1210:      //+1 buy
       23: 1211:      state->numBuys++;
        -: 1212:			
       23: 1213:      if (choice1)
        -: 1214:	{
        -: 1215:	  //gain coins equal to trashed card
       19: 1216:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1217:	  //trash card
       19: 1218:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1219:	}
        -: 1220:			
        -: 1221:      //discard card
       23: 1222:      discardCard(handPos, currentPlayer, state, 0);
       23: 1223:      return 0;
        -: 1224:		
        -: 1225:    case sea_hag:
       16: 1226:      for (i = 0; i < state->numPlayers; i++){
       12: 1227:	if (i != currentPlayer){
        8: 1228:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        8: 1229:	  state->discardCount[i]++;
        8: 1230:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1231:	}
        -: 1232:      }
        4: 1233:      return 0;
        -: 1234:		
        -: 1235:    case treasure_map:
        -: 1236:      //search hand for another treasure_map
    #####: 1237:      index = -1;
    #####: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	{
    #####: 1240:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	    {
    #####: 1242:	      index = i;
    #####: 1243:	      break;
        -: 1244:	    }
        -: 1245:	}
    #####: 1246:      if (index > -1)
        -: 1247:	{
        -: 1248:	  //trash both treasure cards
    #####: 1249:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1250:	  discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	  //gain 4 Gold cards
    #####: 1253:	  for (i = 0; i < 4; i++)
        -: 1254:	    {
    #####: 1255:	      gainCard(gold, state, 1, currentPlayer);
        -: 1256:	    }
        -: 1257:				
        -: 1258:	  //return success
    #####: 1259:	  return 1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
    #####: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
    #####: 1266:  return -1;
        -: 1267:}
        -: 1268:
      176: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:	
        -: 1272:  //if card is not trashed, added to Played pile 
      176: 1273:  if (trashFlag < 1)
        -: 1274:    {
        -: 1275:      //add card to played pile
      116: 1276:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      116: 1277:      state->playedCardCount++;
        -: 1278:    }
        -: 1279:	
        -: 1280:  //set played card to -1
      176: 1281:  state->hand[currentPlayer][handPos] = -1;
        -: 1282:	
        -: 1283:  //remove card from player's hand
      176: 1284:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
       24: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
      152: 1289:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1290:    {
        -: 1291:      //reduce number of cards in hand
    #####: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:  else 	
        -: 1295:    {
        -: 1296:      //replace discarded card with last card in hand
      152: 1297:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1298:      //set last card to -1
      152: 1299:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1300:      //reduce number of cards in hand
      152: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:	
      176: 1304:  return 0;
        -: 1305:}
        -: 1306:
      268: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
      268: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
    #####: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
      268: 1322:  if (toFlag == 1)
        -: 1323:    {
    #####: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1325:      state->deckCount[player]++;
        -: 1326:    }
      268: 1327:  else if (toFlag == 2)
        -: 1328:    {
        2: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
      266: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      266: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
      268: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
      268: 1341:  return 0;
        -: 1342:}
        -: 1343:
      630: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
      630: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
     3419: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
     2789: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	{
      890: 1356:	  state->coins += 1;
        -: 1357:	}
     1899: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	{
      554: 1360:	  state->coins += 2;
        -: 1361:	}
     1345: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	{
        2: 1364:	  state->coins += 3;
        -: 1365:	}	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
      630: 1369:  state->coins += bonus;
        -: 1370:
      630: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
