        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    86941:    8:int compare(const void* a, const void* b) {
    86941:    9:  if (*(int*)a > *(int*)b)
    41773:   10:    return 1;
    45168:   11:  if (*(int*)a < *(int*)b)
    16229:   12:    return -1;
    28939:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       44:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       44:   44:  SelectStream(1);
       44:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       44:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       44:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      454:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     4535:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     4125:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        3:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       41:   73:  if (numPlayers == 2)
        -:   74:    {
       15:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       26:   77:  else if (numPlayers == 3)
        -:   78:    {
       18:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        8:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       41:   87:  if (numPlayers == 2)
        -:   88:    {
       15:   89:      state->supplyCount[estate] = 8;
       15:   90:      state->supplyCount[duchy] = 8;
       15:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       26:   95:      state->supplyCount[estate] = 12;
       26:   96:      state->supplyCount[duchy] = 12;
       26:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       41:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       41:  102:  state->supplyCount[silver] = 40;
       41:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      861:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     6765:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     6355:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      449:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       39:  115:		  if (numPlayers == 2){ 
       15:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       24:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      371:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      410:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     5945:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      157:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      116:  140:      state->deckCount[i] = 0;
      464:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      348:  143:	  state->deck[i][j] = estate;
      348:  144:	  state->deckCount[i]++;
        -:  145:	}
      928:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      812:  148:	  state->deck[i][j] = copper;
      812:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      157:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      116:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      157:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      116:  166:      state->handCount[i] = 0;
      116:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1148:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1107:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       41:  182:  state->outpostPlayed = 0;
       41:  183:  state->phase = 0;
       41:  184:  state->numActions = 1;
       41:  185:  state->numBuys = 1;
       41:  186:  state->playedCardCount = 0;
       41:  187:  state->whoseTurn = 0;
       41:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      246:  192:  for (it = 0; it < 5; it++){
      205:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       41:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       41:  198:  return 0;
        -:  199:}
        -:  200:
     6812:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     6812:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     6812:  209:  if (state->deckCount[player] < 1)
     3522:  210:    return -1;
     3290:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    40389:  214:  while (state->deckCount[player] > 0) {
    33809:  215:    card = floor(Random() * state->deckCount[player]);
    33809:  216:    newDeck[newDeckPos] = state->deck[player][card];
    33809:  217:    newDeckPos++;
   159776:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   125967:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    33809:  221:    state->deckCount[player]--;
        -:  222:  }
    37099:  223:  for (i = 0; i < newDeckPos; i++) {
    33809:  224:    state->deck[player][i] = newDeck[i];
    33809:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3290:  228:  return 0;
        -:  229:}
        -:  230:
    27794:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    27794:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    27794:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    27794:  243:  if ( state->numActions < 1 )
        -:  244:    {
     4429:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    23365:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    23365:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    18511:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     4854:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
     1707:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
     3147:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
     3147:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
     3147:  269:  return 0;
        -:  270:}
        -:  271:
    10133:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
    10133:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    10133:  280:  who = state->whoseTurn;
        -:  281:
    10133:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
     2256:  284:      printf("You do not have any buys left\n");
     2256:  285:    return -1;
     7877:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
      376:  288:      printf("There are not any of that type of card left\n");
      376:  289:    return -1;
     7501:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
     3730:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
     3730:  293:    return -1;
        -:  294:  } else {
     3771:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     3771:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
     3771:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     3771:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
     3771:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
     3771:  308:  return 0;
        -:  309:}
        -:  310:
    78469:  311:int numHandCards(struct gameState *state) {
    78469:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
   103687:  315:int handCard(int handPos, struct gameState *state) {
   103687:  316:  int currentPlayer = whoseTurn(state);
   103687:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    12565:  320:int supplyCount(int card, struct gameState *state) {
    12565:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
     3540:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     3540:  326:  int count = 0;
        -:  327:
    31481:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    27941:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    20718:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    17178:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    54381:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    50841:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
     3540:  343:  return count;
        -:  344:}
        -:  345:
   223043:  346:int whoseTurn(struct gameState *state) {
   223043:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
     6475:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     6475:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    34826:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    28351:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    28351:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
     6475:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
     6475:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
     4035:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     2440:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     6475:  370:  state->outpostPlayed = 0;
     6475:  371:  state->phase = 0;
     6475:  372:  state->numActions = 1;
     6475:  373:  state->coins = 0;
     6475:  374:  state->numBuys = 1;
     6475:  375:  state->playedCardCount = 0;
     6475:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    38850:  380:  for (k = 0; k < 5; k++){
    32375:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
     6475:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
     6475:  387:  return 0;
        -:  388:}
        -:  389:
     6541:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     6541:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     6541:  401:  j = 0;
   170066:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   163525:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     4750:  406:	  j++;
        -:  407:	}
        -:  408:    }
     6541:  409:  if ( j >= 3)
        -:  410:    {
       46:  411:      return 1;
        -:  412:    }
        -:  413:
     6495:  414:  return 0;
        -:  415:}
        -:  416:
     6599:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     6599:  420:  int score = 0;
        -:  421:  //score from hand
    35145:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    28546:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    28546:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    28546:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    28546:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    28546:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    28546:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    43011:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    36412:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    36412:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    36412:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    36412:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    36412:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    36412:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    43011:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    36412:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    36412:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    36412:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    36412:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    36412:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    36412:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
     6599:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    34519:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    34519:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    39077:  533:    for (i = 0; i < state->discardCount[player];i++){
    32475:  534:      state->deck[player][i] = state->discard[player][i];
    32475:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6602:  538:    state->deckCount[player] = state->discardCount[player];
     6602:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6602:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
     6602:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     6602:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6602:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
     6602:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     6602:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6602:  559:    if (deckCounter == 0)
     3485:  560:      return -1;
        -:  561:
     3117:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     3117:  563:    state->deckCount[player]--;
     3117:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    27917:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
    27917:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    27917:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27917:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27917:  576:    state->deckCount[player]--;
    27917:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    31034:  580:  return 0;
        -:  581:}
        -:  582:
    15992:  583:int getCost(int cardNumber)
        -:  584:{
    15992:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
       84:  588:      return 0;
        -:  589:    case estate:
      140:  590:      return 2;
        -:  591:    case duchy:
       83:  592:      return 5;
        -:  593:    case province:
      159:  594:      return 8;
        -:  595:    case copper:
      235:  596:      return 0;
        -:  597:    case silver:
     3597:  598:      return 3;
        -:  599:    case gold:
      152:  600:      return 6;
        -:  601:    case adventurer:
      445:  602:      return 6;
        -:  603:    case council_room:
      410:  604:      return 5;
        -:  605:    case feast:
      791:  606:      return 4;
        -:  607:    case gardens:
      625:  608:      return 4;
        -:  609:    case mine:
      646:  610:      return 5;
        -:  611:    case remodel:
      832:  612:      return 4;
        -:  613:    case smithy:
      710:  614:      return 4;
        -:  615:    case village:
      601:  616:      return 3;
        -:  617:    case baron:
      745:  618:      return 4;
        -:  619:    case great_hall:
      546:  620:      return 3;
        -:  621:    case minion:
      510:  622:      return 5;
        -:  623:    case steward:
      634:  624:      return 3;
        -:  625:    case tribute:
      634:  626:      return 5;
        -:  627:    case ambassador:
      700:  628:      return 3;
        -:  629:    case cutpurse:
      639:  630:      return 4;
        -:  631:    case embargo: 
      749:  632:      return 2;
        -:  633:    case outpost:
      446:  634:      return 5;
        -:  635:    case salvager:
      343:  636:      return 4;
        -:  637:    case sea_hag:
      535:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
     4854:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
     4854:  652:  int currentPlayer = whoseTurn(state);
     4854:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
     4854:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
     4854:  657:  int drawntreasure=0;
        -:  658:  int cardDrawn;
     4854:  659:  int z = 0;// this is the counter for the temp hand
     4854:  660:  if (nextPlayer > (state->numPlayers - 1)){
     1690:  661:    nextPlayer = 0;
        -:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
     4854:  666:  switch( card ) 
        -:  667:    {
        -:  668:    case adventurer:
      795:  669:      while(drawntreasure<2){
      515:  670:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       37:  671:	  shuffle(currentPlayer, state);
        -:  672:	}
      515:  673:	drawCard(currentPlayer, state);
      515:  674:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      795:  675:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      280:  676:	  drawntreasure++;
        -:  677:	else{
      235:  678:	  temphand[z]=cardDrawn;
      235:  679:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      235:  680:	  z++;
        -:  681:	}
        -:  682:      }
      515:  683:      while(z-1>=0){
      235:  684:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      235:  685:	z=z-1;
        -:  686:      }
      140:  687:      return 0;
        -:  688:			
        -:  689:    case council_room:
        -:  690:      //+4 Cards
      315:  691:      for (i = 0; i < 4; i++)
        -:  692:	{
      252:  693:	  drawCard(currentPlayer, state);
        -:  694:	}
        -:  695:			
        -:  696:      //+1 Buy
       63:  697:      state->numBuys++;
        -:  698:			
        -:  699:      //Each other player draws a card
      249:  700:      for (i = 0; i < state->numPlayers; i++)
        -:  701:	{
      186:  702:	  if ( i != currentPlayer )
        -:  703:	    {
      123:  704:	      drawCard(i, state);
        -:  705:	    }
        -:  706:	}
        -:  707:			
        -:  708:      //put played card in played card pile
       63:  709:      discardCard(handPos, currentPlayer, state, 0);
        -:  710:			
       63:  711:      return 0;
        -:  712:			
        -:  713:    case feast:
        -:  714:      //gain card with cost up to 5
        -:  715:      //Backup hand
    #####:  716:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  718:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  719:      }
        -:  720:      //Backup hand
        -:  721:
        -:  722:      //Update Coins for Buy
    #####:  723:      updateCoins(currentPlayer, state, 5);
    #####:  724:      x = 1;//Condition to loop on
    #####:  725:      while( x == 1) {//Buy one card
    #####:  726:	if (supplyCount(choice1, state) <= 0){
        -:  727:	  if (DEBUG)
    #####:  728:	    printf("None of that card left, sorry!\n");
        -:  729:
        -:  730:	  if (DEBUG){
    #####:  731:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  732:	  }
        -:  733:	}
    #####:  734:	else if (state->coins < getCost(choice1)){
    #####:  735:	  printf("That card is too expensive!\n");
        -:  736:
        -:  737:	  if (DEBUG){
    #####:  738:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  739:	  }
        -:  740:	}
        -:  741:	else{
        -:  742:
        -:  743:	  if (DEBUG){
    #####:  744:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:	  }
        -:  746:
    #####:  747:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  748:	  x = 0;//No more buying cards
        -:  749:
        -:  750:	  if (DEBUG){
    #####:  751:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  752:	  }
        -:  753:
        -:  754:	}
        -:  755:      }     
        -:  756:
        -:  757:      //Reset Hand
    #####:  758:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  759:	state->hand[currentPlayer][i] = temphand[i];
    #####:  760:	temphand[i] = -1;
        -:  761:      }
        -:  762:      //Reset Hand
        -:  763:      			
    #####:  764:      return 0;
        -:  765:			
        -:  766:    case gardens:
      852:  767:      return -1;
        -:  768:			
        -:  769:    case mine:
      379:  770:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  771:
      379:  772:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  773:	{
      253:  774:	  return -1;
        -:  775:	}
        -:  776:		
      126:  777:      if (choice2 > treasure_map || choice2 < curse)
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:
      126:  782:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  783:	{
       95:  784:	  return -1;
        -:  785:	}
        -:  786:
       31:  787:      gainCard(choice2, state, 2, currentPlayer);
        -:  788:
        -:  789:      //discard card from hand
       31:  790:      discardCard(handPos, currentPlayer, state, 0);
        -:  791:
        -:  792:      //discard trashed card
       84:  793:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  794:	{
       84:  795:	  if (state->hand[currentPlayer][i] == j)
        -:  796:	    {
       31:  797:	      discardCard(i, currentPlayer, state, 0);			
       31:  798:	      break;
        -:  799:	    }
        -:  800:	}
        -:  801:			
       31:  802:      return 0;
        -:  803:			
        -:  804:    case remodel:
      325:  805:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  806:
      325:  807:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  808:	{
      221:  809:	  return -1;
        -:  810:	}
        -:  811:
      104:  812:      gainCard(choice2, state, 0, currentPlayer);
        -:  813:
        -:  814:      //discard card from hand
      104:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:
        -:  817:      //discard trashed card
      221:  818:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  819:	{
      212:  820:	  if (state->hand[currentPlayer][i] == j)
        -:  821:	    {
       95:  822:	      discardCard(i, currentPlayer, state, 0);			
       95:  823:	      break;
        -:  824:	    }
        -:  825:	}
        -:  826:
        -:  827:
      104:  828:      return 0;
        -:  829:		
        -:  830:    case smithy:
        -:  831:      //+3 Cards
      524:  832:      for (i = 0; i < 3; i++)
        -:  833:	{
      393:  834:	  drawCard(currentPlayer, state);
        -:  835:	}
        -:  836:			
        -:  837:      //discard card from hand
      131:  838:      discardCard(handPos, currentPlayer, state, 0);
      131:  839:      return 0;
        -:  840:		
        -:  841:    case village:
        -:  842:      //+1 Card
      161:  843:      drawCard(currentPlayer, state);
        -:  844:			
        -:  845:      //+2 Actions
      161:  846:      state->numActions = state->numActions + 2;
        -:  847:			
        -:  848:      //discard played card from hand
      161:  849:      discardCard(handPos, currentPlayer, state, 0);
      161:  850:      return 0;
        -:  851:		
        -:  852:    case baron:
      592:  853:      state->numBuys++;//Increase buys by 1!
      592:  854:      if (choice1 > 0){//Boolean true or going to discard an estate
      480:  855:	int p = 0;//Iterator for hand!
      480:  856:	int card_not_discarded = 1;//Flag for discard set!
     3076:  857:	while(card_not_discarded){
     2116:  858:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
      275:  859:	    state->coins += 4;//Add 4 coins to the amount of coins
      275:  860:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
      275:  861:	    state->discardCount[currentPlayer]++;
     1244:  862:	    for (;p < state->handCount[currentPlayer]; p++){
      969:  863:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  864:	    }
      275:  865:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
      275:  866:	    state->handCount[currentPlayer]--;
      275:  867:	    card_not_discarded = 0;//Exit the loop
        -:  868:	  }
     1841:  869:	  else if (p > state->handCount[currentPlayer]){
        -:  870:	    if(DEBUG) {
      205:  871:	      printf("No estate cards in your hand, invalid choice\n");
      205:  872:	      printf("Must gain an estate if there are any\n");
        -:  873:	    }
      205:  874:	    if (supplyCount(estate, state) > 0){
       76:  875:	      gainCard(estate, state, 0, currentPlayer);
       76:  876:	      state->supplyCount[estate]--;//Decrement estates
       76:  877:	      if (supplyCount(estate, state) == 0){
        6:  878:		isGameOver(state);
        -:  879:	      }
        -:  880:	    }
      205:  881:	    card_not_discarded = 0;//Exit the loop
        -:  882:	  }
        -:  883:			    
        -:  884:	  else{
     1636:  885:	    p++;//Next card
        -:  886:	  }
        -:  887:	}
        -:  888:      }
        -:  889:			    
        -:  890:      else{
      112:  891:	if (supplyCount(estate, state) > 0){
       54:  892:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
       54:  893:	  state->supplyCount[estate]--;//Decrement Estates
       54:  894:	  if (supplyCount(estate, state) == 0){
       16:  895:	    isGameOver(state);
        -:  896:	  }
        -:  897:	}
        -:  898:      }
        -:  899:	    
        -:  900:      
      592:  901:      return 0;
        -:  902:		
        -:  903:    case great_hall:
        -:  904:      //+1 Card
      121:  905:      drawCard(currentPlayer, state);
        -:  906:			
        -:  907:      //+1 Actions
      121:  908:      state->numActions++;
        -:  909:			
        -:  910:      //discard card from hand
      121:  911:      discardCard(handPos, currentPlayer, state, 0);
      121:  912:      return 0;
        -:  913:		
        -:  914:    case minion:
        -:  915:      //+1 action
       99:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
       99:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:			
       99:  921:      if (choice1)		//+2 coins
        -:  922:	{
       48:  923:	  state->coins = state->coins + 2;
        -:  924:	}
        -:  925:			
       51:  926:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  927:	{
        -:  928:	  //discard hand
      135:  929:	  while(numHandCards(state) > 0)
        -:  930:	    {
       87:  931:	      discardCard(handPos, currentPlayer, state, 0);
        -:  932:	    }
        -:  933:				
        -:  934:	  //draw 4
      120:  935:	  for (i = 0; i < 4; i++)
        -:  936:	    {
       96:  937:	      drawCard(currentPlayer, state);
        -:  938:	    }
        -:  939:				
        -:  940:	  //other players discard hand and redraw if hand size > 4
       98:  941:	  for (i = 0; i < state->numPlayers; i++)
        -:  942:	    {
       74:  943:	      if (i != currentPlayer)
        -:  944:		{
       50:  945:		  if ( state->handCount[i] > 4 )
        -:  946:		    {
        -:  947:		      //discard hand
    #####:  948:		      while( state->handCount[i] > 0 )
        -:  949:			{
    #####:  950:			  discardCard(handPos, i, state, 0);
        -:  951:			}
        -:  952:							
        -:  953:		      //draw 4
    #####:  954:		      for (j = 0; j < 4; j++)
        -:  955:			{
    #####:  956:			  drawCard(i, state);
        -:  957:			}
        -:  958:		    }
        -:  959:		}
        -:  960:	    }
        -:  961:				
        -:  962:	}
       99:  963:      return 0;
        -:  964:		
        -:  965:    case steward:
      154:  966:      if (choice1 == 1)
        -:  967:	{
        -:  968:	  //+2 cards
       40:  969:	  drawCard(currentPlayer, state);
       40:  970:	  drawCard(currentPlayer, state);
        -:  971:	}
      114:  972:      else if (choice1 == 2)
        -:  973:	{
        -:  974:	  //+2 coins
       31:  975:	  state->coins = state->coins + 2;
        -:  976:	}
        -:  977:      else
        -:  978:	{
        -:  979:	  //trash 2 cards in hand
       83:  980:	  discardCard(choice2, currentPlayer, state, 1);
       83:  981:	  discardCard(choice3, currentPlayer, state, 1);
        -:  982:	}
        -:  983:			
        -:  984:      //discard card from hand
      154:  985:      discardCard(handPos, currentPlayer, state, 0);
      154:  986:      return 0;
        -:  987:		
        -:  988:    case tribute:
      486:  989:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
      271:  990:	if (state->deckCount[nextPlayer] > 0){
    #####:  991:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  992:	  state->deckCount[nextPlayer]--;
        -:  993:	}
      271:  994:	else if (state->discardCount[nextPlayer] > 0){
       57:  995:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       57:  996:	  state->discardCount[nextPlayer]--;
        -:  997:	}
        -:  998:	else{
        -:  999:	  //No Card to Reveal
        -: 1000:	  if (DEBUG){
      214: 1001:	    printf("No cards to reveal\n");
        -: 1002:	  }
        -: 1003:	}
        -: 1004:      }
        -: 1005:	    
        -: 1006:      else{
      215: 1007:	if (state->deckCount[nextPlayer] == 0){
      231: 1008:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
      174: 1009:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
      174: 1010:	    state->deckCount[nextPlayer]++;
      174: 1011:	    state->discard[nextPlayer][i] = -1;
      174: 1012:	    state->discardCount[nextPlayer]--;
        -: 1013:	  }
        -: 1014:			    
       57: 1015:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1016:	} 
      215: 1017:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      215: 1018:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      215: 1019:	state->deckCount[nextPlayer]--;
      215: 1020:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      215: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      215: 1022:	state->deckCount[nextPlayer]--;
        -: 1023:      }    
        -: 1024:		       
      486: 1025:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
      305: 1026:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      305: 1027:	state->playedCardCount++;
      305: 1028:	tributeRevealedCards[1] = -1;
        -: 1029:      }
        -: 1030:
     1944: 1031:      for (i = 0; i <= 2; i ++){
     1570: 1032:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
      112: 1033:	  state->coins += 2;
        -: 1034:	}
        -: 1035:		    
     1445: 1036:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
       99: 1037:	  drawCard(currentPlayer, state);
       99: 1038:	  drawCard(currentPlayer, state);
        -: 1039:	}
        -: 1040:	else{//Action Card
     1247: 1041:	  state->numActions = state->numActions + 2;
        -: 1042:	}
        -: 1043:      }
        -: 1044:	    
      486: 1045:      return 0;
        -: 1046:		
        -: 1047:    case ambassador:
      383: 1048:      j = 0;		//used to check if player has enough cards to discard
        -: 1049:
      383: 1050:      if (choice2 > 2 || choice2 < 0)
        -: 1051:	{
      149: 1052:	  return -1;				
        -: 1053:	}
        -: 1054:
      234: 1055:      if (choice1 == handPos)
        -: 1056:	{
       46: 1057:	  return -1;
        -: 1058:	}
        -: 1059:
     1136: 1060:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1061:	{
      948: 1062:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1063:	    {
       62: 1064:	      j++;
        -: 1065:	    }
        -: 1066:	}
      188: 1067:      if (j < choice2)
        -: 1068:	{
       91: 1069:	  return -1;				
        -: 1070:	}
        -: 1071:
        -: 1072:      if (DEBUG) 
       97: 1073:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1074:
        -: 1075:      //increase supply count for choosen card by amount being discarded
       97: 1076:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1077:			
        -: 1078:      //each other player gains a copy of revealed card
      399: 1079:      for (i = 0; i < state->numPlayers; i++)
        -: 1080:	{
      302: 1081:	  if (i != currentPlayer)
        -: 1082:	    {
      205: 1083:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1084:	    }
        -: 1085:	}
        -: 1086:
        -: 1087:      //discard played card from hand
       97: 1088:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1089:
        -: 1090:      //trash copies of cards returned to supply
      115: 1091:      for (j = 0; j < choice2; j++)
        -: 1092:	{
       34: 1093:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:	    {
       34: 1095:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1096:		{
       18: 1097:		  discardCard(i, currentPlayer, state, 1);
       18: 1098:		  break;
        -: 1099:		}
        -: 1100:	    }
        -: 1101:	}			
        -: 1102:
       97: 1103:      return 0;
        -: 1104:		
        -: 1105:    case cutpurse:
        -: 1106:
      121: 1107:      updateCoins(currentPlayer, state, 2);
      465: 1108:      for (i = 0; i < state->numPlayers; i++)
        -: 1109:	{
      344: 1110:	  if (i != currentPlayer)
        -: 1111:	    {
      228: 1112:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1113:		{
        6: 1114:		  if (state->hand[i][j] == copper)
        -: 1115:		    {
        1: 1116:		      discardCard(j, i, state, 0);
        1: 1117:		      break;
        -: 1118:		    }
        5: 1119:		  if (j == state->handCount[i])
        -: 1120:		    {
    #####: 1121:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1122:			{
        -: 1123:			  if (DEBUG)
    #####: 1124:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1125:			}	
    #####: 1126:		      break;
        -: 1127:		    }		
        -: 1128:		}
        -: 1129:					
        -: 1130:	    }
        -: 1131:				
        -: 1132:	}				
        -: 1133:
        -: 1134:      //discard played card from hand
      121: 1135:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1136:
      121: 1137:      return 0;
        -: 1138:
        -: 1139:		
        -: 1140:    case embargo: 
      209: 1141:		return cardEmbargo(currentPlayer, choice1, state, handPos);
        -: 1142:		
        -: 1143:    case outpost:
       61: 1144:		return cardOutpost(currentPlayer, state, handPos);
        -: 1145:		
        -: 1146:    case salvager:
       71: 1147:		return cardSalvager(currentPlayer, choice1, state, handPos);
        -: 1148:		
        -: 1149:    case sea_hag:
      506: 1150:		return cardSeaHag(currentPlayer, state);
        -: 1151:		
        -: 1152:    case treasure_map:
    #####: 1153:		return cardTreasureMap(currentPlayer, state, handPos);
        -: 1154:    }
        -: 1155:	
    #####: 1156:  return -1;
        -: 1157:}
        -: 1158:
     1868: 1159:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1160:{
        -: 1161:	
        -: 1162:  //if card is not trashed, added to Played pile 
     1868: 1163:  if (trashFlag < 1)
        -: 1164:    {
        -: 1165:      //add card to played pile
     1428: 1166:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1428: 1167:      state->playedCardCount++;
        -: 1168:    }
        -: 1169:	
        -: 1170:  //set played card to -1
     1868: 1171:  state->hand[currentPlayer][handPos] = -1;
        -: 1172:	
        -: 1173:  //remove card from player's hand
     1868: 1174:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1175:    {
        -: 1176:      //reduce number of cards in hand
      254: 1177:      state->handCount[currentPlayer]--;
        -: 1178:    }
     1614: 1179:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1180:    {
        -: 1181:      //reduce number of cards in hand
       16: 1182:      state->handCount[currentPlayer]--;
        -: 1183:    }
        -: 1184:  else 	
        -: 1185:    {
        -: 1186:      //replace discarded card with last card in hand
     1598: 1187:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1188:      //set last card to -1
     1598: 1189:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1190:      //reduce number of cards in hand
     1598: 1191:      state->handCount[currentPlayer]--;
        -: 1192:    }
        -: 1193:	
     1868: 1194:  return 0;
        -: 1195:}
        -: 1196:
     4241: 1197:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1198:{
        -: 1199:  //Note: supplyPos is enum of choosen card
        -: 1200:	
        -: 1201:  //check if supply pile is empty (0) or card is not used in game (-1)
     4241: 1202:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1203:    {
       10: 1204:      return -1;
        -: 1205:    }
        -: 1206:	
        -: 1207:  //added card for [whoseTurn] current player:
        -: 1208:  // toFlag = 0 : add to discard
        -: 1209:  // toFlag = 1 : add to deck
        -: 1210:  // toFlag = 2 : add to hand
        -: 1211:
     4231: 1212:  if (toFlag == 1)
        -: 1213:    {
    #####: 1214:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1215:      state->deckCount[player]++;
        -: 1216:    }
     4231: 1217:  else if (toFlag == 2)
        -: 1218:    {
       31: 1219:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       31: 1220:      state->handCount[player]++;
        -: 1221:    }
        -: 1222:  else
        -: 1223:    {
     4200: 1224:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4200: 1225:      state->discardCount[player]++;
        -: 1226:    }
        -: 1227:	
        -: 1228:  //decrease number in supply pile
     4231: 1229:  state->supplyCount[supplyPos]--;
        -: 1230:	 
     4231: 1231:  return 0;
        -: 1232:}
        -: 1233:
     9784: 1234:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1235:{
        -: 1236:  int i;
        -: 1237:	
        -: 1238:  //reset coin count
     9784: 1239:  state->coins = 0;
        -: 1240:
        -: 1241:  //add coins for each Treasure card in player's hand
    54598: 1242:  for (i = 0; i < state->handCount[player]; i++)
        -: 1243:    {
    44814: 1244:      if (state->hand[player][i] == copper)
        -: 1245:	{
    11901: 1246:	  state->coins += 1;
        -: 1247:	}
    32913: 1248:      else if (state->hand[player][i] == silver)
        -: 1249:	{
     9282: 1250:	  state->coins += 2;
        -: 1251:	}
    23631: 1252:      else if (state->hand[player][i] == gold)
        -: 1253:	{
      158: 1254:	  state->coins += 3;
        -: 1255:	}	
        -: 1256:    }	
        -: 1257:
        -: 1258:  //add bonus
     9784: 1259:  state->coins += bonus;
        -: 1260:
     9784: 1261:  return 0;
        -: 1262:}
        -: 1263:
      209: 1264:int cardEmbargo(int currentPlayer, int choice1, struct gameState *state, int handPos)
        -: 1265:{
        -: 1266:	//+2 Coins
        -: 1267:    //state->coins = state->coins + 2;
        -: 1268:			
        -: 1269:    //see if selected pile is in play
      209: 1270:    if ( state->supplyCount[choice1] == -1 )
        -: 1271:	{
    #####: 1272:		return -1;
        -: 1273:	}
        -: 1274:			
        -: 1275:    //add embargo token to selected supply pile
      209: 1276:    state->embargoTokens[choice1]++;
        -: 1277:			
        -: 1278:    //trash card
      209: 1279:    discardCard(handPos, currentPlayer, state, 1);		
      209: 1280:    return 0;
        -: 1281:}
        -: 1282:
       61: 1283:int cardOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1284:{
        -: 1285:	//set outpost flag
       61: 1286:    state->outpostPlayed++;
        -: 1287:			
        -: 1288:    //discard card
       61: 1289:    discardCard(handPos, currentPlayer, state, 0);
       61: 1290:    return 0;
        -: 1291:}
        -: 1292:
       71: 1293:int cardSalvager(int currentPlayer, int choice1, struct gameState *state, int handPos)
        -: 1294:{
        -: 1295:	//+1 buy
        -: 1296:    //state->numBuys++;
        -: 1297:			
       71: 1298:    if (choice1)
        -: 1299:	{
        -: 1300:		//gain coins equal to trashed card
       47: 1301:		state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1302:		//trash card
       47: 1303:		discardCard(choice1, currentPlayer, state, 1);	
        -: 1304:	}
        -: 1305:			
        -: 1306:    //discard card
       71: 1307:    discardCard(handPos, currentPlayer, state, 0);
       71: 1308:    return 0;
        -: 1309:	
        -: 1310:}
        -: 1311:
      506: 1312:int cardSeaHag(int currentPlayer, struct gameState *state)
        -: 1313:{
        -: 1314:	int i;
     1909: 1315:	for (i = 0; i < state->numPlayers; i++){
     1403: 1316:		if (i != currentPlayer){
      897: 1317:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      897: 1318:		  state->discardCount[i]++;
      897: 1319:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1320:		}
        -: 1321:    }
        -: 1322:	
      506: 1323:	return 0;
        -: 1324:}
        -: 1325:
    #####: 1326:int cardTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 1327:{
        -: 1328:	//search hand for another treasure_map
    #####: 1329:    int index = -1;
    #####: 1330:	int i = 0;
    #####: 1331:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1332:	{
    #####: 1333:	    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1334:	    {
    #####: 1335:			index = i;
    #####: 1336:			break;
        -: 1337:	    }
        -: 1338:	}
    #####: 1339:    if (index > -1)
        -: 1340:	{
        -: 1341:		//trash both treasure cards
    #####: 1342:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1343:		discardCard(index, currentPlayer, state, 1);
        -: 1344:
        -: 1345:		//gain 4 Gold cards
    #####: 1346:		for (i = 0; i < 4; i++)
        -: 1347:			{
        -: 1348:				//gainCard(gold, state, 1, currentPlayer);
        -: 1349:			}
        -: 1350:					
        -: 1351:		//return success
    #####: 1352:		return 1;
        -: 1353:	}
        -: 1354:			
        -: 1355:    //no second treasure_map found in hand
    #####: 1356:    return -1;
        -: 1357:	
        -: 1358:}
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:
