
	First, I looked at the variables that affect each card. For example, remodel card had the variables were gameState, players, currentPlayer, choice1, choice2, and handPos. Then I started looking at the range of every variable. For example, players has the maximum number of 4, while choice1 and choice2 are generated according to the hand and deck of a card. Hence, I created a function that generates a random card for choice1 and choice2. After that, I started randomly testing those variables through the function rand(). 

For each card we have a minimum of 3 variables that affects the card output. Hence, running a for loop of the maximum tests possible, which indicated to be 3000 times, which increased the coverage percent, in which it would cover almost all the possible combination of these variables. 

In the beginning, I found that the code fails in initializing the game almost 1/3 of the time. I figured that it was through having the players randomly ranging from 0 to 4, where it supposed to be from 2 to 4. In addition, I had a couple of segfaults that slowed my tests down. Eventually, I found those segfaults and I was able to generate a better test.

Next, In order to find where the tests fails, I checked the return value of the functions. If it did not return the result I want, I had the code print out these variables. Through that, I can analyze why did the test fails. For example, I found that remodel returns -1 when choice1 and choice2 are both equal to zero, and when choice1 is zero and choice2 is 3, which is not supposed to happen.

Finally, in order to check the correctness of my code, I printed the values of the variables each time a test fails. In addition, I printed out the variables of each test at the beginning of my testing process in order to make sure that I code is testing properly. Also, I used if statements to check the return values, and print out the variables associated with the return value.

In order to improve coverage, the adventurer coverage was 20.03%, while remodel had 29.19% coverage

