Running remodel card random test ----------- 
All randomTestCard tests passed. 
File 'dominion.c'
Lines executed:29.39% of 575
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   389101:    8:int compare(const void* a, const void* b) {
   389101:    9:  if (*(int*)a > *(int*)b)
    50748:   10:    return 1;
   338353:   11:  if (*(int*)a < *(int*)b)
     7808:   12:    return -1;
   330545:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
     1000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      429:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      571:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     6281:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    62810:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    57100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      571:   73:  if (numPlayers == 2)
        -:   74:    {
      177:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      394:   77:  else if (numPlayers == 3)
        -:   78:    {
      182:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      212:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      571:   87:  if (numPlayers == 2)
        -:   88:    {
      177:   89:      state->supplyCount[estate] = 8;
      177:   90:      state->supplyCount[duchy] = 8;
      177:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      394:   95:      state->supplyCount[estate] = 12;
      394:   96:      state->supplyCount[duchy] = 12;
      394:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      571:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      571:  102:  state->supplyCount[silver] = 40;
      571:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    11991:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    94215:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    88505:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     6281:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      571:  115:		  if (numPlayers == 2){ 
      177:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      394:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     5139:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     5710:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    82795:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     2319:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     1748:  140:      state->deckCount[i] = 0;
     6992:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     5244:  143:	  state->deck[i][j] = estate;
     5244:  144:	  state->deckCount[i]++;
        -:  145:	}
    13984:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    12236:  148:	  state->deck[i][j] = copper;
    12236:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     2319:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     1748:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     2319:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1748:  166:      state->handCount[i] = 0;
     1748:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    15988:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    15417:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      571:  182:  state->outpostPlayed = 0;
      571:  183:  state->phase = 0;
      571:  184:  state->numActions = 1;
      571:  185:  state->numBuys = 1;
      571:  186:  state->playedCardCount = 0;
      571:  187:  state->whoseTurn = 0;
      571:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     3426:  192:  for (it = 0; it < 5; it++){
     2855:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      571:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      571:  198:  return 0;
        -:  199:}
        -:  200:
     2080:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     2080:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     2080:  209:  if (state->deckCount[player] < 1)
        6:  210:    return -1;
     2074:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   100529:  214:  while (state->deckCount[player] > 0) {
    96381:  215:    card = floor(Random() * state->deckCount[player]);
    96381:  216:    newDeck[newDeckPos] = state->deck[player][card];
    96381:  217:    newDeckPos++;
  6638497:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  6542116:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    96381:  221:    state->deckCount[player]--;
        -:  222:  }
    98455:  223:  for (i = 0; i < newDeckPos; i++) {
    96381:  224:    state->deck[player][i] = newDeck[i];
    96381:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2074:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      989:  320:int supplyCount(int card, struct gameState *state) {
      989:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     1000:  346:int whoseTurn(struct gameState *state) {
     1000:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     5855:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     5855:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    79233:  533:    for (i = 0; i < state->discardCount[player];i++){
    78901:  534:      state->deck[player][i] = state->discard[player][i];
    78901:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      332:  538:    state->deckCount[player] = state->discardCount[player];
      332:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      332:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
      332:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      332:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      332:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
      332:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      332:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      332:  559:    if (deckCounter == 0)
        6:  560:      return -1;
        -:  561:
      326:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      326:  563:    state->deckCount[player]--;
      326:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     5523:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
     5523:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     5523:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     5523:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     5523:  576:    state->deckCount[player]--;
     5523:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     5849:  580:  return 0;
        -:  581:}
        -:  582:
     2000:  583:int getCost(int cardNumber)
        -:  584:{
     2000:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        5:  588:      return 0;
        -:  589:    case estate:
      145:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
     1011:  594:      return 8;
        -:  595:    case copper:
      430:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
      409:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int playAdventurer(int currentPlayer, struct gameState *state){
        -:  647:    
        -:  648:    int cardDrawn;
    #####:  649:    int drawntreasure = 0;
        -:  650:    int temphand[MAX_HAND];
    #####:  651:    int z = 0; //for last while loop on temphand
        -:  652:    
    #####:  653:    while(drawntreasure<2){
    #####:  654:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:            shuffle(currentPlayer, state);
        -:  656:        }
    #####:  657:        drawCard(currentPlayer, state);
    #####:  658:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  659:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  660:            drawntreasure++;
        -:  661:        else{
    #####:  662:            temphand[z]=cardDrawn;
    #####:  663:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:            z++;
        -:  665:        }
        -:  666:    }
    #####:  667:    while(z-1>=0){
    #####:  668:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  669:        z=z-1;
        -:  670:    }
    #####:  671:    return 0;
        -:  672:}
        -:  673:
    #####:  674:int playCouncilRoom(int currentPlayer, int handPos, struct gameState *state){
        -:  675:    //+4 Cards
        -:  676:    int i;
        -:  677:    
    #####:  678:    for (i = 0; i < 4; i++)
        -:  679:    {
    #####:  680:        drawCard(currentPlayer, state);
        -:  681:    }
        -:  682:    
        -:  683:    //+1 Buy
    #####:  684:    state->numBuys++;
        -:  685:    
        -:  686:    //Each other player draws a card
    #####:  687:    for (i = 0; i < state->numPlayers; i++)
        -:  688:    {
    #####:  689:        if ( i != currentPlayer )
        -:  690:        {
    #####:  691:            drawCard(i, state);
        -:  692:        }
        -:  693:    }
        -:  694:    
        -:  695:    //put played card in played card pile
    #####:  696:    discardCard(handPos, currentPlayer, state, 0);
        -:  697:    
    #####:  698:    return 0;
        -:  699:}
        -:  700:
    #####:  701:int playFeast(int choice1, int currentPlayer, struct gameState *state){
        -:  702:    //gain card with cost up to 5
        -:  703:    //Backup hand
        -:  704:    int i;
        -:  705:    int x;
        -:  706:    
        -:  707:    int temphand[MAX_HAND];
        -:  708:    
    #####:  709:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  710:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  711:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  712:    }
        -:  713:    //Backup hand
        -:  714:    
        -:  715:    //Update Coins for Buy
    #####:  716:    updateCoins(currentPlayer, state, 5);
        -:  717:    
    #####:  718:    x = 1;              //Condition to loop on
        -:  719:    
    #####:  720:    while( x == 1) {    //Buy one card
    #####:  721:        if (supplyCount(choice1, state) <= 0){
    #####:  722:            if (DEBUG)
        -:  723:                printf("None of that card left, sorry!\n");
        -:  724:            
    #####:  725:            if (DEBUG){
        -:  726:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  727:            }
        -:  728:        }
    #####:  729:        else if (state->coins < getCost(choice1)){
    #####:  730:            printf("That card is too expensive!\n");
        -:  731:            
    #####:  732:            if (DEBUG){
        -:  733:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  734:            }
        -:  735:        }
        -:  736:        else{
        -:  737:            
    #####:  738:            if (DEBUG){
        -:  739:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  740:            }
        -:  741:            
    #####:  742:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  743:            x = 0;//No more buying cards
        -:  744:            
    #####:  745:            if (DEBUG){
        -:  746:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  747:            }
        -:  748:            
        -:  749:        }
        -:  750:    }     
        -:  751:    
        -:  752:    //Reset Hand
    #####:  753:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  754:        state->hand[currentPlayer][i] = temphand[i];
    #####:  755:        temphand[i] = -1;
        -:  756:    }
        -:  757:    //Reset Hand
        -:  758:    
    #####:  759:    return 0;
        -:  760:}
        -:  761:
    #####:  762:int playMine(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state){
        -:  763:    
        -:  764:    int i;
        -:  765:    int j;
        -:  766:    
    #####:  767:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  768:    
    #####:  769:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    #####:  770:        return -1;
        -:  771:    
    #####:  772:    if (choice2 > treasure_map || choice2 < curse)
    #####:  773:        return -1;
        -:  774:    
    #####:  775:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    #####:  776:        return -1;
        -:  777:    
    #####:  778:    gainCard(choice2, state, 2, currentPlayer);
        -:  779:    
        -:  780:    //discard card from hand
    #####:  781:    discardCard(handPos, currentPlayer, state, 0);
        -:  782:    
        -:  783:    //discard trashed card
    #####:  784:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  785:    {
    #####:  786:        if (state->hand[currentPlayer][i] == j)
        -:  787:        {
    #####:  788:            discardCard(i, currentPlayer, state, 0);
    #####:  789:            break;
        -:  790:        }
        -:  791:    }
        -:  792:    
    #####:  793:    return 0;
        -:  794:}
        -:  795:
     1000:  796:int playRemodel(int choice1, int choice2, int currentPlayer, int handPos, struct gameState *state){
        -:  797:    
        -:  798:    int i;
        -:  799:    int j;
        -:  800:    
     1000:  801:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  802:    
     1000:  803:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
       11:  804:        return -1;
        -:  805:    
      989:  806:    gainCard(choice2, state, 0, currentPlayer);
        -:  807:    
        -:  808:    //discard card from hand
      989:  809:    discardCard(handPos, currentPlayer, state, 0);
        -:  810:    
        -:  811:    //discard trashed card
    13153:  812:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  813:    {
    13107:  814:        if (state->hand[currentPlayer][i] == j)
        -:  815:        {
      943:  816:            discardCard(i, currentPlayer, state, 0);
      943:  817:            break;
        -:  818:        }
        -:  819:    }
        -:  820:    
        -:  821:    
      989:  822:    return 0;
        -:  823:}
        -:  824:
     1000:  825:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  826:{
        -:  827:  int i;
        -:  828:  int j;
        -:  829:  int k;
        -:  830://  int x;
        -:  831:  int index;
     1000:  832:  int currentPlayer = whoseTurn(state);
     1000:  833:  int nextPlayer = currentPlayer + 1;
        -:  834:
     1000:  835:  int tributeRevealedCards[2] = {-1, -1};
        -:  836://  int temphand[MAX_HAND];// moved above the if statement
        -:  837://  int drawntreasure=0;
        -:  838://  int cardDrawn;
        -:  839://  int z = 0;// this is the counter for the temp hand
     1000:  840:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  841:    nextPlayer = 0;
        -:  842:  }
        -:  843:  
        -:  844:	
        -:  845:  //uses switch to select card and perform actions
     1000:  846:  switch( card ) 
        -:  847:    {
        -:  848:    case adventurer:
    #####:  849:            playAdventurer(currentPlayer, state);
        -:  850:			
        -:  851:    case council_room:
    #####:  852:            playCouncilRoom(currentPlayer, handPos, state);
        -:  853:			
        -:  854:    case feast:
    #####:  855:            playFeast(choice1, currentPlayer, state);
        -:  856:			
        -:  857:    case gardens:
    #####:  858:      return -1;
        -:  859:			
        -:  860:    case mine:
    #####:  861:            playMine(choice1, choice2, currentPlayer, handPos, state);
        -:  862:			
        -:  863:    case remodel:
     1000:  864:            playRemodel(choice1, choice2, currentPlayer, handPos, state);
        -:  865:		
        -:  866:    case smithy:
        -:  867:      //+3 Cards
     4000:  868:      for (i = 0; i < 3; i++)
        -:  869:	{
     3000:  870:	  drawCard(currentPlayer, state);
        -:  871:	}
        -:  872:			
        -:  873:      //discard card from hand
     1000:  874:      discardCard(handPos, currentPlayer, state, 0);
     1000:  875:      return 0;
        -:  876:		
        -:  877:    case village:
        -:  878:      //+1 Card
    #####:  879:      drawCard(currentPlayer, state);
        -:  880:			
        -:  881:      //+2 Actions
    #####:  882:      state->numActions = state->numActions + 2;
        -:  883:			
        -:  884:      //discard played card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case baron:
    #####:  889:      state->numBuys++;//Increase buys by 1!
    #####:  890:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:	int p = 0;//Iterator for hand!
    #####:  892:	int card_not_discarded = 1;//Flag for discard set!
    #####:  893:	while(card_not_discarded){
    #####:  894:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:	    state->discardCount[currentPlayer]++;
    #####:  898:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:	    }
    #####:  901:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:	    state->handCount[currentPlayer]--;
    #####:  903:	    card_not_discarded = 0;//Exit the loop
        -:  904:	  }
    #####:  905:	  else if (p > state->handCount[currentPlayer]){
    #####:  906:	    if(DEBUG) {
        -:  907:	      printf("No estate cards in your hand, invalid choice\n");
        -:  908:	      printf("Must gain an estate if there are any\n");
        -:  909:	    }
    #####:  910:	    if (supplyCount(estate, state) > 0){
    #####:  911:	      gainCard(estate, state, 0, currentPlayer);
    #####:  912:	      state->supplyCount[estate]--;//Decrement estates
    #####:  913:	      if (supplyCount(estate, state) == 0){
    #####:  914:		isGameOver(state);
        -:  915:	      }
        -:  916:	    }
    #####:  917:	    card_not_discarded = 0;//Exit the loop
        -:  918:	  }
        -:  919:			    
        -:  920:	  else{
    #####:  921:	    p++;//Next card
        -:  922:	  }
        -:  923:	}
        -:  924:      }
        -:  925:			    
        -:  926:      else{
    #####:  927:	if (supplyCount(estate, state) > 0){
    #####:  928:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  930:	  if (supplyCount(estate, state) == 0){
    #####:  931:	    isGameOver(state);
        -:  932:	  }
        -:  933:	}
        -:  934:      }
        -:  935:	    
        -:  936:      
    #####:  937:      return 0;
        -:  938:		
        -:  939:    case great_hall:
        -:  940:      //+1 Card
    #####:  941:      drawCard(currentPlayer, state);
        -:  942:			
        -:  943:      //+1 Actions
    #####:  944:      state->numActions++;
        -:  945:			
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
    #####:  948:      return 0;
        -:  949:		
        -:  950:    case minion:
        -:  951:      //+1 action
    #####:  952:      state->numActions++;
        -:  953:			
        -:  954:      //discard card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);
        -:  956:			
    #####:  957:      if (choice1)		//+2 coins
        -:  958:	{
    #####:  959:	  state->coins = state->coins + 2;
        -:  960:	}
        -:  961:			
    #####:  962:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  963:	{
        -:  964:	  //discard hand
    #####:  965:	  while(numHandCards(state) > 0)
        -:  966:	    {
    #####:  967:	      discardCard(handPos, currentPlayer, state, 0);
        -:  968:	    }
        -:  969:				
        -:  970:	  //draw 4
    #####:  971:	  for (i = 0; i < 4; i++)
        -:  972:	    {
    #####:  973:	      drawCard(currentPlayer, state);
        -:  974:	    }
        -:  975:				
        -:  976:	  //other players discard hand and redraw if hand size > 4
    #####:  977:	  for (i = 0; i < state->numPlayers; i++)
        -:  978:	    {
    #####:  979:	      if (i != currentPlayer)
        -:  980:		{
    #####:  981:		  if ( state->handCount[i] > 4 )
        -:  982:		    {
        -:  983:		      //discard hand
    #####:  984:		      while( state->handCount[i] > 0 )
        -:  985:			{
    #####:  986:			  discardCard(handPos, i, state, 0);
        -:  987:			}
        -:  988:							
        -:  989:		      //draw 4
    #####:  990:		      for (j = 0; j < 4; j++)
        -:  991:			{
    #####:  992:			  drawCard(i, state);
        -:  993:			}
        -:  994:		    }
        -:  995:		}
        -:  996:	    }
        -:  997:				
        -:  998:	}
    #####:  999:      return 0;
        -: 1000:		
        -: 1001:    case steward:
    #####: 1002:      if (choice1 == 1)
        -: 1003:	{
        -: 1004:	  //+2 cards
    #####: 1005:	  drawCard(currentPlayer, state);
    #####: 1006:	  drawCard(currentPlayer, state);
        -: 1007:	}
    #####: 1008:      else if (choice1 == 2)
        -: 1009:	{
        -: 1010:	  //+2 coins
    #####: 1011:	  state->coins = state->coins + 2;
        -: 1012:	}
        -: 1013:      else
        -: 1014:	{
        -: 1015:	  //trash 2 cards in hand
    #####: 1016:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1017:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1018:	}
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case tribute:
    #####: 1025:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1026:	if (state->deckCount[nextPlayer] > 0){
    #####: 1027:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	  state->deckCount[nextPlayer]--;
        -: 1029:	}
    #####: 1030:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1032:	  state->discardCount[nextPlayer]--;
        -: 1033:	}
        -: 1034:	else{
        -: 1035:	  //No Card to Reveal
    #####: 1036:	  if (DEBUG){
        -: 1037:	    printf("No cards to reveal\n");
        -: 1038:	  }
        -: 1039:	}
        -: 1040:      }
        -: 1041:	    
        -: 1042:      else{
    #####: 1043:	if (state->deckCount[nextPlayer] == 0){
    #####: 1044:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1045:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1046:	    state->deckCount[nextPlayer]++;
    #####: 1047:	    state->discard[nextPlayer][i] = -1;
    #####: 1048:	    state->discardCount[nextPlayer]--;
        -: 1049:	  }
        -: 1050:			    
    #####: 1051:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1052:	} 
    #####: 1053:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:	state->deckCount[nextPlayer]--;
    #####: 1056:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1057:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1058:	state->deckCount[nextPlayer]--;
        -: 1059:      }    
        -: 1060:		       
    #####: 1061:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1062:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1063:	state->playedCardCount++;
    #####: 1064:	tributeRevealedCards[1] = -1;
        -: 1065:      }
        -: 1066:
    #####: 1067:      for (i = 0; i <= 2; i ++){
    #####: 1068:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1069:	  state->coins += 2;
        -: 1070:	}
        -: 1071:		    
    #####: 1072:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1073:	  drawCard(currentPlayer, state);
    #####: 1074:	  drawCard(currentPlayer, state);
        -: 1075:	}
        -: 1076:	else{//Action Card
    #####: 1077:	  state->numActions = state->numActions + 2;
        -: 1078:	}
        -: 1079:      }
        -: 1080:	    
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case ambassador:
    #####: 1084:      j = 0;		//used to check if player has enough cards to discard
        -: 1085:
    #####: 1086:      if (choice2 > 2 || choice2 < 0)
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
    #####: 1091:      if (choice1 == handPos)
        -: 1092:	{
    #####: 1093:	  return -1;
        -: 1094:	}
        -: 1095:
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	{
    #####: 1098:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1099:	    {
    #####: 1100:	      j++;
        -: 1101:	    }
        -: 1102:	}
    #####: 1103:      if (j < choice2)
        -: 1104:	{
    #####: 1105:	  return -1;				
        -: 1106:	}
        -: 1107:
    #####: 1108:      if (DEBUG) 
        -: 1109:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1110:
        -: 1111:      //increase supply count for choosen card by amount being discarded
    #####: 1112:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1113:			
        -: 1114:      //each other player gains a copy of revealed card
    #####: 1115:      for (i = 0; i < state->numPlayers; i++)
        -: 1116:	{
    #####: 1117:	  if (i != currentPlayer)
        -: 1118:	    {
    #####: 1119:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1120:	    }
        -: 1121:	}
        -: 1122:
        -: 1123:      //discard played card from hand
    #####: 1124:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1125:
        -: 1126:      //trash copies of cards returned to supply
    #####: 1127:      for (j = 0; j < choice2; j++)
        -: 1128:	{
    #####: 1129:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1130:	    {
    #####: 1131:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1132:		{
    #####: 1133:		  discardCard(i, currentPlayer, state, 1);
    #####: 1134:		  break;
        -: 1135:		}
        -: 1136:	    }
        -: 1137:	}			
        -: 1138:
    #####: 1139:      return 0;
        -: 1140:		
        -: 1141:    case cutpurse:
        -: 1142:
    #####: 1143:      updateCoins(currentPlayer, state, 2);
    #####: 1144:      for (i = 0; i < state->numPlayers; i++)
        -: 1145:	{
    #####: 1146:	  if (i != currentPlayer)
        -: 1147:	    {
    #####: 1148:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1149:		{
    #####: 1150:		  if (state->hand[i][j] == copper)
        -: 1151:		    {
    #####: 1152:		      discardCard(j, i, state, 0);
    #####: 1153:		      break;
        -: 1154:		    }
    #####: 1155:		  if (j == state->handCount[i])
        -: 1156:		    {
    #####: 1157:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1158:			{
    #####: 1159:			  if (DEBUG)
        -: 1160:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1161:			}	
    #####: 1162:		      break;
        -: 1163:		    }		
        -: 1164:		}
        -: 1165:					
        -: 1166:	    }
        -: 1167:				
        -: 1168:	}				
        -: 1169:
        -: 1170:      //discard played card from hand
    #####: 1171:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1172:
    #####: 1173:      return 0;
        -: 1174:
        -: 1175:		
        -: 1176:    case embargo: 
        -: 1177:      //+2 Coins
    #####: 1178:      state->coins = state->coins + 2;
        -: 1179:			
        -: 1180:      //see if selected pile is in play
    #####: 1181:      if ( state->supplyCount[choice1] == -1 )
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:			
        -: 1186:      //add embargo token to selected supply pile
    #####: 1187:      state->embargoTokens[choice1]++;
        -: 1188:			
        -: 1189:      //trash card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case outpost:
        -: 1194:      //set outpost flag
    #####: 1195:      state->outpostPlayed++;
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case salvager:
        -: 1202:      //+1 buy
    #####: 1203:      state->numBuys++;
        -: 1204:			
    #####: 1205:      if (choice1)
        -: 1206:	{
        -: 1207:	  //gain coins equal to trashed card
    #####: 1208:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1209:	  //trash card
    #####: 1210:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1211:	}
        -: 1212:			
        -: 1213:      //discard card
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case sea_hag:
    #####: 1218:      for (i = 0; i < state->numPlayers; i++){
    #####: 1219:	if (i != currentPlayer){
    #####: 1220:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1221:	  state->discardCount[i]++;
    #####: 1222:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1223:	}
        -: 1224:      }
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case treasure_map:
        -: 1228:      //search hand for another treasure_map
    #####: 1229:      index = -1;
    #####: 1230:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1231:	{
    #####: 1232:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1233:	    {
    #####: 1234:	      index = i;
    #####: 1235:	      break;
        -: 1236:	    }
        -: 1237:	}
    #####: 1238:      if (index > -1)
        -: 1239:	{
        -: 1240:	  //trash both treasure cards
    #####: 1241:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1242:	  discardCard(index, currentPlayer, state, 1);
        -: 1243:
        -: 1244:	  //gain 4 Gold cards
    #####: 1245:	  for (i = 0; i < 4; i++)
        -: 1246:	    {
    #####: 1247:	      gainCard(gold, state, 1, currentPlayer);
        -: 1248:	    }
        -: 1249:				
        -: 1250:	  //return success
    #####: 1251:	  return 1;
        -: 1252:	}
        -: 1253:			
        -: 1254:      //no second treasure_map found in hand
    #####: 1255:      return -1;
        -: 1256:    }
        -: 1257:	
    #####: 1258:  return -1;
        -: 1259:}
        -: 1260:
     2932: 1261:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1262:{
        -: 1263:	
        -: 1264:  //if card is not trashed, added to Played pile 
     2932: 1265:  if (trashFlag < 1)
        -: 1266:    {
        -: 1267:      //add card to played pile
     2932: 1268:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     2932: 1269:      state->playedCardCount++;
        -: 1270:    }
        -: 1271:	
        -: 1272:  //set played card to -1
     2932: 1273:  state->hand[currentPlayer][handPos] = -1;
        -: 1274:	
        -: 1275:  //remove card from player's hand
     2932: 1276:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
       11: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
     2921: 1281:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
        -: 1286:  else 	
        -: 1287:    {
        -: 1288:      //replace discarded card with last card in hand
     2921: 1289:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1290:      //set last card to -1
     2921: 1291:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1292:      //reduce number of cards in hand
     2921: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:	
     2932: 1296:  return 0;
        -: 1297:}
        -: 1298:
      989: 1299:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1300:{
        -: 1301:  //Note: supplyPos is enum of choosen card
        -: 1302:	
        -: 1303:  //check if supply pile is empty (0) or card is not used in game (-1)
      989: 1304:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1305:    {
    #####: 1306:      return -1;
        -: 1307:    }
        -: 1308:	
        -: 1309:  //added card for [whoseTurn] current player:
        -: 1310:  // toFlag = 0 : add to discard
        -: 1311:  // toFlag = 1 : add to deck
        -: 1312:  // toFlag = 2 : add to hand
        -: 1313:
      989: 1314:  if (toFlag == 1)
        -: 1315:    {
    #####: 1316:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1317:      state->deckCount[player]++;
        -: 1318:    }
      989: 1319:  else if (toFlag == 2)
        -: 1320:    {
    #####: 1321:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1322:      state->handCount[player]++;
        -: 1323:    }
        -: 1324:  else
        -: 1325:    {
      989: 1326:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      989: 1327:      state->discardCount[player]++;
        -: 1328:    }
        -: 1329:	
        -: 1330:  //decrease number in supply pile
      989: 1331:  state->supplyCount[supplyPos]--;
        -: 1332:	 
      989: 1333:  return 0;
        -: 1334:}
        -: 1335:
      571: 1336:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1337:{
        -: 1338:  int i;
        -: 1339:	
        -: 1340:  //reset coin count
      571: 1341:  state->coins = 0;
        -: 1342:
        -: 1343:  //add coins for each Treasure card in player's hand
     3426: 1344:  for (i = 0; i < state->handCount[player]; i++)
        -: 1345:    {
     2855: 1346:      if (state->hand[player][i] == copper)
        -: 1347:	{
     2065: 1348:	  state->coins += 1;
        -: 1349:	}
      790: 1350:      else if (state->hand[player][i] == silver)
        -: 1351:	{
    #####: 1352:	  state->coins += 2;
        -: 1353:	}
      790: 1354:      else if (state->hand[player][i] == gold)
        -: 1355:	{
    #####: 1356:	  state->coins += 3;
        -: 1357:	}	
        -: 1358:    }	
        -: 1359:
        -: 1360:  //add bonus
      571: 1361:  state->coins += bonus;
        -: 1362:
      571: 1363:  return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
