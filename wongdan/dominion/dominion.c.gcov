        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:32
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int adventurerCard(int, struct gameState*, int);
        -:    9:int council_roomCard(int, struct gameState*, int);
        -:   10:int mineCard(int, int, int, struct gameState*, int);
        -:   11:int feastCard(int, int, struct gameState*, int);
        -:   12:int smithyCard(int, struct gameState*, int);
        -:   13:
        -:   14:
        -:   15:int compare(const void* a, const void* b) {
   442234:   16:  if (*(int*)a > *(int*)b)
    18566:   17:    return 1;
   423668:   18:  if (*(int*)a < *(int*)b)
   139289:   19:    return -1;
   284379:   20:  return 0;
   442234:   21:}
        -:   22:
        -:   23:
        -:   24:struct gameState* newGame() {
       10:   25:  struct gameState* g = malloc(sizeof(struct gameState));
       10:   26:  return g;
        -:   27:}
        -:   28:
        -:   29:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   30:		  int k8, int k9, int k10) {
    #####:   31:  int* k = malloc(10 * sizeof(int));
    #####:   32:  k[0] = k1;
    #####:   33:  k[1] = k2;
    #####:   34:  k[2] = k3;
    #####:   35:  k[3] = k4;
    #####:   36:  k[4] = k5;
    #####:   37:  k[5] = k6;
    #####:   38:  k[6] = k7;
    #####:   39:  k[7] = k8;
    #####:   40:  k[8] = k9;
    #####:   41:  k[9] = k10;
    #####:   42:  return k;
        -:   43:}
        -:   44:
        -:   45:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   46:		   struct gameState *state) {
        -:   47:
        -:   48:  int i;
        -:   49:  int j;
        -:   50:  int it;			
        -:   51:  //set up random number generator
     8020:   52:  SelectStream(1);
     8020:   53:  PutSeed((long)randomSeed);
        -:   54:  
        -:   55:  //check number of players
    16040:   56:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   57:    {
    #####:   58:      return -1;
        -:   59:    }
        -:   60:
        -:   61:  //set number of players
     8020:   62:  state->numPlayers = numPlayers;
        -:   63:
        -:   64:  //check selected kingdom cards are different
   176440:   65:  for (i = 0; i < 10; i++)
        -:   66:    {
  1764400:   67:      for (j = 0; j < 10; j++)
        -:   68:        {
  1523800:   69:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   70:	    {
    #####:   71:	      return -1;
        -:   72:	    }
   802000:   73:        }
    80200:   74:    }
        -:   75:
        -:   76:
        -:   77:  //initialize supply
        -:   78:  ///////////////////////////////
        -:   79:
        -:   80:  //set number of Curse cards
     8020:   81:  if (numPlayers == 2)
        -:   82:    {
     2675:   83:      state->supplyCount[curse] = 10;
     2675:   84:    }
     5345:   85:  else if (numPlayers == 3)
        -:   86:    {
     2885:   87:      state->supplyCount[curse] = 20;
     2885:   88:    }
        -:   89:  else
        -:   90:    {
     2460:   91:      state->supplyCount[curse] = 30;
        -:   92:    }
        -:   93:
        -:   94:  //set number of Victory cards
     8020:   95:  if (numPlayers == 2)
        -:   96:    {
     2675:   97:      state->supplyCount[estate] = 8;
     2675:   98:      state->supplyCount[duchy] = 8;
     2675:   99:      state->supplyCount[province] = 8;
     2675:  100:    }
        -:  101:  else
        -:  102:    {
     5345:  103:      state->supplyCount[estate] = 12;
     5345:  104:      state->supplyCount[duchy] = 12;
     5345:  105:      state->supplyCount[province] = 12;
        -:  106:    }
        -:  107:
        -:  108:  //set number of Treasure cards
     8020:  109:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     8020:  110:  state->supplyCount[silver] = 40;
     8020:  111:  state->supplyCount[gold] = 30;
        -:  112:
        -:  113:  //set number of Kingdom cards
   336840:  114:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  115:    {
  2646600:  116:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  117:	{
  1243100:  118:	  if (kingdomCards[j] == i)
        -:  119:	    {
        -:  120:	      //check if card is a 'Victory' Kingdom card
   160400:  121:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  122:		{
     8020:  123:		  if (numPlayers == 2){ 
     2675:  124:		    state->supplyCount[i] = 8; 
     2675:  125:		  }
     5345:  126:		  else{ state->supplyCount[i] = 12; }
     8020:  127:		}
        -:  128:	      else
        -:  129:		{
    72180:  130:		  state->supplyCount[i] = 10;
        -:  131:		}
    80200:  132:	      break;
        -:  133:	    }
        -:  134:	  else    //card is not in the set choosen for the game
        -:  135:	    {
  1162900:  136:	      state->supplyCount[i] = -1;
        -:  137:	    }
  1162900:  138:	}
        -:  139:
   160400:  140:    }
        -:  141:
        -:  142:  ////////////////////////
        -:  143:  //supply intilization complete
        -:  144:
        -:  145:  //set player decks
    63730:  146:  for (i = 0; i < numPlayers; i++)
        -:  147:    {
    23845:  148:      state->deckCount[i] = 0;
   190760:  149:      for (j = 0; j < 3; j++)
        -:  150:	{
    71535:  151:	  state->deck[i][j] = estate;
    71535:  152:	  state->deckCount[i]++;
    71535:  153:	}
   381520:  154:      for (j = 3; j < 10; j++)
        -:  155:	{
   166915:  156:	  state->deck[i][j] = copper;
   166915:  157:	  state->deckCount[i]++;		
   166915:  158:	}
    23845:  159:    }
        -:  160:
        -:  161:  //shuffle player decks
    63730:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {
    23845:  164:      if ( shuffle(i, state) < 0 )
        -:  165:	{
    #####:  166:	  return -1;
        -:  167:	}
    23845:  168:    }
        -:  169:
        -:  170:  //draw player hands
    63730:  171:  for (i = 0; i < numPlayers; i++)
        -:  172:    {  
        -:  173:      //initialize hand size to zero
    23845:  174:      state->handCount[i] = 0;
    23845:  175:      state->discardCount[i] = 0;
        -:  176:      //draw 5 cards
        -:  177:      // for (j = 0; j < 5; j++)
        -:  178:      //	{
        -:  179:      //	  drawCard(i, state);
        -:  180:      //	}
    23845:  181:    }
        -:  182:  
        -:  183:  //set embargo tokens to 0 for all supply piles
   449120:  184:  for (i = 0; i <= treasure_map; i++)
        -:  185:    {
   216540:  186:      state->embargoTokens[i] = 0;
   216540:  187:    }
        -:  188:
        -:  189:  //initialize first player's turn
     8020:  190:  state->outpostPlayed = 0;
     8020:  191:  state->phase = 0;
     8020:  192:  state->numActions = 1;
     8020:  193:  state->numBuys = 1;
     8020:  194:  state->playedCardCount = 0;
     8020:  195:  state->whoseTurn = 0;
     8020:  196:  state->handCount[state->whoseTurn] = 0;
        -:  197:  //int it; move to top
        -:  198:
        -:  199:  //Moved draw cards to here, only drawing at the start of a turn
    96240:  200:  for (it = 0; it < 5; it++){
    40100:  201:    drawCard(state->whoseTurn, state);
    40100:  202:  }
        -:  203:
     8020:  204:  updateCoins(state->whoseTurn, state, 0);
        -:  205:
     8020:  206:  return 0;
     8020:  207:}
        -:  208:
        -:  209:int shuffle(int player, struct gameState *state) {
        -:  210: 
        -:  211:
        -:  212:  int newDeck[MAX_DECK];
    24136:  213:  int newDeckPos = 0;
        -:  214:  int card;
        -:  215:  int i;
        -:  216:
    24136:  217:  if (state->deckCount[player] < 1)
       13:  218:    return -1;
    24123:  219:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  220:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  221:
   665630:  222:  while (state->deckCount[player] > 0) {
   308692:  223:    card = floor(Random() * state->deckCount[player]);
   308692:  224:    newDeck[newDeckPos] = state->deck[player][card];
   308692:  225:    newDeckPos++;
 13583792:  226:    for (i = card; i < state->deckCount[player]-1; i++) {
  6483204:  227:      state->deck[player][i] = state->deck[player][i+1];
  6483204:  228:    }
   308692:  229:    state->deckCount[player]--;
        -:  230:  }
   665630:  231:  for (i = 0; i < newDeckPos; i++) {
   308692:  232:    state->deck[player][i] = newDeck[i];
   308692:  233:    state->deckCount[player]++;
   308692:  234:  }
        -:  235:
    24123:  236:  return 0;
    24136:  237:}
        -:  238:
        -:  239:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  240:{	
        -:  241:  int card;
    #####:  242:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  243:
        -:  244:  //check if it is the right phase
    #####:  245:  if (state->phase != 0)
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //check if player has enough actions
    #####:  251:  if ( state->numActions < 1 )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //get card played
    #####:  257:  card = handCard(handPos, state);
        -:  258:	
        -:  259:  //check if selected card is an action
    #####:  260:  if ( card < adventurer || card > treasure_map )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //play card
    #####:  266:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:	
        -:  271:  //reduce number of actions
    #####:  272:  state->numActions--;
        -:  273:
        -:  274:  //update coins (Treasure cards may be added with card draws)
    #####:  275:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  276:	
    #####:  277:  return 0;
    #####:  278:}
        -:  279:
        -:  280:int buyCard(int supplyPos, struct gameState *state) {
        -:  281:  int who;
        -:  282:  if (DEBUG){
        -:  283:    printf("Entering buyCard...\n");
        -:  284:  }
        -:  285:
        -:  286:  // I don't know what to do about the phase thing.
        -:  287:
    #####:  288:  who = state->whoseTurn;
        -:  289:
    #####:  290:  if (state->numBuys < 1){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have any buys left\n");
    #####:  293:    return -1;
    #####:  294:  } else if (supplyCount(supplyPos, state) <1){
        -:  295:    if (DEBUG)
        -:  296:      printf("There are not any of that type of card left\n");
    #####:  297:    return -1;
    #####:  298:  } else if (state->coins < getCost(supplyPos)){
        -:  299:    if (DEBUG) 
        -:  300:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  301:    return -1;
        -:  302:  } else {
    #####:  303:    state->phase=1;
        -:  304:    //state->supplyCount[supplyPos]--;
    #####:  305:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  306:  
    #####:  307:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  308:    state->numBuys--;
        -:  309:    if (DEBUG)
        -:  310:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  311:  }
        -:  312:
        -:  313:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  314:  //state->discardCount[who]++;
        -:  315:    
    #####:  316:  return 0;
    #####:  317:}
        -:  318:
        -:  319:int numHandCards(struct gameState *state) {
    #####:  320:  return state->handCount[ whoseTurn(state) ];
        -:  321:}
        -:  322:
        -:  323:int handCard(int handPos, struct gameState *state) {
    #####:  324:  int currentPlayer = whoseTurn(state);
    #####:  325:  return state->hand[currentPlayer][handPos];
        -:  326:}
        -:  327:
        -:  328:int supplyCount(int card, struct gameState *state) {
       32:  329:  return state->supplyCount[card];
        -:  330:}
        -:  331:
        -:  332:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  333:  int i;
    #####:  334:  int count = 0;
        -:  335:
    #####:  336:  for (i = 0; i < state->deckCount[player]; i++)
        -:  337:    {
    #####:  338:      if (state->deck[player][i] == card) count++;
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->handCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->hand[player][i] == card) count++;
    #####:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->discardCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->discard[player][i] == card) count++;
    #####:  349:    }
        -:  350:
    #####:  351:  return count;
        -:  352:}
        -:  353:
        -:  354:int whoseTurn(struct gameState *state) {
     1476:  355:  return state->whoseTurn;
        -:  356:}
        -:  357:
        -:  358:int endTurn(struct gameState *state) {
        -:  359:  int k;
        -:  360:  int i;
    #####:  361:  int currentPlayer = whoseTurn(state);
        -:  362:  
        -:  363:  //Discard hand
    #####:  364:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  365:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  366:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  367:  }
    #####:  368:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  369:    
        -:  370:  //Code for determining the player
    #####:  371:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  372:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  373:  }
        -:  374:  else{
    #####:  375:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  376:  }
        -:  377:
    #####:  378:  state->outpostPlayed = 0;
    #####:  379:  state->phase = 0;
    #####:  380:  state->numActions = 1;
    #####:  381:  state->coins = 0;
    #####:  382:  state->numBuys = 1;
    #####:  383:  state->playedCardCount = 0;
    #####:  384:  state->handCount[state->whoseTurn] = 0;
        -:  385:
        -:  386:  //int k; move to top
        -:  387:  //Next player draws hand
    #####:  388:  for (k = 0; k < 5; k++){
    #####:  389:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  390:  }
        -:  391:
        -:  392:  //Update money
    #####:  393:  updateCoins(state->whoseTurn, state , 0);
        -:  394:
    #####:  395:  return 0;
        -:  396:}
        -:  397:
        -:  398:int isGameOver(struct gameState *state) {
        -:  399:  int i;
        -:  400:  int j;
        -:  401:	
        -:  402:  //if stack of Province cards is empty, the game ends
    #####:  403:  if (state->supplyCount[province] == 0)
        -:  404:    {
    #####:  405:      return 1;
        -:  406:    }
        -:  407:
        -:  408:  //if three supply pile are at 0, the game ends
    #####:  409:  j = 0;
    #####:  410:  for (i = 0; i < 25; i++)
        -:  411:    {
    #####:  412:      if (state->supplyCount[i] == 0)
        -:  413:	{
    #####:  414:	  j++;
    #####:  415:	}
    #####:  416:    }
    #####:  417:  if ( j >= 3)
        -:  418:    {
    #####:  419:      return 1;
        -:  420:    }
        -:  421:
    #####:  422:  return 0;
    #####:  423:}
        -:  424:
        -:  425:int scoreFor (int player, struct gameState *state) {
        -:  426:
        -:  427:  int i;
    #####:  428:  int score = 0;
        -:  429:  //score from hand
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  433:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  435:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  436:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  437:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  438:    }
        -:  439:
        -:  440:  //score from discard
    #####:  441:  for (i = 0; i < state->discardCount[player]; i++)
        -:  442:    {
    #####:  443:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  444:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  446:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  447:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  448:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  449:    }
        -:  450:
        -:  451:  //score from deck
    #####:  452:  for (i = 0; i < state->discardCount[player]; i++)
        -:  453:    {
    #####:  454:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  455:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  457:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  458:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  459:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  460:    }
        -:  461:
    #####:  462:  return score;
        -:  463:}
        -:  464:
        -:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;	
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
        -:  476:	{
    #####:  477:	  players[i] = -9999;
    #####:  478:	}
        -:  479:      else
        -:  480:	{
    #####:  481:	  players[i] = scoreFor (i, state);
        -:  482:	}
    #####:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
        -:  490:	{
    #####:  491:	  j = i;
    #####:  492:	}
    #####:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
        -:  501:	{
    #####:  502:	  players[i]++;
    #####:  503:	}
    #####:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
        -:  511:	{
    #####:  512:	  j = i;
    #####:  513:	}
    #####:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
        -:  521:	{
    #####:  522:	  players[i] = 1;
    #####:  523:	}
        -:  524:      else
        -:  525:	{
    #####:  526:	  players[i] = 0;
        -:  527:	}
    #####:  528:    }
        -:  529:
    #####:  530:  return 0;
        -:  531:}
        -:  532:
        -:  533:int drawCard(int player, struct gameState *state)
        -:  534:{	int count;
        -:  535:  int deckCounter;
    42868:  536:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  537:    
        -:  538:    //Step 1 Shuffle the discard pile back into a deck
        -:  539:    int i;
        -:  540:    //Move discard to deck
   141066:  541:    for (i = 0; i < state->discardCount[player];i++){
    70242:  542:      state->deck[player][i] = state->discard[player][i];
    70242:  543:      state->discard[player][i] = -1;
    70242:  544:    }
        -:  545:
      291:  546:    state->deckCount[player] = state->discardCount[player];
      291:  547:    state->discardCount[player] = 0;//Reset discard
        -:  548:
        -:  549:    //Shufffle the deck
      291:  550:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  551:   
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  554:    }
        -:  555:    
      291:  556:    state->discardCount[player] = 0;
        -:  557:
        -:  558:    //Step 2 Draw Card
      291:  559:    count = state->handCount[player];//Get current player's hand count
        -:  560:    
        -:  561:    if (DEBUG){//Debug statements
        -:  562:      printf("Current hand count: %d\n", count);
        -:  563:    }
        -:  564:    
      291:  565:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  566:
      291:  567:    if (deckCounter == 0)
       13:  568:      return -1;
        -:  569:
      278:  570:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      278:  571:    state->deckCount[player]--;
      278:  572:    state->handCount[player]++;//Increment hand count
      278:  573:  }
        -:  574:
        -:  575:  else{
    42577:  576:    int count = state->handCount[player];//Get current hand count for player
        -:  577:    int deckCounter;
        -:  578:    if (DEBUG){//Debug statements
        -:  579:      printf("Current hand count: %d\n", count);
        -:  580:    }
        -:  581:
    42577:  582:    deckCounter = state->deckCount[player];//Create holder for the deck count
    42577:  583:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    42577:  584:    state->deckCount[player]--;
    42577:  585:    state->handCount[player]++;//Increment hand count
        -:  586:  }
        -:  587:
    42855:  588:  return 0;
    42868:  589:}
        -:  590:
        -:  591:int getCost(int cardNumber)
        -:  592:{
       16:  593:  switch( cardNumber ) 
        -:  594:    {
        -:  595:    case curse:
       16:  596:      return 0;
        -:  597:    case estate:
    #####:  598:      return 2;
        -:  599:    case duchy:
    #####:  600:      return 5;
        -:  601:    case province:
    #####:  602:      return 8;
        -:  603:    case copper:
    #####:  604:      return 0;
        -:  605:    case silver:
    #####:  606:      return 3;
        -:  607:    case gold:
    #####:  608:      return 6;
        -:  609:    case adventurer:
    #####:  610:      return 6;
        -:  611:    case council_room:
    #####:  612:      return 5;
        -:  613:    case feast:
    #####:  614:      return 4;
        -:  615:    case gardens:
    #####:  616:      return 4;
        -:  617:    case mine:
    #####:  618:      return 5;
        -:  619:    case remodel:
    #####:  620:      return 4;
        -:  621:    case smithy:
    #####:  622:      return 4;
        -:  623:    case village:
    #####:  624:      return 3;
        -:  625:    case baron:
    #####:  626:      return 4;
        -:  627:    case great_hall:
    #####:  628:      return 3;
        -:  629:    case minion:
    #####:  630:      return 5;
        -:  631:    case steward:
    #####:  632:      return 3;
        -:  633:    case tribute:
    #####:  634:      return 5;
        -:  635:    case ambassador:
    #####:  636:      return 3;
        -:  637:    case cutpurse:
    #####:  638:      return 4;
        -:  639:    case embargo: 
    #####:  640:      return 2;
        -:  641:    case outpost:
    #####:  642:      return 5;
        -:  643:    case salvager:
    #####:  644:      return 4;
        -:  645:    case sea_hag:
    #####:  646:      return 4;
        -:  647:    case treasure_map:
    #####:  648:      return 4;
        -:  649:    }
        -:  650:	
    #####:  651:  return -1;
       16:  652:}
        -:  653:
        -:  654:int cardEffect(int card, int choice1, int choice2, int choice3, 
        -:  655:      struct gameState *state, int handPos, int *bonus){
        -:  656:   int i;
        -:  657:   int j;
        -:  658:   int k;
        -:  659:   int index;
     1476:  660:   int currentPlayer = whoseTurn(state);
     1476:  661:   int nextPlayer = currentPlayer + 1;
        -:  662:   
     1476:  663:   int tributeRevealedCards[2] = {-1, -1};
     1476:  664:   if (nextPlayer > (state->numPlayers - 1)){
      488:  665:      nextPlayer = 0;
      488:  666:   }
        -:  667:   
        -:  668:
        -:  669:
        -:  670:   //uses switch to select card and perform actions
     1524:  671:   switch( card ) {
        -:  672:		case adventurer:
       16:  673:			adventurerCard(currentPlayer, state, handPos);
        -:  674:		case council_room:
       16:  675:	 		council_roomCard(currentPlayer, state, handPos);
        -:  676:    	case feast:
       16:  677:	 		feastCard(currentPlayer, choice1, state, handPos);
        -:  678:    	case gardens:
       16:  679:      	return -1;
        -:  680:    	case mine:
    #####:  681:	 		mineCard(currentPlayer, choice1, choice2, state, handPos);
        -:  682://REMODEL			
        -:  683:    case remodel:
    #####:  684:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  685:
    #####:  686:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  687:	{
    #####:  688:	  return -1;
        -:  689:	}
        -:  690:
    #####:  691:      gainCard(choice2, state, 0, currentPlayer);
        -:  692:
        -:  693:      //discard card from hand
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
        -:  695:
        -:  696:      //discard trashed card
    #####:  697:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  698:	{
    #####:  699:	  if (state->hand[currentPlayer][i] == j)
        -:  700:	    {
    #####:  701:	      discardCard(i, currentPlayer, state, 0);			
    #####:  702:	      break;
        -:  703:	    }
    #####:  704:	}
        -:  705:
        -:  706:
    #####:  707:      return 0;
        -:  708://SMITHY
        -:  709:    case smithy:
    #####:  710:	 	return smithyCard(currentPlayer, state, handPos);
        -:  711://VILLAGE    
        -:  712:	 case village:
        -:  713:      //+1 Card
     1460:  714:      drawCard(currentPlayer, state);
        -:  715:			
        -:  716:      //+2 Actions
     1460:  717:      state->numActions = state->numActions + 2;
        -:  718:			
        -:  719:      //discard played card from hand
     1460:  720:      discardCard(handPos, currentPlayer, state, 0);
     1460:  721:      return 0;
        -:  722://BARON		
        -:  723:    case baron:
    #####:  724:      state->numBuys++;//Increase buys by 1!
    #####:  725:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  726:	int p = 0;//Iterator for hand!
    #####:  727:	int card_not_discarded = 1;//Flag for discard set!
    #####:  728:	while(card_not_discarded){
    #####:  729:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  730:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  731:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  732:	    state->discardCount[currentPlayer]++;
    #####:  733:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  734:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  735:	    }
    #####:  736:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  737:	    state->handCount[currentPlayer]--;
    #####:  738:	    card_not_discarded = 0;//Exit the loop
    #####:  739:	  }
    #####:  740:	  else if (p > state->handCount[currentPlayer]){
        -:  741:	    if(DEBUG) {
        -:  742:	      printf("No estate cards in your hand, invalid choice\n");
        -:  743:	      printf("Must gain an estate if there are any\n");
        -:  744:	    }
    #####:  745:	    if (supplyCount(estate, state) > 0){
    #####:  746:	      gainCard(estate, state, 0, currentPlayer);
    #####:  747:	      state->supplyCount[estate]--;//Decrement estates
    #####:  748:	      if (supplyCount(estate, state) == 0){
    #####:  749:		isGameOver(state);
    #####:  750:	      }
    #####:  751:	    }
    #####:  752:	    card_not_discarded = 0;//Exit the loop
    #####:  753:	  }
        -:  754:			    
        -:  755:	  else{
    #####:  756:	    p++;//Next card
        -:  757:	  }
        -:  758:	}
    #####:  759:      }
        -:  760:			    
        -:  761:      else{
    #####:  762:	if (supplyCount(estate, state) > 0){
    #####:  763:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  764:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  765:	  if (supplyCount(estate, state) == 0){
    #####:  766:	    isGameOver(state);
    #####:  767:	  }
    #####:  768:	}
        -:  769:      }
        -:  770:	    
        -:  771:      
    #####:  772:      return 0;
        -:  773://GREAT HALL		
        -:  774:    case great_hall:
        -:  775:      //+1 Card
    #####:  776:      drawCard(currentPlayer, state);
        -:  777:			
        -:  778:      //+1 Actions
    #####:  779:      state->numActions++;
        -:  780:			
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
    #####:  783:      return 0;
        -:  784://MINION
        -:  785:    case minion:
        -:  786:      //+1 action
    #####:  787:      state->numActions++;
        -:  788:			
        -:  789:      //discard card from hand
    #####:  790:      discardCard(handPos, currentPlayer, state, 0);
        -:  791:			
    #####:  792:      if (choice1)		//+2 coins
        -:  793:	{
    #####:  794:	  state->coins = state->coins + 2;
    #####:  795:	}
        -:  796:			
    #####:  797:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  798:	{
        -:  799:	  //discard hand
    #####:  800:	  while(numHandCards(state) > 0)
        -:  801:	    {
    #####:  802:	      discardCard(handPos, currentPlayer, state, 0);
        -:  803:	    }
        -:  804:				
        -:  805:	  //draw 4
    #####:  806:	  for (i = 0; i < 4; i++)
        -:  807:	    {
    #####:  808:	      drawCard(currentPlayer, state);
    #####:  809:	    }
        -:  810:				
        -:  811:	  //other players discard hand and redraw if hand size > 4
    #####:  812:	  for (i = 0; i < state->numPlayers; i++)
        -:  813:	    {
    #####:  814:	      if (i != currentPlayer)
        -:  815:		{
    #####:  816:		  if ( state->handCount[i] > 4 )
        -:  817:		    {
        -:  818:		      //discard hand
    #####:  819:		      while( state->handCount[i] > 0 )
        -:  820:			{
    #####:  821:			  discardCard(handPos, i, state, 0);
        -:  822:			}
        -:  823:							
        -:  824:		      //draw 4
    #####:  825:		      for (j = 0; j < 4; j++)
        -:  826:			{
    #####:  827:			  drawCard(i, state);
    #####:  828:			}
    #####:  829:		    }
    #####:  830:		}
    #####:  831:	    }
        -:  832:				
    #####:  833:	}
    #####:  834:      return 0;
        -:  835://STEWARD
        -:  836:    case steward:
    #####:  837:      if (choice1 == 1)
        -:  838:	{
        -:  839:	  //+2 cards
    #####:  840:	  drawCard(currentPlayer, state);
    #####:  841:	  drawCard(currentPlayer, state);
    #####:  842:	}
    #####:  843:      else if (choice1 == 2)
        -:  844:	{
        -:  845:	  //+2 coins
    #####:  846:	  state->coins = state->coins + 2;
    #####:  847:	}
        -:  848:      else
        -:  849:	{
        -:  850:	  //trash 2 cards in hand
    #####:  851:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  852:	  discardCard(choice3, currentPlayer, state, 1);
        -:  853:	}
        -:  854:			
        -:  855:      //discard card from hand
    #####:  856:      discardCard(handPos, currentPlayer, state, 0);
    #####:  857:      return 0;
        -:  858://TRIBUTE		
        -:  859:    case tribute:
    #####:  860:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  861:	if (state->deckCount[nextPlayer] > 0){
    #####:  862:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  863:	  state->deckCount[nextPlayer]--;
    #####:  864:	}
    #####:  865:	else if (state->discardCount[nextPlayer] > 0){
    #####:  866:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  867:	  state->discardCount[nextPlayer]--;
    #####:  868:	}
        -:  869:	else{
        -:  870:	  //No Card to Reveal
        -:  871:	  if (DEBUG){
        -:  872:	    printf("No cards to reveal\n");
        -:  873:	  }
        -:  874:	}
    #####:  875:      }
        -:  876:	    
        -:  877:      else{
    #####:  878:	if (state->deckCount[nextPlayer] == 0){
    #####:  879:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  880:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  881:	    state->deckCount[nextPlayer]++;
    #####:  882:	    state->discard[nextPlayer][i] = -1;
    #####:  883:	    state->discardCount[nextPlayer]--;
    #####:  884:	  }
        -:  885:			    
    #####:  886:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  887:	} 
    #####:  888:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  889:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  890:	state->deckCount[nextPlayer]--;
    #####:  891:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  892:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  893:	state->deckCount[nextPlayer]--;
        -:  894:      }    
        -:  895:		       
    #####:  896:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  897:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  898:	state->playedCardCount++;
    #####:  899:	tributeRevealedCards[1] = -1;
    #####:  900:      }
        -:  901:
    #####:  902:      for (i = 0; i <= 2; i ++){
    #####:  903:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  904:	  state->coins += 2;
    #####:  905:	}
        -:  906:		    
    #####:  907:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  908:	  drawCard(currentPlayer, state);
    #####:  909:	  drawCard(currentPlayer, state);
    #####:  910:	}
        -:  911:	else{//Action Card
    #####:  912:	  state->numActions = state->numActions + 2;
        -:  913:	}
    #####:  914:      }
        -:  915:	    
    #####:  916:      return 0;
        -:  917://AMBASSADOR
        -:  918:    case ambassador:
    #####:  919:      j = 0;		//used to check if player has enough cards to discard
        -:  920:
    #####:  921:      if (choice2 > 2 || choice2 < 0)
        -:  922:	{
    #####:  923:	  return -1;				
        -:  924:	}
        -:  925:
    #####:  926:      if (choice1 == handPos)
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  932:	{
    #####:  933:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  934:	    {
    #####:  935:	      j++;
    #####:  936:	    }
    #####:  937:	}
    #####:  938:      if (j < choice2)
        -:  939:	{
    #####:  940:	  return -1;				
        -:  941:	}
        -:  942:
        -:  943:      if (DEBUG) 
        -:  944:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  945:
        -:  946:      //increase supply count for choosen card by amount being discarded
    #####:  947:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  948:			
        -:  949:      //each other player gains a copy of revealed card
    #####:  950:      for (i = 0; i < state->numPlayers; i++)
        -:  951:	{
    #####:  952:	  if (i != currentPlayer)
        -:  953:	    {
    #####:  954:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  955:	    }
    #####:  956:	}
        -:  957:
        -:  958:      //discard played card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);			
        -:  960:
        -:  961:      //trash copies of cards returned to supply
    #####:  962:      for (j = 0; j < choice2; j++)
        -:  963:	{
    #####:  964:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  965:	    {
    #####:  966:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  967:		{
    #####:  968:		  discardCard(i, currentPlayer, state, 1);
    #####:  969:		  break;
        -:  970:		}
    #####:  971:	    }
    #####:  972:	}			
        -:  973:
    #####:  974:      return 0;
        -:  975://CUTPURSE
        -:  976:    case cutpurse:
        -:  977:
    #####:  978:      updateCoins(currentPlayer, state, 2);
    #####:  979:      for (i = 0; i < state->numPlayers; i++)
        -:  980:	{
    #####:  981:	  if (i != currentPlayer)
        -:  982:	    {
    #####:  983:	      for (j = 0; j < state->handCount[i]; j++)
        -:  984:		{
    #####:  985:		  if (state->hand[i][j] == copper)
        -:  986:		    {
    #####:  987:		      discardCard(j, i, state, 0);
    #####:  988:		      break;
        -:  989:		    }
    #####:  990:		  if (j == state->handCount[i])
        -:  991:		    {
    #####:  992:		      for (k = 0; k < state->handCount[i]; k++)
        -:  993:			{
        -:  994:			  if (DEBUG)
        -:  995:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####:  996:			}	
    #####:  997:		      break;
        -:  998:		    }		
    #####:  999:		}
        -: 1000:					
    #####: 1001:	    }
        -: 1002:				
    #####: 1003:	}				
        -: 1004:
        -: 1005:      //discard played card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1007:
    #####: 1008:      return 0;
        -: 1009:
        -: 1010://EMBARGO
        -: 1011:    case embargo: 
        -: 1012:      //+2 Coins
    #####: 1013:      state->coins = state->coins + 2;
        -: 1014:			
        -: 1015:      //see if selected pile is in play
    #####: 1016:      if ( state->supplyCount[choice1] == -1 )
        -: 1017:	{
    #####: 1018:	  return -1;
        -: 1019:	}
        -: 1020:			
        -: 1021:      //add embargo token to selected supply pile
    #####: 1022:      state->embargoTokens[choice1]++;
        -: 1023:			
        -: 1024:      //trash card
    #####: 1025:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1026:      return 0;
        -: 1027://OUTPOST
        -: 1028:    case outpost:
        -: 1029:      //set outpost flag
    #####: 1030:      state->outpostPlayed++;
        -: 1031:			
        -: 1032:      //discard card
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:      return 0;
        -: 1035://SALVAGER
        -: 1036:    case salvager:
        -: 1037:      //+1 buy
    #####: 1038:      state->numBuys++;
        -: 1039:			
    #####: 1040:      if (choice1)
        -: 1041:	{
        -: 1042:	  //gain coins equal to trashed card
    #####: 1043:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1044:	  //trash card
    #####: 1045:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1046:	}
        -: 1047:			
        -: 1048:      //discard card
    #####: 1049:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1050:      return 0;
        -: 1051://SEA HAG
        -: 1052:    case sea_hag:
    #####: 1053:      for (i = 0; i < state->numPlayers; i++){
    #####: 1054:	if (i != currentPlayer){
    #####: 1055:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1056:	  state->discardCount[i]++;
    #####: 1057:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1058:	}
    #####: 1059:      }
    #####: 1060:      return 0;
        -: 1061://TREASURE MAP
        -: 1062:    case treasure_map:
        -: 1063:      //search hand for another treasure_map
    #####: 1064:      index = -1;
    #####: 1065:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1066:	{
    #####: 1067:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1068:	    {
    #####: 1069:	      index = i;
    #####: 1070:	      break;
        -: 1071:	    }
    #####: 1072:	}
    #####: 1073:      if (index > -1)
        -: 1074:	{
        -: 1075:	  //trash both treasure cards
    #####: 1076:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1077:	  discardCard(index, currentPlayer, state, 1);
        -: 1078:
        -: 1079:	  //gain 4 Gold cards
    #####: 1080:	  for (i = 0; i < 4; i++)
        -: 1081:	    {
    #####: 1082:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1083:	    }
        -: 1084:				
        -: 1085:	  //return success
    #####: 1086:	  return 1;
        -: 1087:	}
        -: 1088:			
        -: 1089:      //no second treasure_map found in hand
    #####: 1090:      return -1;
        -: 1091:    }
        -: 1092:	
    #####: 1093:  return -1;
     1476: 1094:}
        -: 1095:
        -: 1096:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1097:{
        -: 1098:	
        -: 1099:  //if card is not trashed, added to Played pile 
     1476: 1100:  if (trashFlag < 1)
        -: 1101:    {
        -: 1102:      //add card to played pile
     1476: 1103:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1476: 1104:      state->playedCardCount++;
     1476: 1105:    }
        -: 1106:	
        -: 1107:  //set played card to -1
     1476: 1108:  state->hand[currentPlayer][handPos] = -1;
        -: 1109:	
        -: 1110:  //remove card from player's hand
     1476: 1111:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1112:    {
        -: 1113:      //reduce number of cards in hand
        2: 1114:      state->handCount[currentPlayer]--;
        2: 1115:    }
     1474: 1116:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1117:    {
        -: 1118:      //reduce number of cards in hand
    #####: 1119:      state->handCount[currentPlayer]--;
    #####: 1120:    }
        -: 1121:  else 	
        -: 1122:    {
        -: 1123:      //replace discarded card with last card in hand
     1474: 1124:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1125:      //set last card to -1
     1474: 1126:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1127:      //reduce number of cards in hand
     1474: 1128:      state->handCount[currentPlayer]--;
        -: 1129:    }
        -: 1130:	
     1476: 1131:  return 0;
        -: 1132:}
        -: 1133:
        -: 1134:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1135:{
        -: 1136:  //Note: supplyPos is enum of choosen card
        -: 1137:	
        -: 1138:  //check if supply pile is empty (0) or card is not used in game (-1)
       16: 1139:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1140:    {
    #####: 1141:      return -1;
        -: 1142:    }
        -: 1143:	
        -: 1144:  //added card for [whoseTurn] current player:
        -: 1145:  // toFlag = 0 : add to discard
        -: 1146:  // toFlag = 1 : add to deck
        -: 1147:  // toFlag = 2 : add to hand
        -: 1148:
       16: 1149:  if (toFlag == 1)
        -: 1150:    {
    #####: 1151:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1152:      state->deckCount[player]++;
    #####: 1153:    }
       16: 1154:  else if (toFlag == 2)
        -: 1155:    {
    #####: 1156:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1157:      state->handCount[player]++;
    #####: 1158:    }
        -: 1159:  else
        -: 1160:    {
       16: 1161:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       16: 1162:      state->discardCount[player]++;
        -: 1163:    }
        -: 1164:	
        -: 1165:  //decrease number in supply pile
       16: 1166:  state->supplyCount[supplyPos]--;
        -: 1167:	 
       16: 1168:  return 0;
       16: 1169:}
        -: 1170:
        -: 1171:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1172:{
        -: 1173:  int i;
        -: 1174:	
        -: 1175:  //reset coin count
     8036: 1176:  state->coins = 0;
        -: 1177:
        -: 1178:  //add coins for each Treasure card in player's hand
    99008: 1179:  for (i = 0; i < state->handCount[player]; i++)
        -: 1180:    {
    41468: 1181:      if (state->hand[player][i] == copper)
        -: 1182:	{
    28083: 1183:	  state->coins += 1;
    28083: 1184:	}
    13385: 1185:      else if (state->hand[player][i] == silver)
        -: 1186:	{
    #####: 1187:	  state->coins += 2;
    #####: 1188:	}
    13385: 1189:      else if (state->hand[player][i] == gold)
        -: 1190:	{
    #####: 1191:	  state->coins += 3;
    #####: 1192:	}	
    41468: 1193:    }	
        -: 1194:
        -: 1195:  //add bonus
     8036: 1196:  state->coins += bonus;
        -: 1197:
     8036: 1198:  return 0;
        -: 1199:}
        -: 1200:
        -: 1201:int adventurerCard(int currentPlayer, struct gameState *state, int handPos) {
       16: 1202:	int z = 0;
       16: 1203:	int drawnTreasure = 0;
        -: 1204:	int cardDrawn;
        -: 1205:	int temphand[MAX_HAND];
        -: 1206:
     2462: 1207:	while (drawnTreasure < 2){
        -: 1208:		//If deck is empty, shuffle discard and add to deck
     1215: 1209:		if (state->deckCount[currentPlayer] < 1) {
    #####: 1210:			shuffle(currentPlayer,state);
    #####: 1211:		}
        -: 1212:
     1215: 1213:		drawCard(currentPlayer, state);
        -: 1214:		//Most recently drawn card is top card of hand
     1215: 1215:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
        -: 1216:
     3581: 1217:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
       32: 1218:			drawnTreasure++;
       32: 1219:		}
        -: 1220:		else {
     1183: 1221:			temphand[z] = cardDrawn;
        -: 1222:			//Remove most recently drawn card(top card)
     1183: 1223:			state->handCount[currentPlayer]--;
     1183: 1224:			z++;
        -: 1225:		}
        -: 1226:	}
        -: 1227:
     2398: 1228:	while (z - 1 >= 0) {
        -: 1229:		//Discard all cards in play that have been drawn
     1183: 1230:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
     1183: 1231:		z= z-1;
        -: 1232:	}
       16: 1233:	return 0;
        -: 1234:}
        -: 1235:
        -: 1236:int council_roomCard(int currentPlayer, struct gameState* state, int handPos) {
        -: 1237:	int i;
        -: 1238:	
        -: 1239:	//Draw 4 cards
      160: 1240:	for (i = 0; i < 4; i++){
       64: 1241:			drawCard(currentPlayer, state);
       64: 1242:	}
        -: 1243:
        -: 1244:	//+1 Buy
       16: 1245:	state->numBuys++;
        -: 1246:
        -: 1247:	//All other players draw 1 card
      122: 1248:	for (i = 0; i < state->numPlayers; i++) {
       45: 1249:			if (i != currentPlayer) {
       29: 1250:					drawCard(i, state);
       29: 1251:				}
       45: 1252:	}
        -: 1253:
        -: 1254:	//Put played card in discard
       16: 1255:	discardCard(handPos, currentPlayer, state, 0);
        -: 1256:
       16: 1257:	return 0;
        -: 1258:}
        -: 1259:
        -: 1260:int feastCard(int currentPlayer, int choice1, struct gameState* state, int handPos){
        -: 1261:	//Gain a card up to 5 cost
        -: 1262:	//Backup hand
        -: 1263:	int i;
        -: 1264:	int x;
        -: 1265:	int temphand[MAX_HAND];
        -: 1266:
     2800: 1267:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1268:		//Backup card
     1384: 1269:		temphand[i] = state->hand[currentPlayer][i];
        -: 1270:		//Set to nothing
     1384: 1271:		state->hand[currentPlayer][i] = -1;
     1384: 1272:	}
        -: 1273:
        -: 1274:	//Backup hand
        -: 1275:	//Update coins for buy
       16: 1276:	updateCoins(currentPlayer, state, 5);
        -: 1277:	//Condition to loop on
       16: 1278:	x = 1;
        -: 1279:	//Buy 1 card
       64: 1280:	while(x == 1) {
       16: 1281:		if (supplyCount(choice1, state) <= 0){
        -: 1282:			if (DEBUG){
        -: 1283:				printf("No cards remaining!\n");
        -: 1284:			}
        -: 1285:			if(DEBUG){
        -: 1286:				printf("Cards remaining: %d\n", supplyCount(choice1,state));
        -: 1287:			}
    #####: 1288:		}
        -: 1289:
       16: 1290:		else if (state->coins < getCost (choice1)) {
    #####: 1291:			printf ("Not enough coins to purchase card!\n");
        -: 1292:			
        -: 1293:			if (DEBUG){
        -: 1294:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1295:			}
    #####: 1296:		}
        -: 1297:
        -: 1298:		else{
        -: 1299:			if (DEBUG) {
        -: 1300:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -: 1301:					state->discardCount[currentPlayer]);
        -: 1302:			}
        -: 1303:
        -: 1304:			//Gain the card
       16: 1305:			gainCard(choice1, state, 0, currentPlayer);
        -: 1306:			//No buys remaining
       16: 1307:			x=0;
        -: 1308:
        -: 1309:			if (DEBUG) {
        -: 1310:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -: 1311:					state->discardCount[currentPlayer]);
        -: 1312:			}
        -: 1313:		}
        -: 1314:	}
        -: 1315:
        -: 1316:	//Reset hand
     2800: 1317:	for (i = 0; i <= state->handCount[currentPlayer]; i++) {
     1384: 1318:		state->hand[currentPlayer][i] = temphand[i];
     1384: 1319:		temphand[i] = -1;
     1384: 1320:	}
        -: 1321:
       16: 1322:	return 0;
        -: 1323:}
        -: 1324:
        -: 1325:int mineCard(int currentPlayer, int choice1, int choice2,  struct gameState* state, int handPos) {
        -: 1326:	int i,j;
        -: 1327:	//Store card we will trash
    #####: 1328:	j = state->hand[currentPlayer][choice1];
        -: 1329:	    
    #####: 1330:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####: 1331:		return -1;
        -: 1332:	}
    #####: 1333:	if (choice2 > treasure_map || choice2 < curse) {
    #####: 1334:		return -1;
        -: 1335:	}
    #####: 1336:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
    #####: 1337:		return -1;
        -: 1338:	}
        -: 1339:
    #####: 1340:	gainCard(choice2, state, 2, currentPlayer);
        -: 1341:	//Discard card from hand
    #####: 1342:	discardCard(handPos, currentPlayer, state, 0);
        -: 1343:	//Discard trashed card
    #####: 1344:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1345:		if (state->hand[currentPlayer][i] == j) {
    #####: 1346:			discardCard(i, currentPlayer, state, 0);
    #####: 1347:			break;
        -: 1348:		}
    #####: 1349:	}
    #####: 1350:}
        -: 1351:
        -: 1352:int smithyCard(int currentPlayer, struct gameState* state, int handPos) {
        -: 1353:	int i;
        -: 1354:
        -: 1355:	//get 3 cards
    #####: 1356:	for ( i = 0; i < 3; i++){
    #####: 1357:		drawCard(currentPlayer, state);
    #####: 1358:	}
        -: 1359:	
        -: 1360:	//Discard entire hand
    #####: 1361:	discardCard(handPos, currentPlayer, state, 0);
    #####: 1362:	return 0;
        -: 1363:}
        -: 1364://end of dominion.c
        -: 1365:
