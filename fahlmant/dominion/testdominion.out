File 'dominion.c'
Lines executed:41.46% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    94068:    8:int compare(const void* a, const void* b) {
    94068:    9:  if (*(int*)a > *(int*)b)
     1041:   10:    return 1;
    93027:   11:  if (*(int*)a < *(int*)b)
    24366:   12:    return -1;
    68661:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
     2000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     2000:   77:  else if (numPlayers == 3)
        -:   78:    {
     2000:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     2000:   95:      state->supplyCount[estate] = 12;
     2000:   96:      state->supplyCount[duchy] = 12;
     2000:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8000:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     4000:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    16000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     8000:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     6000:  140:      state->deckCount[i] = 0;
    24000:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    18000:  143:	  state->deck[i][j] = estate;
    18000:  144:	  state->deckCount[i]++;
        -:  145:	}
    48000:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    42000:  148:	  state->deck[i][j] = copper;
    42000:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     8000:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     6000:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     8000:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     6000:  166:      state->handCount[i] = 0;
     6000:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
    10000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
     6153:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     6153:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     6153:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     6153:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    74070:  214:  while (state->deckCount[player] > 0) {
    61764:  215:    card = floor(Random() * state->deckCount[player]);
    61764:  216:    newDeck[newDeckPos] = state->deck[player][card];
    61764:  217:    newDeckPos++;
   193179:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   131415:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    61764:  221:    state->deckCount[player]--;
        -:  222:  }
    67917:  223:  for (i = 0; i < newDeckPos; i++) {
    61764:  224:    state->deck[player][i] = newDeck[i];
    61764:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     6153:  228:  return 0;
        -:  229:}
        -:  230:
      337:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      337:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      337:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      337:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      337:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      337:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
      299:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       38:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       38:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       38:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       38:  269:  return 0;
        -:  270:}
        -:  271:
      337:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      337:  280:  who = state->whoseTurn;
        -:  281:
      337:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      337:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       45:  289:    return -1;
      292:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      256:  293:    return -1;
        -:  294:  } else {
       36:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       36:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       36:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       36:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       36:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      337:  315:int handCard(int handPos, struct gameState *state) {
      337:  316:  int currentPlayer = whoseTurn(state);
      337:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      373:  320:int supplyCount(int card, struct gameState *state) {
      373:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      712:  346:int whoseTurn(struct gameState *state) {
      712:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      337:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      337:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     2010:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     1673:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     1673:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      337:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      337:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      225:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
      112:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      337:  370:  state->outpostPlayed = 0;
      337:  371:  state->phase = 0;
      337:  372:  state->numActions = 1;
      337:  373:  state->coins = 0;
      337:  374:  state->numBuys = 1;
      337:  375:  state->playedCardCount = 0;
      337:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     2022:  380:  for (k = 0; k < 5; k++){
     1685:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      337:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      337:  387:  return 0;
        -:  388:}
        -:  389:
      337:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      337:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      337:  401:  j = 0;
     8762:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     8425:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      356:  406:	  j++;
        -:  407:	}
        -:  408:    }
      337:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
      336:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    11704:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    11704:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1917:  533:    for (i = 0; i < state->discardCount[player];i++){
     1764:  534:      state->deck[player][i] = state->discard[player][i];
     1764:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      153:  538:    state->deckCount[player] = state->discardCount[player];
      153:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      153:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      153:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      153:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      153:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      153:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
      153:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      153:  563:    state->deckCount[player]--;
      153:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    11551:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    11551:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    11551:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    11551:  576:    state->deckCount[player]--;
    11551:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    11704:  580:  return 0;
        -:  581:}
        -:  582:
      328:  583:int getCost(int cardNumber)
        -:  584:{
      328:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       24:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
       34:  608:      return 4;
        -:  609:    case mine:
       35:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
       32:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
       48:  620:      return 3;
        -:  621:    case minion:
       22:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
       32:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
       34:  630:      return 4;
        -:  631:    case embargo: 
       23:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
       44:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int councilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  647:
    #####:  648:    int i = 0;
    #####:  649:    for(; i < 4; i++)
        -:  650:    {
    #####:  651:        drawCard(currentPlayer, state);
        -:  652:    }
        -:  653:
    #####:  654:    state->numBuys++;
        -:  655:
    #####:  656:    for(i = 0; i < state->numPlayers; i++)
        -:  657:    {
    #####:  658:        if(i != currentPlayer)
        -:  659:        {
    #####:  660:            drawCard(i, state);
        -:  661:        }
        -:  662:    }
        -:  663:
    #####:  664:    discardCard(handPos, currentPlayer, state, 0);
        -:  665:
    #####:  666:    return 0;
        -:  667:}
        -:  668:
        -:  669:
    #####:  670:int smithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  671:
    #####:  672:    int i = 0;
    #####:  673:    for(; i <= 3; i++)
        -:  674:    {
    #####:  675:        drawCard(currentPlayer, state);
        -:  676:    }
        -:  677:
    #####:  678:    discardCard(handPos, currentPlayer, state, 0);
        -:  679:
    #####:  680:    return 0;
        -:  681:}
        -:  682:
       10:  683:int villageCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  684:
       10:  685:    drawCard(currentPlayer, state);
       10:  686:    state->numActions = state->numActions + 3;
       10:  687:    discardCard(handPos, currentPlayer, state, 0);
        -:  688:
       10:  689:    return 0;
        -:  690:}
        -:  691:
        9:  692:int great_hallCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:
        9:  694:    drawCard(currentPlayer, state);
        9:  695:    state->numActions++;
        9:  696:    discardCard(handPos, currentPlayer, state, 0);
        -:  697:
        9:  698:    return 0;
        -:  699:}
        -:  700:
        -:  701:
       38:  702:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  703:{
        -:  704:  int i;
        -:  705:  int j;
        -:  706:  int k;
        -:  707:  int x;
        -:  708:  int index;
       38:  709:  int currentPlayer = whoseTurn(state);
       38:  710:  int nextPlayer = currentPlayer + 1;
        -:  711:
       38:  712:  int tributeRevealedCards[2] = {-1, -1};
        -:  713:  int temphand[MAX_HAND];// moved above the if statement
       38:  714:  int drawntreasure=0;
        -:  715:  int cardDrawn;
       38:  716:  int z = 0;// this is the counter for the temp hand
       38:  717:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  718:    nextPlayer = 0;
        -:  719:  }
        -:  720:  
        -:  721:	
        -:  722:  //uses switch to select card and perform actions
       38:  723:  switch( card ) 
        -:  724:    {
        -:  725:    case adventurer:
    #####:  726:      while(drawntreasure<2){
    #####:  727:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  728:	  shuffle(currentPlayer, state);
        -:  729:	}
    #####:  730:	drawCard(currentPlayer, state);
    #####:  731:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  732:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  733:	  drawntreasure++;
        -:  734:	else{
    #####:  735:	  temphand[z]=cardDrawn;
    #####:  736:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  737:	  z++;
        -:  738:	}
        -:  739:      }
    #####:  740:      while(z-1>=0){
    #####:  741:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  742:	z=z-1;
        -:  743:      }
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case council_room:
    #####:  747:        councilRoom(currentPlayer, state, handPos);
    #####:  748:        return 0;
        -:  749:
        -:  750:    case feast:
        -:  751:      //gain card with cost up to 5
        -:  752:      //Backup hand
    #####:  753:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  754:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  755:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  756:      }
        -:  757:      //Backup hand
        -:  758:
        -:  759:      //Update Coins for Buy
    #####:  760:      updateCoins(currentPlayer, state, 5);
    #####:  761:      x = 1;//Condition to loop on
    #####:  762:      while( x == 1) {//Buy one card
    #####:  763:	if (supplyCount(choice1, state) <= 0){
        -:  764:	  if (DEBUG)
        -:  765:	    printf("None of that card left, sorry!\n");
        -:  766:
        -:  767:	  if (DEBUG){
        -:  768:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  769:	  }
        -:  770:	}
    #####:  771:	else if (state->coins < getCost(choice1)){
    #####:  772:	  printf("That card is too expensive!\n");
        -:  773:
        -:  774:	  if (DEBUG){
        -:  775:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  776:	  }
        -:  777:	}
        -:  778:	else{
        -:  779:
        -:  780:	  if (DEBUG){
        -:  781:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  782:	  }
        -:  783:
    #####:  784:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  785:	  x = 0;//No more buying cards
        -:  786:
        -:  787:	  if (DEBUG){
        -:  788:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  789:	  }
        -:  790:
        -:  791:	}
        -:  792:      }     
        -:  793:
        -:  794:      //Reset Hand
    #####:  795:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  796:	state->hand[currentPlayer][i] = temphand[i];
    #####:  797:	temphand[i] = -1;
        -:  798:      }
        -:  799:      //Reset Hand
        -:  800:      			
    #####:  801:      return 0;
        -:  802:			
        -:  803:    case gardens:
    #####:  804:      return -1;
        -:  805:			
        -:  806:    case mine:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:		
    #####:  814:      if (choice2 > treasure_map || choice2 < curse)
        -:  815:	{
    #####:  816:	  return -1;
        -:  817:	}
        -:  818:
    #####:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  820:	{
    #####:  821:	  return -1;
        -:  822:	}
        -:  823:
    #####:  824:      gainCard(choice2, state, 2, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
    #####:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
    #####:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
    #####:  834:	      discardCard(i, currentPlayer, state, 0);			
    #####:  835:	      break;
        -:  836:	    }
        -:  837:	}
        -:  838:			
    #####:  839:      return 0;
        -:  840:			
        -:  841:    case remodel:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 0, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
        -:  864:
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case smithy:
    #####:  868:        smithyCard(currentPlayer, state, handPos);
        -:  869:
    #####:  870:        return 0;
        -:  871:		
        -:  872:    case village:
       10:  873:        villageCard(currentPlayer, state, handPos);
        -:  874:
       10:  875:        return 0;
        -:  876:		
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
    #####:  903:		isGameOver(state);
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
    #####:  920:	    isGameOver(state);
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case great_hall:
        9:  929:        great_hallCard(currentPlayer, state, handPos);
        -:  930:      
        9:  931:        return 0;
        -:  932:		
        -:  933:    case minion:
        -:  934:      //+1 action
    #####:  935:      state->numActions++;
        -:  936:			
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:			
    #####:  940:      if (choice1)		//+2 coins
        -:  941:	{
    #####:  942:	  state->coins = state->coins + 2;
        -:  943:	}
        -:  944:			
    #####:  945:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  946:	{
        -:  947:	  //discard hand
    #####:  948:	  while(numHandCards(state) > 0)
        -:  949:	    {
    #####:  950:	      discardCard(handPos, currentPlayer, state, 0);
        -:  951:	    }
        -:  952:				
        -:  953:	  //draw 4
    #####:  954:	  for (i = 0; i < 4; i++)
        -:  955:	    {
    #####:  956:	      drawCard(currentPlayer, state);
        -:  957:	    }
        -:  958:				
        -:  959:	  //other players discard hand and redraw if hand size > 4
    #####:  960:	  for (i = 0; i < state->numPlayers; i++)
        -:  961:	    {
    #####:  962:	      if (i != currentPlayer)
        -:  963:		{
    #####:  964:		  if ( state->handCount[i] > 4 )
        -:  965:		    {
        -:  966:		      //discard hand
    #####:  967:		      while( state->handCount[i] > 0 )
        -:  968:			{
    #####:  969:			  discardCard(handPos, i, state, 0);
        -:  970:			}
        -:  971:							
        -:  972:		      //draw 4
    #####:  973:		      for (j = 0; j < 4; j++)
        -:  974:			{
    #####:  975:			  drawCard(i, state);
        -:  976:			}
        -:  977:		    }
        -:  978:		}
        -:  979:	    }
        -:  980:				
        -:  981:	}
    #####:  982:      return 0;
        -:  983:		
        -:  984:    case steward:
    #####:  985:      if (choice1 == 1)
        -:  986:	{
        -:  987:	  //+2 cards
    #####:  988:	  drawCard(currentPlayer, state);
    #####:  989:	  drawCard(currentPlayer, state);
        -:  990:	}
    #####:  991:      else if (choice1 == 2)
        -:  992:	{
        -:  993:	  //+2 coins
    #####:  994:	  state->coins = state->coins + 2;
        -:  995:	}
        -:  996:      else
        -:  997:	{
        -:  998:	  //trash 2 cards in hand
    #####:  999:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1000:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1001:	}
        -: 1002:			
        -: 1003:      //discard card from hand
    #####: 1004:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case tribute:
    #####: 1008:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1009:	if (state->deckCount[nextPlayer] > 0){
    #####: 1010:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1011:	  state->deckCount[nextPlayer]--;
        -: 1012:	}
    #####: 1013:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1014:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1015:	  state->discardCount[nextPlayer]--;
        -: 1016:	}
        -: 1017:	else{
        -: 1018:	  //No Card to Reveal
        -: 1019:	  if (DEBUG){
        -: 1020:	    printf("No cards to reveal\n");
        -: 1021:	  }
        -: 1022:	}
        -: 1023:      }
        -: 1024:	    
        -: 1025:      else{
    #####: 1026:	if (state->deckCount[nextPlayer] == 0){
    #####: 1027:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1028:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1029:	    state->deckCount[nextPlayer]++;
    #####: 1030:	    state->discard[nextPlayer][i] = -1;
    #####: 1031:	    state->discardCount[nextPlayer]--;
        -: 1032:	  }
        -: 1033:			    
    #####: 1034:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1035:	} 
    #####: 1036:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:	state->deckCount[nextPlayer]--;
    #####: 1039:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1041:	state->deckCount[nextPlayer]--;
        -: 1042:      }    
        -: 1043:		       
    #####: 1044:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1045:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1046:	state->playedCardCount++;
    #####: 1047:	tributeRevealedCards[1] = -1;
        -: 1048:      }
        -: 1049:
    #####: 1050:      for (i = 0; i <= 2; i ++){
    #####: 1051:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1052:	  state->coins += 2;
        -: 1053:	}
        -: 1054:		    
    #####: 1055:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1056:	  drawCard(currentPlayer, state);
    #####: 1057:	  drawCard(currentPlayer, state);
        -: 1058:	}
        -: 1059:	else{//Action Card
    #####: 1060:	  state->numActions = state->numActions + 2;
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case ambassador:
    #####: 1067:      j = 0;		//used to check if player has enough cards to discard
        -: 1068:
    #####: 1069:      if (choice2 > 2 || choice2 < 0)
        -: 1070:	{
    #####: 1071:	  return -1;				
        -: 1072:	}
        -: 1073:
    #####: 1074:      if (choice1 == handPos)
        -: 1075:	{
    #####: 1076:	  return -1;
        -: 1077:	}
        -: 1078:
    #####: 1079:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	{
    #####: 1081:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1082:	    {
    #####: 1083:	      j++;
        -: 1084:	    }
        -: 1085:	}
    #####: 1086:      if (j < choice2)
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
        -: 1091:      if (DEBUG) 
        -: 1092:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1093:
        -: 1094:      //increase supply count for choosen card by amount being discarded
    #####: 1095:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1096:			
        -: 1097:      //each other player gains a copy of revealed card
    #####: 1098:      for (i = 0; i < state->numPlayers; i++)
        -: 1099:	{
    #####: 1100:	  if (i != currentPlayer)
        -: 1101:	    {
    #####: 1102:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
        -: 1106:      //discard played card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1108:
        -: 1109:      //trash copies of cards returned to supply
    #####: 1110:      for (j = 0; j < choice2; j++)
        -: 1111:	{
    #####: 1112:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	    {
    #####: 1114:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1115:		{
    #####: 1116:		  discardCard(i, currentPlayer, state, 1);
    #####: 1117:		  break;
        -: 1118:		}
        -: 1119:	    }
        -: 1120:	}			
        -: 1121:
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case cutpurse:
        -: 1125:
        1: 1126:      updateCoins(currentPlayer, state, 2);
        4: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
        3: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
        2: 1131:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1132:		{
    #####: 1133:		  if (state->hand[i][j] == copper)
        -: 1134:		    {
    #####: 1135:		      discardCard(j, i, state, 0);
    #####: 1136:		      break;
        -: 1137:		    }
    #####: 1138:		  if (j == state->handCount[i])
        -: 1139:		    {
    #####: 1140:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1141:			{
        -: 1142:			  if (DEBUG)
        -: 1143:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1144:			}	
    #####: 1145:		      break;
        -: 1146:		    }		
        -: 1147:		}
        -: 1148:					
        -: 1149:	    }
        -: 1150:				
        -: 1151:	}				
        -: 1152:
        -: 1153:      //discard played card from hand
        1: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        1: 1156:      return 0;
        -: 1157:
        -: 1158:		
        -: 1159:    case embargo: 
        -: 1160:      //+2 Coins
       11: 1161:      state->coins = state->coins + 2;
        -: 1162:			
        -: 1163:      //see if selected pile is in play
       11: 1164:      if ( state->supplyCount[choice1] == -1 )
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:			
        -: 1169:      //add embargo token to selected supply pile
       11: 1170:      state->embargoTokens[choice1]++;
        -: 1171:			
        -: 1172:      //trash card
       11: 1173:      discardCard(handPos, currentPlayer, state, 1);		
       11: 1174:      return 0;
        -: 1175:		
        -: 1176:    case outpost:
        -: 1177:      //set outpost flag
    #####: 1178:      state->outpostPlayed++;
        -: 1179:			
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case salvager:
        -: 1185:      //+1 buy
    #####: 1186:      state->numBuys++;
        -: 1187:			
    #####: 1188:      if (choice1)
        -: 1189:	{
        -: 1190:	  //gain coins equal to trashed card
    #####: 1191:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1192:	  //trash card
    #####: 1193:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1194:	}
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case sea_hag:
       28: 1201:      for (i = 0; i < state->numPlayers; i++){
       21: 1202:	if (i != currentPlayer){
       14: 1203:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       14: 1204:	  state->discardCount[i]++;
       14: 1205:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1206:	}
        -: 1207:      }
        7: 1208:      return 0;
        -: 1209:		
        -: 1210:    case treasure_map:
        -: 1211:      //search hand for another treasure_map
    #####: 1212:      index = -1;
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	{
    #####: 1215:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1216:	    {
    #####: 1217:	      index = i;
    #####: 1218:	      break;
        -: 1219:	    }
        -: 1220:	}
    #####: 1221:      if (index > -1)
        -: 1222:	{
        -: 1223:	  //trash both treasure cards
    #####: 1224:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1225:	  discardCard(index, currentPlayer, state, 1);
        -: 1226:
        -: 1227:	  //gain 4 Gold cards
    #####: 1228:	  for (i = 0; i < 4; i++)
        -: 1229:	    {
    #####: 1230:	      gainCard(gold, state, 1, currentPlayer);
        -: 1231:	    }
        -: 1232:				
        -: 1233:	  //return success
    #####: 1234:	  return 1;
        -: 1235:	}
        -: 1236:			
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:    }
        -: 1240:	
    #####: 1241:  return -1;
        -: 1242:}
        -: 1243:
       31: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:	
        -: 1247:  //if card is not trashed, added to Played pile 
       31: 1248:  if (trashFlag < 1)
        -: 1249:    {
        -: 1250:      //add card to played pile
       20: 1251:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       20: 1252:      state->playedCardCount++;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //set played card to -1
       31: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:	
        -: 1258:  //remove card from player's hand
       31: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
    #####: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
       31: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
    #####: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:  else 	
        -: 1270:    {
        -: 1271:      //replace discarded card with last card in hand
       31: 1272:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1273:      //set last card to -1
       31: 1274:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1275:      //reduce number of cards in hand
       31: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:	
       31: 1279:  return 0;
        -: 1280:}
        -: 1281:
       36: 1282:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1283:{
        -: 1284:  //Note: supplyPos is enum of choosen card
        -: 1285:	
        -: 1286:  //check if supply pile is empty (0) or card is not used in game (-1)
       36: 1287:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1288:    {
    #####: 1289:      return -1;
        -: 1290:    }
        -: 1291:	
        -: 1292:  //added card for [whoseTurn] current player:
        -: 1293:  // toFlag = 0 : add to discard
        -: 1294:  // toFlag = 1 : add to deck
        -: 1295:  // toFlag = 2 : add to hand
        -: 1296:
       36: 1297:  if (toFlag == 1)
        -: 1298:    {
    #####: 1299:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1300:      state->deckCount[player]++;
        -: 1301:    }
       36: 1302:  else if (toFlag == 2)
        -: 1303:    {
    #####: 1304:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1305:      state->handCount[player]++;
        -: 1306:    }
        -: 1307:  else
        -: 1308:    {
       36: 1309:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       36: 1310:      state->discardCount[player]++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //decrease number in supply pile
       36: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:	 
       36: 1316:  return 0;
        -: 1317:}
        -: 1318:
     2376: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:	
        -: 1323:  //reset coin count
     2376: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
    14244: 1327:  for (i = 0; i < state->handCount[player]; i++)
        -: 1328:    {
    11868: 1329:      if (state->hand[player][i] == copper)
        -: 1330:	{
     6668: 1331:	  state->coins += 1;
        -: 1332:	}
     5200: 1333:      else if (state->hand[player][i] == silver)
        -: 1334:	{
    #####: 1335:	  state->coins += 2;
        -: 1336:	}
     5200: 1337:      else if (state->hand[player][i] == gold)
        -: 1338:	{
    #####: 1339:	  state->coins += 3;
        -: 1340:	}	
        -: 1341:    }	
        -: 1342:
        -: 1343:  //add bonus
     2376: 1344:  state->coins += bonus;
        -: 1345:
     2376: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
        -: 1351:
File 'dominion.c'
Lines executed:40.57% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    64131:    8:int compare(const void* a, const void* b) {
    64131:    9:  if (*(int*)a > *(int*)b)
      910:   10:    return 1;
    63221:   11:  if (*(int*)a < *(int*)b)
    16318:   12:    return -1;
    46903:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
     2000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
        -:   74:    {
     2000:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
        -:   88:    {
     2000:   89:      state->supplyCount[estate] = 8;
     2000:   90:      state->supplyCount[duchy] = 8;
     2000:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8000:  115:		  if (numPlayers == 2){ 
     4000:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    16000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     6000:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     4000:  140:      state->deckCount[i] = 0;
    16000:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    12000:  143:	  state->deck[i][j] = estate;
    12000:  144:	  state->deckCount[i]++;
        -:  145:	}
    32000:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    28000:  148:	  state->deck[i][j] = copper;
    28000:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     6000:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     4000:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     6000:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     4000:  166:      state->handCount[i] = 0;
     4000:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
    10000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
     4062:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     4062:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     4062:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     4062:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    49574:  214:  while (state->deckCount[player] > 0) {
    41450:  215:    card = floor(Random() * state->deckCount[player]);
    41450:  216:    newDeck[newDeckPos] = state->deck[player][card];
    41450:  217:    newDeckPos++;
   162645:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   121195:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    41450:  221:    state->deckCount[player]--;
        -:  222:  }
    45512:  223:  for (i = 0; i < newDeckPos; i++) {
    41450:  224:    state->deck[player][i] = newDeck[i];
    41450:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     4062:  228:  return 0;
        -:  229:}
        -:  230:
      283:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      283:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      283:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      283:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      283:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      283:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
      231:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       52:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       24:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       28:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       28:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       28:  269:  return 0;
        -:  270:}
        -:  271:
      283:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      283:  280:  who = state->whoseTurn;
        -:  281:
      283:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      283:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       21:  289:    return -1;
      262:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      227:  293:    return -1;
        -:  294:  } else {
       35:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       35:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       35:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       35:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       35:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      283:  315:int handCard(int handPos, struct gameState *state) {
      283:  316:  int currentPlayer = whoseTurn(state);
      283:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      318:  320:int supplyCount(int card, struct gameState *state) {
      318:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      618:  346:int whoseTurn(struct gameState *state) {
      618:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      283:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      283:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     1686:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     1403:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     1403:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      283:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      283:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      142:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
      141:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      283:  370:  state->outpostPlayed = 0;
      283:  371:  state->phase = 0;
      283:  372:  state->numActions = 1;
      283:  373:  state->coins = 0;
      283:  374:  state->numBuys = 1;
      283:  375:  state->playedCardCount = 0;
      283:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     1698:  380:  for (k = 0; k < 5; k++){
     1415:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      283:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      283:  387:  return 0;
        -:  388:}
        -:  389:
      283:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      283:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      283:  401:  j = 0;
     7358:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7075:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      231:  406:	  j++;
        -:  407:	}
        -:  408:    }
      283:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
      282:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    11431:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    11431:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1512:  533:    for (i = 0; i < state->discardCount[player];i++){
     1450:  534:      state->deck[player][i] = state->discard[player][i];
     1450:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       62:  538:    state->deckCount[player] = state->discardCount[player];
       62:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       62:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       62:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       62:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       62:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       62:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       62:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       62:  563:    state->deckCount[player]--;
       62:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    11369:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    11369:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    11369:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    11369:  576:    state->deckCount[player]--;
    11369:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    11431:  580:  return 0;
        -:  581:}
        -:  582:
      297:  583:int getCost(int cardNumber)
        -:  584:{
      297:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       27:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
       32:  608:      return 4;
        -:  609:    case mine:
       27:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
       42:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
       34:  620:      return 3;
        -:  621:    case minion:
       33:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
       27:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
       28:  630:      return 4;
        -:  631:    case embargo: 
       24:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
       23:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int councilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  647:
    #####:  648:    int i = 0;
    #####:  649:    for(; i < 4; i++)
        -:  650:    {
    #####:  651:        drawCard(currentPlayer, state);
        -:  652:    }
        -:  653:
    #####:  654:    state->numBuys++;
        -:  655:
    #####:  656:    for(i = 0; i < state->numPlayers; i++)
        -:  657:    {
    #####:  658:        if(i != currentPlayer)
        -:  659:        {
    #####:  660:            drawCard(i, state);
        -:  661:        }
        -:  662:    }
        -:  663:
    #####:  664:    discardCard(handPos, currentPlayer, state, 0);
        -:  665:
    #####:  666:    return 0;
        -:  667:}
        -:  668:
        -:  669:
    #####:  670:int smithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  671:
    #####:  672:    int i = 0;
    #####:  673:    for(; i <= 3; i++)
        -:  674:    {
    #####:  675:        drawCard(currentPlayer, state);
        -:  676:    }
        -:  677:
    #####:  678:    discardCard(handPos, currentPlayer, state, 0);
        -:  679:
    #####:  680:    return 0;
        -:  681:}
        -:  682:
        8:  683:int villageCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  684:
        8:  685:    drawCard(currentPlayer, state);
        8:  686:    state->numActions = state->numActions + 3;
        8:  687:    discardCard(handPos, currentPlayer, state, 0);
        -:  688:
        8:  689:    return 0;
        -:  690:}
        -:  691:
        8:  692:int great_hallCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:
        8:  694:    drawCard(currentPlayer, state);
        8:  695:    state->numActions++;
        8:  696:    discardCard(handPos, currentPlayer, state, 0);
        -:  697:
        8:  698:    return 0;
        -:  699:}
        -:  700:
        -:  701:
       52:  702:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  703:{
        -:  704:  int i;
        -:  705:  int j;
        -:  706:  int k;
        -:  707:  int x;
        -:  708:  int index;
       52:  709:  int currentPlayer = whoseTurn(state);
       52:  710:  int nextPlayer = currentPlayer + 1;
        -:  711:
       52:  712:  int tributeRevealedCards[2] = {-1, -1};
        -:  713:  int temphand[MAX_HAND];// moved above the if statement
       52:  714:  int drawntreasure=0;
        -:  715:  int cardDrawn;
       52:  716:  int z = 0;// this is the counter for the temp hand
       52:  717:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  718:    nextPlayer = 0;
        -:  719:  }
        -:  720:  
        -:  721:	
        -:  722:  //uses switch to select card and perform actions
       52:  723:  switch( card ) 
        -:  724:    {
        -:  725:    case adventurer:
    #####:  726:      while(drawntreasure<2){
    #####:  727:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  728:	  shuffle(currentPlayer, state);
        -:  729:	}
    #####:  730:	drawCard(currentPlayer, state);
    #####:  731:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  732:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  733:	  drawntreasure++;
        -:  734:	else{
    #####:  735:	  temphand[z]=cardDrawn;
    #####:  736:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  737:	  z++;
        -:  738:	}
        -:  739:      }
    #####:  740:      while(z-1>=0){
    #####:  741:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  742:	z=z-1;
        -:  743:      }
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case council_room:
    #####:  747:        councilRoom(currentPlayer, state, handPos);
    #####:  748:        return 0;
        -:  749:
        -:  750:    case feast:
        -:  751:      //gain card with cost up to 5
        -:  752:      //Backup hand
    #####:  753:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  754:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  755:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  756:      }
        -:  757:      //Backup hand
        -:  758:
        -:  759:      //Update Coins for Buy
    #####:  760:      updateCoins(currentPlayer, state, 5);
    #####:  761:      x = 1;//Condition to loop on
    #####:  762:      while( x == 1) {//Buy one card
    #####:  763:	if (supplyCount(choice1, state) <= 0){
        -:  764:	  if (DEBUG)
        -:  765:	    printf("None of that card left, sorry!\n");
        -:  766:
        -:  767:	  if (DEBUG){
        -:  768:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  769:	  }
        -:  770:	}
    #####:  771:	else if (state->coins < getCost(choice1)){
    #####:  772:	  printf("That card is too expensive!\n");
        -:  773:
        -:  774:	  if (DEBUG){
        -:  775:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  776:	  }
        -:  777:	}
        -:  778:	else{
        -:  779:
        -:  780:	  if (DEBUG){
        -:  781:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  782:	  }
        -:  783:
    #####:  784:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  785:	  x = 0;//No more buying cards
        -:  786:
        -:  787:	  if (DEBUG){
        -:  788:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  789:	  }
        -:  790:
        -:  791:	}
        -:  792:      }     
        -:  793:
        -:  794:      //Reset Hand
    #####:  795:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  796:	state->hand[currentPlayer][i] = temphand[i];
    #####:  797:	temphand[i] = -1;
        -:  798:      }
        -:  799:      //Reset Hand
        -:  800:      			
    #####:  801:      return 0;
        -:  802:			
        -:  803:    case gardens:
       24:  804:      return -1;
        -:  805:			
        -:  806:    case mine:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:		
    #####:  814:      if (choice2 > treasure_map || choice2 < curse)
        -:  815:	{
    #####:  816:	  return -1;
        -:  817:	}
        -:  818:
    #####:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  820:	{
    #####:  821:	  return -1;
        -:  822:	}
        -:  823:
    #####:  824:      gainCard(choice2, state, 2, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
    #####:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
    #####:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
    #####:  834:	      discardCard(i, currentPlayer, state, 0);			
    #####:  835:	      break;
        -:  836:	    }
        -:  837:	}
        -:  838:			
    #####:  839:      return 0;
        -:  840:			
        -:  841:    case remodel:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 0, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
        -:  864:
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case smithy:
    #####:  868:        smithyCard(currentPlayer, state, handPos);
        -:  869:
    #####:  870:        return 0;
        -:  871:		
        -:  872:    case village:
        8:  873:        villageCard(currentPlayer, state, handPos);
        -:  874:
        8:  875:        return 0;
        -:  876:		
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
    #####:  903:		isGameOver(state);
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
    #####:  920:	    isGameOver(state);
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case great_hall:
        8:  929:        great_hallCard(currentPlayer, state, handPos);
        -:  930:      
        8:  931:        return 0;
        -:  932:		
        -:  933:    case minion:
        -:  934:      //+1 action
    #####:  935:      state->numActions++;
        -:  936:			
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:			
    #####:  940:      if (choice1)		//+2 coins
        -:  941:	{
    #####:  942:	  state->coins = state->coins + 2;
        -:  943:	}
        -:  944:			
    #####:  945:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  946:	{
        -:  947:	  //discard hand
    #####:  948:	  while(numHandCards(state) > 0)
        -:  949:	    {
    #####:  950:	      discardCard(handPos, currentPlayer, state, 0);
        -:  951:	    }
        -:  952:				
        -:  953:	  //draw 4
    #####:  954:	  for (i = 0; i < 4; i++)
        -:  955:	    {
    #####:  956:	      drawCard(currentPlayer, state);
        -:  957:	    }
        -:  958:				
        -:  959:	  //other players discard hand and redraw if hand size > 4
    #####:  960:	  for (i = 0; i < state->numPlayers; i++)
        -:  961:	    {
    #####:  962:	      if (i != currentPlayer)
        -:  963:		{
    #####:  964:		  if ( state->handCount[i] > 4 )
        -:  965:		    {
        -:  966:		      //discard hand
    #####:  967:		      while( state->handCount[i] > 0 )
        -:  968:			{
    #####:  969:			  discardCard(handPos, i, state, 0);
        -:  970:			}
        -:  971:							
        -:  972:		      //draw 4
    #####:  973:		      for (j = 0; j < 4; j++)
        -:  974:			{
    #####:  975:			  drawCard(i, state);
        -:  976:			}
        -:  977:		    }
        -:  978:		}
        -:  979:	    }
        -:  980:				
        -:  981:	}
    #####:  982:      return 0;
        -:  983:		
        -:  984:    case steward:
    #####:  985:      if (choice1 == 1)
        -:  986:	{
        -:  987:	  //+2 cards
    #####:  988:	  drawCard(currentPlayer, state);
    #####:  989:	  drawCard(currentPlayer, state);
        -:  990:	}
    #####:  991:      else if (choice1 == 2)
        -:  992:	{
        -:  993:	  //+2 coins
    #####:  994:	  state->coins = state->coins + 2;
        -:  995:	}
        -:  996:      else
        -:  997:	{
        -:  998:	  //trash 2 cards in hand
    #####:  999:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1000:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1001:	}
        -: 1002:			
        -: 1003:      //discard card from hand
    #####: 1004:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case tribute:
    #####: 1008:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1009:	if (state->deckCount[nextPlayer] > 0){
    #####: 1010:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1011:	  state->deckCount[nextPlayer]--;
        -: 1012:	}
    #####: 1013:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1014:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1015:	  state->discardCount[nextPlayer]--;
        -: 1016:	}
        -: 1017:	else{
        -: 1018:	  //No Card to Reveal
        -: 1019:	  if (DEBUG){
        -: 1020:	    printf("No cards to reveal\n");
        -: 1021:	  }
        -: 1022:	}
        -: 1023:      }
        -: 1024:	    
        -: 1025:      else{
    #####: 1026:	if (state->deckCount[nextPlayer] == 0){
    #####: 1027:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1028:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1029:	    state->deckCount[nextPlayer]++;
    #####: 1030:	    state->discard[nextPlayer][i] = -1;
    #####: 1031:	    state->discardCount[nextPlayer]--;
        -: 1032:	  }
        -: 1033:			    
    #####: 1034:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1035:	} 
    #####: 1036:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:	state->deckCount[nextPlayer]--;
    #####: 1039:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1041:	state->deckCount[nextPlayer]--;
        -: 1042:      }    
        -: 1043:		       
    #####: 1044:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1045:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1046:	state->playedCardCount++;
    #####: 1047:	tributeRevealedCards[1] = -1;
        -: 1048:      }
        -: 1049:
    #####: 1050:      for (i = 0; i <= 2; i ++){
    #####: 1051:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1052:	  state->coins += 2;
        -: 1053:	}
        -: 1054:		    
    #####: 1055:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1056:	  drawCard(currentPlayer, state);
    #####: 1057:	  drawCard(currentPlayer, state);
        -: 1058:	}
        -: 1059:	else{//Action Card
    #####: 1060:	  state->numActions = state->numActions + 2;
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case ambassador:
    #####: 1067:      j = 0;		//used to check if player has enough cards to discard
        -: 1068:
    #####: 1069:      if (choice2 > 2 || choice2 < 0)
        -: 1070:	{
    #####: 1071:	  return -1;				
        -: 1072:	}
        -: 1073:
    #####: 1074:      if (choice1 == handPos)
        -: 1075:	{
    #####: 1076:	  return -1;
        -: 1077:	}
        -: 1078:
    #####: 1079:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	{
    #####: 1081:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1082:	    {
    #####: 1083:	      j++;
        -: 1084:	    }
        -: 1085:	}
    #####: 1086:      if (j < choice2)
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
        -: 1091:      if (DEBUG) 
        -: 1092:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1093:
        -: 1094:      //increase supply count for choosen card by amount being discarded
    #####: 1095:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1096:			
        -: 1097:      //each other player gains a copy of revealed card
    #####: 1098:      for (i = 0; i < state->numPlayers; i++)
        -: 1099:	{
    #####: 1100:	  if (i != currentPlayer)
        -: 1101:	    {
    #####: 1102:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
        -: 1106:      //discard played card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1108:
        -: 1109:      //trash copies of cards returned to supply
    #####: 1110:      for (j = 0; j < choice2; j++)
        -: 1111:	{
    #####: 1112:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	    {
    #####: 1114:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1115:		{
    #####: 1116:		  discardCard(i, currentPlayer, state, 1);
    #####: 1117:		  break;
        -: 1118:		}
        -: 1119:	    }
        -: 1120:	}			
        -: 1121:
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case cutpurse:
        -: 1125:
        2: 1126:      updateCoins(currentPlayer, state, 2);
        6: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
        4: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
        2: 1131:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1132:		{
    #####: 1133:		  if (state->hand[i][j] == copper)
        -: 1134:		    {
    #####: 1135:		      discardCard(j, i, state, 0);
    #####: 1136:		      break;
        -: 1137:		    }
    #####: 1138:		  if (j == state->handCount[i])
        -: 1139:		    {
    #####: 1140:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1141:			{
        -: 1142:			  if (DEBUG)
        -: 1143:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1144:			}	
    #####: 1145:		      break;
        -: 1146:		    }		
        -: 1147:		}
        -: 1148:					
        -: 1149:	    }
        -: 1150:				
        -: 1151:	}				
        -: 1152:
        -: 1153:      //discard played card from hand
        2: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        2: 1156:      return 0;
        -: 1157:
        -: 1158:		
        -: 1159:    case embargo: 
        -: 1160:      //+2 Coins
       10: 1161:      state->coins = state->coins + 2;
        -: 1162:			
        -: 1163:      //see if selected pile is in play
       10: 1164:      if ( state->supplyCount[choice1] == -1 )
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:			
        -: 1169:      //add embargo token to selected supply pile
       10: 1170:      state->embargoTokens[choice1]++;
        -: 1171:			
        -: 1172:      //trash card
       10: 1173:      discardCard(handPos, currentPlayer, state, 1);		
       10: 1174:      return 0;
        -: 1175:		
        -: 1176:    case outpost:
        -: 1177:      //set outpost flag
    #####: 1178:      state->outpostPlayed++;
        -: 1179:			
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case salvager:
        -: 1185:      //+1 buy
    #####: 1186:      state->numBuys++;
        -: 1187:			
    #####: 1188:      if (choice1)
        -: 1189:	{
        -: 1190:	  //gain coins equal to trashed card
    #####: 1191:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1192:	  //trash card
    #####: 1193:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1194:	}
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case sea_hag:
    #####: 1201:      for (i = 0; i < state->numPlayers; i++){
    #####: 1202:	if (i != currentPlayer){
    #####: 1203:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1204:	  state->discardCount[i]++;
    #####: 1205:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1206:	}
        -: 1207:      }
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case treasure_map:
        -: 1211:      //search hand for another treasure_map
    #####: 1212:      index = -1;
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	{
    #####: 1215:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1216:	    {
    #####: 1217:	      index = i;
    #####: 1218:	      break;
        -: 1219:	    }
        -: 1220:	}
    #####: 1221:      if (index > -1)
        -: 1222:	{
        -: 1223:	  //trash both treasure cards
    #####: 1224:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1225:	  discardCard(index, currentPlayer, state, 1);
        -: 1226:
        -: 1227:	  //gain 4 Gold cards
    #####: 1228:	  for (i = 0; i < 4; i++)
        -: 1229:	    {
    #####: 1230:	      gainCard(gold, state, 1, currentPlayer);
        -: 1231:	    }
        -: 1232:				
        -: 1233:	  //return success
    #####: 1234:	  return 1;
        -: 1235:	}
        -: 1236:			
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:    }
        -: 1240:	
    #####: 1241:  return -1;
        -: 1242:}
        -: 1243:
       28: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:	
        -: 1247:  //if card is not trashed, added to Played pile 
       28: 1248:  if (trashFlag < 1)
        -: 1249:    {
        -: 1250:      //add card to played pile
       18: 1251:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       18: 1252:      state->playedCardCount++;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //set played card to -1
       28: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:	
        -: 1258:  //remove card from player's hand
       28: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
    #####: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
       28: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
    #####: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:  else 	
        -: 1270:    {
        -: 1271:      //replace discarded card with last card in hand
       28: 1272:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1273:      //set last card to -1
       28: 1274:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1275:      //reduce number of cards in hand
       28: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:	
       28: 1279:  return 0;
        -: 1280:}
        -: 1281:
       35: 1282:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1283:{
        -: 1284:  //Note: supplyPos is enum of choosen card
        -: 1285:	
        -: 1286:  //check if supply pile is empty (0) or card is not used in game (-1)
       35: 1287:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1288:    {
    #####: 1289:      return -1;
        -: 1290:    }
        -: 1291:	
        -: 1292:  //added card for [whoseTurn] current player:
        -: 1293:  // toFlag = 0 : add to discard
        -: 1294:  // toFlag = 1 : add to deck
        -: 1295:  // toFlag = 2 : add to hand
        -: 1296:
       35: 1297:  if (toFlag == 1)
        -: 1298:    {
    #####: 1299:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1300:      state->deckCount[player]++;
        -: 1301:    }
       35: 1302:  else if (toFlag == 2)
        -: 1303:    {
    #####: 1304:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1305:      state->handCount[player]++;
        -: 1306:    }
        -: 1307:  else
        -: 1308:    {
       35: 1309:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       35: 1310:      state->discardCount[player]++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //decrease number in supply pile
       35: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:	 
       35: 1316:  return 0;
        -: 1317:}
        -: 1318:
     2313: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:	
        -: 1323:  //reset coin count
     2313: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
    13866: 1327:  for (i = 0; i < state->handCount[player]; i++)
        -: 1328:    {
    11553: 1329:      if (state->hand[player][i] == copper)
        -: 1330:	{
     6380: 1331:	  state->coins += 1;
        -: 1332:	}
     5173: 1333:      else if (state->hand[player][i] == silver)
        -: 1334:	{
    #####: 1335:	  state->coins += 2;
        -: 1336:	}
     5173: 1337:      else if (state->hand[player][i] == gold)
        -: 1338:	{
    #####: 1339:	  state->coins += 3;
        -: 1340:	}	
        -: 1341:    }	
        -: 1342:
        -: 1343:  //add bonus
     2313: 1344:  state->coins += bonus;
        -: 1345:
     2313: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
        -: 1351:
File 'dominion.c'
Lines executed:40.57% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   128262:    8:int compare(const void* a, const void* b) {
   128262:    9:  if (*(int*)a > *(int*)b)
     1820:   10:    return 1;
   126442:   11:  if (*(int*)a < *(int*)b)
    32636:   12:    return -1;
    93806:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     4000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4000:   44:  SelectStream(1);
     4000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     4000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    44000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   440000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   400000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4000:   73:  if (numPlayers == 2)
        -:   74:    {
     4000:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4000:   87:  if (numPlayers == 2)
        -:   88:    {
     4000:   89:      state->supplyCount[estate] = 8;
     4000:   90:      state->supplyCount[duchy] = 8;
     4000:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4000:  102:  state->supplyCount[silver] = 40;
     4000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    84000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   660000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   620000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    40000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    16000:  115:		  if (numPlayers == 2){ 
     8000:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    32000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    40000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   580000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    12000:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     8000:  140:      state->deckCount[i] = 0;
    32000:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    24000:  143:	  state->deck[i][j] = estate;
    24000:  144:	  state->deckCount[i]++;
        -:  145:	}
    64000:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    56000:  148:	  state->deck[i][j] = copper;
    56000:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    12000:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     8000:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    12000:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     8000:  166:      state->handCount[i] = 0;
     8000:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   112000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   108000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4000:  182:  state->outpostPlayed = 0;
     4000:  183:  state->phase = 0;
     4000:  184:  state->numActions = 1;
     4000:  185:  state->numBuys = 1;
     4000:  186:  state->playedCardCount = 0;
     4000:  187:  state->whoseTurn = 0;
     4000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    24000:  192:  for (it = 0; it < 5; it++){
    20000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     4000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4000:  198:  return 0;
        -:  199:}
        -:  200:
     8124:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     8124:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     8124:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     8124:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    99148:  214:  while (state->deckCount[player] > 0) {
    82900:  215:    card = floor(Random() * state->deckCount[player]);
    82900:  216:    newDeck[newDeckPos] = state->deck[player][card];
    82900:  217:    newDeckPos++;
   325290:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   242390:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    82900:  221:    state->deckCount[player]--;
        -:  222:  }
    91024:  223:  for (i = 0; i < newDeckPos; i++) {
    82900:  224:    state->deck[player][i] = newDeck[i];
    82900:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     8124:  228:  return 0;
        -:  229:}
        -:  230:
      566:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      566:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      566:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      566:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      566:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      566:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
      462:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      104:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       48:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       56:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       56:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       56:  269:  return 0;
        -:  270:}
        -:  271:
      566:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      566:  280:  who = state->whoseTurn;
        -:  281:
      566:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      566:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       42:  289:    return -1;
      524:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      454:  293:    return -1;
        -:  294:  } else {
       70:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       70:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       70:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       70:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       70:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      566:  315:int handCard(int handPos, struct gameState *state) {
      566:  316:  int currentPlayer = whoseTurn(state);
      566:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      636:  320:int supplyCount(int card, struct gameState *state) {
      636:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     1236:  346:int whoseTurn(struct gameState *state) {
     1236:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      566:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      566:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     3372:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     2806:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     2806:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      566:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      566:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      284:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
      282:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      566:  370:  state->outpostPlayed = 0;
      566:  371:  state->phase = 0;
      566:  372:  state->numActions = 1;
      566:  373:  state->coins = 0;
      566:  374:  state->numBuys = 1;
      566:  375:  state->playedCardCount = 0;
      566:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     3396:  380:  for (k = 0; k < 5; k++){
     2830:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      566:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      566:  387:  return 0;
        -:  388:}
        -:  389:
      566:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      566:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      566:  401:  j = 0;
    14716:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    14150:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      462:  406:	  j++;
        -:  407:	}
        -:  408:    }
      566:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
      564:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    22862:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    22862:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     3024:  533:    for (i = 0; i < state->discardCount[player];i++){
     2900:  534:      state->deck[player][i] = state->discard[player][i];
     2900:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      124:  538:    state->deckCount[player] = state->discardCount[player];
      124:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      124:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      124:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      124:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      124:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      124:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
      124:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      124:  563:    state->deckCount[player]--;
      124:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    22738:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    22738:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    22738:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    22738:  576:    state->deckCount[player]--;
    22738:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    22862:  580:  return 0;
        -:  581:}
        -:  582:
      594:  583:int getCost(int cardNumber)
        -:  584:{
      594:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       54:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
       64:  608:      return 4;
        -:  609:    case mine:
       54:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
       84:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
       68:  620:      return 3;
        -:  621:    case minion:
       66:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
       54:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
       56:  630:      return 4;
        -:  631:    case embargo: 
       48:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
       46:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int councilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  647:
    #####:  648:    int i = 0;
    #####:  649:    for(; i < 4; i++)
        -:  650:    {
    #####:  651:        drawCard(currentPlayer, state);
        -:  652:    }
        -:  653:
    #####:  654:    state->numBuys++;
        -:  655:
    #####:  656:    for(i = 0; i < state->numPlayers; i++)
        -:  657:    {
    #####:  658:        if(i != currentPlayer)
        -:  659:        {
    #####:  660:            drawCard(i, state);
        -:  661:        }
        -:  662:    }
        -:  663:
    #####:  664:    discardCard(handPos, currentPlayer, state, 0);
        -:  665:
    #####:  666:    return 0;
        -:  667:}
        -:  668:
        -:  669:
    #####:  670:int smithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  671:
    #####:  672:    int i = 0;
    #####:  673:    for(; i <= 3; i++)
        -:  674:    {
    #####:  675:        drawCard(currentPlayer, state);
        -:  676:    }
        -:  677:
    #####:  678:    discardCard(handPos, currentPlayer, state, 0);
        -:  679:
    #####:  680:    return 0;
        -:  681:}
        -:  682:
       16:  683:int villageCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  684:
       16:  685:    drawCard(currentPlayer, state);
       16:  686:    state->numActions = state->numActions + 3;
       16:  687:    discardCard(handPos, currentPlayer, state, 0);
        -:  688:
       16:  689:    return 0;
        -:  690:}
        -:  691:
       16:  692:int great_hallCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:
       16:  694:    drawCard(currentPlayer, state);
       16:  695:    state->numActions++;
       16:  696:    discardCard(handPos, currentPlayer, state, 0);
        -:  697:
       16:  698:    return 0;
        -:  699:}
        -:  700:
        -:  701:
      104:  702:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  703:{
        -:  704:  int i;
        -:  705:  int j;
        -:  706:  int k;
        -:  707:  int x;
        -:  708:  int index;
      104:  709:  int currentPlayer = whoseTurn(state);
      104:  710:  int nextPlayer = currentPlayer + 1;
        -:  711:
      104:  712:  int tributeRevealedCards[2] = {-1, -1};
        -:  713:  int temphand[MAX_HAND];// moved above the if statement
      104:  714:  int drawntreasure=0;
        -:  715:  int cardDrawn;
      104:  716:  int z = 0;// this is the counter for the temp hand
      104:  717:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  718:    nextPlayer = 0;
        -:  719:  }
        -:  720:  
        -:  721:	
        -:  722:  //uses switch to select card and perform actions
      104:  723:  switch( card ) 
        -:  724:    {
        -:  725:    case adventurer:
    #####:  726:      while(drawntreasure<2){
    #####:  727:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  728:	  shuffle(currentPlayer, state);
        -:  729:	}
    #####:  730:	drawCard(currentPlayer, state);
    #####:  731:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  732:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  733:	  drawntreasure++;
        -:  734:	else{
    #####:  735:	  temphand[z]=cardDrawn;
    #####:  736:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  737:	  z++;
        -:  738:	}
        -:  739:      }
    #####:  740:      while(z-1>=0){
    #####:  741:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  742:	z=z-1;
        -:  743:      }
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case council_room:
    #####:  747:        councilRoom(currentPlayer, state, handPos);
    #####:  748:        return 0;
        -:  749:
        -:  750:    case feast:
        -:  751:      //gain card with cost up to 5
        -:  752:      //Backup hand
    #####:  753:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  754:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  755:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  756:      }
        -:  757:      //Backup hand
        -:  758:
        -:  759:      //Update Coins for Buy
    #####:  760:      updateCoins(currentPlayer, state, 5);
    #####:  761:      x = 1;//Condition to loop on
    #####:  762:      while( x == 1) {//Buy one card
    #####:  763:	if (supplyCount(choice1, state) <= 0){
        -:  764:	  if (DEBUG)
        -:  765:	    printf("None of that card left, sorry!\n");
        -:  766:
        -:  767:	  if (DEBUG){
        -:  768:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  769:	  }
        -:  770:	}
    #####:  771:	else if (state->coins < getCost(choice1)){
    #####:  772:	  printf("That card is too expensive!\n");
        -:  773:
        -:  774:	  if (DEBUG){
        -:  775:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  776:	  }
        -:  777:	}
        -:  778:	else{
        -:  779:
        -:  780:	  if (DEBUG){
        -:  781:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  782:	  }
        -:  783:
    #####:  784:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  785:	  x = 0;//No more buying cards
        -:  786:
        -:  787:	  if (DEBUG){
        -:  788:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  789:	  }
        -:  790:
        -:  791:	}
        -:  792:      }     
        -:  793:
        -:  794:      //Reset Hand
    #####:  795:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  796:	state->hand[currentPlayer][i] = temphand[i];
    #####:  797:	temphand[i] = -1;
        -:  798:      }
        -:  799:      //Reset Hand
        -:  800:      			
    #####:  801:      return 0;
        -:  802:			
        -:  803:    case gardens:
       48:  804:      return -1;
        -:  805:			
        -:  806:    case mine:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:		
    #####:  814:      if (choice2 > treasure_map || choice2 < curse)
        -:  815:	{
    #####:  816:	  return -1;
        -:  817:	}
        -:  818:
    #####:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  820:	{
    #####:  821:	  return -1;
        -:  822:	}
        -:  823:
    #####:  824:      gainCard(choice2, state, 2, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
    #####:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
    #####:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
    #####:  834:	      discardCard(i, currentPlayer, state, 0);			
    #####:  835:	      break;
        -:  836:	    }
        -:  837:	}
        -:  838:			
    #####:  839:      return 0;
        -:  840:			
        -:  841:    case remodel:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 0, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
        -:  864:
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case smithy:
    #####:  868:        smithyCard(currentPlayer, state, handPos);
        -:  869:
    #####:  870:        return 0;
        -:  871:		
        -:  872:    case village:
       16:  873:        villageCard(currentPlayer, state, handPos);
        -:  874:
       16:  875:        return 0;
        -:  876:		
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
    #####:  903:		isGameOver(state);
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
    #####:  920:	    isGameOver(state);
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case great_hall:
       16:  929:        great_hallCard(currentPlayer, state, handPos);
        -:  930:      
       16:  931:        return 0;
        -:  932:		
        -:  933:    case minion:
        -:  934:      //+1 action
    #####:  935:      state->numActions++;
        -:  936:			
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:			
    #####:  940:      if (choice1)		//+2 coins
        -:  941:	{
    #####:  942:	  state->coins = state->coins + 2;
        -:  943:	}
        -:  944:			
    #####:  945:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  946:	{
        -:  947:	  //discard hand
    #####:  948:	  while(numHandCards(state) > 0)
        -:  949:	    {
    #####:  950:	      discardCard(handPos, currentPlayer, state, 0);
        -:  951:	    }
        -:  952:				
        -:  953:	  //draw 4
    #####:  954:	  for (i = 0; i < 4; i++)
        -:  955:	    {
    #####:  956:	      drawCard(currentPlayer, state);
        -:  957:	    }
        -:  958:				
        -:  959:	  //other players discard hand and redraw if hand size > 4
    #####:  960:	  for (i = 0; i < state->numPlayers; i++)
        -:  961:	    {
    #####:  962:	      if (i != currentPlayer)
        -:  963:		{
    #####:  964:		  if ( state->handCount[i] > 4 )
        -:  965:		    {
        -:  966:		      //discard hand
    #####:  967:		      while( state->handCount[i] > 0 )
        -:  968:			{
    #####:  969:			  discardCard(handPos, i, state, 0);
        -:  970:			}
        -:  971:							
        -:  972:		      //draw 4
    #####:  973:		      for (j = 0; j < 4; j++)
        -:  974:			{
    #####:  975:			  drawCard(i, state);
        -:  976:			}
        -:  977:		    }
        -:  978:		}
        -:  979:	    }
        -:  980:				
        -:  981:	}
    #####:  982:      return 0;
        -:  983:		
        -:  984:    case steward:
    #####:  985:      if (choice1 == 1)
        -:  986:	{
        -:  987:	  //+2 cards
    #####:  988:	  drawCard(currentPlayer, state);
    #####:  989:	  drawCard(currentPlayer, state);
        -:  990:	}
    #####:  991:      else if (choice1 == 2)
        -:  992:	{
        -:  993:	  //+2 coins
    #####:  994:	  state->coins = state->coins + 2;
        -:  995:	}
        -:  996:      else
        -:  997:	{
        -:  998:	  //trash 2 cards in hand
    #####:  999:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1000:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1001:	}
        -: 1002:			
        -: 1003:      //discard card from hand
    #####: 1004:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case tribute:
    #####: 1008:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1009:	if (state->deckCount[nextPlayer] > 0){
    #####: 1010:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1011:	  state->deckCount[nextPlayer]--;
        -: 1012:	}
    #####: 1013:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1014:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1015:	  state->discardCount[nextPlayer]--;
        -: 1016:	}
        -: 1017:	else{
        -: 1018:	  //No Card to Reveal
        -: 1019:	  if (DEBUG){
        -: 1020:	    printf("No cards to reveal\n");
        -: 1021:	  }
        -: 1022:	}
        -: 1023:      }
        -: 1024:	    
        -: 1025:      else{
    #####: 1026:	if (state->deckCount[nextPlayer] == 0){
    #####: 1027:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1028:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1029:	    state->deckCount[nextPlayer]++;
    #####: 1030:	    state->discard[nextPlayer][i] = -1;
    #####: 1031:	    state->discardCount[nextPlayer]--;
        -: 1032:	  }
        -: 1033:			    
    #####: 1034:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1035:	} 
    #####: 1036:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:	state->deckCount[nextPlayer]--;
    #####: 1039:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1041:	state->deckCount[nextPlayer]--;
        -: 1042:      }    
        -: 1043:		       
    #####: 1044:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1045:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1046:	state->playedCardCount++;
    #####: 1047:	tributeRevealedCards[1] = -1;
        -: 1048:      }
        -: 1049:
    #####: 1050:      for (i = 0; i <= 2; i ++){
    #####: 1051:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1052:	  state->coins += 2;
        -: 1053:	}
        -: 1054:		    
    #####: 1055:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1056:	  drawCard(currentPlayer, state);
    #####: 1057:	  drawCard(currentPlayer, state);
        -: 1058:	}
        -: 1059:	else{//Action Card
    #####: 1060:	  state->numActions = state->numActions + 2;
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case ambassador:
    #####: 1067:      j = 0;		//used to check if player has enough cards to discard
        -: 1068:
    #####: 1069:      if (choice2 > 2 || choice2 < 0)
        -: 1070:	{
    #####: 1071:	  return -1;				
        -: 1072:	}
        -: 1073:
    #####: 1074:      if (choice1 == handPos)
        -: 1075:	{
    #####: 1076:	  return -1;
        -: 1077:	}
        -: 1078:
    #####: 1079:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	{
    #####: 1081:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1082:	    {
    #####: 1083:	      j++;
        -: 1084:	    }
        -: 1085:	}
    #####: 1086:      if (j < choice2)
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
        -: 1091:      if (DEBUG) 
        -: 1092:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1093:
        -: 1094:      //increase supply count for choosen card by amount being discarded
    #####: 1095:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1096:			
        -: 1097:      //each other player gains a copy of revealed card
    #####: 1098:      for (i = 0; i < state->numPlayers; i++)
        -: 1099:	{
    #####: 1100:	  if (i != currentPlayer)
        -: 1101:	    {
    #####: 1102:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
        -: 1106:      //discard played card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1108:
        -: 1109:      //trash copies of cards returned to supply
    #####: 1110:      for (j = 0; j < choice2; j++)
        -: 1111:	{
    #####: 1112:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	    {
    #####: 1114:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1115:		{
    #####: 1116:		  discardCard(i, currentPlayer, state, 1);
    #####: 1117:		  break;
        -: 1118:		}
        -: 1119:	    }
        -: 1120:	}			
        -: 1121:
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case cutpurse:
        -: 1125:
        4: 1126:      updateCoins(currentPlayer, state, 2);
       12: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
        8: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
        4: 1131:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1132:		{
    #####: 1133:		  if (state->hand[i][j] == copper)
        -: 1134:		    {
    #####: 1135:		      discardCard(j, i, state, 0);
    #####: 1136:		      break;
        -: 1137:		    }
    #####: 1138:		  if (j == state->handCount[i])
        -: 1139:		    {
    #####: 1140:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1141:			{
        -: 1142:			  if (DEBUG)
        -: 1143:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1144:			}	
    #####: 1145:		      break;
        -: 1146:		    }		
        -: 1147:		}
        -: 1148:					
        -: 1149:	    }
        -: 1150:				
        -: 1151:	}				
        -: 1152:
        -: 1153:      //discard played card from hand
        4: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        4: 1156:      return 0;
        -: 1157:
        -: 1158:		
        -: 1159:    case embargo: 
        -: 1160:      //+2 Coins
       20: 1161:      state->coins = state->coins + 2;
        -: 1162:			
        -: 1163:      //see if selected pile is in play
       20: 1164:      if ( state->supplyCount[choice1] == -1 )
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:			
        -: 1169:      //add embargo token to selected supply pile
       20: 1170:      state->embargoTokens[choice1]++;
        -: 1171:			
        -: 1172:      //trash card
       20: 1173:      discardCard(handPos, currentPlayer, state, 1);		
       20: 1174:      return 0;
        -: 1175:		
        -: 1176:    case outpost:
        -: 1177:      //set outpost flag
    #####: 1178:      state->outpostPlayed++;
        -: 1179:			
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case salvager:
        -: 1185:      //+1 buy
    #####: 1186:      state->numBuys++;
        -: 1187:			
    #####: 1188:      if (choice1)
        -: 1189:	{
        -: 1190:	  //gain coins equal to trashed card
    #####: 1191:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1192:	  //trash card
    #####: 1193:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1194:	}
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case sea_hag:
    #####: 1201:      for (i = 0; i < state->numPlayers; i++){
    #####: 1202:	if (i != currentPlayer){
    #####: 1203:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1204:	  state->discardCount[i]++;
    #####: 1205:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1206:	}
        -: 1207:      }
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case treasure_map:
        -: 1211:      //search hand for another treasure_map
    #####: 1212:      index = -1;
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	{
    #####: 1215:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1216:	    {
    #####: 1217:	      index = i;
    #####: 1218:	      break;
        -: 1219:	    }
        -: 1220:	}
    #####: 1221:      if (index > -1)
        -: 1222:	{
        -: 1223:	  //trash both treasure cards
    #####: 1224:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1225:	  discardCard(index, currentPlayer, state, 1);
        -: 1226:
        -: 1227:	  //gain 4 Gold cards
    #####: 1228:	  for (i = 0; i < 4; i++)
        -: 1229:	    {
    #####: 1230:	      gainCard(gold, state, 1, currentPlayer);
        -: 1231:	    }
        -: 1232:				
        -: 1233:	  //return success
    #####: 1234:	  return 1;
        -: 1235:	}
        -: 1236:			
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:    }
        -: 1240:	
    #####: 1241:  return -1;
        -: 1242:}
        -: 1243:
       56: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:	
        -: 1247:  //if card is not trashed, added to Played pile 
       56: 1248:  if (trashFlag < 1)
        -: 1249:    {
        -: 1250:      //add card to played pile
       36: 1251:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       36: 1252:      state->playedCardCount++;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //set played card to -1
       56: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:	
        -: 1258:  //remove card from player's hand
       56: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
    #####: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
       56: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
    #####: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:  else 	
        -: 1270:    {
        -: 1271:      //replace discarded card with last card in hand
       56: 1272:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1273:      //set last card to -1
       56: 1274:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1275:      //reduce number of cards in hand
       56: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:	
       56: 1279:  return 0;
        -: 1280:}
        -: 1281:
       70: 1282:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1283:{
        -: 1284:  //Note: supplyPos is enum of choosen card
        -: 1285:	
        -: 1286:  //check if supply pile is empty (0) or card is not used in game (-1)
       70: 1287:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1288:    {
    #####: 1289:      return -1;
        -: 1290:    }
        -: 1291:	
        -: 1292:  //added card for [whoseTurn] current player:
        -: 1293:  // toFlag = 0 : add to discard
        -: 1294:  // toFlag = 1 : add to deck
        -: 1295:  // toFlag = 2 : add to hand
        -: 1296:
       70: 1297:  if (toFlag == 1)
        -: 1298:    {
    #####: 1299:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1300:      state->deckCount[player]++;
        -: 1301:    }
       70: 1302:  else if (toFlag == 2)
        -: 1303:    {
    #####: 1304:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1305:      state->handCount[player]++;
        -: 1306:    }
        -: 1307:  else
        -: 1308:    {
       70: 1309:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       70: 1310:      state->discardCount[player]++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //decrease number in supply pile
       70: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:	 
       70: 1316:  return 0;
        -: 1317:}
        -: 1318:
     4626: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:	
        -: 1323:  //reset coin count
     4626: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
    27732: 1327:  for (i = 0; i < state->handCount[player]; i++)
        -: 1328:    {
    23106: 1329:      if (state->hand[player][i] == copper)
        -: 1330:	{
    12760: 1331:	  state->coins += 1;
        -: 1332:	}
    10346: 1333:      else if (state->hand[player][i] == silver)
        -: 1334:	{
    #####: 1335:	  state->coins += 2;
        -: 1336:	}
    10346: 1337:      else if (state->hand[player][i] == gold)
        -: 1338:	{
    #####: 1339:	  state->coins += 3;
        -: 1340:	}	
        -: 1341:    }	
        -: 1342:
        -: 1343:  //add bonus
     4626: 1344:  state->coins += bonus;
        -: 1345:
     4626: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
        -: 1351:
File 'dominion.c'
Lines executed:45.02% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    95800:    8:int compare(const void* a, const void* b) {
    95800:    9:  if (*(int*)a > *(int*)b)
     1506:   10:    return 1;
    94294:   11:  if (*(int*)a < *(int*)b)
    24322:   12:    return -1;
    69972:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2000:   44:  SelectStream(1);
     2000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   220000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   200000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2000:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     2000:   77:  else if (numPlayers == 3)
        -:   78:    {
     2000:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2000:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     2000:   95:      state->supplyCount[estate] = 12;
     2000:   96:      state->supplyCount[duchy] = 12;
     2000:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2000:  102:  state->supplyCount[silver] = 40;
     2000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   330000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   310000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     8000:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     4000:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    16000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    20000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   290000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     8000:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     6000:  140:      state->deckCount[i] = 0;
    24000:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    18000:  143:	  state->deck[i][j] = estate;
    18000:  144:	  state->deckCount[i]++;
        -:  145:	}
    48000:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    42000:  148:	  state->deck[i][j] = copper;
    42000:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     8000:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     6000:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     8000:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     6000:  166:      state->handCount[i] = 0;
     6000:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    54000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2000:  182:  state->outpostPlayed = 0;
     2000:  183:  state->phase = 0;
     2000:  184:  state->numActions = 1;
     2000:  185:  state->numBuys = 1;
     2000:  186:  state->playedCardCount = 0;
     2000:  187:  state->whoseTurn = 0;
     2000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12000:  192:  for (it = 0; it < 5; it++){
    10000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     2000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     2000:  198:  return 0;
        -:  199:}
        -:  200:
     6243:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     6243:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     6243:  209:  if (state->deckCount[player] < 1)
       71:  210:    return -1;
     6172:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    74181:  214:  while (state->deckCount[player] > 0) {
    61837:  215:    card = floor(Random() * state->deckCount[player]);
    61837:  216:    newDeck[newDeckPos] = state->deck[player][card];
    61837:  217:    newDeckPos++;
   270487:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   208650:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    61837:  221:    state->deckCount[player]--;
        -:  222:  }
    68009:  223:  for (i = 0; i < newDeckPos; i++) {
    61837:  224:    state->deck[player][i] = newDeck[i];
    61837:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     6172:  228:  return 0;
        -:  229:}
        -:  230:
      316:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      316:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      316:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      316:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      316:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      316:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
      243:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       73:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
        5:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       68:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       68:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       68:  269:  return 0;
        -:  270:}
        -:  271:
      316:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      316:  280:  who = state->whoseTurn;
        -:  281:
      316:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      316:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       33:  289:    return -1;
      283:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      238:  293:    return -1;
        -:  294:  } else {
       45:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       45:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       45:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       45:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       45:  308:  return 0;
        -:  309:}
        -:  310:
        5:  311:int numHandCards(struct gameState *state) {
        5:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      316:  315:int handCard(int handPos, struct gameState *state) {
      316:  316:  int currentPlayer = whoseTurn(state);
      316:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      361:  320:int supplyCount(int card, struct gameState *state) {
      361:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      710:  346:int whoseTurn(struct gameState *state) {
      710:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      316:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      316:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     1806:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     1490:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     1490:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      316:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      316:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      211:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
      105:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      316:  370:  state->outpostPlayed = 0;
      316:  371:  state->phase = 0;
      316:  372:  state->numActions = 1;
      316:  373:  state->coins = 0;
      316:  374:  state->numBuys = 1;
      316:  375:  state->playedCardCount = 0;
      316:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     1896:  380:  for (k = 0; k < 5; k++){
     1580:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      316:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      316:  387:  return 0;
        -:  388:}
        -:  389:
      316:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      316:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      316:  401:  j = 0;
     8216:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     7900:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      317:  406:	  j++;
        -:  407:	}
        -:  408:    }
      316:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
      315:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    11606:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    11606:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     2080:  533:    for (i = 0; i < state->discardCount[player];i++){
     1837:  534:      state->deck[player][i] = state->discard[player][i];
     1837:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      243:  538:    state->deckCount[player] = state->discardCount[player];
      243:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      243:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      243:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      243:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      243:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      243:  559:    if (deckCounter == 0)
       71:  560:      return -1;
        -:  561:
      172:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      172:  563:    state->deckCount[player]--;
      172:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    11363:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    11363:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    11363:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    11363:  576:    state->deckCount[player]--;
    11363:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    11535:  580:  return 0;
        -:  581:}
        -:  582:
      328:  583:int getCost(int cardNumber)
        -:  584:{
      328:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
       23:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
       33:  608:      return 4;
        -:  609:    case mine:
       28:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
       32:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
       41:  620:      return 3;
        -:  621:    case minion:
       34:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
       36:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
       34:  630:      return 4;
        -:  631:    case embargo: 
       27:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
       40:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int councilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  647:
    #####:  648:    int i = 0;
    #####:  649:    for(; i < 4; i++)
        -:  650:    {
    #####:  651:        drawCard(currentPlayer, state);
        -:  652:    }
        -:  653:
    #####:  654:    state->numBuys++;
        -:  655:
    #####:  656:    for(i = 0; i < state->numPlayers; i++)
        -:  657:    {
    #####:  658:        if(i != currentPlayer)
        -:  659:        {
    #####:  660:            drawCard(i, state);
        -:  661:        }
        -:  662:    }
        -:  663:
    #####:  664:    discardCard(handPos, currentPlayer, state, 0);
        -:  665:
    #####:  666:    return 0;
        -:  667:}
        -:  668:
        -:  669:
    #####:  670:int smithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  671:
    #####:  672:    int i = 0;
    #####:  673:    for(; i <= 3; i++)
        -:  674:    {
    #####:  675:        drawCard(currentPlayer, state);
        -:  676:    }
        -:  677:
    #####:  678:    discardCard(handPos, currentPlayer, state, 0);
        -:  679:
    #####:  680:    return 0;
        -:  681:}
        -:  682:
       12:  683:int villageCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  684:
       12:  685:    drawCard(currentPlayer, state);
       12:  686:    state->numActions = state->numActions + 3;
       12:  687:    discardCard(handPos, currentPlayer, state, 0);
        -:  688:
       12:  689:    return 0;
        -:  690:}
        -:  691:
       10:  692:int great_hallCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  693:
       10:  694:    drawCard(currentPlayer, state);
       10:  695:    state->numActions++;
       10:  696:    discardCard(handPos, currentPlayer, state, 0);
        -:  697:
       10:  698:    return 0;
        -:  699:}
        -:  700:
        -:  701:
       73:  702:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  703:{
        -:  704:  int i;
        -:  705:  int j;
        -:  706:  int k;
        -:  707:  int x;
        -:  708:  int index;
       73:  709:  int currentPlayer = whoseTurn(state);
       73:  710:  int nextPlayer = currentPlayer + 1;
        -:  711:
       73:  712:  int tributeRevealedCards[2] = {-1, -1};
        -:  713:  int temphand[MAX_HAND];// moved above the if statement
       73:  714:  int drawntreasure=0;
        -:  715:  int cardDrawn;
       73:  716:  int z = 0;// this is the counter for the temp hand
       73:  717:  if (nextPlayer > (state->numPlayers - 1)){
       31:  718:    nextPlayer = 0;
        -:  719:  }
        -:  720:  
        -:  721:	
        -:  722:  //uses switch to select card and perform actions
       73:  723:  switch( card ) 
        -:  724:    {
        -:  725:    case adventurer:
    #####:  726:      while(drawntreasure<2){
    #####:  727:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  728:	  shuffle(currentPlayer, state);
        -:  729:	}
    #####:  730:	drawCard(currentPlayer, state);
    #####:  731:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  732:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  733:	  drawntreasure++;
        -:  734:	else{
    #####:  735:	  temphand[z]=cardDrawn;
    #####:  736:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  737:	  z++;
        -:  738:	}
        -:  739:      }
    #####:  740:      while(z-1>=0){
    #####:  741:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  742:	z=z-1;
        -:  743:      }
    #####:  744:      return 0;
        -:  745:			
        -:  746:    case council_room:
    #####:  747:        councilRoom(currentPlayer, state, handPos);
    #####:  748:        return 0;
        -:  749:
        -:  750:    case feast:
        -:  751:      //gain card with cost up to 5
        -:  752:      //Backup hand
    #####:  753:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  754:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  755:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  756:      }
        -:  757:      //Backup hand
        -:  758:
        -:  759:      //Update Coins for Buy
    #####:  760:      updateCoins(currentPlayer, state, 5);
    #####:  761:      x = 1;//Condition to loop on
    #####:  762:      while( x == 1) {//Buy one card
    #####:  763:	if (supplyCount(choice1, state) <= 0){
        -:  764:	  if (DEBUG)
        -:  765:	    printf("None of that card left, sorry!\n");
        -:  766:
        -:  767:	  if (DEBUG){
        -:  768:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  769:	  }
        -:  770:	}
    #####:  771:	else if (state->coins < getCost(choice1)){
    #####:  772:	  printf("That card is too expensive!\n");
        -:  773:
        -:  774:	  if (DEBUG){
        -:  775:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  776:	  }
        -:  777:	}
        -:  778:	else{
        -:  779:
        -:  780:	  if (DEBUG){
        -:  781:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  782:	  }
        -:  783:
    #####:  784:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  785:	  x = 0;//No more buying cards
        -:  786:
        -:  787:	  if (DEBUG){
        -:  788:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  789:	  }
        -:  790:
        -:  791:	}
        -:  792:      }     
        -:  793:
        -:  794:      //Reset Hand
    #####:  795:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  796:	state->hand[currentPlayer][i] = temphand[i];
    #####:  797:	temphand[i] = -1;
        -:  798:      }
        -:  799:      //Reset Hand
        -:  800:      			
    #####:  801:      return 0;
        -:  802:			
        -:  803:    case gardens:
        5:  804:      return -1;
        -:  805:			
        -:  806:    case mine:
    #####:  807:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  808:
    #####:  809:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:		
    #####:  814:      if (choice2 > treasure_map || choice2 < curse)
        -:  815:	{
    #####:  816:	  return -1;
        -:  817:	}
        -:  818:
    #####:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  820:	{
    #####:  821:	  return -1;
        -:  822:	}
        -:  823:
    #####:  824:      gainCard(choice2, state, 2, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
    #####:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
    #####:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
    #####:  834:	      discardCard(i, currentPlayer, state, 0);			
    #####:  835:	      break;
        -:  836:	    }
        -:  837:	}
        -:  838:			
    #####:  839:      return 0;
        -:  840:			
        -:  841:    case remodel:
    #####:  842:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  843:
    #####:  844:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  845:	{
    #####:  846:	  return -1;
        -:  847:	}
        -:  848:
    #####:  849:      gainCard(choice2, state, 0, currentPlayer);
        -:  850:
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
        -:  853:
        -:  854:      //discard trashed card
    #####:  855:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  856:	{
    #####:  857:	  if (state->hand[currentPlayer][i] == j)
        -:  858:	    {
    #####:  859:	      discardCard(i, currentPlayer, state, 0);			
    #####:  860:	      break;
        -:  861:	    }
        -:  862:	}
        -:  863:
        -:  864:
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case smithy:
    #####:  868:        smithyCard(currentPlayer, state, handPos);
        -:  869:
    #####:  870:        return 0;
        -:  871:		
        -:  872:    case village:
       12:  873:        villageCard(currentPlayer, state, handPos);
        -:  874:
       12:  875:        return 0;
        -:  876:		
        -:  877:    case baron:
    #####:  878:      state->numBuys++;//Increase buys by 1!
    #####:  879:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  880:	int p = 0;//Iterator for hand!
    #####:  881:	int card_not_discarded = 1;//Flag for discard set!
    #####:  882:	while(card_not_discarded){
    #####:  883:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  884:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  885:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  886:	    state->discardCount[currentPlayer]++;
    #####:  887:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  888:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  889:	    }
    #####:  890:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  891:	    state->handCount[currentPlayer]--;
    #####:  892:	    card_not_discarded = 0;//Exit the loop
        -:  893:	  }
    #####:  894:	  else if (p > state->handCount[currentPlayer]){
        -:  895:	    if(DEBUG) {
        -:  896:	      printf("No estate cards in your hand, invalid choice\n");
        -:  897:	      printf("Must gain an estate if there are any\n");
        -:  898:	    }
    #####:  899:	    if (supplyCount(estate, state) > 0){
    #####:  900:	      gainCard(estate, state, 0, currentPlayer);
    #####:  901:	      state->supplyCount[estate]--;//Decrement estates
    #####:  902:	      if (supplyCount(estate, state) == 0){
    #####:  903:		isGameOver(state);
        -:  904:	      }
        -:  905:	    }
    #####:  906:	    card_not_discarded = 0;//Exit the loop
        -:  907:	  }
        -:  908:			    
        -:  909:	  else{
    #####:  910:	    p++;//Next card
        -:  911:	  }
        -:  912:	}
        -:  913:      }
        -:  914:			    
        -:  915:      else{
    #####:  916:	if (supplyCount(estate, state) > 0){
    #####:  917:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  918:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  919:	  if (supplyCount(estate, state) == 0){
    #####:  920:	    isGameOver(state);
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      
    #####:  926:      return 0;
        -:  927:		
        -:  928:    case great_hall:
       10:  929:        great_hallCard(currentPlayer, state, handPos);
        -:  930:      
       10:  931:        return 0;
        -:  932:		
        -:  933:    case minion:
        -:  934:      //+1 action
        2:  935:      state->numActions++;
        -:  936:			
        -:  937:      //discard card from hand
        2:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:			
        2:  940:      if (choice1)		//+2 coins
        -:  941:	{
    #####:  942:	  state->coins = state->coins + 2;
        -:  943:	}
        -:  944:			
        2:  945:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  946:	{
        -:  947:	  //discard hand
        6:  948:	  while(numHandCards(state) > 0)
        -:  949:	    {
        4:  950:	      discardCard(handPos, currentPlayer, state, 0);
        -:  951:	    }
        -:  952:				
        -:  953:	  //draw 4
        5:  954:	  for (i = 0; i < 4; i++)
        -:  955:	    {
        4:  956:	      drawCard(currentPlayer, state);
        -:  957:	    }
        -:  958:				
        -:  959:	  //other players discard hand and redraw if hand size > 4
        4:  960:	  for (i = 0; i < state->numPlayers; i++)
        -:  961:	    {
        3:  962:	      if (i != currentPlayer)
        -:  963:		{
        2:  964:		  if ( state->handCount[i] > 4 )
        -:  965:		    {
        -:  966:		      //discard hand
    #####:  967:		      while( state->handCount[i] > 0 )
        -:  968:			{
    #####:  969:			  discardCard(handPos, i, state, 0);
        -:  970:			}
        -:  971:							
        -:  972:		      //draw 4
    #####:  973:		      for (j = 0; j < 4; j++)
        -:  974:			{
    #####:  975:			  drawCard(i, state);
        -:  976:			}
        -:  977:		    }
        -:  978:		}
        -:  979:	    }
        -:  980:				
        -:  981:	}
        2:  982:      return 0;
        -:  983:		
        -:  984:    case steward:
    #####:  985:      if (choice1 == 1)
        -:  986:	{
        -:  987:	  //+2 cards
    #####:  988:	  drawCard(currentPlayer, state);
    #####:  989:	  drawCard(currentPlayer, state);
        -:  990:	}
    #####:  991:      else if (choice1 == 2)
        -:  992:	{
        -:  993:	  //+2 coins
    #####:  994:	  state->coins = state->coins + 2;
        -:  995:	}
        -:  996:      else
        -:  997:	{
        -:  998:	  //trash 2 cards in hand
    #####:  999:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1000:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1001:	}
        -: 1002:			
        -: 1003:      //discard card from hand
    #####: 1004:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case tribute:
    #####: 1008:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1009:	if (state->deckCount[nextPlayer] > 0){
    #####: 1010:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1011:	  state->deckCount[nextPlayer]--;
        -: 1012:	}
    #####: 1013:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1014:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1015:	  state->discardCount[nextPlayer]--;
        -: 1016:	}
        -: 1017:	else{
        -: 1018:	  //No Card to Reveal
        -: 1019:	  if (DEBUG){
        -: 1020:	    printf("No cards to reveal\n");
        -: 1021:	  }
        -: 1022:	}
        -: 1023:      }
        -: 1024:	    
        -: 1025:      else{
    #####: 1026:	if (state->deckCount[nextPlayer] == 0){
    #####: 1027:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1028:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1029:	    state->deckCount[nextPlayer]++;
    #####: 1030:	    state->discard[nextPlayer][i] = -1;
    #####: 1031:	    state->discardCount[nextPlayer]--;
        -: 1032:	  }
        -: 1033:			    
    #####: 1034:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1035:	} 
    #####: 1036:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:	state->deckCount[nextPlayer]--;
    #####: 1039:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1041:	state->deckCount[nextPlayer]--;
        -: 1042:      }    
        -: 1043:		       
    #####: 1044:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1045:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1046:	state->playedCardCount++;
    #####: 1047:	tributeRevealedCards[1] = -1;
        -: 1048:      }
        -: 1049:
    #####: 1050:      for (i = 0; i <= 2; i ++){
    #####: 1051:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1052:	  state->coins += 2;
        -: 1053:	}
        -: 1054:		    
    #####: 1055:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1056:	  drawCard(currentPlayer, state);
    #####: 1057:	  drawCard(currentPlayer, state);
        -: 1058:	}
        -: 1059:	else{//Action Card
    #####: 1060:	  state->numActions = state->numActions + 2;
        -: 1061:	}
        -: 1062:      }
        -: 1063:	    
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case ambassador:
    #####: 1067:      j = 0;		//used to check if player has enough cards to discard
        -: 1068:
    #####: 1069:      if (choice2 > 2 || choice2 < 0)
        -: 1070:	{
    #####: 1071:	  return -1;				
        -: 1072:	}
        -: 1073:
    #####: 1074:      if (choice1 == handPos)
        -: 1075:	{
    #####: 1076:	  return -1;
        -: 1077:	}
        -: 1078:
    #####: 1079:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1080:	{
    #####: 1081:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1082:	    {
    #####: 1083:	      j++;
        -: 1084:	    }
        -: 1085:	}
    #####: 1086:      if (j < choice2)
        -: 1087:	{
    #####: 1088:	  return -1;				
        -: 1089:	}
        -: 1090:
        -: 1091:      if (DEBUG) 
        -: 1092:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1093:
        -: 1094:      //increase supply count for choosen card by amount being discarded
    #####: 1095:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1096:			
        -: 1097:      //each other player gains a copy of revealed card
    #####: 1098:      for (i = 0; i < state->numPlayers; i++)
        -: 1099:	{
    #####: 1100:	  if (i != currentPlayer)
        -: 1101:	    {
    #####: 1102:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
        -: 1106:      //discard played card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1108:
        -: 1109:      //trash copies of cards returned to supply
    #####: 1110:      for (j = 0; j < choice2; j++)
        -: 1111:	{
    #####: 1112:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1113:	    {
    #####: 1114:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1115:		{
    #####: 1116:		  discardCard(i, currentPlayer, state, 1);
    #####: 1117:		  break;
        -: 1118:		}
        -: 1119:	    }
        -: 1120:	}			
        -: 1121:
    #####: 1122:      return 0;
        -: 1123:		
        -: 1124:    case cutpurse:
        -: 1125:
        3: 1126:      updateCoins(currentPlayer, state, 2);
       12: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
        9: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
        6: 1131:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1132:		{
    #####: 1133:		  if (state->hand[i][j] == copper)
        -: 1134:		    {
    #####: 1135:		      discardCard(j, i, state, 0);
    #####: 1136:		      break;
        -: 1137:		    }
    #####: 1138:		  if (j == state->handCount[i])
        -: 1139:		    {
    #####: 1140:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1141:			{
        -: 1142:			  if (DEBUG)
        -: 1143:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1144:			}	
    #####: 1145:		      break;
        -: 1146:		    }		
        -: 1147:		}
        -: 1148:					
        -: 1149:	    }
        -: 1150:				
        -: 1151:	}				
        -: 1152:
        -: 1153:      //discard played card from hand
        3: 1154:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1155:
        3: 1156:      return 0;
        -: 1157:
        -: 1158:		
        -: 1159:    case embargo: 
        -: 1160:      //+2 Coins
        6: 1161:      state->coins = state->coins + 2;
        -: 1162:			
        -: 1163:      //see if selected pile is in play
        6: 1164:      if ( state->supplyCount[choice1] == -1 )
        -: 1165:	{
    #####: 1166:	  return -1;
        -: 1167:	}
        -: 1168:			
        -: 1169:      //add embargo token to selected supply pile
        6: 1170:      state->embargoTokens[choice1]++;
        -: 1171:			
        -: 1172:      //trash card
        6: 1173:      discardCard(handPos, currentPlayer, state, 1);		
        6: 1174:      return 0;
        -: 1175:		
        -: 1176:    case outpost:
        -: 1177:      //set outpost flag
    #####: 1178:      state->outpostPlayed++;
        -: 1179:			
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:		
        -: 1184:    case salvager:
        -: 1185:      //+1 buy
    #####: 1186:      state->numBuys++;
        -: 1187:			
    #####: 1188:      if (choice1)
        -: 1189:	{
        -: 1190:	  //gain coins equal to trashed card
    #####: 1191:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1192:	  //trash card
    #####: 1193:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1194:	}
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case sea_hag:
      140: 1201:      for (i = 0; i < state->numPlayers; i++){
      105: 1202:	if (i != currentPlayer){
       70: 1203:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       70: 1204:	  state->discardCount[i]++;
       70: 1205:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1206:	}
        -: 1207:      }
       35: 1208:      return 0;
        -: 1209:		
        -: 1210:    case treasure_map:
        -: 1211:      //search hand for another treasure_map
    #####: 1212:      index = -1;
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	{
    #####: 1215:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1216:	    {
    #####: 1217:	      index = i;
    #####: 1218:	      break;
        -: 1219:	    }
        -: 1220:	}
    #####: 1221:      if (index > -1)
        -: 1222:	{
        -: 1223:	  //trash both treasure cards
    #####: 1224:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1225:	  discardCard(index, currentPlayer, state, 1);
        -: 1226:
        -: 1227:	  //gain 4 Gold cards
    #####: 1228:	  for (i = 0; i < 4; i++)
        -: 1229:	    {
    #####: 1230:	      gainCard(gold, state, 1, currentPlayer);
        -: 1231:	    }
        -: 1232:				
        -: 1233:	  //return success
    #####: 1234:	  return 1;
        -: 1235:	}
        -: 1236:			
        -: 1237:      //no second treasure_map found in hand
    #####: 1238:      return -1;
        -: 1239:    }
        -: 1240:	
    #####: 1241:  return -1;
        -: 1242:}
        -: 1243:
       37: 1244:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1245:{
        -: 1246:	
        -: 1247:  //if card is not trashed, added to Played pile 
       37: 1248:  if (trashFlag < 1)
        -: 1249:    {
        -: 1250:      //add card to played pile
       31: 1251:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       31: 1252:      state->playedCardCount++;
        -: 1253:    }
        -: 1254:	
        -: 1255:  //set played card to -1
       37: 1256:  state->hand[currentPlayer][handPos] = -1;
        -: 1257:	
        -: 1258:  //remove card from player's hand
       37: 1259:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1260:    {
        -: 1261:      //reduce number of cards in hand
        2: 1262:      state->handCount[currentPlayer]--;
        -: 1263:    }
       35: 1264:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
    #####: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
        -: 1269:  else 	
        -: 1270:    {
        -: 1271:      //replace discarded card with last card in hand
       35: 1272:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1273:      //set last card to -1
       35: 1274:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1275:      //reduce number of cards in hand
       35: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:	
       37: 1279:  return 0;
        -: 1280:}
        -: 1281:
       45: 1282:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1283:{
        -: 1284:  //Note: supplyPos is enum of choosen card
        -: 1285:	
        -: 1286:  //check if supply pile is empty (0) or card is not used in game (-1)
       45: 1287:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1288:    {
    #####: 1289:      return -1;
        -: 1290:    }
        -: 1291:	
        -: 1292:  //added card for [whoseTurn] current player:
        -: 1293:  // toFlag = 0 : add to discard
        -: 1294:  // toFlag = 1 : add to deck
        -: 1295:  // toFlag = 2 : add to hand
        -: 1296:
       45: 1297:  if (toFlag == 1)
        -: 1298:    {
    #####: 1299:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1300:      state->deckCount[player]++;
        -: 1301:    }
       45: 1302:  else if (toFlag == 2)
        -: 1303:    {
    #####: 1304:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1305:      state->handCount[player]++;
        -: 1306:    }
        -: 1307:  else
        -: 1308:    {
       45: 1309:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       45: 1310:      state->discardCount[player]++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //decrease number in supply pile
       45: 1314:  state->supplyCount[supplyPos]--;
        -: 1315:	 
       45: 1316:  return 0;
        -: 1317:}
        -: 1318:
     2387: 1319:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1320:{
        -: 1321:  int i;
        -: 1322:	
        -: 1323:  //reset coin count
     2387: 1324:  state->coins = 0;
        -: 1325:
        -: 1326:  //add coins for each Treasure card in player's hand
    14221: 1327:  for (i = 0; i < state->handCount[player]; i++)
        -: 1328:    {
    11834: 1329:      if (state->hand[player][i] == copper)
        -: 1330:	{
     8728: 1331:	  state->coins += 1;
        -: 1332:	}
     3106: 1333:      else if (state->hand[player][i] == silver)
        -: 1334:	{
    #####: 1335:	  state->coins += 2;
        -: 1336:	}
     3106: 1337:      else if (state->hand[player][i] == gold)
        -: 1338:	{
    #####: 1339:	  state->coins += 3;
        -: 1340:	}	
        -: 1341:    }	
        -: 1342:
        -: 1343:  //add bonus
     2387: 1344:  state->coins += bonus;
        -: 1345:
     2387: 1346:  return 0;
        -: 1347:}
        -: 1348:
        -: 1349:
        -: 1350://end of dominion.c
        -: 1351:
