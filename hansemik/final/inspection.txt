Inspection by Mikkel Hansen
Inspection on oatmanm's dominion
Inspectees: Garrett Amadon, Michael Oatman, Spike Madden

Formality:
We chose to meet and do the inspection in person. In order to do this, we
found a large TV where we could all watch as one person did led the code
inspection. This way everyone could observe and point out bugs and/or reasons
for bugs and potential fixes for the bugs.

Process:
I led the group in looking at the code without actually running it to see if
the logic is correct in what each card/function does. If a group member had 
prior knowledge of a common bug with a card, even if the code seemed logically
correct, it was noted.

----------------------------------
Functions
----------------------------------

initializeGame:
	Everything looked fine.

shuffle:
	Logic seems sound.

playCard:
	In order to make this function friendlier for the coder, there should be
	more return values to make error handling easier.

buyCard:
	Logic seemn sound.

numHandCards:
	I would overload this function so that you can also pass a integer
	parameter to specify the player to get the handCount.

handCard:
	I would overload this function so that you can also pass a integer
	parameter to specify the player to get the card.

supplyCount:
	Nothing to change.

fullDeckCount:
	Nothing to change.

whoseTurn:
	Nothing to change.

endTurn:
	This leaves the other players with 0 cards in hand, so I would change it
	so that the other players do not have 0 cards in their hand because the 
	number of cards in hand affects cards like minion

isGameOver:
	Logic seems sound.

scoreFor:
	Bug in the loop counter for the deck. Needs to be changed to deckCount.

getWinners:
	After this function is run, the user still needs to loop through the
	players to see which one won. I would change it to return a struct with
	all the scores of the player and the player number/index of the winner.

drawCard:
	Logic seems sound.

getCost:
	Nothing to change.

discardCard:
	Nothing to change.

gainCard:
	Nothing to change.

updateCoins:
	This card's implementation is not used correctly in the game. Since the 
	card resets the coins completely and then recounts the coins in the hand,
	it does not save the coins that the player already gained that turn. In the
	game, it is sometimes used to add a couple coins or reset the coins.
	There should be overloaded or seperate functions that are more clear in
	their implementation, or the calls to this function need to be checked
	for accurate usage.

----------------------------------
Cards
----------------------------------

adventurer:
	Logic seems sound. However, after testing this card with my own tests
	throughout the term, I know that this card does not work correctly unless
	fixed. So I would run gdb and figure out how to fix this card.

councilRoom:
	Logic seems sound.

feast:
	This card loops on the while condition  while( x == 1). However, the value
	of x never changes, so the while loop never exits. This needs to be changed
	by removing the while loop.

mine:
	Logic seems sound. However, my group agreed that this card had
	problems with it in their own tests throughout the term. Also 
	">" should be changed to "<" for comparison to work correctly.

remodel:
	">" should be changed to "<" for comparison to work correctly.

smithy:
	Logic seems sound.

village:
	Logic seems sound.

baron:
	A bug was found in that the card decreases the supplyCount on the estate
	even though the gainCard function does this already.

greatHall:
	This implementation does not have any way to give a player victory points,
	so that aspect of this card is lost in this card. Otherwise, logic seems 
	sound.

minion:
	Logic seems sound.

steward:
	An ordering bug is present in this card. The discardCard function relies
	on discarding the card based on the handPos of the card in question, and
	it also has the potential to reorder some cards in the hand when
	discarding. This needs to be accounted for when discarding the cards.

tribute:
	Logic seems sound.

ambassador:
	Logic seems sound.

cutpurse:
	Logic seems sound

embargo:
	The ordering of this card is incorrect. The coins are gained before
	checking if the card's choice is correct.

outpost:
	The logic of the card is correct, however the implementation of the rest of
	the card relating to getting an extra turn are not implemented anywhere in
	the game.

salvager:
	Logic seems sound.

seaHag:
	Several lines in this function use "--" when it should be "-1". This will
	cause the other players to lose cards in their discard pile.

treasureMap:
	The ordering of discardCard might become an issue because the indexes of
	the cards to discard might change after the first discardCard.