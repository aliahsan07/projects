Test 0: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 1: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 2: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 3: Zero treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 4: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 5: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 6: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 7: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 8: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 9: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 10: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 11: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 12: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 13: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 14: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 15: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 16: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 17: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 18: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 19: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 20: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 21: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 22: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 23: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 24: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 25: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 26: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 27: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 28: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 29: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 30: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 31: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 32: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 33: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 34: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 35: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 36: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 37: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 38: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 39: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 40: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 41: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 42: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 43: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 44: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 45: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 46: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 47: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 48: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 49: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 50: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 51: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 52: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 53: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 54: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 55: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 56: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 57: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 58: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 59: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 60: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 61: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 62: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 63: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 64: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 65: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 66: One Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 67: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 68: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 69: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 70: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 71: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 72: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 73: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 74: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 75: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 76: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 77: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 78: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 79: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 80: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 81: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 82: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 83: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 84: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 85: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 86: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 87: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 88: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 89: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 90: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 91: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 92: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 93: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 94: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 95: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 96: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 97: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 98: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 99: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 100: Zero treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 101: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 102: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 103: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 104: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 105: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 106: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 107: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 108: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 109: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 110: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 111: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 112: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 113: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 114: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 115: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 116: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 117: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 118: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 119: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 120: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 121: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 122: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 123: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 124: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 125: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 126: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 127: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 128: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 129: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 130: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 131: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 132: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 133: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 134: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 135: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 136: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 137: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 138: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 139: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 140: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 141: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 142: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 143: One Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 144: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 145: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 146: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 147: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 148: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 149: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 150: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 151: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 152: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 153: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 154: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 155: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 156: One Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 157: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 158: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 159: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 160: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 161: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 162: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 163: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 164: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 165: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 166: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 167: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 168: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 169: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 170: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 171: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 172: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 173: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 174: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 175: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 176: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 177: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 178: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 179: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 180: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 181: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 182: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 183: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 184: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 185: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 186: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 187: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 188: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 189: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 190: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 191: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 192: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 193: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 194: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 195: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 196: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 197: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 198: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 199: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 200: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 201: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 202: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 203: One Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 204: One Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 205: One Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 206: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 207: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 208: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 209: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 210: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 211: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 212: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 213: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 214: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 215: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 216: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 217: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 218: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 219: One Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 220: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 221: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 222: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 223: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 224: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 225: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 226: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 227: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 228: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 229: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 230: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 231: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 232: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 233: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 234: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 235: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 236: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 237: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 238: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 239: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 240: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 241: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 242: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 243: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 244: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 245: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 246: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 247: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 248: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 249: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 250: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 251: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 252: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 253: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 254: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 255: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 256: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 257: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 258: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 259: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 260: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 261: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 262: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 263: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 264: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 265: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 266: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 267: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 268: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 269: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 270: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 271: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 272: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 273: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 274: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 275: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 276: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 277: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 278: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 279: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 280: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 281: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 282: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 283: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 284: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 285: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 286: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 287: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 288: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 289: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 290: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 291: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 292: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 293: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 294: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 295: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 296: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 297: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 298: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
Test 299: Two Treasure cards drawn...passes ... Discard pile grew or unchanged ...passes
File 'dominion.c'
Lines executed:21.33% of 600
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    13335:    8:int compare(const void* a, const void* b)
        -:    9:{
    13335:   10:    if (*(int*) a > *(int*) b) return 1;
    13335:   11:    if (*(int*) a < *(int*) b) return -1;
     9779:   12:    return 0;
        -:   13:}
        -:   14:
      300:   15:struct gameState* newGame()
        -:   16:{
      300:   17:    struct gameState* g = malloc(sizeof(struct gameState));
      300:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:        int k8, int k9, int k10)
        -:   23:{
    #####:   24:    int* k = malloc(10 * sizeof(int));
    #####:   25:    k[0] = k1;
    #####:   26:    k[1] = k2;
    #####:   27:    k[2] = k3;
    #####:   28:    k[3] = k4;
    #####:   29:    k[4] = k5;
    #####:   30:    k[5] = k6;
    #####:   31:    k[6] = k7;
    #####:   32:    k[7] = k8;
    #####:   33:    k[8] = k9;
    #####:   34:    k[9] = k10;
    #####:   35:    return k;
        -:   36:}
        -:   37:
        -:   38:/**
        -:   39: * Adds the right amount of victory, curse, and treasure cards to game deck.
        -:   40: * Checks for unique kingdom cards and adds them to game deck.
        -:   41: * Gives each player correct starting deck, shuffles their deck, and draws hand.
        -:   42: * Sets first player's turn.
        -:   43: *
        -:   44: * @param numPlayers    number of players in the game
        -:   45: * @param kingdomCards  array of kingdom cards in the game
        -:   46: * @param randomSeed    seed used for randomizing the deck, shuffling etc.
        -:   47: * @param state         global game state tracking
        -:   48: * @return
        -:   49: */
      300:   50:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   51:        struct gameState *state)
        -:   52:{
        -:   53:
        -:   54:    int i;
        -:   55:    int j;
        -:   56:    int it;
        -:   57:    //set up random number generator
      300:   58:    SelectStream(1);
      300:   59:    PutSeed((long) randomSeed);
        -:   60:
        -:   61:    //check number of players
      300:   62:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   63:    {
    #####:   64:        return -1;
        -:   65:    }
        -:   66:
        -:   67:    //set number of players
      300:   68:    state->numPlayers = numPlayers;
        -:   69:
        -:   70:    //check selected kingdom cards are different
     3300:   71:    for (i = 0; i < 10; i++)
        -:   72:    {
    33000:   73:        for (j = 0; j < 10; j++)
        -:   74:        {
    30000:   75:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   76:            {
    #####:   77:                return -1;
        -:   78:            }
        -:   79:        }
        -:   80:    }
        -:   81:
        -:   82:    //initialize supply
        -:   83:    ///////////////////////////////
        -:   84:
        -:   85:    //set number of Curse cards
      300:   86:    if (numPlayers == 2)
        -:   87:    {
      103:   88:        state->supplyCount[curse] = 10;
        -:   89:    }
      197:   90:    else if (numPlayers == 3)
        -:   91:    {
      105:   92:        state->supplyCount[curse] = 20;
        -:   93:    }
        -:   94:    else
        -:   95:    {
       92:   96:        state->supplyCount[curse] = 30;
        -:   97:    }
        -:   98:
        -:   99:    //set number of Victory cards
      300:  100:    if (numPlayers == 2)
        -:  101:    {
      103:  102:        state->supplyCount[estate] = 8;
      103:  103:        state->supplyCount[duchy] = 8;
      103:  104:        state->supplyCount[province] = 8;
        -:  105:    }
        -:  106:    else
        -:  107:    {
      197:  108:        state->supplyCount[estate] = 12;
      197:  109:        state->supplyCount[duchy] = 12;
      197:  110:        state->supplyCount[province] = 12;
        -:  111:    }
        -:  112:
        -:  113:    //set number of Treasure cards
      300:  114:    state->supplyCount[copper] = 60 - (7 * numPlayers);
      300:  115:    state->supplyCount[silver] = 40;
      300:  116:    state->supplyCount[gold] = 30;
        -:  117:
        -:  118:    //set number of Kingdom cards
     6300:  119:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  120:    {
    49500:  121:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  122:        {
        -:  123:            // is card i in the set of j kingdomCards for this game?
    46500:  124:            if (kingdomCards[j] == i)
        -:  125:            {
        -:  126:                //check if card is a 'Victory' Kingdom card
     3000:  127:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  128:                {
      600:  129:                    if (numPlayers == 2)
        -:  130:                    {
      103:  131:                        state->supplyCount[i] = 8;
        -:  132:                    }
        -:  133:                    else
        -:  134:                    {
      197:  135:                        state->supplyCount[i] = 12;
        -:  136:                    }
        -:  137:                }
        -:  138:                else
        -:  139:                {
     2700:  140:                    state->supplyCount[i] = 10;
        -:  141:                }
     3000:  142:                break;
        -:  143:            }
        -:  144:            else    //card is not in the set choosen for the game
        -:  145:            {
    43500:  146:                state->supplyCount[i] = -1;
        -:  147:            }
        -:  148:        }
        -:  149:
        -:  150:    }
        -:  151:
        -:  152:    ////////////////////////
        -:  153:    //supply intilization complete
        -:  154:
        -:  155:    //Give each player 3 estates and 7 copper in their deck
     1189:  156:    for (i = 0; i < numPlayers; i++)
        -:  157:    {
      889:  158:        state->deckCount[i] = 0;
     3556:  159:        for (j = 0; j < 3; j++)
        -:  160:        {
     2667:  161:            state->deck[i][j] = estate;
     2667:  162:            state->deckCount[i]++;
        -:  163:        }
     7112:  164:        for (j = 3; j < 10; j++)
        -:  165:        {
     6223:  166:            state->deck[i][j] = copper;
     6223:  167:            state->deckCount[i]++;
        -:  168:        }
        -:  169:    }
        -:  170:
        -:  171:    //shuffle player decks
     1189:  172:    for (i = 0; i < numPlayers; i++)
        -:  173:    {
      889:  174:        if (shuffle(i, state) < 0)
        -:  175:        {
    #####:  176:            return -1;
        -:  177:        }
        -:  178:    }
        -:  179:
        -:  180:    //draw player hands
     1189:  181:    for (i = 0; i < numPlayers; i++)
        -:  182:    {
        -:  183:        //initialize hand size to zero
      889:  184:        state->handCount[i] = 0;
      889:  185:        state->discardCount[i] = 0;
        -:  186:        /*martich2:  why is this commented out?*/
        -:  187:        //draw 5 cards
     5334:  188:        for (j = 0; j < 5; j++)
        -:  189:        {
     4445:  190:            drawCard(i, state);
        -:  191:        }
        -:  192:    }
        -:  193:
        -:  194:    //set embargo tokens to 0 for all supply piles
     8400:  195:    for (i = 0; i <= treasure_map; i++)
        -:  196:    {
     8100:  197:        state->embargoTokens[i] = 0;
        -:  198:    }
        -:  199:
        -:  200:    //initialize first player's turn
      300:  201:    state->outpostPlayed = 0;
      300:  202:    state->phase = 0;
      300:  203:    state->numActions = 1;
      300:  204:    state->numBuys = 1;
      300:  205:    state->playedCardCount = 0;
      300:  206:    state->whoseTurn = 0;
      300:  207:    state->handCount[state->whoseTurn] = 0;
        -:  208:
        -:  209:    // martich2: commenting this out b/c above we draw cards for all players.
        -:  210:    //Moved draw cards to here, only drawing at the start of a turn
        -:  211://    for (it = 0; it < 5; it++)
        -:  212://    {
        -:  213://        drawCard(state->whoseTurn, state);
        -:  214://    }
        -:  215:
      300:  216:    updateCoins(state->whoseTurn, state, 0);
        -:  217:
      300:  218:    return 0;
        -:  219:}
        -:  220:
      923:  221:int shuffle(int player, struct gameState *state)
        -:  222:{
        -:  223:
        -:  224:    int newDeck[MAX_DECK];
      923:  225:    int newDeckPos = 0;
        -:  226:    int card;
        -:  227:    int i;
        -:  228:
      923:  229:    if (state->deckCount[player] < 1) return -1;
      889:  230:    qsort((void*) (state->deck[player]), state->deckCount[player], sizeof(int),
        -:  231:            compare);
        -:  232:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  233:
    10668:  234:    while (state->deckCount[player] > 0)
        -:  235:    {
     8890:  236:        card = floor(Random() * state->deckCount[player]);
     8890:  237:        newDeck[newDeckPos] = state->deck[player][card];
     8890:  238:        newDeckPos++;
    28694:  239:        for (i = card; i < state->deckCount[player] - 1; i++)
        -:  240:        {
    19804:  241:            state->deck[player][i] = state->deck[player][i + 1];
        -:  242:        }
     8890:  243:        state->deckCount[player]--;
        -:  244:    }
     9779:  245:    for (i = 0; i < newDeckPos; i++)
        -:  246:    {
     8890:  247:        state->deck[player][i] = newDeck[i];
     8890:  248:        state->deckCount[player]++;
        -:  249:    }
        -:  250:
      889:  251:    return 0;
        -:  252:}
        -:  253:
    #####:  254:int playCard(int handPos, int choice1, int choice2, int choice3,
        -:  255:        struct gameState *state)
        -:  256:{
        -:  257:    int card;
    #####:  258:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  259:
        -:  260:    //check if it is the right phase
    #####:  261:    if (state->phase != 0)
        -:  262:    {
    #####:  263:        return -1;
        -:  264:    }
        -:  265:
        -:  266:    //check if player has enough actions
    #####:  267:    if (state->numActions < 1)
        -:  268:    {
    #####:  269:        return -1;
        -:  270:    }
        -:  271:
        -:  272:    //get card played
    #####:  273:    card = handCard(handPos, state);
        -:  274:
        -:  275:    //check if selected card is an action
    #####:  276:    if (card < adventurer || card > treasure_map)
        -:  277:    {
    #####:  278:        return -1;
        -:  279:    }
        -:  280:
        -:  281:    //play card
    #####:  282:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus)
        -:  283:            < 0)
        -:  284:    {
    #####:  285:        return -1;
        -:  286:    }
        -:  287:
        -:  288:    //reduce number of actions
    #####:  289:    state->numActions--;
        -:  290:
        -:  291:    //update coins (Treasure cards may be added with card draws)
    #####:  292:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  293:
    #####:  294:    return 0;
        -:  295:}
        -:  296:
    #####:  297:int buyCard(int supplyPos, struct gameState *state)
        -:  298:{
        -:  299:    int who;
        -:  300:    if (DEBUG)
        -:  301:    {
        -:  302:        printf("Entering buyCard...\n");
        -:  303:    }
        -:  304:
        -:  305:    // I don't know what to do about the phase thing.
        -:  306:
    #####:  307:    who = state->whoseTurn;
        -:  308:
    #####:  309:    if (state->numBuys < 1)
        -:  310:    {
        -:  311:        if (DEBUG) printf("You do not have any buys left\n");
    #####:  312:        return -1;
        -:  313:    }
    #####:  314:    else if (supplyCount(supplyPos, state) < 1)
        -:  315:    {
        -:  316:        if (DEBUG) printf("There are not any of that type of card left\n");
    #####:  317:        return -1;
        -:  318:    }
    #####:  319:    else if (state->coins < getCost(supplyPos))
        -:  320:    {
        -:  321:        if (DEBUG)
        -:  322:            printf(
        -:  323:                    "You do not have enough money to buy that. You have %d coins.\n",
        -:  324:                    state->coins);
    #####:  325:        return -1;
        -:  326:    }
        -:  327:    else
        -:  328:    {
    #####:  329:        state->phase = 1;
        -:  330:        //state->supplyCount[supplyPos]--;
        -:  331:        //card goes in discard, this might be wrong..
        -:  332:        //(2 means goes into hand, 0 goes into discard)
    #####:  333:        gainCard(supplyPos, state, 0, who);
        -:  334:
    #####:  335:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  336:        state->numBuys--;
        -:  337:        if (DEBUG)
        -:  338:            printf(
        -:  339:                    "You bought card number %d for %d coins. You now have %d buys and %d coins.\n",
        -:  340:                    supplyPos, getCost(supplyPos), state->numBuys,
        -:  341:                    state->coins);
        -:  342:    }
        -:  343:
        -:  344:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  345:    //state->discardCount[who]++;
        -:  346:
    #####:  347:    return 0;
        -:  348:}
        -:  349:
        -:  350:/* get number of cards in the current player's hand */
    #####:  351:int numHandCards(struct gameState *state)
        -:  352:{
    #####:  353:    return state->handCount[whoseTurn(state)];
        -:  354:}
        -:  355:
        -:  356:/* get a card in current player's hand from a given location in the hand */
    #####:  357:int handCard(int handPos, struct gameState *state)
        -:  358:{
    #####:  359:    int currentPlayer = whoseTurn(state);
    #####:  360:    return state->hand[currentPlayer][handPos];
        -:  361:}
        -:  362:
        -:  363:/* get the remaining number of cards in a given card supply */
    #####:  364:int supplyCount(int card, struct gameState *state)
        -:  365:{
    #####:  366:    return state->supplyCount[card];
        -:  367:}
        -:  368:
    #####:  369:int fullDeckCount(int player, int card, struct gameState *state)
        -:  370:{
        -:  371:    int i;
    #####:  372:    int count = 0;
        -:  373:
    #####:  374:    for (i = 0; i < state->deckCount[player]; i++)
        -:  375:    {
    #####:  376:        if (state->deck[player][i] == card) count++;
        -:  377:    }
        -:  378:
    #####:  379:    for (i = 0; i < state->handCount[player]; i++)
        -:  380:    {
    #####:  381:        if (state->hand[player][i] == card) count++;
        -:  382:    }
        -:  383:
    #####:  384:    for (i = 0; i < state->discardCount[player]; i++)
        -:  385:    {
    #####:  386:        if (state->discard[player][i] == card) count++;
        -:  387:    }
        -:  388:
    #####:  389:    return count;
        -:  390:}
        -:  391:
      300:  392:int whoseTurn(struct gameState *state)
        -:  393:{
      300:  394:    return state->whoseTurn;
        -:  395:}
        -:  396:
    #####:  397:int endTurn(struct gameState *state)
        -:  398:{
        -:  399:    int k;
        -:  400:    int i;
    #####:  401:    int currentPlayer = whoseTurn(state);
        -:  402:
        -:  403:    //Discard hand
    #####:  404:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  405:    {
    #####:  406:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
    #####:  407:                state->hand[currentPlayer][i];	//Discard
    #####:  408:        state->hand[currentPlayer][i] = -1;	//Set card to -1
        -:  409:    }
    #####:  410:    state->handCount[currentPlayer] = 0;	//Reset hand count
        -:  411:
        -:  412:    //Code for determining the player , next player after current player
    #####:  413:    if (currentPlayer < (state->numPlayers - 1))
        -:  414:    {
    #####:  415:        state->whoseTurn = currentPlayer + 1;	//Still safe to increment
        -:  416:    }
        -:  417:    else
        -:  418:    {
        -:  419:        //Max player has been reached, loop back around to player 1
    #####:  420:        state->whoseTurn = 0;
        -:  421:    }
        -:  422:
        -:  423:    // clears game state, and set for next player
    #####:  424:    state->outpostPlayed = 0;
    #####:  425:    state->phase = 0;
    #####:  426:    state->numActions = 1;
    #####:  427:    state->coins = 0;
    #####:  428:    state->numBuys = 1;
    #####:  429:    state->playedCardCount = 0;
    #####:  430:    state->handCount[state->whoseTurn] = 0;
        -:  431:
        -:  432:    //Next player draws hand
    #####:  433:    for (k = 0; k < 5; k++)
        -:  434:    {
    #####:  435:        drawCard(state->whoseTurn, state);	//Draw a card
        -:  436:    }
        -:  437:
        -:  438:    //Update money for the next player
    #####:  439:    updateCoins(state->whoseTurn, state, 0);
        -:  440:
    #####:  441:    return 0;
        -:  442:}
        -:  443:
        -:  444:/* 1 game is over. 0 game is NOT over */
    #####:  445:int isGameOver(struct gameState *state)
        -:  446:{
        -:  447:    int i;
        -:  448:    int j;
        -:  449:
        -:  450:    //if stack of Province cards is empty, the game ends
    #####:  451:    if (state->supplyCount[province] == 0)
        -:  452:    {
    #####:  453:        return 1;
        -:  454:    }
        -:  455:
        -:  456:    //if three supply pile are at 0, the game ends
    #####:  457:    j = 0;
    #####:  458:    for (i = 0; i < 25; i++)
        -:  459:    {
    #####:  460:        if (state->supplyCount[i] == 0)
        -:  461:        {
    #####:  462:            j++;
        -:  463:        }
        -:  464:    }
    #####:  465:    if (j >= 3)
        -:  466:    {
    #####:  467:        return 1;
        -:  468:    }
        -:  469:
    #####:  470:    return 0;
        -:  471:}
        -:  472:
    #####:  473:int scoreFor(int player, struct gameState *state)
        -:  474:{
        -:  475:
        -:  476:    int i;
    #####:  477:    int score = 0;
        -:  478:    //score from hand
    #####:  479:    for (i = 0; i < state->handCount[player]; i++)
        -:  480:    {
    #####:  481:        if (state->hand[player][i] == curse)
        -:  482:        {
    #####:  483:            score = score - 1;
        -:  484:        };
    #####:  485:        if (state->hand[player][i] == estate)
        -:  486:        {
    #####:  487:            score = score + 1;
        -:  488:        };
    #####:  489:        if (state->hand[player][i] == duchy)
        -:  490:        {
    #####:  491:            score = score + 3;
        -:  492:        };
    #####:  493:        if (state->hand[player][i] == province)
        -:  494:        {
    #####:  495:            score = score + 6;
        -:  496:        };
    #####:  497:        if (state->hand[player][i] == great_hall)
        -:  498:        {
    #####:  499:            score = score + 1;
        -:  500:        };
    #####:  501:        if (state->hand[player][i] == gardens)
        -:  502:        {
    #####:  503:            score = score + (fullDeckCount(player, 0, state) / 10);
        -:  504:        };
        -:  505:    }
        -:  506:
        -:  507:    //score from discard
    #####:  508:    for (i = 0; i < state->discardCount[player]; i++)
        -:  509:    {
    #####:  510:        if (state->discard[player][i] == curse)
        -:  511:        {
    #####:  512:            score = score - 1;
        -:  513:        };
    #####:  514:        if (state->discard[player][i] == estate)
        -:  515:        {
    #####:  516:            score = score + 1;
        -:  517:        };
    #####:  518:        if (state->discard[player][i] == duchy)
        -:  519:        {
    #####:  520:            score = score + 3;
        -:  521:        };
    #####:  522:        if (state->discard[player][i] == province)
        -:  523:        {
    #####:  524:            score = score + 6;
        -:  525:        };
    #####:  526:        if (state->discard[player][i] == great_hall)
        -:  527:        {
    #####:  528:            score = score + 1;
        -:  529:        };
    #####:  530:        if (state->discard[player][i] == gardens)
        -:  531:        {
    #####:  532:            score = score + (fullDeckCount(player, 0, state) / 10);
        -:  533:        };
        -:  534:    }
        -:  535:
        -:  536:    //score from deck
    #####:  537:    for (i = 0; i < state->discardCount[player]; i++)
        -:  538:    {
    #####:  539:        if (state->deck[player][i] == curse)
        -:  540:        {
    #####:  541:            score = score - 1;
        -:  542:        };
    #####:  543:        if (state->deck[player][i] == estate)
        -:  544:        {
    #####:  545:            score = score + 1;
        -:  546:        };
    #####:  547:        if (state->deck[player][i] == duchy)
        -:  548:        {
    #####:  549:            score = score + 3;
        -:  550:        };
    #####:  551:        if (state->deck[player][i] == province)
        -:  552:        {
    #####:  553:            score = score + 6;
        -:  554:        };
    #####:  555:        if (state->deck[player][i] == great_hall)
        -:  556:        {
    #####:  557:            score = score + 1;
        -:  558:        };
    #####:  559:        if (state->deck[player][i] == gardens)
        -:  560:        {
    #####:  561:            score = score + (fullDeckCount(player, 0, state) / 10);
        -:  562:        };
        -:  563:    }
        -:  564:
    #####:  565:    return score;
        -:  566:}
        -:  567:
    #####:  568:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  569:{
        -:  570:    int i;
        -:  571:    int j;
        -:  572:    int highScore;
        -:  573:    int currentPlayer;
        -:  574:
        -:  575:    //get score for each player
    #####:  576:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  577:    {
        -:  578:        //set unused player scores to -9999
    #####:  579:        if (i >= state->numPlayers)
        -:  580:        {
    #####:  581:            players[i] = -9999;
        -:  582:        }
        -:  583:        else
        -:  584:        {
    #####:  585:            players[i] = scoreFor(i, state);
        -:  586:        }
        -:  587:    }
        -:  588:
        -:  589:    //find highest score
    #####:  590:    j = 0;
    #####:  591:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  592:    {
    #####:  593:        if (players[i] > players[j])
        -:  594:        {
    #####:  595:            j = i;
        -:  596:        }
        -:  597:    }
    #####:  598:    highScore = players[j];
        -:  599:
        -:  600:    //add 1 to players who had less turns
    #####:  601:    currentPlayer = whoseTurn(state);
    #####:  602:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  603:    {
    #####:  604:        if (players[i] == highScore && i > currentPlayer)
        -:  605:        {
    #####:  606:            players[i]++;
        -:  607:        }
        -:  608:    }
        -:  609:
        -:  610:    //find new highest score
    #####:  611:    j = 0;
    #####:  612:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  613:    {
    #####:  614:        if (players[i] > players[j])
        -:  615:        {
    #####:  616:            j = i;
        -:  617:        }
        -:  618:    }
    #####:  619:    highScore = players[j];
        -:  620:
        -:  621:    //set winners in array to 1 and rest to 0
    #####:  622:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  623:    {
    #####:  624:        if (players[i] == highScore)
        -:  625:        {
    #####:  626:            players[i] = 1;
        -:  627:        }
        -:  628:        else
        -:  629:        {
    #####:  630:            players[i] = 0;
        -:  631:        }
        -:  632:    }
        -:  633:
    #####:  634:    return 0;
        -:  635:}
        -:  636:
     9809:  637:int drawCard(int player, struct gameState *state)
        -:  638:{
        -:  639:    int count;
        -:  640:    int deckCounter;
     9809:  641:    if (state->deckCount[player] <= 0)
        -:  642:    {	//Deck is empty
        -:  643:
        -:  644:        //Step 1 Shuffle the discard pile back into a deck
        -:  645:        int i;
        -:  646:        //Move discard to deck
       17:  647:        for (i = 0; i < state->discardCount[player]; i++)
        -:  648:        {
    #####:  649:            state->deck[player][i] = state->discard[player][i];
    #####:  650:            state->discard[player][i] = -1;
        -:  651:        }
        -:  652:
       17:  653:        state->deckCount[player] = state->discardCount[player];
       17:  654:        state->discardCount[player] = 0;	//Reset discard
        -:  655:
        -:  656:        //Shufffle the deck
       17:  657:        shuffle(player, state);	//Shuffle the deck up and make it so that we can draw
        -:  658:
        -:  659:        if (DEBUG)
        -:  660:        {	//Debug statements
        -:  661:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  662:        }
        -:  663:
       17:  664:        state->discardCount[player] = 0;
        -:  665:
        -:  666:        //Step 2 Draw Card
       17:  667:        count = state->handCount[player];	//Get current player's hand count
        -:  668:
        -:  669:        if (DEBUG)
        -:  670:        {	//Debug statements
        -:  671:            printf("Current hand count: %d\n", count);
        -:  672:        }
        -:  673:
       17:  674:        deckCounter = state->deckCount[player];	//Create a holder for the deck count
        -:  675:
       17:  676:        if (deckCounter == 0) return -1;
        -:  677:
    #####:  678:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  679:        state->deckCount[player]--;
    #####:  680:        state->handCount[player]++;	//Increment hand count
        -:  681:    }
        -:  682:
        -:  683:    else
        -:  684:    {
     9792:  685:        int count = state->handCount[player];//Get current hand count for player
        -:  686:        int deckCounter;
        -:  687:        if (DEBUG)
        -:  688:        {	//Debug statements
        -:  689:            printf("Current hand count: %d\n", count);
        -:  690:        }
        -:  691:
     9792:  692:        deckCounter = state->deckCount[player];	//Create holder for the deck count
     9792:  693:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     9792:  694:        state->deckCount[player]--; // remove card from deck to hand.
     9792:  695:        state->handCount[player]++;	//Increment hand count
        -:  696:    }
        -:  697:
     9792:  698:    return 0;
        -:  699:}
        -:  700:
    #####:  701:int getCost(int cardNumber)
        -:  702:{
    #####:  703:    switch (cardNumber)
        -:  704:    {
        -:  705:        case curse:
    #####:  706:            return 0;
        -:  707:        case estate:
    #####:  708:            return 2;
        -:  709:        case duchy:
    #####:  710:            return 5;
        -:  711:        case province:
    #####:  712:            return 8;
        -:  713:        case copper:
    #####:  714:            return 0;
        -:  715:        case silver:
    #####:  716:            return 3;
        -:  717:        case gold:
    #####:  718:            return 6;
        -:  719:        case adventurer:
    #####:  720:            return 6;
        -:  721:        case council_room:
    #####:  722:            return 5;
        -:  723:        case feast:
    #####:  724:            return 4;
        -:  725:        case gardens:
    #####:  726:            return 4;
        -:  727:        case mine:
    #####:  728:            return 5;
        -:  729:        case remodel:
    #####:  730:            return 4;
        -:  731:        case smithy:
    #####:  732:            return 4;
        -:  733:        case village:
    #####:  734:            return 3;
        -:  735:        case baron:
    #####:  736:            return 4;
        -:  737:        case great_hall:
    #####:  738:            return 3;
        -:  739:        case minion:
    #####:  740:            return 5;
        -:  741:        case steward:
    #####:  742:            return 3;
        -:  743:        case tribute:
    #####:  744:            return 5;
        -:  745:        case ambassador:
    #####:  746:            return 3;
        -:  747:        case cutpurse:
    #####:  748:            return 4;
        -:  749:        case embargo:
    #####:  750:            return 2;
        -:  751:        case outpost:
    #####:  752:            return 5;
        -:  753:        case salvager:
    #####:  754:            return 4;
        -:  755:        case sea_hag:
    #####:  756:            return 4;
        -:  757:        case treasure_map:
    #####:  758:            return 4;
        -:  759:    }
        -:  760:
    #####:  761:    return -1;
        -:  762:}
        -:  763:
        -:  764:/* added a comment just for fun */
      300:  765:int cardEffect(int card, int choice1, int choice2, int choice3,
        -:  766:        struct gameState *state, int handPos, int *bonus)
        -:  767:{
        -:  768:    int i;
        -:  769:    int j;
        -:  770:    int k;
        -:  771:    int x;
      300:  772:    int currentPlayer = whoseTurn(state);
      300:  773:    int nextPlayer = currentPlayer + 1;
        -:  774:
      300:  775:    int tributeRevealedCards[2] = { -1, -1 };
        -:  776:    int temphand[MAX_HAND];	// moved above the if statement
      300:  777:    int drawntreasure = 0;
        -:  778:    int cardDrawn;
      300:  779:    int z = 0;	// this is the counter for the temp hand
      300:  780:    if (nextPlayer > (state->numPlayers - 1))
        -:  781:    {
      125:  782:        nextPlayer = 0;
        -:  783:    }
        -:  784:
        -:  785:    //uses switch to select card and perform actions
      300:  786:    switch (card)
        -:  787:    {
        -:  788:        case adventurer:
     5964:  789:            while (drawntreasure < 2)
        -:  790:            {
     5364:  791:                if (state->deckCount[currentPlayer] < 1)
        -:  792:                {//if the deck is empty we need to shuffle discard and add to deck
       17:  793:                    shuffle(currentPlayer, state);
        -:  794:                }
     5364:  795:                drawCard(currentPlayer, state);
        -:  796:                //top card of hand is most recently drawn card.
     5364:  797:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]- 1];
     5364:  798:                if (cardDrawn == copper || cardDrawn == silver
     4950:  799:                        || cardDrawn == gold)
      600:  800:                    drawntreasure++;
        -:  801:                else
        -:  802:                {
     4764:  803:                    temphand[z] = cardDrawn;
        -:  804:                    //this should just remove the top card (the most recently drawn one).
     4764:  805:                    state->handCount[currentPlayer]--;
     4764:  806:                    z++;
        -:  807:                }
        -:  808:            }
        -:  809:            // discard all cards in play that have been drawn
     5364:  810:            while (z - 1 >= 0)
        -:  811:            {
     4764:  812:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1];
     4764:  813:                z = z - 1;
        -:  814:            }
      300:  815:            return 0;
        -:  816:
        -:  817:        case council_room:
        -:  818:            //+4 Cards
    #####:  819:            for (i = 0; i < 4; i++)
        -:  820:            {
    #####:  821:                drawCard(currentPlayer, state);
        -:  822:            }
        -:  823:
        -:  824:            //+1 Buy
    #####:  825:            state->numBuys++;
        -:  826:
        -:  827:            //Each other player draws a card
    #####:  828:            for (i = 0; i < state->numPlayers; i++)
        -:  829:            {
    #####:  830:                if (i != currentPlayer)
        -:  831:                {
    #####:  832:                    drawCard(i, state);
        -:  833:                }
        -:  834:            }
        -:  835:
        -:  836:            //put played card in played card pile
    #####:  837:            discardCard(handPos, currentPlayer, state, 0);
        -:  838:
    #####:  839:            return 0;
        -:  840:
        -:  841:        case feast:
        -:  842:            //gain card with cost up to 5
        -:  843:            //Backup hand
    #####:  844:            for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  845:            {
    #####:  846:                temphand[i] = state->hand[currentPlayer][i];	//Backup card
    #####:  847:                state->hand[currentPlayer][i] = -1;		//Set to nothing
        -:  848:            }
        -:  849:            //Backup hand
        -:  850:
        -:  851:            //Update Coins for Buy
    #####:  852:            updateCoins(currentPlayer, state, 5);
    #####:  853:            x = 1;		//Condition to loop on
    #####:  854:            while (x == 1)
        -:  855:            {		//Buy one card
    #####:  856:                if (supplyCount(choice1, state) <= 0)
        -:  857:                {
        -:  858:                    if (DEBUG) printf("None of that card left, sorry!\n");
        -:  859:
        -:  860:                    if (DEBUG)
        -:  861:                    {
        -:  862:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  863:                    }
        -:  864:                }
    #####:  865:                else if (state->coins < getCost(choice1))
        -:  866:                {
    #####:  867:                    printf("That card is too expensive!\n");
        -:  868:
        -:  869:                    if (DEBUG)
        -:  870:                    {
        -:  871:                        printf("Coins: %d < %d\n", state->coins,
        -:  872:                                getCost(choice1));
        -:  873:                    }
        -:  874:                }
        -:  875:                else
        -:  876:                {
        -:  877:
        -:  878:                    if (DEBUG)
        -:  879:                    {
        -:  880:                        printf("Deck Count: %d\n",
        -:  881:                                state->handCount[currentPlayer]
        -:  882:                                        + state->deckCount[currentPlayer]
        -:  883:                                        + state->discardCount[currentPlayer]);
        -:  884:                    }
        -:  885:
    #####:  886:                    gainCard(choice1, state, 0, currentPlayer);	//Gain the card
    #####:  887:                    x = 0;		//No more buying cards
        -:  888:
        -:  889:                    if (DEBUG)
        -:  890:                    {
        -:  891:                        printf("Deck Count: %d\n",
        -:  892:                                state->handCount[currentPlayer]
        -:  893:                                        + state->deckCount[currentPlayer]
        -:  894:                                        + state->discardCount[currentPlayer]);
        -:  895:                    }
        -:  896:
        -:  897:                }
        -:  898:            }
        -:  899:
        -:  900:            //Reset Hand
    #####:  901:            for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  902:            {
    #####:  903:                state->hand[currentPlayer][i] = temphand[i];
    #####:  904:                temphand[i] = -1;
        -:  905:            }
        -:  906:            //Reset Hand
        -:  907:
    #####:  908:            return 0;
        -:  909:
        -:  910:        case gardens:
    #####:  911:            return -1;
        -:  912:
        -:  913:        case mine:
    #####:  914:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  915:
    #####:  916:            if (state->hand[currentPlayer][choice1] < copper
    #####:  917:                    || state->hand[currentPlayer][choice1] > gold)
        -:  918:            {
    #####:  919:                return -1;
        -:  920:            }
        -:  921:
    #####:  922:            if (choice2 > treasure_map || choice2 < curse)
        -:  923:            {
    #####:  924:                return -1;
        -:  925:            }
        -:  926:
    #####:  927:            if ((getCost(state->hand[currentPlayer][choice1]) + 3)
    #####:  928:                    > getCost(choice2))
        -:  929:            {
    #####:  930:                return -1;
        -:  931:            }
        -:  932:
    #####:  933:            gainCard(choice2, state, 2, currentPlayer);
        -:  934:
        -:  935:            //discard card from hand
    #####:  936:            discardCard(handPos, currentPlayer, state, 0);
        -:  937:
        -:  938:            //discard trashed card
    #####:  939:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  940:            {
    #####:  941:                if (state->hand[currentPlayer][i] == j)
        -:  942:                {
    #####:  943:                    discardCard(i, currentPlayer, state, 0);
    #####:  944:                    break;
        -:  945:                }
        -:  946:            }
        -:  947:
    #####:  948:            return 0;
        -:  949:
        -:  950:        case remodel:
    #####:  951:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  952:
    #####:  953:            if ((getCost(state->hand[currentPlayer][choice1]) + 2)
    #####:  954:                    > getCost(choice2))
        -:  955:            {
    #####:  956:                return -1;
        -:  957:            }
        -:  958:
    #####:  959:            gainCard(choice2, state, 0, currentPlayer);
        -:  960:
        -:  961:            //discard card from hand
    #####:  962:            discardCard(handPos, currentPlayer, state, 0);
        -:  963:
        -:  964:            //discard trashed card
    #####:  965:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  966:            {
    #####:  967:                if (state->hand[currentPlayer][i] == j)
        -:  968:                {
    #####:  969:                    discardCard(i, currentPlayer, state, 0);
    #####:  970:                    break;
        -:  971:                }
        -:  972:            }
        -:  973:
    #####:  974:            return 0;
        -:  975:
        -:  976:        case smithy:
    #####:  977:            return smithyEffect(currentPlayer, state, handPos);
        -:  978:
        -:  979:        case village:
    #####:  980:            return villageEffect(currentPlayer, state, handPos);
        -:  981:
        -:  982:        case baron:
    #####:  983:            state->numBuys++;  //Increase buys by 1!
    #####:  984:            if (choice1 > 0)
        -:  985:            {  //Boolean true or going to discard an estate
    #####:  986:                int p = 0;  //Iterator for hand!
    #####:  987:                int card_not_discarded = 1;  //Flag for discard set!
    #####:  988:                while (card_not_discarded)
        -:  989:                {
    #####:  990:                    if (state->hand[currentPlayer][p] == estate)
        -:  991:                    {  //Found an estate card!
    #####:  992:                        state->coins += 4;  //Add 4 coins to the amount of coins
    #####:  993:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] =
    #####:  994:                                state->hand[currentPlayer][p];
    #####:  995:                        state->discardCount[currentPlayer]++;
    #####:  996:                        for (; p < state->handCount[currentPlayer]; p++)
        -:  997:                        {
    #####:  998:                            state->hand[currentPlayer][p] =
    #####:  999:                                    state->hand[currentPlayer][p + 1];
        -: 1000:                        }
    #####: 1001:                        state->hand[currentPlayer][state->handCount[currentPlayer]] =
        -: 1002:                                -1;
    #####: 1003:                        state->handCount[currentPlayer]--;
    #####: 1004:                        card_not_discarded = 0;  //Exit the loop
        -: 1005:                    }
    #####: 1006:                    else if (p > state->handCount[currentPlayer])
        -: 1007:                    {
        -: 1008:                        if (DEBUG)
        -: 1009:                        {
        -: 1010:                            printf(
        -: 1011:                                    "No estate cards in your hand, invalid choice\n");
        -: 1012:                            printf("Must gain an estate if there are any\n");
        -: 1013:                        }
    #####: 1014:                        if (supplyCount(estate, state) > 0)
        -: 1015:                        {
    #####: 1016:                            gainCard(estate, state, 0, currentPlayer);
    #####: 1017:                            state->supplyCount[estate]--;  //Decrement estates
    #####: 1018:                            if (supplyCount(estate, state) == 0)
        -: 1019:                            {
    #####: 1020:                                isGameOver(state);
        -: 1021:                            }
        -: 1022:                        }
    #####: 1023:                        card_not_discarded = 0;  //Exit the loop
        -: 1024:                    }
        -: 1025:
        -: 1026:                    else
        -: 1027:                    {
    #####: 1028:                        p++;  //Next card
        -: 1029:                    }
        -: 1030:                }
        -: 1031:            }
        -: 1032:
        -: 1033:            else
        -: 1034:            {
    #####: 1035:                if (supplyCount(estate, state) > 0)
        -: 1036:                {
    #####: 1037:                    gainCard(estate, state, 0, currentPlayer);  //Gain an estate
    #####: 1038:                    state->supplyCount[estate]--;  //Decrement Estates
    #####: 1039:                    if (supplyCount(estate, state) == 0)
        -: 1040:                    {
    #####: 1041:                        isGameOver(state);
        -: 1042:                    }
        -: 1043:                }
        -: 1044:            }
        -: 1045:
    #####: 1046:            return 0;
        -: 1047:
        -: 1048:        case great_hall:
    #####: 1049:            return great_hallEffect(currentPlayer, state, handPos);
        -: 1050:
        -: 1051:        case minion:
        -: 1052:            //+1 action
    #####: 1053:            state->numActions++;
        -: 1054:
        -: 1055:            //discard card from hand
    #####: 1056:            discardCard(handPos, currentPlayer, state, 0);
        -: 1057:
    #####: 1058:            if (choice1)		//+2 coins
        -: 1059:            {
    #####: 1060:                state->coins = state->coins + 2;
        -: 1061:            }
        -: 1062:
        -: 1063:            //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    #####: 1064:            else if (choice2)
        -: 1065:            {
        -: 1066:                //discard hand
    #####: 1067:                while (numHandCards(state) > 0)
        -: 1068:                {
    #####: 1069:                    discardCard(handPos, currentPlayer, state, 0);
        -: 1070:                }
        -: 1071:
        -: 1072:                //draw 4
    #####: 1073:                for (i = 0; i < 4; i++)
        -: 1074:                {
    #####: 1075:                    drawCard(currentPlayer, state);
        -: 1076:                }
        -: 1077:
        -: 1078:                //other players discard hand and redraw if hand size > 4
    #####: 1079:                for (i = 0; i < state->numPlayers; i++)
        -: 1080:                {
    #####: 1081:                    if (i != currentPlayer)
        -: 1082:                    {
    #####: 1083:                        if (state->handCount[i] > 4)
        -: 1084:                        {
        -: 1085:                            //discard hand
    #####: 1086:                            while (state->handCount[i] > 0)
        -: 1087:                            {
    #####: 1088:                                discardCard(handPos, i, state, 0);
        -: 1089:                            }
        -: 1090:
        -: 1091:                            //draw 4
    #####: 1092:                            for (j = 0; j < 4; j++)
        -: 1093:                            {
    #####: 1094:                                drawCard(i, state);
        -: 1095:                            }
        -: 1096:                        }
        -: 1097:                    }
        -: 1098:                }
        -: 1099:
        -: 1100:            }
    #####: 1101:            return 0;
        -: 1102:
        -: 1103:        case steward:
    #####: 1104:            if (choice1 == 1)
        -: 1105:            {
        -: 1106:                //+2 cards
    #####: 1107:                drawCard(currentPlayer, state);
    #####: 1108:                drawCard(currentPlayer, state);
        -: 1109:            }
    #####: 1110:            else if (choice1 == 2)
        -: 1111:            {
        -: 1112:                //+2 coins
    #####: 1113:                state->coins = state->coins + 2;
        -: 1114:            }
        -: 1115:            else
        -: 1116:            {
        -: 1117:                //trash 2 cards in hand
    #####: 1118:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1119:                discardCard(choice3, currentPlayer, state, 1);
        -: 1120:            }
        -: 1121:
        -: 1122:            //discard card from hand
    #####: 1123:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1124:            return 0;
        -: 1125:
        -: 1126:        case tribute:
    #####: 1127:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer])
        -: 1128:                    <= 1)
        -: 1129:            {
    #####: 1130:                if (state->deckCount[nextPlayer] > 0)
        -: 1131:                {
    #####: 1132:                    tributeRevealedCards[0] =
    #####: 1133:                            state->deck[nextPlayer][state->deckCount[nextPlayer]
    #####: 1134:                                    - 1];
    #####: 1135:                    state->deckCount[nextPlayer]--;
        -: 1136:                }
    #####: 1137:                else if (state->discardCount[nextPlayer] > 0)
        -: 1138:                {
    #####: 1139:                    tributeRevealedCards[0] =
    #####: 1140:                            state->discard[nextPlayer][state->discardCount[nextPlayer]
    #####: 1141:                                    - 1];
    #####: 1142:                    state->discardCount[nextPlayer]--;
        -: 1143:                }
        -: 1144:                else
        -: 1145:                {
        -: 1146:                    //No Card to Reveal
        -: 1147:                    if (DEBUG)
        -: 1148:                    {
        -: 1149:                        printf("No cards to reveal\n");
        -: 1150:                    }
        -: 1151:                }
        -: 1152:            }
        -: 1153:
        -: 1154:            else
        -: 1155:            {
    #####: 1156:                if (state->deckCount[nextPlayer] == 0)
        -: 1157:                {
    #####: 1158:                    for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1159:                    {
    #####: 1160:                        state->deck[nextPlayer][i] =
    #####: 1161:                                state->discard[nextPlayer][i];	//Move to deck
    #####: 1162:                        state->deckCount[nextPlayer]++;
    #####: 1163:                        state->discard[nextPlayer][i] = -1;
    #####: 1164:                        state->discardCount[nextPlayer]--;
        -: 1165:                    }
        -: 1166:
    #####: 1167:                    shuffle(nextPlayer, state);		//Shuffle the deck
        -: 1168:                }
    #####: 1169:                tributeRevealedCards[0] =
    #####: 1170:                        state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1171:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1172:                state->deckCount[nextPlayer]--;
    #####: 1173:                tributeRevealedCards[1] =
    #####: 1174:                        state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1175:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1176:                state->deckCount[nextPlayer]--;
        -: 1177:            }
        -: 1178:
    #####: 1179:            if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1180:            {		//If we have a duplicate card, just drop one
    #####: 1181:                state->playedCards[state->playedCardCount] =
    #####: 1182:                        tributeRevealedCards[1];
    #####: 1183:                state->playedCardCount++;
    #####: 1184:                tributeRevealedCards[1] = -1;
        -: 1185:            }
        -: 1186:
    #####: 1187:            for (i = 0; i <= 2; i++)
        -: 1188:            {
    #####: 1189:                if (tributeRevealedCards[i] == copper
    #####: 1190:                        || tributeRevealedCards[i] == silver
    #####: 1191:                        || tributeRevealedCards[i] == gold)
        -: 1192:                {		//Treasure cards
    #####: 1193:                    state->coins += 2;
        -: 1194:                }
        -: 1195:
    #####: 1196:                else if (tributeRevealedCards[i] == estate
    #####: 1197:                        || tributeRevealedCards[i] == duchy
    #####: 1198:                        || tributeRevealedCards[i] == province
    #####: 1199:                        || tributeRevealedCards[i] == gardens
    #####: 1200:                        || tributeRevealedCards[i] == great_hall)
        -: 1201:                {		//Victory Card Found
    #####: 1202:                    drawCard(currentPlayer, state);
    #####: 1203:                    drawCard(currentPlayer, state);
        -: 1204:                }
        -: 1205:                else
        -: 1206:                {		//Action Card
    #####: 1207:                    state->numActions = state->numActions + 2;
        -: 1208:                }
        -: 1209:            }
        -: 1210:
    #####: 1211:            return 0;
        -: 1212:
        -: 1213:        case ambassador:
    #####: 1214:            j = 0;		//used to check if player has enough cards to discard
        -: 1215:
    #####: 1216:            if (choice2 > 2 || choice2 < 0)
        -: 1217:            {
    #####: 1218:                return -1;
        -: 1219:            }
        -: 1220:
    #####: 1221:            if (choice1 == handPos)
        -: 1222:            {
    #####: 1223:                return -1;
        -: 1224:            }
        -: 1225:
    #####: 1226:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1227:            {
    #####: 1228:                if (i != handPos && i == state->hand[currentPlayer][choice1]
    #####: 1229:                        && i != choice1)
        -: 1230:                {
    #####: 1231:                    j++;
        -: 1232:                }
        -: 1233:            }
    #####: 1234:            if (j < choice2)
        -: 1235:            {
    #####: 1236:                return -1;
        -: 1237:            }
        -: 1238:
        -: 1239:            if (DEBUG)
        -: 1240:                printf("Player %d reveals card number: %d\n", currentPlayer,
        -: 1241:                        state->hand[currentPlayer][choice1]);
        -: 1242:
        -: 1243:            //increase supply count for choosen card by amount being discarded
    #####: 1244:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1245:
        -: 1246:            //each other player gains a copy of revealed card
    #####: 1247:            for (i = 0; i < state->numPlayers; i++)
        -: 1248:            {
    #####: 1249:                if (i != currentPlayer)
        -: 1250:                {
    #####: 1251:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1252:                }
        -: 1253:            }
        -: 1254:
        -: 1255:            //discard played card from hand
    #####: 1256:            discardCard(handPos, currentPlayer, state, 0);
        -: 1257:
        -: 1258:            //trash copies of cards returned to supply
    #####: 1259:            for (j = 0; j < choice2; j++)
        -: 1260:            {
    #####: 1261:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1262:                {
    #####: 1263:                    if (state->hand[currentPlayer][i]
    #####: 1264:                            == state->hand[currentPlayer][choice1])
        -: 1265:                    {
    #####: 1266:                        discardCard(i, currentPlayer, state, 1);
    #####: 1267:                        break;
        -: 1268:                    }
        -: 1269:                }
        -: 1270:            }
        -: 1271:
    #####: 1272:            return 0;
        -: 1273:
        -: 1274:        case cutpurse:
        -: 1275:
    #####: 1276:            updateCoins(currentPlayer, state, 2);
    #####: 1277:            for (i = 0; i < state->numPlayers; i++)
        -: 1278:            {
    #####: 1279:                if (i != currentPlayer)
        -: 1280:                {
    #####: 1281:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1282:                    {
    #####: 1283:                        if (state->hand[i][j] == copper)
        -: 1284:                        {
    #####: 1285:                            discardCard(j, i, state, 0);
    #####: 1286:                            break;
        -: 1287:                        }
    #####: 1288:                        if (j == state->handCount[i])
        -: 1289:                        {
    #####: 1290:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1291:                            {
        -: 1292:                                if (DEBUG)
        -: 1293:                                    printf("Player %d reveals card number %d\n",
        -: 1294:                                            i, state->hand[i][k]);
        -: 1295:                            }
    #####: 1296:                            break;
        -: 1297:                        }
        -: 1298:                    }
        -: 1299:
        -: 1300:                }
        -: 1301:
        -: 1302:            }
        -: 1303:
        -: 1304:            //discard played card from hand
    #####: 1305:            discardCard(handPos, currentPlayer, state, 0);
        -: 1306:
    #####: 1307:            return 0;
        -: 1308:
        -: 1309:        case embargo:
    #####: 1310:            return embargoEffect(currentPlayer, choice1, state, handPos);
        -: 1311:
        -: 1312:        case outpost:
        -: 1313:            //set outpost flag
    #####: 1314:            state->outpostPlayed++;
        -: 1315:
        -: 1316:            //discard card
    #####: 1317:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1318:            return 0;
        -: 1319:
        -: 1320:        case salvager:
        -: 1321:            //+1 buy
    #####: 1322:            state->numBuys++;
        -: 1323:
    #####: 1324:            if (choice1)
        -: 1325:            {
        -: 1326:                //gain coins equal to trashed card
    #####: 1327:                state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1328:                //trash card
    #####: 1329:                discardCard(choice1, currentPlayer, state, 1);
        -: 1330:            }
        -: 1331:
        -: 1332:            //discard card
    #####: 1333:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1334:            return 0;
        -: 1335:
        -: 1336:        case sea_hag:
    #####: 1337:            for (i = 0; i < state->numPlayers; i++)
        -: 1338:            {
    #####: 1339:                if (i != currentPlayer)
        -: 1340:                {
    #####: 1341:                    state->discard[i][state->discardCount[i]] =
    #####: 1342:                            state->deck[i][state->deckCount[i]--];
    #####: 1343:                    state->deckCount[i]--;
    #####: 1344:                    state->discardCount[i]++;
    #####: 1345:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1346:                }
        -: 1347:            }
    #####: 1348:            return 0;
        -: 1349:
        -: 1350:        case treasure_map:
    #####: 1351:            return treasure_mapEffect(currentPlayer, state, handPos);
        -: 1352:    } // End Switch
        -: 1353:
    #####: 1354:    return -1;
        -: 1355:} // End Function
        -: 1356:
        -: 1357:/*
        -: 1358: * Effect logic for Smithy card.
        -: 1359: */
    #####: 1360:int smithyEffect(int currentPlayer, struct gameState* state, int handPos)
        -: 1361:{
        -: 1362:    int i; // loop counter
        -: 1363:
        -: 1364:    //+3 Cards
    #####: 1365:    for (i = 0; i < 3; i++)
        -: 1366:    {
    #####: 1367:        drawCard(currentPlayer, state);
        -: 1368:    }
        -: 1369:
        -: 1370:    //discard card from hand
    #####: 1371:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1372:    return 0;
        -: 1373:}
        -: 1374:
    #####: 1375:int embargoEffect(int currentPlayer, int choice1, struct gameState* state,
        -: 1376:        int handPos)
        -: 1377:{
        -: 1378:    //+2 Coins
    #####: 1379:    state->coins = state->coins + 2;
        -: 1380:
        -: 1381:    //see if selected pile is in play
    #####: 1382:    if (state->supplyCount[choice1] == -1)
        -: 1383:    {
    #####: 1384:        return -1;
        -: 1385:    }
        -: 1386:
        -: 1387:    //add embargo token to selected supply pile
    #####: 1388:    state->embargoTokens[choice1]++;
        -: 1389:
        -: 1390:    //trash card
    #####: 1391:    discardCard(handPos, currentPlayer, state, 1);
        -: 1392:
    #####: 1393:    return 0;
        -: 1394:}
        -: 1395:
    #####: 1396:int villageEffect(int currentPlayer, struct gameState* state, int handPos)
        -: 1397:{
        -: 1398:    //+1 Card
    #####: 1399:    drawCard(currentPlayer, state);
        -: 1400:
        -: 1401:    //+2 Actions
    #####: 1402:    state->numActions = state->numActions + 2;
        -: 1403:
        -: 1404:    //discard played card from hand
    #####: 1405:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1406:    return 0;
        -: 1407:}
        -: 1408:
    #####: 1409:int great_hallEffect(int currentPlayer, struct gameState* state, int handPos)
        -: 1410:{
        -: 1411:    //+1 Card
    #####: 1412:    drawCard(currentPlayer, state);
    #####: 1413:    drawCard(currentPlayer, state);
        -: 1414:
        -: 1415:    //+1 Actions
    #####: 1416:    state->numActions++;
        -: 1417:
        -: 1418:    //discard card from hand
    #####: 1419:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1420:    return 0;
        -: 1421:}
        -: 1422:
    #####: 1423:int treasure_mapEffect(int currentPlayer, struct gameState* state, int handPos)
        -: 1424:{
        -: 1425:    int i;
    #####: 1426:    int index = -1;
        -: 1427:
        -: 1428:    //search hand for another treasure_map
    #####: 1429:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1430:    {
    #####: 1431:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1432:        {
    #####: 1433:            index = i;
    #####: 1434:            break;
        -: 1435:        }
        -: 1436:    }
    #####: 1437:    if (index > -1)
        -: 1438:    {
        -: 1439:        //trash both treasure cards
    #####: 1440:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1441:        discardCard(index, currentPlayer, state, 1);
        -: 1442:
        -: 1443:        //gain 4 Gold cards
    #####: 1444:        for (i = 0; i < 4; i++)
        -: 1445:        {
    #####: 1446:            gainCard(gold, state, 1, currentPlayer);
        -: 1447:        }
        -: 1448:
        -: 1449:        //return success
    #####: 1450:        return 1;
        -: 1451:    }
        -: 1452:
        -: 1453:    //no second treasure_map found in hand
    #####: 1454:    return -1;
        -: 1455:}
        -: 1456:
    #####: 1457:int discardCard(int handPos, int currentPlayer, struct gameState *state,
        -: 1458:        int trashFlag)
        -: 1459:{
        -: 1460:
        -: 1461:    //if card is not trashed, added to Played pile
    #####: 1462:    if (trashFlag < 1)
        -: 1463:    {
        -: 1464:        //add card to played pile
    #####: 1465:        state->playedCards[state->playedCardCount] =
    #####: 1466:                state->hand[currentPlayer][handPos];
    #####: 1467:        state->playedCardCount++;
        -: 1468:    }
        -: 1469:
        -: 1470:    //set played card to -1
    #####: 1471:    state->hand[currentPlayer][handPos] = -1;
        -: 1472:
        -: 1473:    //remove card from player's hand
    #####: 1474:    if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1475:    {
        -: 1476:        //reduce number of cards in hand
    #####: 1477:        state->handCount[currentPlayer]--;
        -: 1478:    }
    #####: 1479:    else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1480:    {
        -: 1481:        //reduce number of cards in hand
    #####: 1482:        state->handCount[currentPlayer]--;
        -: 1483:    }
        -: 1484:    else
        -: 1485:    {
        -: 1486:        //replace discarded card with last card in hand
    #####: 1487:        state->hand[currentPlayer][handPos] =
    #####: 1488:                state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1489:        //set last card to -1
    #####: 1490:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1491:        //reduce number of cards in hand
    #####: 1492:        state->handCount[currentPlayer]--;
        -: 1493:    }
        -: 1494:
    #####: 1495:    return 0;
        -: 1496:}
        -: 1497:
    #####: 1498:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1499:{
        -: 1500:    //Note: supplyPos is enum of choosen card
        -: 1501:
        -: 1502:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1503:    if (supplyCount(supplyPos, state) < 1)
        -: 1504:    {
    #####: 1505:        return -1;
        -: 1506:    }
        -: 1507:
        -: 1508:    //added card for [whoseTurn] current player:
        -: 1509:    // toFlag = 0 : add to discard
        -: 1510:    // toFlag = 1 : add to deck
        -: 1511:    // toFlag = 2 : add to hand
        -: 1512:
    #####: 1513:    if (toFlag == 1)
        -: 1514:    {
    #####: 1515:        state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1516:        state->deckCount[player]++;
        -: 1517:    }
    #####: 1518:    else if (toFlag == 2)
        -: 1519:    {
    #####: 1520:        state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1521:        state->handCount[player]++;
        -: 1522:    }
        -: 1523:    else
        -: 1524:    {
    #####: 1525:        state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1526:        state->discardCount[player]++;
        -: 1527:    }
        -: 1528:
        -: 1529:    //decrease number in supply pile
    #####: 1530:    state->supplyCount[supplyPos]--;
        -: 1531:
    #####: 1532:    return 0;
        -: 1533:}
        -: 1534:
        -: 1535:/* Set the game state field coins for the number of treasure cards (coins) in hand,
        -: 1536: * including bonuses. Always returns 0.*/
      300: 1537:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1538:{
        -: 1539:    int i;
        -: 1540:
        -: 1541:    //reset coin count
      300: 1542:    state->coins = 0;
        -: 1543:
        -: 1544:    //add coins for each Treasure card in player's hand
      300: 1545:    for (i = 0; i < state->handCount[player]; i++)
        -: 1546:    {
    #####: 1547:        if (state->hand[player][i] == copper)
        -: 1548:        {
    #####: 1549:            state->coins += 1;
        -: 1550:        }
    #####: 1551:        else if (state->hand[player][i] == silver)
        -: 1552:        {
    #####: 1553:            state->coins += 2;
        -: 1554:        }
    #####: 1555:        else if (state->hand[player][i] == gold)
        -: 1556:        {
    #####: 1557:            state->coins += 3;
        -: 1558:        }
        -: 1559:    }
        -: 1560:
        -: 1561:    //add bonus
      300: 1562:    state->coins += bonus;
        -: 1563:
      300: 1564:    return 0;
        -: 1565:} //end of dominion.c
