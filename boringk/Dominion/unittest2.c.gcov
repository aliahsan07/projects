        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7:
        1:    8:int main (int argc, char** argv) {
        -:    9:  struct gameState G;
        1:   10:  struct gameState *p = &G;
        -:   11:  
        1:   12:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        -:   13:	       sea_hag, tribute, smithy};
        -:   14:
        1:   15:  printf ("Starting test for fullDeckCount.\n");
        -:   16:  
        1:   17:  int r = initializeGame(2, k, atoi(argv[1]), p);
        -:   18:
        1:   19:  assert (r == 0);
        -:   20:    //Test if FullDeckCount works, should count the total number of cards in deck,hand, and discard pile
        -:   21:   	
        -:   22:  //check starting deck of 7 copper , 3 estates
        1:   23:  int i = 0;
       27:   24:  for (i = curse; i < treasure_map; i++) {
        -:   25:	  //printf("i = %d and deck count =%d\n", i, fullDeckCount(p->whoseTurn,  i , p) );
       26:   26:	 if (i == copper){
        1:   27:		 assert(fullDeckCount(p->whoseTurn,  i , p) == 7);
        -:   28:	 }
       25:   29:	 else if (i == estate){
        1:   30:		 assert(fullDeckCount(p->whoseTurn,  i , p) == 3);
        -:   31:	 }
        -:   32:	else{
       24:   33:		assert(fullDeckCount(p->whoseTurn,  i , p) == 0); 
        -:   34:	}
        -:   35:  }
        -:   36:  
        -:   37:	
        9:   38:	for (int n = 0; n < 8; n++){
      216:   39:		for (i= curse; i < treasure_map; i++){
        -:   40:			
        -:   41:			struct gameState prevState;
      208:   42:			memcpy(&prevState, p, sizeof(struct gameState));
      208:   43:			p->numBuys++;
      208:   44:			p->coins = 9;
      208:   45:			if(buyCard(i,p) == 0){
     3672:   46:				for (int x= curse; x < treasure_map; x++){
     3536:   47:					if (x != i ) {
     3400:   48:						assert(fullDeckCount(p->whoseTurn, x,p) == fullDeckCount(prevState.whoseTurn,x,&prevState));
        -:   49:					}
        -:   50:					else{
      136:   51:						assert(fullDeckCount(p->whoseTurn, x,p) == (fullDeckCount(prevState.whoseTurn,x,&prevState) + 1));
        -:   52:					}
        -:   53:
        -:   54:				}
        -:   55:			}
        -:   56:		}
        -:   57:	}
        -:   58:	
        1:   59:		printf("passed test for fullDeckCount\n");
        -:   60:	
        1:   61:  return 0;
        -:   62:}
