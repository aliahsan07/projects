        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        2:    7:int main(int argc, char** argv)
        -:    8:{
        -:    9:  int r;
        2:   10:  printf("***Start Testing for  getCost ***\n");
        -:   11:
        2:   12:  printf("Curse:\n");
        2:   13:  r = getCost(curse);
        2:   14:  assert(r == 0);
        -:   15:
        2:   16:  printf("Estate:\n");
        2:   17:  r = getCost(estate);
        2:   18:  assert(r == 2);
        -:   19:
        2:   20:  printf("Duchy:\n");
        2:   21:  r = getCost(duchy);
        2:   22:  assert(r == 5);
        -:   23:
        2:   24:  printf("Provnce:\n");
        2:   25:  r = getCost(province);
        2:   26:  assert(r == 8);
        -:   27:  
        2:   28:  printf("Copper:\n");
        2:   29:  r = getCost(copper);
        2:   30:  assert(r == 0);
        -:   31:  
        2:   32:  printf("Silver:\n");
        2:   33:  r = getCost(silver);
        2:   34:  assert(r == 3);
        -:   35:  
        2:   36:  printf("Gold:\n");
        2:   37:  r = getCost(gold);
        2:   38:  assert(r == 6);
        -:   39:
        2:   40:  printf("Adventurer\n");
        2:   41:  r = getCost(adventurer);
        2:   42:  assert(r == 6);
        -:   43:
        2:   44:  printf("Council Room:\n");
        2:   45:  r = getCost(council_room);
        2:   46:  assert(r == 5);
        -:   47:
        2:   48:  printf("Feast:\n");
        2:   49:  r = getCost(feast);
        2:   50:  assert(r == 4);
        -:   51:
        2:   52:  printf("Gardens:\n");
        2:   53:  r = getCost(gardens);
        2:   54:  assert(r == 4);
        -:   55:
        2:   56:  printf("Mine:\n");
        2:   57:  r = getCost(mine);
        2:   58:  assert(r == 5);
        -:   59:  
        2:   60:  printf("Remodel\n");
        2:   61:  r = getCost(remodel);
        2:   62:  assert(r == 4);
        -:   63:
        2:   64:  printf("Smithy:\n");
        2:   65:  r = getCost(smithy);
        2:   66:  assert(r == 4);
        -:   67:
        2:   68:  printf("Village:\n");
        2:   69:  r = getCost(village);
        2:   70:  assert(r == 3);
        -:   71:
        2:   72:  printf("Baron\n");
        2:   73:  r = getCost(baron);
        2:   74:  assert(r == 4);
        -:   75:
        2:   76:  printf("Great Hall:\n");
        2:   77:  r = getCost(great_hall);
        2:   78:  assert(r == 3);
        -:   79:
        2:   80:  printf("Minion:\n");
        2:   81:  r = getCost(minion);
        2:   82:  assert(r == 5);
        -:   83:
        2:   84:  printf("Steward\n");
        2:   85:  r = getCost(steward);
        2:   86:  assert(r == 3);
        -:   87:
        2:   88:  printf("Tribute:\n");
        2:   89:  r = getCost(tribute);
        2:   90:  assert(r == 5);
        -:   91:
        2:   92:  printf("Ambassador:\n");
        2:   93:  r = getCost(ambassador);
        2:   94:  assert(r == 3);
        -:   95:
        2:   96:  printf("Cutpurse:\n");
        2:   97:  r = getCost(cutpurse);
        2:   98:  assert(r == 4);
        -:   99:
        2:  100:  printf("Embargo:\n");
        2:  101:  r = getCost(embargo);
        2:  102:  assert(r == 2);
        -:  103:
        2:  104:  printf("Outpost:\n");
        2:  105:  r = getCost(outpost);
        2:  106:  assert(r == 5);
        -:  107:
        2:  108:  printf("Salvager:\n");
        2:  109:  r = getCost(salvager);
        2:  110:  assert(r == 4);
        -:  111:
        2:  112:  printf("Sea Hag:\n");
        2:  113:  r = getCost(sea_hag);
        2:  114:  assert(r == 4);
        -:  115:
        2:  116:  printf("Treasure Map\n");
        2:  117:  r = getCost(treasure_map);
        2:  118:  assert(r == 4);
        -:  119:
        2:  120:  printf("Test for Invalid Input:\n");
        2:  121:  r = getCost(400);
        2:  122:  assert(r == -1);
        -:  123:
        2:  124:  printf("Tests Are Successful\n"); 
        -:  125:
        2:  126:  return 0;
        -:  127:}
