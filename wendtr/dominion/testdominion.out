File 'dominion.c'
Lines executed:51.13% of 577
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
        -:   10:
        -:   11:
        -:   12:
        -:   13:
        -:   14:
        -:   15:
        -:   16:
        -:   17:
    64240:   18:int compare(const void* a, const void* b) {
    64240:   19:  if (*(int*)a > *(int*)b)
    27480:   20:    return 1;
    36760:   21:  if (*(int*)a < *(int*)b)
    12980:   22:    return -1;
    23780:   23:  return 0;
        -:   24:}
        -:   25:
    #####:   26:struct gameState* newGame() {
    #####:   27:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   28:  return g;
        -:   29:}
        -:   30:
    #####:   31:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   32:		  int k8, int k9, int k10) {
    #####:   33:  int* k = malloc(10 * sizeof(int));
    #####:   34:  k[0] = k1;
    #####:   35:  k[1] = k2;
    #####:   36:  k[2] = k3;
    #####:   37:  k[3] = k4;
    #####:   38:  k[4] = k5;
    #####:   39:  k[5] = k6;
    #####:   40:  k[6] = k7;
    #####:   41:  k[7] = k8;
    #####:   42:  k[8] = k9;
    #####:   43:  k[9] = k10;
    #####:   44:  return k;
        -:   45:}
        -:   46:
       80:   47:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   48:		   struct gameState *state) {
        -:   49:
        -:   50:  int i;
        -:   51:  int j;
        -:   52:  int it;
        -:   53:  //set up random number generator
       80:   54:  SelectStream(1);
       80:   55:  PutSeed((long)randomSeed);
        -:   56:
        -:   57:  //check number of players
       80:   58:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   59:    {
    #####:   60:      return -1;
        -:   61:    }
        -:   62:
        -:   63:  //set number of players
       80:   64:  state->numPlayers = numPlayers;
        -:   65:
        -:   66:  //check selected kingdom cards are different
      880:   67:  for (i = 0; i < 10; i++)
        -:   68:    {
     8800:   69:      for (j = 0; j < 10; j++)
        -:   70:        {
     8000:   71:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   72:	    {
    #####:   73:	      return -1;
        -:   74:	    }
        -:   75:        }
        -:   76:    }
        -:   77:
        -:   78:
        -:   79:  //initialize supply
        -:   80:  ///////////////////////////////
        -:   81:
        -:   82:  //set number of Curse cards
       80:   83:  if (numPlayers == 2)
        -:   84:    {
       80:   85:      state->supplyCount[curse] = 10;
        -:   86:    }
    #####:   87:  else if (numPlayers == 3)
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 20;
        -:   90:    }
        -:   91:  else
        -:   92:    {
    #####:   93:      state->supplyCount[curse] = 30;
        -:   94:    }
        -:   95:
        -:   96:  //set number of Victory cards
       80:   97:  if (numPlayers == 2)
        -:   98:    {
       80:   99:      state->supplyCount[estate] = 8;
       80:  100:      state->supplyCount[duchy] = 8;
       80:  101:      state->supplyCount[province] = 8;
        -:  102:    }
        -:  103:  else
        -:  104:    {
    #####:  105:      state->supplyCount[estate] = 12;
    #####:  106:      state->supplyCount[duchy] = 12;
    #####:  107:      state->supplyCount[province] = 12;
        -:  108:    }
        -:  109:
        -:  110:  //set number of Treasure cards
       80:  111:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       80:  112:  state->supplyCount[silver] = 40;
       80:  113:  state->supplyCount[gold] = 30;
        -:  114:
        -:  115:  //set number of Kingdom cards
     1680:  116:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  117:    {
    13200:  118:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  119:	{
    12400:  120:	  if (kingdomCards[j] == i)
        -:  121:	    {
        -:  122:	      //check if card is a 'Victory' Kingdom card
      880:  123:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  124:		{
       80:  125:		  if (numPlayers == 2){
       80:  126:		    state->supplyCount[i] = 8;
        -:  127:		  }
    #####:  128:		  else{ state->supplyCount[i] = 12; }
        -:  129:		}
        -:  130:	      else
        -:  131:		{
      720:  132:		  state->supplyCount[i] = 10;
        -:  133:		}
      800:  134:	      break;
        -:  135:	    }
        -:  136:	  else    //card is not in the set choosen for the game
        -:  137:	    {
    11600:  138:	      state->supplyCount[i] = -1;
        -:  139:	    }
        -:  140:	}
        -:  141:
        -:  142:    }
        -:  143:
        -:  144:  ////////////////////////
        -:  145:  //supply intilization complete
        -:  146:
        -:  147:  //set player decks
      240:  148:  for (i = 0; i < numPlayers; i++)
        -:  149:    {
      160:  150:      state->deckCount[i] = 0;
      640:  151:      for (j = 0; j < 3; j++)
        -:  152:	{
      480:  153:	  state->deck[i][j] = estate;
      480:  154:	  state->deckCount[i]++;
        -:  155:	}
     1280:  156:      for (j = 3; j < 10; j++)
        -:  157:	{
     1120:  158:	  state->deck[i][j] = copper;
     1120:  159:	  state->deckCount[i]++;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //shuffle player decks
      240:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {
      160:  166:      if ( shuffle(i, state) < 0 )
        -:  167:	{
    #####:  168:	  return -1;
        -:  169:	}
        -:  170:    }
        -:  171:
        -:  172:  //draw player hands
      240:  173:  for (i = 0; i < numPlayers; i++)
        -:  174:    {
        -:  175:      //initialize hand size to zero
      160:  176:      state->handCount[i] = 0;
      160:  177:      state->discardCount[i] = 0;
        -:  178:      //draw 5 cards
        -:  179:      // for (j = 0; j < 5; j++)
        -:  180:      //	{
        -:  181:      //	  drawCard(i, state);
        -:  182:      //	}
        -:  183:    }
        -:  184:
        -:  185:  //set embargo tokens to 0 for all supply piles
     2240:  186:  for (i = 0; i <= treasure_map; i++)
        -:  187:    {
     2160:  188:      state->embargoTokens[i] = 0;
        -:  189:    }
        -:  190:
        -:  191:  //initialize first player's turn
       80:  192:  state->outpostPlayed = 0;
       80:  193:  state->phase = 0;
       80:  194:  state->numActions = 1;
       80:  195:  state->numBuys = 1;
       80:  196:  state->playedCardCount = 0;
       80:  197:  state->whoseTurn = 0;
       80:  198:  state->handCount[state->whoseTurn] = 0;
        -:  199:  //int it; move to top
        -:  200:
        -:  201:  //Moved draw cards to here, only drawing at the start of a turn
      480:  202:  for (it = 0; it < 5; it++){
      400:  203:    drawCard(state->whoseTurn, state);
        -:  204:  }
        -:  205:
       80:  206:  updateCoins(state->whoseTurn, state, 0);
        -:  207:
       80:  208:  return 0;
        -:  209:}
        -:  210:
     1620:  211:int shuffle(int player, struct gameState *state) {
        -:  212:
        -:  213:
        -:  214:  int newDeck[MAX_DECK];
     1620:  215:  int newDeckPos = 0;
        -:  216:  int card;
        -:  217:  int i;
        -:  218:
     1620:  219:  if (state->deckCount[player] < 1)
    #####:  220:    return -1;
     1620:  221:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  222:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  223:
    27180:  224:  while (state->deckCount[player] > 0) {
    23940:  225:    card = floor(Random() * state->deckCount[player]);
    23940:  226:    newDeck[newDeckPos] = state->deck[player][card];
    23940:  227:    newDeckPos++;
   114800:  228:    for (i = card; i < state->deckCount[player]-1; i++) {
    90860:  229:      state->deck[player][i] = state->deck[player][i+1];
        -:  230:    }
    23940:  231:    state->deckCount[player]--;
        -:  232:  }
    25560:  233:  for (i = 0; i < newDeckPos; i++) {
    23940:  234:    state->deck[player][i] = newDeck[i];
    23940:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
     1620:  238:  return 0;
        -:  239:}
        -:  240:
    14680:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    14680:  244:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    14680:  247:  if (state->phase != 0)
        -:  248:    {
    #####:  249:      return -1;
        -:  250:    }
        -:  251:
        -:  252:  //check if player has enough actions
    14680:  253:  if ( state->numActions < 1 )
        -:  254:    {
       80:  255:      return -1;
        -:  256:    }
        -:  257:
        -:  258:  //get card played
    14600:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    14600:  262:  if ( card < adventurer || card > treasure_map )
        -:  263:    {
    14460:  264:      return -1;
        -:  265:    }
        -:  266:
        -:  267:  //play card
      140:  268:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  269:    {
    #####:  270:      return -1;
        -:  271:    }
        -:  272:
        -:  273:  //reduce number of actions
      140:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
      140:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
      140:  279:  return 0;
        -:  280:}
        -:  281:
     3040:  282:int buyCard(int supplyPos, struct gameState *state) {
        -:  283:  int who;
     3040:  284:  if (DEBUG){
        -:  285:    printf("Entering buyCard...\n");
        -:  286:  }
        -:  287:
        -:  288:  // I don't know what to do about the phase thing.
        -:  289:
     3040:  290:  who = state->whoseTurn;
        -:  291:
     3040:  292:  if (state->numBuys < 1){
    #####:  293:    if (DEBUG)
        -:  294:      printf("You do not have any buys left\n");
    #####:  295:    return -1;
     3040:  296:  } else if (supplyCount(supplyPos, state) <1){
      200:  297:    if (DEBUG)
        -:  298:      printf("There are not any of that type of card left\n");
      200:  299:    return -1;
     2840:  300:  } else if (state->coins < getCost(supplyPos)){
    #####:  301:    if (DEBUG)
        -:  302:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  303:    return -1;
        -:  304:  } else {
     2840:  305:    state->phase=1;
        -:  306:    //state->supplyCount[supplyPos]--;
     2840:  307:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  308:
     2840:  309:    state->coins = (state->coins) - (getCost(supplyPos));
     2840:  310:    state->numBuys--;
     2840:  311:    if (DEBUG)
        -:  312:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  313:  }
        -:  314:
        -:  315:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  316:  //state->discardCount[who]++;
        -:  317:
     2840:  318:  return 0;
        -:  319:}
        -:  320:
    77020:  321:int numHandCards(struct gameState *state) {
    77020:  322:  return state->handCount[ whoseTurn(state) ];
        -:  323:}
        -:  324:
   322300:  325:int handCard(int handPos, struct gameState *state) {
   322300:  326:  int currentPlayer = whoseTurn(state);
   322300:  327:  return state->hand[currentPlayer][handPos];
        -:  328:}
        -:  329:
     5880:  330:int supplyCount(int card, struct gameState *state) {
     5880:  331:  return state->supplyCount[card];
        -:  332:}
        -:  333:
    #####:  334:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  335:  int i;
    #####:  336:  int count = 0;
        -:  337:
    #####:  338:  for (i = 0; i < state->deckCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->deck[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->handCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->hand[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  for (i = 0; i < state->discardCount[player]; i++)
        -:  349:    {
    #####:  350:      if (state->discard[player][i] == card) count++;
        -:  351:    }
        -:  352:
    #####:  353:  return count;
        -:  354:}
        -:  355:
   411280:  356:int whoseTurn(struct gameState *state) {
   411280:  357:  return state->whoseTurn;
        -:  358:}
        -:  359:
     4280:  360:int endTurn(struct gameState *state) {
        -:  361:  int k;
        -:  362:  int i;
     4280:  363:  int currentPlayer = whoseTurn(state);
        -:  364:
        -:  365:  //Discard hand
    25640:  366:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    21360:  367:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    21360:  368:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  369:  }
     4280:  370:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  371:
        -:  372:  //Code for determining the player
     4280:  373:  if (currentPlayer < (state->numPlayers - 1)){
     2160:  374:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  375:  }
        -:  376:  else{
     2120:  377:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  378:  }
        -:  379:
     4280:  380:  state->outpostPlayed = 0;
     4280:  381:  state->phase = 0;
     4280:  382:  state->numActions = 1;
     4280:  383:  state->coins = 0;
     4280:  384:  state->numBuys = 1;
     4280:  385:  state->playedCardCount = 0;
     4280:  386:  state->handCount[state->whoseTurn] = 0;
        -:  387:
        -:  388:  //int k; move to top
        -:  389:  //Next player draws hand
    25680:  390:  for (k = 0; k < 5; k++){
    21400:  391:    drawCard(state->whoseTurn, state);//Draw a card
        -:  392:  }
        -:  393:
        -:  394:  //Update money
     4280:  395:  updateCoins(state->whoseTurn, state , 0);
        -:  396:
     4280:  397:  return 0;
        -:  398:}
        -:  399:
     4360:  400:int isGameOver(struct gameState *state) {
        -:  401:  int i;
        -:  402:  int j;
        -:  403:
        -:  404:  //if stack of Province cards is empty, the game ends
     4360:  405:  if (state->supplyCount[province] == 0)
        -:  406:    {
       80:  407:      return 1;
        -:  408:    }
        -:  409:
        -:  410:  //if three supply pile are at 0, the game ends
     4280:  411:  j = 0;
   111280:  412:  for (i = 0; i < 25; i++)
        -:  413:    {
   107000:  414:      if (state->supplyCount[i] == 0)
        -:  415:	{
     1400:  416:	  j++;
        -:  417:	}
        -:  418:    }
     4280:  419:  if ( j >= 3)
        -:  420:    {
    #####:  421:      return 1;
        -:  422:    }
        -:  423:
     4280:  424:  return 0;
        -:  425:}
        -:  426:
     8880:  427:int scoreFor (int player, struct gameState *state) {
        -:  428:
        -:  429:  int i;
     8880:  430:  int score = 0;
        -:  431:  //score from hand
    31080:  432:  for (i = 0; i < state->handCount[player]; i++)
        -:  433:    {
    22200:  434:      if (state->hand[player][i] == curse) { score = score - 1; };
    22200:  435:      if (state->hand[player][i] == estate) { score = score + 1; };
    22200:  436:      if (state->hand[player][i] == duchy) { score = score + 3; };
    22200:  437:      if (state->hand[player][i] == province) { score = score + 6; };
    22200:  438:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    22200:  439:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from discard
    83600:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    74720:  445:      if (state->discard[player][i] == curse) { score = score - 1; };
    74720:  446:      if (state->discard[player][i] == estate) { score = score + 1; };
    74720:  447:      if (state->discard[player][i] == duchy) { score = score + 3; };
    74720:  448:      if (state->discard[player][i] == province) { score = score + 6; };
    74720:  449:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    74720:  450:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
        -:  453:  //score from deck
    83600:  454:  for (i = 0; i < state->discardCount[player]; i++)
        -:  455:    {
    74720:  456:      if (state->deck[player][i] == curse) { score = score - 1; };
    74720:  457:      if (state->deck[player][i] == estate) { score = score + 1; };
    74720:  458:      if (state->deck[player][i] == duchy) { score = score + 3; };
    74720:  459:      if (state->deck[player][i] == province) { score = score + 6; };
    74720:  460:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    74720:  461:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  462:    }
        -:  463:
     8880:  464:  return score;
        -:  465:}
        -:  466:
       80:  467:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  468:  int i;
        -:  469:  int j;
        -:  470:  int highScore;
        -:  471:  int currentPlayer;
        -:  472:
        -:  473:  //get score for each player
      400:  474:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  475:    {
        -:  476:      //set unused player scores to -9999
      320:  477:      if (i >= state->numPlayers)
        -:  478:	{
      160:  479:	  players[i] = -9999;
        -:  480:	}
        -:  481:      else
        -:  482:	{
      160:  483:	  players[i] = scoreFor (i, state);
        -:  484:	}
        -:  485:    }
        -:  486:
        -:  487:  //find highest score
       80:  488:  j = 0;
      400:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
      320:  491:      if (players[i] > players[j])
        -:  492:	{
       40:  493:	  j = i;
        -:  494:	}
        -:  495:    }
       80:  496:  highScore = players[j];
        -:  497:
        -:  498:  //add 1 to players who had less turns
       80:  499:  currentPlayer = whoseTurn(state);
      400:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
      320:  502:      if ( players[i] == highScore && i > currentPlayer )
        -:  503:	{
       20:  504:	  players[i]++;
        -:  505:	}
        -:  506:    }
        -:  507:
        -:  508:  //find new highest score
       80:  509:  j = 0;
      400:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
      320:  512:      if ( players[i] > players[j] )
        -:  513:	{
       40:  514:	  j = i;
        -:  515:	}
        -:  516:    }
       80:  517:  highScore = players[j];
        -:  518:
        -:  519:  //set winners in array to 1 and rest to 0
      400:  520:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  521:    {
      320:  522:      if ( players[i] == highScore )
        -:  523:	{
       80:  524:	  players[i] = 1;
        -:  525:	}
        -:  526:      else
        -:  527:	{
      240:  528:	  players[i] = 0;
        -:  529:	}
        -:  530:    }
        -:  531:
       80:  532:  return 0;
        -:  533:}
        -:  534:
    21920:  535:int drawCard(int player, struct gameState *state)
        -:  536:{	int count;
        -:  537:  int deckCounter;
    21920:  538:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  539:
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
    23800:  543:    for (i = 0; i < state->discardCount[player];i++){
    22340:  544:      state->deck[player][i] = state->discard[player][i];
    22340:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
     1460:  548:    state->deckCount[player] = state->discardCount[player];
     1460:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shufffle the deck
     1460:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  553:
     1460:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:
     1460:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
     1460:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:
     1460:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:
     1460:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
     1460:  569:    if (deckCounter == 0)
    #####:  570:      return -1;
        -:  571:
     1460:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1460:  573:    state->deckCount[player]--;
     1460:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
    20460:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
    20460:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
    20460:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
    20460:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    20460:  586:    state->deckCount[player]--;
    20460:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
    21920:  590:  return 0;
        -:  591:}
        -:  592:
     5780:  593:int getCost(int cardNumber)
        -:  594:{
     5780:  595:  switch( cardNumber )
        -:  596:    {
        -:  597:    case curse:
    #####:  598:      return 0;
        -:  599:    case estate:
       20:  600:      return 2;
        -:  601:    case duchy:
      840:  602:      return 5;
        -:  603:    case province:
     1280:  604:      return 8;
        -:  605:    case copper:
    #####:  606:      return 0;
        -:  607:    case silver:
     1000:  608:      return 3;
        -:  609:    case gold:
     2160:  610:      return 6;
        -:  611:    case adventurer:
    #####:  612:      return 6;
        -:  613:    case council_room:
    #####:  614:      return 5;
        -:  615:    case feast:
    #####:  616:      return 4;
        -:  617:    case gardens:
       40:  618:      return 4;
        -:  619:    case mine:
      160:  620:      return 5;
        -:  621:    case remodel:
    #####:  622:      return 4;
        -:  623:    case smithy:
    #####:  624:      return 4;
        -:  625:    case village:
    #####:  626:      return 3;
        -:  627:    case baron:
    #####:  628:      return 4;
        -:  629:    case great_hall:
    #####:  630:      return 3;
        -:  631:    case minion:
       80:  632:      return 5;
        -:  633:    case steward:
    #####:  634:      return 3;
        -:  635:    case tribute:
    #####:  636:      return 5;
        -:  637:    case ambassador:
    #####:  638:      return 3;
        -:  639:    case cutpurse:
    #####:  640:      return 4;
        -:  641:    case embargo:
       40:  642:      return 2;
        -:  643:    case outpost:
       80:  644:      return 5;
        -:  645:    case salvager:
       80:  646:      return 4;
        -:  647:    case sea_hag:
    #####:  648:      return 4;
        -:  649:    case treasure_map:
    #####:  650:      return 4;
        -:  651:    }
        -:  652:
    #####:  653:  return -1;
        -:  654:}
        -:  655:
    #####:  656:int useAdventurer(int currentPlayer, struct gameState *state) {
    #####:  657:    int drawntreasure = 0;
        -:  658:    int cardDrawn;
        -:  659:    int temphand[MAX_HAND];
    #####:  660:    int z = 0; //used for temphand
        -:  661:
    #####:  662:    while(drawntreasure<2){
    #####:  663:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  664:            shuffle(currentPlayer, state);
        -:  665:	}
    #####:  666:	drawCard(currentPlayer, state);
    #####:  667:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  668:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  669:            drawntreasure++;
        -:  670:        else {
    #####:  671:            temphand[z]=cardDrawn;
    #####:  672:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  673:            z++;
        -:  674:        }
        -:  675:    }
    #####:  676:    while(z-1>=0) {
    #####:  677:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  678:        z=z-1;
        -:  679:    }
    #####:  680:      return 0;
        -:  681:}
        -:  682:
    #####:  683:int useCouncilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  684:    //+4 Cards
        -:  685:    int i;
    #####:  686:    for (i = 0; i < 4; i++) {
    #####:  687:        drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:    //+1 Buy
    #####:  690:    state->numBuys++;
        -:  691:
        -:  692:    //Each other player draws a card
    #####:  693:    for (i = 0; i < state->numPlayers; i++) {
    #####:  694:        if ( i != currentPlayer )
    #####:  695:	      drawCard(i, state);
        -:  696:	}
        -:  697:    //put played card in played card pile
    #####:  698:    discardCard(handPos, currentPlayer, state, 0);
        -:  699:
    #####:  700:    return 0;
        -:  701:}
        -:  702:
    #####:  703:int useFeast(int currentPlayer, struct gameState *state, int choice1) {
        -:  704:    //gain card with cost up to 5
        -:  705:    //Backup hand
        -:  706:    int i, x;
        -:  707:    int temphand[MAX_HAND];
    #####:  708:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  709:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:    }
        -:  712:    //Backup hand
        -:  713:
        -:  714:    //Update Coins for Buy
    #####:  715:    updateCoins(currentPlayer, state, 5);
    #####:  716:    x = 1;                                  //Condition to loop on
        -:  717:
    #####:  718:    while( x == 1) {                        //Buy one card
    #####:  719:        if (supplyCount(choice1, state) <= 0){
    #####:  720:            if (DEBUG)
        -:  721:                printf("None of that card left, sorry!\n");
    #####:  722:            if (DEBUG)
        -:  723:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:        }
    #####:  725:        else if (state->coins < getCost(choice1)){
    #####:  726:            printf("That card is too expensive!\n");
    #####:  727:            if (DEBUG)
        -:  728:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  729:        }
        -:  730:        else{
    #####:  731:            if (DEBUG)
        -:  732:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:
    #####:  734:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  735:        x = 0;//No more buying cards
        -:  736:
    #####:  737:        if (DEBUG)
        -:  738:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:        }
        -:  740:    }
        -:  741:
        -:  742:    //Reset Hand
    #####:  743:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  744:        state->hand[currentPlayer][i] = temphand[i];
    #####:  745:        temphand[i] = -1;
        -:  746:    }
        -:  747:    //Reset Hand
        -:  748:
    #####:  749:    return 0;
        -:  750:}
        -:  751:
       40:  752:int useMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  753:    int i;
       40:  754:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
       40:  755:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
       40:  756:        return -1;
        -:  757:
    #####:  758:    if (choice2 > treasure_map || choice2 < curse)
    #####:  759:        return -1;
        -:  760:
    #####:  761:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    #####:  762:        return -1;
        -:  763:
    #####:  764:    gainCard(choice2, state, 2, currentPlayer);
        -:  765:
        -:  766:    //discard card from hand
    #####:  767:    discardCard(handPos, currentPlayer, state, 0);
        -:  768:
        -:  769:    //discard trashed card
    #####:  770:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  771:        if (state->hand[currentPlayer][i] == j) {
    #####:  772:	      discardCard(i, currentPlayer, state, 0);
    #####:  773:	      break;
        -:  774:        }
        -:  775:	}
    #####:  776:    return 0;
        -:  777:}
        -:  778:
       40:  779:int useRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  780:    int i;
       40:  781:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  782:
       40:  783:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
       40:  784:        return -1;
        -:  785:
    #####:  786:    gainCard(choice2, state, 0, currentPlayer);
        -:  787:
        -:  788:    //discard card from hand
    #####:  789:    discardCard(handPos, currentPlayer, state, 0);
        -:  790:
        -:  791:    //discard trashed card
    #####:  792:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  793:        if (state->hand[currentPlayer][i] == j) {
    #####:  794:	      discardCard(i, currentPlayer, state, 0);
    #####:  795:	      break;
        -:  796:	    }
        -:  797:	}
        -:  798:
    #####:  799:    return 0;
        -:  800:}
        -:  801:
      140:  802:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  803:{
        -:  804:  int i;
        -:  805:  int j;
        -:  806:  int k;
        -:  807:  int x;
        -:  808:  int index;
      140:  809:  int currentPlayer = whoseTurn(state);
      140:  810:  int nextPlayer = currentPlayer + 1;
        -:  811:
      140:  812:  int tributeRevealedCards[2] = {-1, -1};
        -:  813:  int temphand[MAX_HAND];// moved above the if statement
      140:  814:  int drawntreasure=0;
        -:  815:  int cardDrawn;
      140:  816:  int z = 0;// this is the counter for the temp hand
      140:  817:  if (nextPlayer > (state->numPlayers - 1)){
      120:  818:    nextPlayer = 0;
        -:  819:  }
        -:  820:
        -:  821:
        -:  822:  //uses switch to select card and perform actions
      140:  823:  switch( card )
        -:  824:    {
        -:  825:    case adventurer:
    #####:  826:      useAdventurer(currentPlayer, state);
        -:  827:
        -:  828:    case council_room:
    #####:  829:        useCouncilRoom(currentPlayer, state, handPos);
        -:  830:
        -:  831:    case feast:
    #####:  832:        useFeast(currentPlayer, state, choice1);
        -:  833:
        -:  834:    case gardens:
    #####:  835:      return -1;
        -:  836:
        -:  837:    case mine:
       40:  838:        useMine(currentPlayer, state, choice1, choice2, handPos);
        -:  839:
        -:  840:    case remodel:
       40:  841:        useRemodel(currentPlayer, state, choice1, choice2, handPos);
        -:  842:
        -:  843:    case smithy:
        -:  844:      //+3 Cards
      160:  845:      for (i = 0; i < 3; i++)
        -:  846:	{
      120:  847:	  drawCard(currentPlayer, state);
        -:  848:	}
        -:  849:
        -:  850:      //discard card from hand
       40:  851:      discardCard(handPos, currentPlayer, state, 0);
       40:  852:      return 0;
        -:  853:
        -:  854:    case village:
        -:  855:      //+1 Card
    #####:  856:      drawCard(currentPlayer, state);
        -:  857:
        -:  858:      //+2 Actions
    #####:  859:      state->numActions = state->numActions + 2;
        -:  860:
        -:  861:      //discard played card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
    #####:  863:      return 0;
        -:  864:
        -:  865:    case baron:
    #####:  866:      state->numBuys++;//Increase buys by 1!
    #####:  867:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  868:	int p = 0;//Iterator for hand!
    #####:  869:	int card_not_discarded = 1;//Flag for discard set!
    #####:  870:	while(card_not_discarded){
    #####:  871:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  872:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  873:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  874:	    state->discardCount[currentPlayer]++;
    #####:  875:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  876:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  877:	    }
    #####:  878:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  879:	    state->handCount[currentPlayer]--;
    #####:  880:	    card_not_discarded = 0;//Exit the loop
        -:  881:	  }
    #####:  882:	  else if (p > state->handCount[currentPlayer]){
    #####:  883:	    if(DEBUG) {
        -:  884:	      printf("No estate cards in your hand, invalid choice\n");
        -:  885:	      printf("Must gain an estate if there are any\n");
        -:  886:	    }
    #####:  887:	    if (supplyCount(estate, state) > 0){
    #####:  888:	      gainCard(estate, state, 0, currentPlayer);
    #####:  889:	      state->supplyCount[estate]--;//Decrement estates
    #####:  890:	      if (supplyCount(estate, state) == 0){
    #####:  891:		isGameOver(state);
        -:  892:	      }
        -:  893:	    }
    #####:  894:	    card_not_discarded = 0;//Exit the loop
        -:  895:	  }
        -:  896:
        -:  897:	  else{
    #####:  898:	    p++;//Next card
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:
        -:  903:      else{
    #####:  904:	if (supplyCount(estate, state) > 0){
    #####:  905:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  906:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  907:	  if (supplyCount(estate, state) == 0){
    #####:  908:	    isGameOver(state);
        -:  909:	  }
        -:  910:	}
        -:  911:      }
        -:  912:
        -:  913:
    #####:  914:      return 0;
        -:  915:
        -:  916:    case great_hall:
        -:  917:      //+1 Card
    #####:  918:      drawCard(currentPlayer, state);
        -:  919:
        -:  920:      //+1 Actions
    #####:  921:      state->numActions++;
        -:  922:
        -:  923:      //discard card from hand
    #####:  924:      discardCard(handPos, currentPlayer, state, 0);
    #####:  925:      return 0;
        -:  926:
        -:  927:    case minion:
        -:  928:      //+1 action
       40:  929:      state->numActions++;
        -:  930:
        -:  931:      //discard card from hand
       40:  932:      discardCard(handPos, currentPlayer, state, 0);
        -:  933:
       40:  934:      if (choice1)		//+2 coins
        -:  935:	{
       40:  936:	  state->coins = state->coins + 2;
        -:  937:	}
        -:  938:
    #####:  939:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  940:	{
        -:  941:	  //discard hand
    #####:  942:	  while(numHandCards(state) > 0)
        -:  943:	    {
    #####:  944:	      discardCard(handPos, currentPlayer, state, 0);
        -:  945:	    }
        -:  946:
        -:  947:	  //draw 4
    #####:  948:	  for (i = 0; i < 4; i++)
        -:  949:	    {
    #####:  950:	      drawCard(currentPlayer, state);
        -:  951:	    }
        -:  952:
        -:  953:	  //other players discard hand and redraw if hand size > 4
    #####:  954:	  for (i = 0; i < state->numPlayers; i++)
        -:  955:	    {
    #####:  956:	      if (i != currentPlayer)
        -:  957:		{
    #####:  958:		  if ( state->handCount[i] > 4 )
        -:  959:		    {
        -:  960:		      //discard hand
    #####:  961:		      while( state->handCount[i] > 0 )
        -:  962:			{
    #####:  963:			  discardCard(handPos, i, state, 0);
        -:  964:			}
        -:  965:
        -:  966:		      //draw 4
    #####:  967:		      for (j = 0; j < 4; j++)
        -:  968:			{
    #####:  969:			  drawCard(i, state);
        -:  970:			}
        -:  971:		    }
        -:  972:		}
        -:  973:	    }
        -:  974:
        -:  975:	}
       40:  976:      return 0;
        -:  977:
        -:  978:    case steward:
    #####:  979:      if (choice1 == 1)
        -:  980:	{
        -:  981:	  //+2 cards
    #####:  982:	  drawCard(currentPlayer, state);
    #####:  983:	  drawCard(currentPlayer, state);
        -:  984:	}
    #####:  985:      else if (choice1 == 2)
        -:  986:	{
        -:  987:	  //+2 coins
    #####:  988:	  state->coins = state->coins + 2;
        -:  989:	}
        -:  990:      else
        -:  991:	{
        -:  992:	  //trash 2 cards in hand
    #####:  993:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  994:	  discardCard(choice3, currentPlayer, state, 1);
        -:  995:	}
        -:  996:
        -:  997:      //discard card from hand
    #####:  998:      discardCard(handPos, currentPlayer, state, 0);
    #####:  999:      return 0;
        -: 1000:
        -: 1001:    case tribute:
    #####: 1002:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1003:	if (state->deckCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1005:	  state->deckCount[nextPlayer]--;
        -: 1006:	}
    #####: 1007:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1008:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1009:	  state->discardCount[nextPlayer]--;
        -: 1010:	}
        -: 1011:	else{
        -: 1012:	  //No Card to Reveal
    #####: 1013:	  if (DEBUG){
        -: 1014:	    printf("No cards to reveal\n");
        -: 1015:	  }
        -: 1016:	}
        -: 1017:      }
        -: 1018:
        -: 1019:      else{
    #####: 1020:	if (state->deckCount[nextPlayer] == 0){
    #####: 1021:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1022:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1023:	    state->deckCount[nextPlayer]++;
    #####: 1024:	    state->discard[nextPlayer][i] = -1;
    #####: 1025:	    state->discardCount[nextPlayer]--;
        -: 1026:	  }
        -: 1027:
    #####: 1028:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1029:	}
    #####: 1030:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1031:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1032:	state->deckCount[nextPlayer]--;
    #####: 1033:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:	state->deckCount[nextPlayer]--;
        -: 1036:      }
        -: 1037:
    #####: 1038:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1039:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1040:	state->playedCardCount++;
    #####: 1041:	tributeRevealedCards[1] = -1;
        -: 1042:      }
        -: 1043:
    #####: 1044:      for (i = 0; i <= 2; i ++){
    #####: 1045:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1046:	  state->coins += 2;
        -: 1047:	}
        -: 1048:
    #####: 1049:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1050:	  drawCard(currentPlayer, state);
    #####: 1051:	  drawCard(currentPlayer, state);
        -: 1052:	}
        -: 1053:	else{//Action Card
    #####: 1054:	  state->numActions = state->numActions + 2;
        -: 1055:	}
        -: 1056:      }
        -: 1057:
    #####: 1058:      return 0;
        -: 1059:
        -: 1060:    case ambassador:
    #####: 1061:      j = 0;		//used to check if player has enough cards to discard
        -: 1062:
    #####: 1063:      if (choice2 > 2 || choice2 < 0)
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      if (choice1 == handPos)
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
    #####: 1073:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1074:	{
    #####: 1075:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1076:	    {
    #####: 1077:	      j++;
        -: 1078:	    }
        -: 1079:	}
    #####: 1080:      if (j < choice2)
        -: 1081:	{
    #####: 1082:	  return -1;
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (DEBUG)
        -: 1086:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1087:
        -: 1088:      //increase supply count for choosen card by amount being discarded
    #####: 1089:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1090:
        -: 1091:      //each other player gains a copy of revealed card
    #####: 1092:      for (i = 0; i < state->numPlayers; i++)
        -: 1093:	{
    #####: 1094:	  if (i != currentPlayer)
        -: 1095:	    {
    #####: 1096:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1097:	    }
        -: 1098:	}
        -: 1099:
        -: 1100:      //discard played card from hand
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
        -: 1102:
        -: 1103:      //trash copies of cards returned to supply
    #####: 1104:      for (j = 0; j < choice2; j++)
        -: 1105:	{
    #####: 1106:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1107:	    {
    #####: 1108:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1109:		{
    #####: 1110:		  discardCard(i, currentPlayer, state, 1);
    #####: 1111:		  break;
        -: 1112:		}
        -: 1113:	    }
        -: 1114:	}
        -: 1115:
    #####: 1116:      return 0;
        -: 1117:
        -: 1118:    case cutpurse:
        -: 1119:
    #####: 1120:      updateCoins(currentPlayer, state, 2);
    #####: 1121:      for (i = 0; i < state->numPlayers; i++)
        -: 1122:	{
    #####: 1123:	  if (i != currentPlayer)
        -: 1124:	    {
    #####: 1125:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1126:		{
    #####: 1127:		  if (state->hand[i][j] == copper)
        -: 1128:		    {
    #####: 1129:		      discardCard(j, i, state, 0);
    #####: 1130:		      break;
        -: 1131:		    }
    #####: 1132:		  if (j == state->handCount[i])
        -: 1133:		    {
    #####: 1134:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1135:			{
    #####: 1136:			  if (DEBUG)
        -: 1137:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1138:			}
    #####: 1139:		      break;
        -: 1140:		    }
        -: 1141:		}
        -: 1142:
        -: 1143:	    }
        -: 1144:
        -: 1145:	}
        -: 1146:
        -: 1147:      //discard played card from hand
    #####: 1148:      discardCard(handPos, currentPlayer, state, 0);
        -: 1149:
    #####: 1150:      return 0;
        -: 1151:
        -: 1152:
        -: 1153:    case embargo:
        -: 1154:      //+2 Coins
       20: 1155:      state->coins = state->coins + 2;
        -: 1156:
        -: 1157:      //see if selected pile is in play
       20: 1158:      if ( state->supplyCount[choice1] == -1 )
        -: 1159:	{
    #####: 1160:	  return -1;
        -: 1161:	}
        -: 1162:
        -: 1163:      //add embargo token to selected supply pile
       20: 1164:      state->embargoTokens[choice1]++;
        -: 1165:
        -: 1166:      //trash card
       20: 1167:      discardCard(handPos, currentPlayer, state, 1);
       20: 1168:      return 0;
        -: 1169:
        -: 1170:    case outpost:
        -: 1171:      //set outpost flag
       20: 1172:      state->outpostPlayed++;
        -: 1173:
        -: 1174:      //discard card
       20: 1175:      discardCard(handPos, currentPlayer, state, 0);
       20: 1176:      return 0;
        -: 1177:
        -: 1178:    case salvager:
        -: 1179:      //+1 buy
       20: 1180:      state->numBuys++;
        -: 1181:
       20: 1182:      if (choice1)
        -: 1183:	{
        -: 1184:	  //gain coins equal to trashed card
       20: 1185:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1186:	  //trash card
       20: 1187:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard card
       20: 1191:      discardCard(handPos, currentPlayer, state, 0);
       20: 1192:      return 0;
        -: 1193:
        -: 1194:    case sea_hag:
    #####: 1195:      for (i = 0; i < state->numPlayers; i++){
    #####: 1196:	if (i != currentPlayer){
    #####: 1197:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1198:	  state->discardCount[i]++;
    #####: 1199:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1200:	}
        -: 1201:      }
    #####: 1202:      return 0;
        -: 1203:
        -: 1204:    case treasure_map:
        -: 1205:      //search hand for another treasure_map
    #####: 1206:      index = -1;
    #####: 1207:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1208:	{
    #####: 1209:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1210:	    {
    #####: 1211:	      index = i;
    #####: 1212:	      break;
        -: 1213:	    }
        -: 1214:	}
    #####: 1215:      if (index > -1)
        -: 1216:	{
        -: 1217:	  //trash both treasure cards
    #####: 1218:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1219:	  discardCard(index, currentPlayer, state, 1);
        -: 1220:
        -: 1221:	  //gain 4 Gold cards
    #####: 1222:	  for (i = 0; i < 4; i++)
        -: 1223:	    {
    #####: 1224:	      gainCard(gold, state, 1, currentPlayer);
        -: 1225:	    }
        -: 1226:
        -: 1227:	  //return success
    #####: 1228:	  return 1;
        -: 1229:	}
        -: 1230:
        -: 1231:      //no second treasure_map found in hand
    #####: 1232:      return -1;
        -: 1233:    }
        -: 1234:
    #####: 1235:  return -1;
        -: 1236:}
        -: 1237:
      160: 1238:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1239:{
        -: 1240:
        -: 1241:  //if card is not trashed, added to Played pile
      160: 1242:  if (trashFlag < 1)
        -: 1243:    {
        -: 1244:      //add card to played pile
      120: 1245:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      120: 1246:      state->playedCardCount++;
        -: 1247:    }
        -: 1248:
        -: 1249:  //set played card to -1
      160: 1250:  state->hand[currentPlayer][handPos] = -1;
        -: 1251:
        -: 1252:  //remove card from player's hand
      160: 1253:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1254:    {
        -: 1255:      //reduce number of cards in hand
       40: 1256:      state->handCount[currentPlayer]--;
        -: 1257:    }
      120: 1258:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1259:    {
        -: 1260:      //reduce number of cards in hand
    #####: 1261:      state->handCount[currentPlayer]--;
        -: 1262:    }
        -: 1263:  else
        -: 1264:    {
        -: 1265:      //replace discarded card with last card in hand
      120: 1266:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1267:      //set last card to -1
      120: 1268:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1269:      //reduce number of cards in hand
      120: 1270:      state->handCount[currentPlayer]--;
        -: 1271:    }
        -: 1272:
      160: 1273:  return 0;
        -: 1274:}
        -: 1275:
     2840: 1276:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1277:{
        -: 1278:  //Note: supplyPos is enum of choosen card
        -: 1279:
        -: 1280:  //check if supply pile is empty (0) or card is not used in game (-1)
     2840: 1281:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
        -: 1286:  //added card for [whoseTurn] current player:
        -: 1287:  // toFlag = 0 : add to discard
        -: 1288:  // toFlag = 1 : add to deck
        -: 1289:  // toFlag = 2 : add to hand
        -: 1290:
     2840: 1291:  if (toFlag == 1)
        -: 1292:    {
    #####: 1293:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1294:      state->deckCount[player]++;
        -: 1295:    }
     2840: 1296:  else if (toFlag == 2)
        -: 1297:    {
    #####: 1298:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1299:      state->handCount[player]++;
        -: 1300:    }
        -: 1301:  else
        -: 1302:    {
     2840: 1303:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     2840: 1304:      state->discardCount[player]++;
        -: 1305:    }
        -: 1306:
        -: 1307:  //decrease number in supply pile
     2840: 1308:  state->supplyCount[supplyPos]--;
        -: 1309:
     2840: 1310:  return 0;
        -: 1311:}
        -: 1312:
     4500: 1313:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1314:{
        -: 1315:  int i;
        -: 1316:
        -: 1317:  //reset coin count
     4500: 1318:  state->coins = 0;
        -: 1319:
        -: 1320:  //add coins for each Treasure card in player's hand
    26960: 1321:  for (i = 0; i < state->handCount[player]; i++)
        -: 1322:    {
    22460: 1323:      if (state->hand[player][i] == copper)
        -: 1324:	{
     9980: 1325:	  state->coins += 1;
        -: 1326:	}
    12480: 1327:      else if (state->hand[player][i] == silver)
        -: 1328:	{
     2620: 1329:	  state->coins += 2;
        -: 1330:	}
     9860: 1331:      else if (state->hand[player][i] == gold)
        -: 1332:	{
     2620: 1333:	  state->coins += 3;
        -: 1334:	}
        -: 1335:    }
        -: 1336:
        -: 1337:  //add bonus
     4500: 1338:  state->coins += bonus;
        -: 1339:
     4500: 1340:  return 0;
        -: 1341:}
        -: 1342:
        -: 1343:
        -: 1344://end of dominion.c
        -: 1345:
File 'dominion.c'
Lines executed:60.49% of 577
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
        -:   10:
        -:   11:
        -:   12:
        -:   13:
        -:   14:
        -:   15:
        -:   16:
        -:   17:
   211240:   18:int compare(const void* a, const void* b) {
   211240:   19:  if (*(int*)a > *(int*)b)
    94700:   20:    return 1;
   116540:   21:  if (*(int*)a < *(int*)b)
    40600:   22:    return -1;
    75940:   23:  return 0;
        -:   24:}
        -:   25:
    #####:   26:struct gameState* newGame() {
    #####:   27:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   28:  return g;
        -:   29:}
        -:   30:
    #####:   31:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   32:		  int k8, int k9, int k10) {
    #####:   33:  int* k = malloc(10 * sizeof(int));
    #####:   34:  k[0] = k1;
    #####:   35:  k[1] = k2;
    #####:   36:  k[2] = k3;
    #####:   37:  k[3] = k4;
    #####:   38:  k[4] = k5;
    #####:   39:  k[5] = k6;
    #####:   40:  k[6] = k7;
    #####:   41:  k[7] = k8;
    #####:   42:  k[8] = k9;
    #####:   43:  k[9] = k10;
    #####:   44:  return k;
        -:   45:}
        -:   46:
      120:   47:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   48:		   struct gameState *state) {
        -:   49:
        -:   50:  int i;
        -:   51:  int j;
        -:   52:  int it;
        -:   53:  //set up random number generator
      120:   54:  SelectStream(1);
      120:   55:  PutSeed((long)randomSeed);
        -:   56:
        -:   57:  //check number of players
      120:   58:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   59:    {
    #####:   60:      return -1;
        -:   61:    }
        -:   62:
        -:   63:  //set number of players
      120:   64:  state->numPlayers = numPlayers;
        -:   65:
        -:   66:  //check selected kingdom cards are different
     1320:   67:  for (i = 0; i < 10; i++)
        -:   68:    {
    13200:   69:      for (j = 0; j < 10; j++)
        -:   70:        {
    12000:   71:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   72:	    {
    #####:   73:	      return -1;
        -:   74:	    }
        -:   75:        }
        -:   76:    }
        -:   77:
        -:   78:
        -:   79:  //initialize supply
        -:   80:  ///////////////////////////////
        -:   81:
        -:   82:  //set number of Curse cards
      120:   83:  if (numPlayers == 2)
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 10;
        -:   86:    }
      120:   87:  else if (numPlayers == 3)
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 20;
        -:   90:    }
        -:   91:  else
        -:   92:    {
      120:   93:      state->supplyCount[curse] = 30;
        -:   94:    }
        -:   95:
        -:   96:  //set number of Victory cards
      120:   97:  if (numPlayers == 2)
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 8;
    #####:  100:      state->supplyCount[duchy] = 8;
    #####:  101:      state->supplyCount[province] = 8;
        -:  102:    }
        -:  103:  else
        -:  104:    {
      120:  105:      state->supplyCount[estate] = 12;
      120:  106:      state->supplyCount[duchy] = 12;
      120:  107:      state->supplyCount[province] = 12;
        -:  108:    }
        -:  109:
        -:  110:  //set number of Treasure cards
      120:  111:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      120:  112:  state->supplyCount[silver] = 40;
      120:  113:  state->supplyCount[gold] = 30;
        -:  114:
        -:  115:  //set number of Kingdom cards
     2520:  116:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  117:    {
    19800:  118:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  119:	{
    18600:  120:	  if (kingdomCards[j] == i)
        -:  121:	    {
        -:  122:	      //check if card is a 'Victory' Kingdom card
     1240:  123:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  124:		{
       40:  125:		  if (numPlayers == 2){
    #####:  126:		    state->supplyCount[i] = 8;
        -:  127:		  }
       40:  128:		  else{ state->supplyCount[i] = 12; }
        -:  129:		}
        -:  130:	      else
        -:  131:		{
     1160:  132:		  state->supplyCount[i] = 10;
        -:  133:		}
     1200:  134:	      break;
        -:  135:	    }
        -:  136:	  else    //card is not in the set choosen for the game
        -:  137:	    {
    17400:  138:	      state->supplyCount[i] = -1;
        -:  139:	    }
        -:  140:	}
        -:  141:
        -:  142:    }
        -:  143:
        -:  144:  ////////////////////////
        -:  145:  //supply intilization complete
        -:  146:
        -:  147:  //set player decks
      600:  148:  for (i = 0; i < numPlayers; i++)
        -:  149:    {
      480:  150:      state->deckCount[i] = 0;
     1920:  151:      for (j = 0; j < 3; j++)
        -:  152:	{
     1440:  153:	  state->deck[i][j] = estate;
     1440:  154:	  state->deckCount[i]++;
        -:  155:	}
     3840:  156:      for (j = 3; j < 10; j++)
        -:  157:	{
     3360:  158:	  state->deck[i][j] = copper;
     3360:  159:	  state->deckCount[i]++;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //shuffle player decks
      600:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {
      480:  166:      if ( shuffle(i, state) < 0 )
        -:  167:	{
    #####:  168:	  return -1;
        -:  169:	}
        -:  170:    }
        -:  171:
        -:  172:  //draw player hands
      600:  173:  for (i = 0; i < numPlayers; i++)
        -:  174:    {
        -:  175:      //initialize hand size to zero
      480:  176:      state->handCount[i] = 0;
      480:  177:      state->discardCount[i] = 0;
        -:  178:      //draw 5 cards
        -:  179:      // for (j = 0; j < 5; j++)
        -:  180:      //	{
        -:  181:      //	  drawCard(i, state);
        -:  182:      //	}
        -:  183:    }
        -:  184:
        -:  185:  //set embargo tokens to 0 for all supply piles
     3360:  186:  for (i = 0; i <= treasure_map; i++)
        -:  187:    {
     3240:  188:      state->embargoTokens[i] = 0;
        -:  189:    }
        -:  190:
        -:  191:  //initialize first player's turn
      120:  192:  state->outpostPlayed = 0;
      120:  193:  state->phase = 0;
      120:  194:  state->numActions = 1;
      120:  195:  state->numBuys = 1;
      120:  196:  state->playedCardCount = 0;
      120:  197:  state->whoseTurn = 0;
      120:  198:  state->handCount[state->whoseTurn] = 0;
        -:  199:  //int it; move to top
        -:  200:
        -:  201:  //Moved draw cards to here, only drawing at the start of a turn
      720:  202:  for (it = 0; it < 5; it++){
      600:  203:    drawCard(state->whoseTurn, state);
        -:  204:  }
        -:  205:
      120:  206:  updateCoins(state->whoseTurn, state, 0);
        -:  207:
      120:  208:  return 0;
        -:  209:}
        -:  210:
     5300:  211:int shuffle(int player, struct gameState *state) {
        -:  212:
        -:  213:
        -:  214:  int newDeck[MAX_DECK];
     5300:  215:  int newDeckPos = 0;
        -:  216:  int card;
        -:  217:  int i;
        -:  218:
     5300:  219:  if (state->deckCount[player] < 1)
    #####:  220:    return -1;
     5300:  221:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  222:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  223:
    88620:  224:  while (state->deckCount[player] > 0) {
    78020:  225:    card = floor(Random() * state->deckCount[player]);
    78020:  226:    newDeck[newDeckPos] = state->deck[player][card];
    78020:  227:    newDeckPos++;
   377580:  228:    for (i = card; i < state->deckCount[player]-1; i++) {
   299560:  229:      state->deck[player][i] = state->deck[player][i+1];
        -:  230:    }
    78020:  231:    state->deckCount[player]--;
        -:  232:  }
    83320:  233:  for (i = 0; i < newDeckPos; i++) {
    78020:  234:    state->deck[player][i] = newDeck[i];
    78020:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
     5300:  238:  return 0;
        -:  239:}
        -:  240:
    47360:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    47360:  244:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    47360:  247:  if (state->phase != 0)
        -:  248:    {
    #####:  249:      return -1;
        -:  250:    }
        -:  251:
        -:  252:  //check if player has enough actions
    47360:  253:  if ( state->numActions < 1 )
        -:  254:    {
      800:  255:      return -1;
        -:  256:    }
        -:  257:
        -:  258:  //get card played
    46560:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    46560:  262:  if ( card < adventurer || card > treasure_map )
        -:  263:    {
    45560:  264:      return -1;
        -:  265:    }
        -:  266:
        -:  267:  //play card
     1000:  268:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  269:    {
      400:  270:      return -1;
        -:  271:    }
        -:  272:
        -:  273:  //reduce number of actions
      600:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
      600:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
      600:  279:  return 0;
        -:  280:}
        -:  281:
     8980:  282:int buyCard(int supplyPos, struct gameState *state) {
        -:  283:  int who;
     8980:  284:  if (DEBUG){
        -:  285:    printf("Entering buyCard...\n");
        -:  286:  }
        -:  287:
        -:  288:  // I don't know what to do about the phase thing.
        -:  289:
     8980:  290:  who = state->whoseTurn;
        -:  291:
     8980:  292:  if (state->numBuys < 1){
    #####:  293:    if (DEBUG)
        -:  294:      printf("You do not have any buys left\n");
    #####:  295:    return -1;
     8980:  296:  } else if (supplyCount(supplyPos, state) <1){
      900:  297:    if (DEBUG)
        -:  298:      printf("There are not any of that type of card left\n");
      900:  299:    return -1;
     8080:  300:  } else if (state->coins < getCost(supplyPos)){
       60:  301:    if (DEBUG)
        -:  302:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       60:  303:    return -1;
        -:  304:  } else {
     8020:  305:    state->phase=1;
        -:  306:    //state->supplyCount[supplyPos]--;
     8020:  307:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  308:
     8020:  309:    state->coins = (state->coins) - (getCost(supplyPos));
     8020:  310:    state->numBuys--;
     8020:  311:    if (DEBUG)
        -:  312:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  313:  }
        -:  314:
        -:  315:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  316:  //state->discardCount[who]++;
        -:  317:
     8020:  318:  return 0;
        -:  319:}
        -:  320:
   253860:  321:int numHandCards(struct gameState *state) {
   253860:  322:  return state->handCount[ whoseTurn(state) ];
        -:  323:}
        -:  324:
  1063700:  325:int handCard(int handPos, struct gameState *state) {
  1063700:  326:  int currentPlayer = whoseTurn(state);
  1063700:  327:  return state->hand[currentPlayer][handPos];
        -:  328:}
        -:  329:
    18100:  330:int supplyCount(int card, struct gameState *state) {
    18100:  331:  return state->supplyCount[card];
        -:  332:}
        -:  333:
    #####:  334:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  335:  int i;
    #####:  336:  int count = 0;
        -:  337:
    #####:  338:  for (i = 0; i < state->deckCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->deck[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  for (i = 0; i < state->handCount[player]; i++)
        -:  344:    {
    #####:  345:      if (state->hand[player][i] == card) count++;
        -:  346:    }
        -:  347:
    #####:  348:  for (i = 0; i < state->discardCount[player]; i++)
        -:  349:    {
    #####:  350:      if (state->discard[player][i] == card) count++;
        -:  351:    }
        -:  352:
    #####:  353:  return count;
        -:  354:}
        -:  355:
  1356880:  356:int whoseTurn(struct gameState *state) {
  1356880:  357:  return state->whoseTurn;
        -:  358:}
        -:  359:
    14100:  360:int endTurn(struct gameState *state) {
        -:  361:  int k;
        -:  362:  int i;
    14100:  363:  int currentPlayer = whoseTurn(state);
        -:  364:
        -:  365:  //Discard hand
    84620:  366:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    70520:  367:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    70520:  368:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  369:  }
    14100:  370:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  371:
        -:  372:  //Code for determining the player
    14100:  373:  if (currentPlayer < (state->numPlayers - 1)){
    10560:  374:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  375:  }
        -:  376:  else{
     3540:  377:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  378:  }
        -:  379:
    14100:  380:  state->outpostPlayed = 0;
    14100:  381:  state->phase = 0;
    14100:  382:  state->numActions = 1;
    14100:  383:  state->coins = 0;
    14100:  384:  state->numBuys = 1;
    14100:  385:  state->playedCardCount = 0;
    14100:  386:  state->handCount[state->whoseTurn] = 0;
        -:  387:
        -:  388:  //int k; move to top
        -:  389:  //Next player draws hand
    84600:  390:  for (k = 0; k < 5; k++){
    70500:  391:    drawCard(state->whoseTurn, state);//Draw a card
        -:  392:  }
        -:  393:
        -:  394:  //Update money
    14100:  395:  updateCoins(state->whoseTurn, state , 0);
        -:  396:
    14100:  397:  return 0;
        -:  398:}
        -:  399:
    14220:  400:int isGameOver(struct gameState *state) {
        -:  401:  int i;
        -:  402:  int j;
        -:  403:
        -:  404:  //if stack of Province cards is empty, the game ends
    14220:  405:  if (state->supplyCount[province] == 0)
        -:  406:    {
      120:  407:      return 1;
        -:  408:    }
        -:  409:
        -:  410:  //if three supply pile are at 0, the game ends
    14100:  411:  j = 0;
   366600:  412:  for (i = 0; i < 25; i++)
        -:  413:    {
   352500:  414:      if (state->supplyCount[i] == 0)
        -:  415:	{
     5340:  416:	  j++;
        -:  417:	}
        -:  418:    }
    14100:  419:  if ( j >= 3)
        -:  420:    {
    #####:  421:      return 1;
        -:  422:    }
        -:  423:
    14100:  424:  return 0;
        -:  425:}
        -:  426:
    57340:  427:int scoreFor (int player, struct gameState *state) {
        -:  428:
        -:  429:  int i;
    57340:  430:  int score = 0;
        -:  431:  //score from hand
   129940:  432:  for (i = 0; i < state->handCount[player]; i++)
        -:  433:    {
    72600:  434:      if (state->hand[player][i] == curse) { score = score - 1; };
    72600:  435:      if (state->hand[player][i] == estate) { score = score + 1; };
    72600:  436:      if (state->hand[player][i] == duchy) { score = score + 3; };
    72600:  437:      if (state->hand[player][i] == province) { score = score + 6; };
    72600:  438:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    72600:  439:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from discard
   625040:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
   567700:  445:      if (state->discard[player][i] == curse) { score = score - 1; };
   567700:  446:      if (state->discard[player][i] == estate) { score = score + 1; };
   567700:  447:      if (state->discard[player][i] == duchy) { score = score + 3; };
   567700:  448:      if (state->discard[player][i] == province) { score = score + 6; };
   567700:  449:      if (state->discard[player][i] == great_hall) { score = score + 1; };
   567700:  450:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
        -:  453:  //score from deck
   625040:  454:  for (i = 0; i < state->discardCount[player]; i++)
        -:  455:    {
   567700:  456:      if (state->deck[player][i] == curse) { score = score - 1; };
   567700:  457:      if (state->deck[player][i] == estate) { score = score + 1; };
   567700:  458:      if (state->deck[player][i] == duchy) { score = score + 3; };
   567700:  459:      if (state->deck[player][i] == province) { score = score + 6; };
   567700:  460:      if (state->deck[player][i] == great_hall) { score = score + 1; };
   567700:  461:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  462:    }
        -:  463:
    57340:  464:  return score;
        -:  465:}
        -:  466:
      120:  467:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  468:  int i;
        -:  469:  int j;
        -:  470:  int highScore;
        -:  471:  int currentPlayer;
        -:  472:
        -:  473:  //get score for each player
      600:  474:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  475:    {
        -:  476:      //set unused player scores to -9999
      480:  477:      if (i >= state->numPlayers)
        -:  478:	{
       20:  479:	  players[i] = -9999;
        -:  480:	}
        -:  481:      else
        -:  482:	{
      460:  483:	  players[i] = scoreFor (i, state);
        -:  484:	}
        -:  485:    }
        -:  486:
        -:  487:  //find highest score
      120:  488:  j = 0;
      600:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
      480:  491:      if (players[i] > players[j])
        -:  492:	{
      220:  493:	  j = i;
        -:  494:	}
        -:  495:    }
      120:  496:  highScore = players[j];
        -:  497:
        -:  498:  //add 1 to players who had less turns
      120:  499:  currentPlayer = whoseTurn(state);
      600:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
      480:  502:      if ( players[i] == highScore && i > currentPlayer )
        -:  503:	{
       80:  504:	  players[i]++;
        -:  505:	}
        -:  506:    }
        -:  507:
        -:  508:  //find new highest score
      120:  509:  j = 0;
      600:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
      480:  512:      if ( players[i] > players[j] )
        -:  513:	{
      220:  514:	  j = i;
        -:  515:	}
        -:  516:    }
      120:  517:  highScore = players[j];
        -:  518:
        -:  519:  //set winners in array to 1 and rest to 0
      600:  520:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  521:    {
      480:  522:      if ( players[i] == highScore )
        -:  523:	{
      120:  524:	  players[i] = 1;
        -:  525:	}
        -:  526:      else
        -:  527:	{
      360:  528:	  players[i] = 0;
        -:  529:	}
        -:  530:    }
        -:  531:
      120:  532:  return 0;
        -:  533:}
        -:  534:
    71620:  535:int drawCard(int player, struct gameState *state)
        -:  536:{	int count;
        -:  537:  int deckCounter;
    71620:  538:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  539:
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
    78040:  543:    for (i = 0; i < state->discardCount[player];i++){
    73220:  544:      state->deck[player][i] = state->discard[player][i];
    73220:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
     4820:  548:    state->deckCount[player] = state->discardCount[player];
     4820:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shufffle the deck
     4820:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  553:
     4820:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:
     4820:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
     4820:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:
     4820:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:
     4820:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
     4820:  569:    if (deckCounter == 0)
    #####:  570:      return -1;
        -:  571:
     4820:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     4820:  573:    state->deckCount[player]--;
     4820:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
    66800:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
    66800:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
    66800:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
    66800:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    66800:  586:    state->deckCount[player]--;
    66800:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
    71620:  590:  return 0;
        -:  591:}
        -:  592:
    16440:  593:int getCost(int cardNumber)
        -:  594:{
    16440:  595:  switch( cardNumber )
        -:  596:    {
        -:  597:    case curse:
    #####:  598:      return 0;
        -:  599:    case estate:
    #####:  600:      return 2;
        -:  601:    case duchy:
     2560:  602:      return 5;
        -:  603:    case province:
     2880:  604:      return 8;
        -:  605:    case copper:
      320:  606:      return 0;
        -:  607:    case silver:
     3880:  608:      return 3;
        -:  609:    case gold:
     5180:  610:      return 6;
        -:  611:    case adventurer:
    #####:  612:      return 6;
        -:  613:    case council_room:
       40:  614:      return 5;
        -:  615:    case feast:
      240:  616:      return 4;
        -:  617:    case gardens:
    #####:  618:      return 4;
        -:  619:    case mine:
    #####:  620:      return 5;
        -:  621:    case remodel:
    #####:  622:      return 4;
        -:  623:    case smithy:
      280:  624:      return 4;
        -:  625:    case village:
      120:  626:      return 3;
        -:  627:    case baron:
      160:  628:      return 4;
        -:  629:    case great_hall:
       40:  630:      return 3;
        -:  631:    case minion:
    #####:  632:      return 5;
        -:  633:    case steward:
    #####:  634:      return 3;
        -:  635:    case tribute:
    #####:  636:      return 5;
        -:  637:    case ambassador:
       80:  638:      return 3;
        -:  639:    case cutpurse:
      280:  640:      return 4;
        -:  641:    case embargo:
      280:  642:      return 2;
        -:  643:    case outpost:
    #####:  644:      return 5;
        -:  645:    case salvager:
    #####:  646:      return 4;
        -:  647:    case sea_hag:
       40:  648:      return 4;
        -:  649:    case treasure_map:
       40:  650:      return 4;
        -:  651:    }
        -:  652:
       20:  653:  return -1;
        -:  654:}
        -:  655:
    #####:  656:int useAdventurer(int currentPlayer, struct gameState *state) {
    #####:  657:    int drawntreasure = 0;
        -:  658:    int cardDrawn;
        -:  659:    int temphand[MAX_HAND];
    #####:  660:    int z = 0; //used for temphand
        -:  661:
    #####:  662:    while(drawntreasure<2){
    #####:  663:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  664:            shuffle(currentPlayer, state);
        -:  665:	}
    #####:  666:	drawCard(currentPlayer, state);
    #####:  667:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  668:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  669:            drawntreasure++;
        -:  670:        else {
    #####:  671:            temphand[z]=cardDrawn;
    #####:  672:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  673:            z++;
        -:  674:        }
        -:  675:    }
    #####:  676:    while(z-1>=0) {
    #####:  677:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  678:        z=z-1;
        -:  679:    }
    #####:  680:      return 0;
        -:  681:}
        -:  682:
       20:  683:int useCouncilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  684:    //+4 Cards
        -:  685:    int i;
      100:  686:    for (i = 0; i < 4; i++) {
       80:  687:        drawCard(currentPlayer, state);
        -:  688:	}
        -:  689:    //+1 Buy
       20:  690:    state->numBuys++;
        -:  691:
        -:  692:    //Each other player draws a card
      100:  693:    for (i = 0; i < state->numPlayers; i++) {
       80:  694:        if ( i != currentPlayer )
       60:  695:	      drawCard(i, state);
        -:  696:	}
        -:  697:    //put played card in played card pile
       20:  698:    discardCard(handPos, currentPlayer, state, 0);
        -:  699:
       20:  700:    return 0;
        -:  701:}
        -:  702:
      340:  703:int useFeast(int currentPlayer, struct gameState *state, int choice1) {
        -:  704:    //gain card with cost up to 5
        -:  705:    //Backup hand
        -:  706:    int i, x;
        -:  707:    int temphand[MAX_HAND];
     2440:  708:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
     2100:  709:        temphand[i] = state->hand[currentPlayer][i];//Backup card
     2100:  710:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:    }
        -:  712:    //Backup hand
        -:  713:
        -:  714:    //Update Coins for Buy
      340:  715:    updateCoins(currentPlayer, state, 5);
      340:  716:    x = 1;                                  //Condition to loop on
        -:  717:
     1020:  718:    while( x == 1) {                        //Buy one card
      340:  719:        if (supplyCount(choice1, state) <= 0){
    #####:  720:            if (DEBUG)
        -:  721:                printf("None of that card left, sorry!\n");
    #####:  722:            if (DEBUG)
        -:  723:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:        }
      340:  725:        else if (state->coins < getCost(choice1)){
    #####:  726:            printf("That card is too expensive!\n");
    #####:  727:            if (DEBUG)
        -:  728:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  729:        }
        -:  730:        else{
      340:  731:            if (DEBUG)
        -:  732:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:
      340:  734:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
      340:  735:        x = 0;//No more buying cards
        -:  736:
      340:  737:        if (DEBUG)
        -:  738:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  739:        }
        -:  740:    }
        -:  741:
        -:  742:    //Reset Hand
     2440:  743:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
     2100:  744:        state->hand[currentPlayer][i] = temphand[i];
     2100:  745:        temphand[i] = -1;
        -:  746:    }
        -:  747:    //Reset Hand
        -:  748:
      340:  749:    return 0;
        -:  750:}
        -:  751:
    #####:  752:int useMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  753:    int i;
    #####:  754:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  755:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    #####:  756:        return -1;
        -:  757:
    #####:  758:    if (choice2 > treasure_map || choice2 < curse)
    #####:  759:        return -1;
        -:  760:
    #####:  761:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    #####:  762:        return -1;
        -:  763:
    #####:  764:    gainCard(choice2, state, 2, currentPlayer);
        -:  765:
        -:  766:    //discard card from hand
    #####:  767:    discardCard(handPos, currentPlayer, state, 0);
        -:  768:
        -:  769:    //discard trashed card
    #####:  770:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  771:        if (state->hand[currentPlayer][i] == j) {
    #####:  772:	      discardCard(i, currentPlayer, state, 0);
    #####:  773:	      break;
        -:  774:        }
        -:  775:	}
    #####:  776:    return 0;
        -:  777:}
        -:  778:
    #####:  779:int useRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  780:    int i;
    #####:  781:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  782:
    #####:  783:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    #####:  784:        return -1;
        -:  785:
    #####:  786:    gainCard(choice2, state, 0, currentPlayer);
        -:  787:
        -:  788:    //discard card from hand
    #####:  789:    discardCard(handPos, currentPlayer, state, 0);
        -:  790:
        -:  791:    //discard trashed card
    #####:  792:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  793:        if (state->hand[currentPlayer][i] == j) {
    #####:  794:	      discardCard(i, currentPlayer, state, 0);
    #####:  795:	      break;
        -:  796:	    }
        -:  797:	}
        -:  798:
    #####:  799:    return 0;
        -:  800:}
        -:  801:
     1000:  802:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  803:{
        -:  804:  int i;
        -:  805:  int j;
        -:  806:  int k;
        -:  807:  int x;
        -:  808:  int index;
     1000:  809:  int currentPlayer = whoseTurn(state);
     1000:  810:  int nextPlayer = currentPlayer + 1;
        -:  811:
     1000:  812:  int tributeRevealedCards[2] = {-1, -1};
        -:  813:  int temphand[MAX_HAND];// moved above the if statement
     1000:  814:  int drawntreasure=0;
        -:  815:  int cardDrawn;
     1000:  816:  int z = 0;// this is the counter for the temp hand
     1000:  817:  if (nextPlayer > (state->numPlayers - 1)){
      140:  818:    nextPlayer = 0;
        -:  819:  }
        -:  820:
        -:  821:
        -:  822:  //uses switch to select card and perform actions
     1000:  823:  switch( card )
        -:  824:    {
        -:  825:    case adventurer:
    #####:  826:      useAdventurer(currentPlayer, state);
        -:  827:
        -:  828:    case council_room:
       20:  829:        useCouncilRoom(currentPlayer, state, handPos);
        -:  830:
        -:  831:    case feast:
      340:  832:        useFeast(currentPlayer, state, choice1);
        -:  833:
        -:  834:    case gardens:
      340:  835:      return -1;
        -:  836:
        -:  837:    case mine:
    #####:  838:        useMine(currentPlayer, state, choice1, choice2, handPos);
        -:  839:
        -:  840:    case remodel:
    #####:  841:        useRemodel(currentPlayer, state, choice1, choice2, handPos);
        -:  842:
        -:  843:    case smithy:
        -:  844:      //+3 Cards
      400:  845:      for (i = 0; i < 3; i++)
        -:  846:	{
      300:  847:	  drawCard(currentPlayer, state);
        -:  848:	}
        -:  849:
        -:  850:      //discard card from hand
      100:  851:      discardCard(handPos, currentPlayer, state, 0);
      100:  852:      return 0;
        -:  853:
        -:  854:    case village:
        -:  855:      //+1 Card
       60:  856:      drawCard(currentPlayer, state);
        -:  857:
        -:  858:      //+2 Actions
       60:  859:      state->numActions = state->numActions + 2;
        -:  860:
        -:  861:      //discard played card from hand
       60:  862:      discardCard(handPos, currentPlayer, state, 0);
       60:  863:      return 0;
        -:  864:
        -:  865:    case baron:
      140:  866:      state->numBuys++;//Increase buys by 1!
      140:  867:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  868:	int p = 0;//Iterator for hand!
    #####:  869:	int card_not_discarded = 1;//Flag for discard set!
    #####:  870:	while(card_not_discarded){
    #####:  871:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  872:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  873:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  874:	    state->discardCount[currentPlayer]++;
    #####:  875:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  876:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  877:	    }
    #####:  878:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  879:	    state->handCount[currentPlayer]--;
    #####:  880:	    card_not_discarded = 0;//Exit the loop
        -:  881:	  }
    #####:  882:	  else if (p > state->handCount[currentPlayer]){
    #####:  883:	    if(DEBUG) {
        -:  884:	      printf("No estate cards in your hand, invalid choice\n");
        -:  885:	      printf("Must gain an estate if there are any\n");
        -:  886:	    }
    #####:  887:	    if (supplyCount(estate, state) > 0){
    #####:  888:	      gainCard(estate, state, 0, currentPlayer);
    #####:  889:	      state->supplyCount[estate]--;//Decrement estates
    #####:  890:	      if (supplyCount(estate, state) == 0){
    #####:  891:		isGameOver(state);
        -:  892:	      }
        -:  893:	    }
    #####:  894:	    card_not_discarded = 0;//Exit the loop
        -:  895:	  }
        -:  896:
        -:  897:	  else{
    #####:  898:	    p++;//Next card
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:
        -:  903:      else{
      140:  904:	if (supplyCount(estate, state) > 0){
      140:  905:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      140:  906:	  state->supplyCount[estate]--;//Decrement Estates
      140:  907:	  if (supplyCount(estate, state) == 0){
    #####:  908:	    isGameOver(state);
        -:  909:	  }
        -:  910:	}
        -:  911:      }
        -:  912:
        -:  913:
      140:  914:      return 0;
        -:  915:
        -:  916:    case great_hall:
        -:  917:      //+1 Card
       20:  918:      drawCard(currentPlayer, state);
        -:  919:
        -:  920:      //+1 Actions
       20:  921:      state->numActions++;
        -:  922:
        -:  923:      //discard card from hand
       20:  924:      discardCard(handPos, currentPlayer, state, 0);
       20:  925:      return 0;
        -:  926:
        -:  927:    case minion:
        -:  928:      //+1 action
    #####:  929:      state->numActions++;
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
        -:  933:
    #####:  934:      if (choice1)		//+2 coins
        -:  935:	{
    #####:  936:	  state->coins = state->coins + 2;
        -:  937:	}
        -:  938:
    #####:  939:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  940:	{
        -:  941:	  //discard hand
    #####:  942:	  while(numHandCards(state) > 0)
        -:  943:	    {
    #####:  944:	      discardCard(handPos, currentPlayer, state, 0);
        -:  945:	    }
        -:  946:
        -:  947:	  //draw 4
    #####:  948:	  for (i = 0; i < 4; i++)
        -:  949:	    {
    #####:  950:	      drawCard(currentPlayer, state);
        -:  951:	    }
        -:  952:
        -:  953:	  //other players discard hand and redraw if hand size > 4
    #####:  954:	  for (i = 0; i < state->numPlayers; i++)
        -:  955:	    {
    #####:  956:	      if (i != currentPlayer)
        -:  957:		{
    #####:  958:		  if ( state->handCount[i] > 4 )
        -:  959:		    {
        -:  960:		      //discard hand
    #####:  961:		      while( state->handCount[i] > 0 )
        -:  962:			{
    #####:  963:			  discardCard(handPos, i, state, 0);
        -:  964:			}
        -:  965:
        -:  966:		      //draw 4
    #####:  967:		      for (j = 0; j < 4; j++)
        -:  968:			{
    #####:  969:			  drawCard(i, state);
        -:  970:			}
        -:  971:		    }
        -:  972:		}
        -:  973:	    }
        -:  974:
        -:  975:	}
    #####:  976:      return 0;
        -:  977:
        -:  978:    case steward:
    #####:  979:      if (choice1 == 1)
        -:  980:	{
        -:  981:	  //+2 cards
    #####:  982:	  drawCard(currentPlayer, state);
    #####:  983:	  drawCard(currentPlayer, state);
        -:  984:	}
    #####:  985:      else if (choice1 == 2)
        -:  986:	{
        -:  987:	  //+2 coins
    #####:  988:	  state->coins = state->coins + 2;
        -:  989:	}
        -:  990:      else
        -:  991:	{
        -:  992:	  //trash 2 cards in hand
    #####:  993:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  994:	  discardCard(choice3, currentPlayer, state, 1);
        -:  995:	}
        -:  996:
        -:  997:      //discard card from hand
    #####:  998:      discardCard(handPos, currentPlayer, state, 0);
    #####:  999:      return 0;
        -: 1000:
        -: 1001:    case tribute:
    #####: 1002:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1003:	if (state->deckCount[nextPlayer] > 0){
    #####: 1004:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1005:	  state->deckCount[nextPlayer]--;
        -: 1006:	}
    #####: 1007:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1008:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1009:	  state->discardCount[nextPlayer]--;
        -: 1010:	}
        -: 1011:	else{
        -: 1012:	  //No Card to Reveal
    #####: 1013:	  if (DEBUG){
        -: 1014:	    printf("No cards to reveal\n");
        -: 1015:	  }
        -: 1016:	}
        -: 1017:      }
        -: 1018:
        -: 1019:      else{
    #####: 1020:	if (state->deckCount[nextPlayer] == 0){
    #####: 1021:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1022:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1023:	    state->deckCount[nextPlayer]++;
    #####: 1024:	    state->discard[nextPlayer][i] = -1;
    #####: 1025:	    state->discardCount[nextPlayer]--;
        -: 1026:	  }
        -: 1027:
    #####: 1028:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1029:	}
    #####: 1030:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1031:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1032:	state->deckCount[nextPlayer]--;
    #####: 1033:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:	state->deckCount[nextPlayer]--;
        -: 1036:      }
        -: 1037:
    #####: 1038:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1039:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1040:	state->playedCardCount++;
    #####: 1041:	tributeRevealedCards[1] = -1;
        -: 1042:      }
        -: 1043:
    #####: 1044:      for (i = 0; i <= 2; i ++){
    #####: 1045:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1046:	  state->coins += 2;
        -: 1047:	}
        -: 1048:
    #####: 1049:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1050:	  drawCard(currentPlayer, state);
    #####: 1051:	  drawCard(currentPlayer, state);
        -: 1052:	}
        -: 1053:	else{//Action Card
    #####: 1054:	  state->numActions = state->numActions + 2;
        -: 1055:	}
        -: 1056:      }
        -: 1057:
    #####: 1058:      return 0;
        -: 1059:
        -: 1060:    case ambassador:
       20: 1061:      j = 0;		//used to check if player has enough cards to discard
        -: 1062:
       20: 1063:      if (choice2 > 2 || choice2 < 0)
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
       20: 1068:      if (choice1 == handPos)
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
      120: 1073:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1074:	{
      100: 1075:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1076:	    {
    #####: 1077:	      j++;
        -: 1078:	    }
        -: 1079:	}
       20: 1080:      if (j < choice2)
        -: 1081:	{
       20: 1082:	  return -1;
        -: 1083:	}
        -: 1084:
    #####: 1085:      if (DEBUG)
        -: 1086:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1087:
        -: 1088:      //increase supply count for choosen card by amount being discarded
    #####: 1089:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1090:
        -: 1091:      //each other player gains a copy of revealed card
    #####: 1092:      for (i = 0; i < state->numPlayers; i++)
        -: 1093:	{
    #####: 1094:	  if (i != currentPlayer)
        -: 1095:	    {
    #####: 1096:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1097:	    }
        -: 1098:	}
        -: 1099:
        -: 1100:      //discard played card from hand
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);
        -: 1102:
        -: 1103:      //trash copies of cards returned to supply
    #####: 1104:      for (j = 0; j < choice2; j++)
        -: 1105:	{
    #####: 1106:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1107:	    {
    #####: 1108:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1109:		{
    #####: 1110:		  discardCard(i, currentPlayer, state, 1);
    #####: 1111:		  break;
        -: 1112:		}
        -: 1113:	    }
        -: 1114:	}
        -: 1115:
    #####: 1116:      return 0;
        -: 1117:
        -: 1118:    case cutpurse:
        -: 1119:
      120: 1120:      updateCoins(currentPlayer, state, 2);
      580: 1121:      for (i = 0; i < state->numPlayers; i++)
        -: 1122:	{
      460: 1123:	  if (i != currentPlayer)
        -: 1124:	    {
      340: 1125:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1126:		{
    #####: 1127:		  if (state->hand[i][j] == copper)
        -: 1128:		    {
    #####: 1129:		      discardCard(j, i, state, 0);
    #####: 1130:		      break;
        -: 1131:		    }
    #####: 1132:		  if (j == state->handCount[i])
        -: 1133:		    {
    #####: 1134:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1135:			{
    #####: 1136:			  if (DEBUG)
        -: 1137:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1138:			}
    #####: 1139:		      break;
        -: 1140:		    }
        -: 1141:		}
        -: 1142:
        -: 1143:	    }
        -: 1144:
        -: 1145:	}
        -: 1146:
        -: 1147:      //discard played card from hand
      120: 1148:      discardCard(handPos, currentPlayer, state, 0);
        -: 1149:
      120: 1150:      return 0;
        -: 1151:
        -: 1152:
        -: 1153:    case embargo:
        -: 1154:      //+2 Coins
      120: 1155:      state->coins = state->coins + 2;
        -: 1156:
        -: 1157:      //see if selected pile is in play
      120: 1158:      if ( state->supplyCount[choice1] == -1 )
        -: 1159:	{
    #####: 1160:	  return -1;
        -: 1161:	}
        -: 1162:
        -: 1163:      //add embargo token to selected supply pile
      120: 1164:      state->embargoTokens[choice1]++;
        -: 1165:
        -: 1166:      //trash card
      120: 1167:      discardCard(handPos, currentPlayer, state, 1);
      120: 1168:      return 0;
        -: 1169:
        -: 1170:    case outpost:
        -: 1171:      //set outpost flag
    #####: 1172:      state->outpostPlayed++;
        -: 1173:
        -: 1174:      //discard card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1176:      return 0;
        -: 1177:
        -: 1178:    case salvager:
        -: 1179:      //+1 buy
    #####: 1180:      state->numBuys++;
        -: 1181:
    #####: 1182:      if (choice1)
        -: 1183:	{
        -: 1184:	  //gain coins equal to trashed card
    #####: 1185:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1186:	  //trash card
    #####: 1187:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1188:	}
        -: 1189:
        -: 1190:      //discard card
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1192:      return 0;
        -: 1193:
        -: 1194:    case sea_hag:
      200: 1195:      for (i = 0; i < state->numPlayers; i++){
      160: 1196:	if (i != currentPlayer){
      120: 1197:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      120: 1198:	  state->discardCount[i]++;
      120: 1199:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1200:	}
        -: 1201:      }
       40: 1202:      return 0;
        -: 1203:
        -: 1204:    case treasure_map:
        -: 1205:      //search hand for another treasure_map
       40: 1206:      index = -1;
      240: 1207:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1208:	{
      200: 1209:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1210:	    {
    #####: 1211:	      index = i;
    #####: 1212:	      break;
        -: 1213:	    }
        -: 1214:	}
       40: 1215:      if (index > -1)
        -: 1216:	{
        -: 1217:	  //trash both treasure cards
    #####: 1218:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1219:	  discardCard(index, currentPlayer, state, 1);
        -: 1220:
        -: 1221:	  //gain 4 Gold cards
    #####: 1222:	  for (i = 0; i < 4; i++)
        -: 1223:	    {
    #####: 1224:	      gainCard(gold, state, 1, currentPlayer);
        -: 1225:	    }
        -: 1226:
        -: 1227:	  //return success
    #####: 1228:	  return 1;
        -: 1229:	}
        -: 1230:
        -: 1231:      //no second treasure_map found in hand
       40: 1232:      return -1;
        -: 1233:    }
        -: 1234:
    #####: 1235:  return -1;
        -: 1236:}
        -: 1237:
      440: 1238:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1239:{
        -: 1240:
        -: 1241:  //if card is not trashed, added to Played pile
      440: 1242:  if (trashFlag < 1)
        -: 1243:    {
        -: 1244:      //add card to played pile
      320: 1245:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      320: 1246:      state->playedCardCount++;
        -: 1247:    }
        -: 1248:
        -: 1249:  //set played card to -1
      440: 1250:  state->hand[currentPlayer][handPos] = -1;
        -: 1251:
        -: 1252:  //remove card from player's hand
      440: 1253:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1254:    {
        -: 1255:      //reduce number of cards in hand
       40: 1256:      state->handCount[currentPlayer]--;
        -: 1257:    }
      400: 1258:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1259:    {
        -: 1260:      //reduce number of cards in hand
    #####: 1261:      state->handCount[currentPlayer]--;
        -: 1262:    }
        -: 1263:  else
        -: 1264:    {
        -: 1265:      //replace discarded card with last card in hand
      400: 1266:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1267:      //set last card to -1
      400: 1268:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1269:      //reduce number of cards in hand
      400: 1270:      state->handCount[currentPlayer]--;
        -: 1271:    }
        -: 1272:
      440: 1273:  return 0;
        -: 1274:}
        -: 1275:
     8500: 1276:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1277:{
        -: 1278:  //Note: supplyPos is enum of choosen card
        -: 1279:
        -: 1280:  //check if supply pile is empty (0) or card is not used in game (-1)
     8500: 1281:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:
        -: 1286:  //added card for [whoseTurn] current player:
        -: 1287:  // toFlag = 0 : add to discard
        -: 1288:  // toFlag = 1 : add to deck
        -: 1289:  // toFlag = 2 : add to hand
        -: 1290:
     8500: 1291:  if (toFlag == 1)
        -: 1292:    {
    #####: 1293:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1294:      state->deckCount[player]++;
        -: 1295:    }
     8500: 1296:  else if (toFlag == 2)
        -: 1297:    {
    #####: 1298:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1299:      state->handCount[player]++;
        -: 1300:    }
        -: 1301:  else
        -: 1302:    {
     8500: 1303:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     8500: 1304:      state->discardCount[player]++;
        -: 1305:    }
        -: 1306:
        -: 1307:  //decrease number in supply pile
     8500: 1308:  state->supplyCount[supplyPos]--;
        -: 1309:
     8500: 1310:  return 0;
        -: 1311:}
        -: 1312:
    15280: 1313:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1314:{
        -: 1315:  int i;
        -: 1316:
        -: 1317:  //reset coin count
    15280: 1318:  state->coins = 0;
        -: 1319:
        -: 1320:  //add coins for each Treasure card in player's hand
    91700: 1321:  for (i = 0; i < state->handCount[player]; i++)
        -: 1322:    {
    76420: 1323:      if (state->hand[player][i] == copper)
        -: 1324:	{
    33180: 1325:	  state->coins += 1;
        -: 1326:	}
    43240: 1327:      else if (state->hand[player][i] == silver)
        -: 1328:	{
     9720: 1329:	  state->coins += 2;
        -: 1330:	}
    33520: 1331:      else if (state->hand[player][i] == gold)
        -: 1332:	{
     5900: 1333:	  state->coins += 3;
        -: 1334:	}
        -: 1335:    }
        -: 1336:
        -: 1337:  //add bonus
    15280: 1338:  state->coins += bonus;
        -: 1339:
    15280: 1340:  return 0;
        -: 1341:}
        -: 1342:
        -: 1343:
        -: 1344://end of dominion.c
        -: 1345:
File 'dominion.c'
Lines executed:53.09% of 582
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    77120:    8:int compare(const void* a, const void* b) {
    77120:    9:  if (*(int*)a > *(int*)b)
    35840:   10:    return 1;
    41280:   11:  if (*(int*)a < *(int*)b)
    15420:   12:    return -1;
    25860:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       80:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       80:   44:  SelectStream(1);
       80:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       80:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       80:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      880:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     8800:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     8000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       80:   73:  if (numPlayers == 2)
        -:   74:    {
       80:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       80:   87:  if (numPlayers == 2)
        -:   88:    {
       80:   89:      state->supplyCount[estate] = 8;
       80:   90:      state->supplyCount[duchy] = 8;
       80:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       80:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       80:  102:  state->supplyCount[silver] = 40;
       80:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1680:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    13200:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    12400:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      800:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      800:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      800:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    11600:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      240:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      160:  140:      state->deckCount[i] = 0;
      640:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      480:  143:	  state->deck[i][j] = estate;
      480:  144:	  state->deckCount[i]++;
        -:  145:	}
     1280:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     1120:  148:	  state->deck[i][j] = copper;
     1120:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      240:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      160:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      240:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
      160:  166:      state->handCount[i] = 0;
      160:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     2240:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     2160:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       80:  182:  state->outpostPlayed = 0;
       80:  183:  state->phase = 0;
       80:  184:  state->numActions = 1;
       80:  185:  state->numBuys = 1;
       80:  186:  state->playedCardCount = 0;
       80:  187:  state->whoseTurn = 0;
       80:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      480:  192:  for (it = 0; it < 5; it++){
      400:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       80:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       80:  198:  return 0;
        -:  199:}
        -:  200:
     1820:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1820:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1820:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     1820:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    31280:  214:  while (state->deckCount[player] > 0) {
    27640:  215:    card = floor(Random() * state->deckCount[player]);
    27640:  216:    newDeck[newDeckPos] = state->deck[player][card];
    27640:  217:    newDeckPos++;
   138580:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   110940:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    27640:  221:    state->deckCount[player]--;
        -:  222:  }
    29460:  223:  for (i = 0; i < newDeckPos; i++) {
    27640:  224:    state->deck[player][i] = newDeck[i];
    27640:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1820:  228:  return 0;
        -:  229:}
        -:  230:
    16340:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    16340:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    16340:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    16340:  243:  if ( state->numActions < 1 )
        -:  244:    {
      500:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    15840:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    15840:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    15220:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
      620:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
      180:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
      440:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      440:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
      440:  269:  return 0;
        -:  270:}
        -:  271:
     3360:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
     3360:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     3360:  280:  who = state->whoseTurn;
        -:  281:
     3360:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
     3360:  286:  } else if (supplyCount(supplyPos, state) <1){
       40:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       40:  289:    return -1;
     3320:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
     3320:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     3320:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
     3320:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     3320:  300:    state->numBuys--;
     3320:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
     3320:  308:  return 0;
        -:  309:}
        -:  310:
    88080:  311:int numHandCards(struct gameState *state) {
    88080:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
   362680:  315:int handCard(int handPos, struct gameState *state) {
   362680:  316:  int currentPlayer = whoseTurn(state);
   362680:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     6940:  320:int supplyCount(int card, struct gameState *state) {
     6940:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
   465320:  346:int whoseTurn(struct gameState *state) {
   465320:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
     4900:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     4900:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    29260:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    24360:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    24360:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
     4900:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
     4900:  363:  if (currentPlayer < (state->numPlayers - 1)){
     2460:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     2440:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     4900:  370:  state->outpostPlayed = 0;
     4900:  371:  state->phase = 0;
     4900:  372:  state->numActions = 1;
     4900:  373:  state->coins = 0;
     4900:  374:  state->numBuys = 1;
     4900:  375:  state->playedCardCount = 0;
     4900:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    29400:  380:  for (k = 0; k < 5; k++){
    24500:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
     4900:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
     4900:  387:  return 0;
        -:  388:}
        -:  389:
     5000:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     5000:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
       80:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     4920:  401:  j = 0;
   127920:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   123000:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     1140:  406:	  j++;
        -:  407:	}
        -:  408:    }
     4920:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
     4920:  414:  return 0;
        -:  415:}
        -:  416:
    10120:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    10120:  420:  int score = 0;
        -:  421:  //score from hand
    35420:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    25300:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    25300:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    25300:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    25300:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    25300:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    25300:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   101960:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    91840:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    91840:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    91840:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    91840:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    91840:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    91840:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   101960:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    91840:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    91840:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    91840:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    91840:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    91840:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    91840:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    10120:  454:  return score;
        -:  455:}
        -:  456:
       80:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
      400:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
      320:  467:      if (i >= state->numPlayers)
        -:  468:	{
      160:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
      160:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
       80:  478:  j = 0;
      400:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
      320:  481:      if (players[i] > players[j])
        -:  482:	{
       60:  483:	  j = i;
        -:  484:	}
        -:  485:    }
       80:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
       80:  489:  currentPlayer = whoseTurn(state);
      400:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
      320:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
       60:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
       80:  499:  j = 0;
      400:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
      320:  502:      if ( players[i] > players[j] )
        -:  503:	{
       60:  504:	  j = i;
        -:  505:	}
        -:  506:    }
       80:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
      400:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
      320:  512:      if ( players[i] == highScore )
        -:  513:	{
       80:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
      240:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
       80:  522:  return 0;
        -:  523:}
        -:  524:
    24920:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    24920:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    27700:  533:    for (i = 0; i < state->discardCount[player];i++){
    26040:  534:      state->deck[player][i] = state->discard[player][i];
    26040:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1660:  538:    state->deckCount[player] = state->discardCount[player];
     1660:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1660:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
     1660:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     1660:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1660:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
     1660:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     1660:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1660:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
     1660:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1660:  563:    state->deckCount[player]--;
     1660:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    23260:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    23260:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    23260:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    23260:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    23260:  576:    state->deckCount[player]--;
    23260:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    24920:  580:  return 0;
        -:  581:}
        -:  582:
     6920:  583:int getCost(int cardNumber)
        -:  584:{
     6920:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       20:  590:      return 2;
        -:  591:    case duchy:
     1000:  592:      return 5;
        -:  593:    case province:
     1280:  594:      return 8;
        -:  595:    case copper:
       40:  596:      return 0;
        -:  597:    case silver:
     1640:  598:      return 3;
        -:  599:    case gold:
     2060:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
       80:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
      120:  608:      return 4;
        -:  609:    case mine:
      200:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
       40:  616:      return 3;
        -:  617:    case baron:
       80:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
      120:  634:      return 5;
        -:  635:    case salvager:
       80:  636:      return 4;
        -:  637:    case sea_hag:
      160:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int useAdventurer(int currentPlayer, struct gameState *state) {
    #####:  647:    int drawntreasure = 0;
        -:  648:    int cardDrawn;
        -:  649:    int temphand[MAX_HAND];
    #####:  650:    int z = 0; //used for temphand
        -:  651:
    #####:  652:    while(drawntreasure<2){
    #####:  653:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  654:            shuffle(currentPlayer, state);
        -:  655:	}
    #####:  656:	drawCard(currentPlayer, state);
    #####:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  658:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:            drawntreasure++;
        -:  660:        else {
    #####:  661:            temphand[z]=cardDrawn;
    #####:  662:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:            z++;
        -:  664:        }
        -:  665:    }
    #####:  666:    while(z-1>=0) {
    #####:  667:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:        z=z-1;
        -:  669:    }
    #####:  670:      return 0;
        -:  671:}
        -:  672:
    #####:  673:int useCouncilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  674:    //+4 Cards
        -:  675:    int i;
    #####:  676:    for (i = 0; i < 4; i++) {
    #####:  677:        drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:    //+1 Buy
    #####:  680:    state->numBuys++;
        -:  681:
        -:  682:    //Each other player draws a card
    #####:  683:    for (i = 0; i < state->numPlayers; i++) {
    #####:  684:        if ( i != currentPlayer )
    #####:  685:	      drawCard(i, state);
        -:  686:	}
        -:  687:    //put played card in played card pile
    #####:  688:    discardCard(handPos, currentPlayer, state, 0);
        -:  689:
    #####:  690:    return 0;
        -:  691:}
        -:  692:
    #####:  693:int useFeast(int currentPlayer, struct gameState *state, int choice1) {
        -:  694:    //gain card with cost up to 5
        -:  695:    //Backup hand
        -:  696:    int i, x;
        -:  697:    int temphand[MAX_HAND];
    #####:  698:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  701:    }
        -:  702:    //Backup hand
        -:  703:
        -:  704:    //Update Coins for Buy
    #####:  705:    updateCoins(currentPlayer, state, 5);
    #####:  706:    x = 1;                                  //Condition to loop on
        -:  707:
    #####:  708:    while( x == 1) {                        //Buy one card
    #####:  709:        if (supplyCount(choice1, state) <= 0){
    #####:  710:            if (DEBUG)
        -:  711:                printf("None of that card left, sorry!\n");
    #####:  712:            if (DEBUG)
        -:  713:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:        }
    #####:  715:        else if (state->coins < getCost(choice1)){
    #####:  716:            printf("That card is too expensive!\n");
    #####:  717:            if (DEBUG)
        -:  718:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:        }
        -:  720:        else{
    #####:  721:            if (DEBUG)
        -:  722:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:
    #####:  724:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  725:        x = 0;//No more buying cards
        -:  726:
    #####:  727:        if (DEBUG)
        -:  728:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:        }
        -:  730:    }
        -:  731:
        -:  732:    //Reset Hand
    #####:  733:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  734:        state->hand[currentPlayer][i] = temphand[i];
    #####:  735:        temphand[i] = -1;
        -:  736:    }
        -:  737:    //Reset Hand
        -:  738:
    #####:  739:    return 0;
        -:  740:}
        -:  741:
      180:  742:int useMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  743:    int i;
      180:  744:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
      180:  745:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
       60:  746:        return -1;
        -:  747:
      120:  748:    if (choice2 > treasure_map || choice2 < curse)
    #####:  749:        return -1;
        -:  750:
      120:  751:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
      100:  752:        return -1;
        -:  753:
       20:  754:    gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:    //discard card from hand
       20:  757:    discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:    //discard trashed card
       60:  760:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
       60:  761:        if (state->hand[currentPlayer][i] == j) {
       20:  762:	      discardCard(i, currentPlayer, state, 0);
       20:  763:	      break;
        -:  764:        }
        -:  765:	}
       20:  766:    return 0;
        -:  767:}
        -:  768:
    #####:  769:int useRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  770:    int i;
    #####:  771:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
    #####:  774:        return -1;
        -:  775:
    #####:  776:    gainCard(choice2, state, 0, currentPlayer);
        -:  777:
        -:  778:    //discard card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
        -:  780:
        -:  781:    //discard trashed card
    #####:  782:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  783:        if (state->hand[currentPlayer][i] == j) {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);
    #####:  785:	      break;
        -:  786:	    }
        -:  787:	}
        -:  788:
    #####:  789:    return 0;
        -:  790:}
        -:  791:
      620:  792:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  793:{
        -:  794:  int i;
        -:  795:  int j;
        -:  796:  int k;
        -:  797:  int x;
        -:  798:  int index;
      620:  799:  int currentPlayer = whoseTurn(state);
      620:  800:  int nextPlayer = currentPlayer + 1;
        -:  801:
      620:  802:  int tributeRevealedCards[2] = {-1, -1};
        -:  803:  int temphand[MAX_HAND];// moved above the if statement
      620:  804:  int drawntreasure=0;
        -:  805:  int cardDrawn;
      620:  806:  int z = 0;// this is the counter for the temp hand
      620:  807:  if (nextPlayer > (state->numPlayers - 1)){
      180:  808:    nextPlayer = 0;
        -:  809:  }
        -:  810:
        -:  811:
        -:  812:  //uses switch to select card and perform actions
      620:  813:  switch( card )
        -:  814:    {
        -:  815:    case adventurer:
    #####:  816:      useAdventurer(currentPlayer, state);
    #####:  817:      break;
        -:  818:    case council_room:
    #####:  819:        useCouncilRoom(currentPlayer, state, handPos);
    #####:  820:	break;
        -:  821:    case feast:
    #####:  822:        useFeast(currentPlayer, state, choice1);
    #####:  823:	break;
        -:  824:    case gardens:
    #####:  825:      return -1;
        -:  826:
        -:  827:    case mine:
      180:  828:        useMine(currentPlayer, state, choice1, choice2, handPos);
      180:  829:	break;
        -:  830:    case remodel:
    #####:  831:        useRemodel(currentPlayer, state, choice1, choice2, handPos);
    #####:  832:	break;
        -:  833:    case smithy:
        -:  834:      //+3 Cards
    #####:  835:      for (i = 0; i < 3; i++)
        -:  836:	{
    #####:  837:	  drawCard(currentPlayer, state);
        -:  838:	}
        -:  839:
        -:  840:      //discard card from hand
    #####:  841:      discardCard(handPos, currentPlayer, state, 0);
    #####:  842:      return 0;
        -:  843:
        -:  844:    case village:
        -:  845:      //+1 Card
       20:  846:      drawCard(currentPlayer, state);
        -:  847:
        -:  848:      //+2 Actions
       20:  849:      state->numActions = state->numActions + 2;
        -:  850:
        -:  851:      //discard played card from hand
       20:  852:      discardCard(handPos, currentPlayer, state, 0);
       20:  853:      return 0;
        -:  854:
        -:  855:    case baron:
       80:  856:      state->numBuys++;//Increase buys by 1!
       80:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
        -:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
    #####:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
    #####:  881:		isGameOver(state);
        -:  882:	      }
        -:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
        -:  885:	  }
        -:  886:
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:
        -:  893:      else{
       80:  894:	if (supplyCount(estate, state) > 0){
       80:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
       80:  896:	  state->supplyCount[estate]--;//Decrement Estates
       80:  897:	  if (supplyCount(estate, state) == 0){
       20:  898:	    isGameOver(state);
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:
        -:  903:
       80:  904:      return 0;
        -:  905:
        -:  906:    case great_hall:
        -:  907:      //+1 Card
    #####:  908:      drawCard(currentPlayer, state);
        -:  909:
        -:  910:      //+1 Actions
    #####:  911:      state->numActions++;
        -:  912:
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
    #####:  915:      return 0;
        -:  916:
        -:  917:    case minion:
        -:  918:      //+1 action
    #####:  919:      state->numActions++;
        -:  920:
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:
    #####:  924:      if (choice1)		//+2 coins
        -:  925:	{
    #####:  926:	  state->coins = state->coins + 2;
        -:  927:	}
        -:  928:
    #####:  929:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  930:	{
        -:  931:	  //discard hand
    #####:  932:	  while(numHandCards(state) > 0)
        -:  933:	    {
    #####:  934:	      discardCard(handPos, currentPlayer, state, 0);
        -:  935:	    }
        -:  936:
        -:  937:	  //draw 4
    #####:  938:	  for (i = 0; i < 4; i++)
        -:  939:	    {
    #####:  940:	      drawCard(currentPlayer, state);
        -:  941:	    }
        -:  942:
        -:  943:	  //other players discard hand and redraw if hand size > 4
    #####:  944:	  for (i = 0; i < state->numPlayers; i++)
        -:  945:	    {
    #####:  946:	      if (i != currentPlayer)
        -:  947:		{
    #####:  948:		  if ( state->handCount[i] > 4 )
        -:  949:		    {
        -:  950:		      //discard hand
    #####:  951:		      while( state->handCount[i] > 0 )
        -:  952:			{
    #####:  953:			  discardCard(handPos, i, state, 0);
        -:  954:			}
        -:  955:
        -:  956:		      //draw 4
    #####:  957:		      for (j = 0; j < 4; j++)
        -:  958:			{
    #####:  959:			  drawCard(i, state);
        -:  960:			}
        -:  961:		    }
        -:  962:		}
        -:  963:	    }
        -:  964:
        -:  965:	}
    #####:  966:      return 0;
        -:  967:
        -:  968:    case steward:
    #####:  969:      if (choice1 == 1)
        -:  970:	{
        -:  971:	  //+2 cards
    #####:  972:	  drawCard(currentPlayer, state);
    #####:  973:	  drawCard(currentPlayer, state);
        -:  974:	}
    #####:  975:      else if (choice1 == 2)
        -:  976:	{
        -:  977:	  //+2 coins
    #####:  978:	  state->coins = state->coins + 2;
        -:  979:	}
        -:  980:      else
        -:  981:	{
        -:  982:	  //trash 2 cards in hand
    #####:  983:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  984:	  discardCard(choice3, currentPlayer, state, 1);
        -:  985:	}
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:
        -:  991:    case tribute:
    #####:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  993:	if (state->deckCount[nextPlayer] > 0){
    #####:  994:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	  state->deckCount[nextPlayer]--;
        -:  996:	}
    #####:  997:	else if (state->discardCount[nextPlayer] > 0){
    #####:  998:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  999:	  state->discardCount[nextPlayer]--;
        -: 1000:	}
        -: 1001:	else{
        -: 1002:	  //No Card to Reveal
    #####: 1003:	  if (DEBUG){
        -: 1004:	    printf("No cards to reveal\n");
        -: 1005:	  }
        -: 1006:	}
        -: 1007:      }
        -: 1008:
        -: 1009:      else{
    #####: 1010:	if (state->deckCount[nextPlayer] == 0){
    #####: 1011:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1012:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1013:	    state->deckCount[nextPlayer]++;
    #####: 1014:	    state->discard[nextPlayer][i] = -1;
    #####: 1015:	    state->discardCount[nextPlayer]--;
        -: 1016:	  }
        -: 1017:
    #####: 1018:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1019:	}
    #####: 1020:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1022:	state->deckCount[nextPlayer]--;
    #####: 1023:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1025:	state->deckCount[nextPlayer]--;
        -: 1026:      }
        -: 1027:
    #####: 1028:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1029:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1030:	state->playedCardCount++;
    #####: 1031:	tributeRevealedCards[1] = -1;
        -: 1032:      }
        -: 1033:
    #####: 1034:      for (i = 0; i <= 2; i ++){
    #####: 1035:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1036:	  state->coins += 2;
        -: 1037:	}
        -: 1038:
    #####: 1039:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1040:	  drawCard(currentPlayer, state);
    #####: 1041:	  drawCard(currentPlayer, state);
        -: 1042:	}
        -: 1043:	else{//Action Card
    #####: 1044:	  state->numActions = state->numActions + 2;
        -: 1045:	}
        -: 1046:      }
        -: 1047:
    #####: 1048:      return 0;
        -: 1049:
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:      if (choice2 > 2 || choice2 < 0)
        -: 1054:	{
    #####: 1055:	  return -1;
        -: 1056:	}
        -: 1057:
    #####: 1058:      if (choice1 == handPos)
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:
    #####: 1063:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1064:	{
    #####: 1065:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1066:	    {
    #####: 1067:	      j++;
        -: 1068:	    }
        -: 1069:	}
    #####: 1070:      if (j < choice2)
        -: 1071:	{
    #####: 1072:	  return -1;
        -: 1073:	}
        -: 1074:
    #####: 1075:      if (DEBUG)
        -: 1076:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:      //increase supply count for choosen card by amount being discarded
    #####: 1079:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:
        -: 1081:      //each other player gains a copy of revealed card
    #####: 1082:      for (i = 0; i < state->numPlayers; i++)
        -: 1083:	{
    #####: 1084:	  if (i != currentPlayer)
        -: 1085:	    {
    #####: 1086:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1087:	    }
        -: 1088:	}
        -: 1089:
        -: 1090:      //discard played card from hand
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
        -: 1092:
        -: 1093:      //trash copies of cards returned to supply
    #####: 1094:      for (j = 0; j < choice2; j++)
        -: 1095:	{
    #####: 1096:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	    {
    #####: 1098:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1099:		{
    #####: 1100:		  discardCard(i, currentPlayer, state, 1);
    #####: 1101:		  break;
        -: 1102:		}
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:
        -: 1108:    case cutpurse:
        -: 1109:
    #####: 1110:      updateCoins(currentPlayer, state, 2);
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1116:		{
    #####: 1117:		  if (state->hand[i][j] == copper)
        -: 1118:		    {
    #####: 1119:		      discardCard(j, i, state, 0);
    #####: 1120:		      break;
        -: 1121:		    }
    #####: 1122:		  if (j == state->handCount[i])
        -: 1123:		    {
    #####: 1124:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1125:			{
    #####: 1126:			  if (DEBUG)
        -: 1127:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1128:			}
    #####: 1129:		      break;
        -: 1130:		    }
        -: 1131:		}
        -: 1132:
        -: 1133:	    }
        -: 1134:
        -: 1135:	}
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);
        -: 1139:
    #####: 1140:      return 0;
        -: 1141:
        -: 1142:
        -: 1143:    case embargo:
        -: 1144:      //+2 Coins
    #####: 1145:      state->coins = state->coins + 2;
        -: 1146:
        -: 1147:      //see if selected pile is in play
    #####: 1148:      if ( state->supplyCount[choice1] == -1 )
        -: 1149:	{
    #####: 1150:	  return -1;
        -: 1151:	}
        -: 1152:
        -: 1153:      //add embargo token to selected supply pile
    #####: 1154:      state->embargoTokens[choice1]++;
        -: 1155:
        -: 1156:      //trash card
    #####: 1157:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1158:      return 0;
        -: 1159:
        -: 1160:    case outpost:
        -: 1161:      //set outpost flag
       20: 1162:      state->outpostPlayed++;
        -: 1163:
        -: 1164:      //discard card
       20: 1165:      discardCard(handPos, currentPlayer, state, 0);
       20: 1166:      return 0;
        -: 1167:
        -: 1168:    case salvager:
        -: 1169:      //+1 buy
       40: 1170:      state->numBuys++;
        -: 1171:
       40: 1172:      if (choice1)
        -: 1173:	{
        -: 1174:	  //gain coins equal to trashed card
       40: 1175:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1176:	  //trash card
       40: 1177:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1178:	}
        -: 1179:
        -: 1180:      //discard card
       40: 1181:      discardCard(handPos, currentPlayer, state, 0);
       40: 1182:      return 0;
        -: 1183:
        -: 1184:    case sea_hag:
      840: 1185:      for (i = 0; i < state->numPlayers; i++){
      560: 1186:	if (i != currentPlayer){
      280: 1187:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      280: 1188:	  state->discardCount[i]++;
      280: 1189:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1190:	}
        -: 1191:      }
      280: 1192:      return 0;
        -: 1193:
        -: 1194:    case treasure_map:
        -: 1195:      //search hand for another treasure_map
    #####: 1196:      index = -1;
    #####: 1197:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1198:	{
    #####: 1199:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1200:	    {
    #####: 1201:	      index = i;
    #####: 1202:	      break;
        -: 1203:	    }
        -: 1204:	}
    #####: 1205:      if (index > -1)
        -: 1206:	{
        -: 1207:	  //trash both treasure cards
    #####: 1208:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:	  discardCard(index, currentPlayer, state, 1);
        -: 1210:
        -: 1211:	  //gain 4 Gold cards
    #####: 1212:	  for (i = 0; i < 4; i++)
        -: 1213:	    {
    #####: 1214:	      gainCard(gold, state, 1, currentPlayer);
        -: 1215:	    }
        -: 1216:
        -: 1217:	  //return success
    #####: 1218:	  return 1;
        -: 1219:	}
        -: 1220:
        -: 1221:      //no second treasure_map found in hand
    #####: 1222:      return -1;
        -: 1223:    }
        -: 1224:
      180: 1225:  return -1;
        -: 1226:}
        -: 1227:
      160: 1228:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1229:{
        -: 1230:
        -: 1231:  //if card is not trashed, added to Played pile
      160: 1232:  if (trashFlag < 1)
        -: 1233:    {
        -: 1234:      //add card to played pile
      120: 1235:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      120: 1236:      state->playedCardCount++;
        -: 1237:    }
        -: 1238:
        -: 1239:  //set played card to -1
      160: 1240:  state->hand[currentPlayer][handPos] = -1;
        -: 1241:
        -: 1242:  //remove card from player's hand
      160: 1243:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1244:    {
        -: 1245:      //reduce number of cards in hand
       60: 1246:      state->handCount[currentPlayer]--;
        -: 1247:    }
      100: 1248:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1249:    {
        -: 1250:      //reduce number of cards in hand
    #####: 1251:      state->handCount[currentPlayer]--;
        -: 1252:    }
        -: 1253:  else
        -: 1254:    {
        -: 1255:      //replace discarded card with last card in hand
      100: 1256:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1257:      //set last card to -1
      100: 1258:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1259:      //reduce number of cards in hand
      100: 1260:      state->handCount[currentPlayer]--;
        -: 1261:    }
        -: 1262:
      160: 1263:  return 0;
        -: 1264:}
        -: 1265:
     3420: 1266:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1267:{
        -: 1268:  //Note: supplyPos is enum of choosen card
        -: 1269:
        -: 1270:  //check if supply pile is empty (0) or card is not used in game (-1)
     3420: 1271:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1272:    {
       20: 1273:      return -1;
        -: 1274:    }
        -: 1275:
        -: 1276:  //added card for [whoseTurn] current player:
        -: 1277:  // toFlag = 0 : add to discard
        -: 1278:  // toFlag = 1 : add to deck
        -: 1279:  // toFlag = 2 : add to hand
        -: 1280:
     3400: 1281:  if (toFlag == 1)
        -: 1282:    {
    #####: 1283:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1284:      state->deckCount[player]++;
        -: 1285:    }
     3400: 1286:  else if (toFlag == 2)
        -: 1287:    {
    #####: 1288:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1289:      state->handCount[player]++;
        -: 1290:    }
        -: 1291:  else
        -: 1292:    {
     3400: 1293:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     3400: 1294:      state->discardCount[player]++;
        -: 1295:    }
        -: 1296:
        -: 1297:  //decrease number in supply pile
     3400: 1298:  state->supplyCount[supplyPos]--;
        -: 1299:
     3400: 1300:  return 0;
        -: 1301:}
        -: 1302:
     5420: 1303:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1304:{
        -: 1305:  int i;
        -: 1306:
        -: 1307:  //reset coin count
     5420: 1308:  state->coins = 0;
        -: 1309:
        -: 1310:  //add coins for each Treasure card in player's hand
    32420: 1311:  for (i = 0; i < state->handCount[player]; i++)
        -: 1312:    {
    27000: 1313:      if (state->hand[player][i] == copper)
        -: 1314:	{
    10380: 1315:	  state->coins += 1;
        -: 1316:	}
    16620: 1317:      else if (state->hand[player][i] == silver)
        -: 1318:	{
     4320: 1319:	  state->coins += 2;
        -: 1320:	}
    12300: 1321:      else if (state->hand[player][i] == gold)
        -: 1322:	{
     2300: 1323:	  state->coins += 3;
        -: 1324:	}
        -: 1325:    }
        -: 1326:
        -: 1327:  //add bonus
     5420: 1328:  state->coins += bonus;
        -: 1329:
     5420: 1330:  return 0;
        -: 1331:}
        -: 1332:
        -: 1333:
        -: 1334://end of dominion.c
        -: 1335:
File 'dominion.c'
Lines executed:66.49% of 582
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   251440:    8:int compare(const void* a, const void* b) {
   251440:    9:  if (*(int*)a > *(int*)b)
   119680:   10:    return 1;
   131760:   11:  if (*(int*)a < *(int*)b)
    47280:   12:    return -1;
    84480:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      160:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
      160:   44:  SelectStream(1);
      160:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      160:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      160:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1760:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    17600:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    16000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      160:   73:  if (numPlayers == 2)
        -:   74:    {
       80:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       80:   77:  else if (numPlayers == 3)
        -:   78:    {
       80:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      160:   87:  if (numPlayers == 2)
        -:   88:    {
       80:   89:      state->supplyCount[estate] = 8;
       80:   90:      state->supplyCount[duchy] = 8;
       80:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       80:   95:      state->supplyCount[estate] = 12;
       80:   96:      state->supplyCount[duchy] = 12;
       80:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      160:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      160:  102:  state->supplyCount[silver] = 40;
      160:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3360:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    26400:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    24800:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1600:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){
    #####:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1600:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1600:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    23200:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      560:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      400:  140:      state->deckCount[i] = 0;
     1600:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1200:  143:	  state->deck[i][j] = estate;
     1200:  144:	  state->deckCount[i]++;
        -:  145:	}
     3200:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     2800:  148:	  state->deck[i][j] = copper;
     2800:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      560:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      400:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      560:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
      400:  166:      state->handCount[i] = 0;
      400:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     4480:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     4320:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      160:  182:  state->outpostPlayed = 0;
      160:  183:  state->phase = 0;
      160:  184:  state->numActions = 1;
      160:  185:  state->numBuys = 1;
      160:  186:  state->playedCardCount = 0;
      160:  187:  state->whoseTurn = 0;
      160:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      960:  192:  for (it = 0; it < 5; it++){
      800:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      160:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      160:  198:  return 0;
        -:  199:}
        -:  200:
     5340:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     5340:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     5340:  209:  if (state->deckCount[player] < 1)
      140:  210:    return -1;
     5200:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    96020:  214:  while (state->deckCount[player] > 0) {
    85620:  215:    card = floor(Random() * state->deckCount[player]);
    85620:  216:    newDeck[newDeckPos] = state->deck[player][card];
    85620:  217:    newDeckPos++;
   474720:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   389100:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    85620:  221:    state->deckCount[player]--;
        -:  222:  }
    90820:  223:  for (i = 0; i < newDeckPos; i++) {
    85620:  224:    state->deck[player][i] = newDeck[i];
    85620:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     5200:  228:  return 0;
        -:  229:}
        -:  230:
    51260:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    51260:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    51260:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    51260:  243:  if ( state->numActions < 1 )
        -:  244:    {
     1300:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    49960:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    49960:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    47520:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
     2440:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
     1520:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
      920:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      920:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
      920:  269:  return 0;
        -:  270:}
        -:  271:
    10320:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    10320:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    10320:  280:  who = state->whoseTurn;
        -:  281:
    10320:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    10320:  286:  } else if (supplyCount(supplyPos, state) <1){
      200:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      200:  289:    return -1;
    10120:  290:  } else if (state->coins < getCost(supplyPos)){
      820:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      820:  293:    return -1;
        -:  294:  } else {
     9300:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     9300:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
     9300:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     9300:  300:    state->numBuys--;
     9300:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
     9300:  308:  return 0;
        -:  309:}
        -:  310:
   271400:  311:int numHandCards(struct gameState *state) {
   271400:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
  1109740:  315:int handCard(int handPos, struct gameState *state) {
  1109740:  316:  int currentPlayer = whoseTurn(state);
  1109740:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    20460:  320:int supplyCount(int card, struct gameState *state) {
    20460:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
  1426520:  346:int whoseTurn(struct gameState *state) {
  1426520:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    14960:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    14960:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    91820:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    76860:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    76860:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    14960:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    14960:  363:  if (currentPlayer < (state->numPlayers - 1)){
     9180:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     5780:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    14960:  370:  state->outpostPlayed = 0;
    14960:  371:  state->phase = 0;
    14960:  372:  state->numActions = 1;
    14960:  373:  state->coins = 0;
    14960:  374:  state->numBuys = 1;
    14960:  375:  state->playedCardCount = 0;
    14960:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    89760:  380:  for (k = 0; k < 5; k++){
    74800:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    14960:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    14960:  387:  return 0;
        -:  388:}
        -:  389:
    15140:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    15140:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      160:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    14980:  401:  j = 0;
   389480:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   374500:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2780:  406:	  j++;
        -:  407:	}
        -:  408:    }
    14980:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    14980:  414:  return 0;
        -:  415:}
        -:  416:
    40780:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    40780:  420:  int score = 0;
        -:  421:  //score from hand
   117180:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    76400:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    76400:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    76400:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    76400:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    76400:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    76400:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   479280:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
   438500:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
   438500:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
   438500:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
   438500:  438:      if (state->discard[player][i] == province) { score = score + 6; };
   438500:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
   438500:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   479280:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
   438500:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
   438500:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
   438500:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
   438500:  449:      if (state->deck[player][i] == province) { score = score + 6; };
   438500:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
   438500:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    40780:  454:  return score;
        -:  455:}
        -:  456:
      160:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
      800:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
      640:  467:      if (i >= state->numPlayers)
        -:  468:	{
      240:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
      400:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
      160:  478:  j = 0;
      800:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
      640:  481:      if (players[i] > players[j])
        -:  482:	{
      140:  483:	  j = i;
        -:  484:	}
        -:  485:    }
      160:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
      160:  489:  currentPlayer = whoseTurn(state);
      800:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
      640:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
      100:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
      160:  499:  j = 0;
      800:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
      640:  502:      if ( players[i] > players[j] )
        -:  503:	{
      140:  504:	  j = i;
        -:  505:	}
        -:  506:    }
      160:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
      800:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
      640:  512:      if ( players[i] == highScore )
        -:  513:	{
      160:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
      480:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
      160:  522:  return 0;
        -:  523:}
        -:  524:
    79300:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    79300:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    86420:  533:    for (i = 0; i < state->discardCount[player];i++){
    81620:  534:      state->deck[player][i] = state->discard[player][i];
    81620:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     4800:  538:    state->deckCount[player] = state->discardCount[player];
     4800:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     4800:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
     4800:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     4800:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     4800:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
     4800:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     4800:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     4800:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
     4800:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     4800:  563:    state->deckCount[player]--;
     4800:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    74500:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    74500:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    74500:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    74500:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    74500:  576:    state->deckCount[player]--;
    74500:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    79300:  580:  return 0;
        -:  581:}
        -:  582:
    19840:  583:int getCost(int cardNumber)
        -:  584:{
    19840:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       20:  590:      return 2;
        -:  591:    case duchy:
     2880:  592:      return 5;
        -:  593:    case province:
     3480:  594:      return 8;
        -:  595:    case copper:
      160:  596:      return 0;
        -:  597:    case silver:
     4200:  598:      return 3;
        -:  599:    case gold:
     5240:  600:      return 6;
        -:  601:    case adventurer:
     1400:  602:      return 6;
        -:  603:    case council_room:
       80:  604:      return 5;
        -:  605:    case feast:
      120:  606:      return 4;
        -:  607:    case gardens:
      140:  608:      return 4;
        -:  609:    case mine:
      500:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
      320:  614:      return 4;
        -:  615:    case village:
       40:  616:      return 3;
        -:  617:    case baron:
      160:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
      160:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
       80:  630:      return 4;
        -:  631:    case embargo:
      120:  632:      return 2;
        -:  633:    case outpost:
      320:  634:      return 5;
        -:  635:    case salvager:
       80:  636:      return 4;
        -:  637:    case sea_hag:
      160:  638:      return 4;
        -:  639:    case treasure_map:
      180:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      980:  646:int useAdventurer(int currentPlayer, struct gameState *state) {
      980:  647:    int drawntreasure = 0;
        -:  648:    int cardDrawn;
        -:  649:    int temphand[MAX_HAND];
      980:  650:    int z = 0; //used for temphand
        -:  651:
     5000:  652:    while(drawntreasure<2){
     3040:  653:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      140:  654:            shuffle(currentPlayer, state);
        -:  655:	}
     3040:  656:	drawCard(currentPlayer, state);
     3040:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     5000:  658:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     1960:  659:            drawntreasure++;
        -:  660:        else {
     1080:  661:            temphand[z]=cardDrawn;
     1080:  662:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1080:  663:            z++;
        -:  664:        }
        -:  665:    }
     3040:  666:    while(z-1>=0) {
     1080:  667:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1080:  668:        z=z-1;
        -:  669:    }
      980:  670:      return 0;
        -:  671:}
        -:  672:
    #####:  673:int useCouncilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  674:    //+4 Cards
        -:  675:    int i;
    #####:  676:    for (i = 0; i < 4; i++) {
    #####:  677:        drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:    //+1 Buy
    #####:  680:    state->numBuys++;
        -:  681:
        -:  682:    //Each other player draws a card
    #####:  683:    for (i = 0; i < state->numPlayers; i++) {
    #####:  684:        if ( i != currentPlayer )
    #####:  685:	      drawCard(i, state);
        -:  686:	}
        -:  687:    //put played card in played card pile
    #####:  688:    discardCard(handPos, currentPlayer, state, 0);
        -:  689:
    #####:  690:    return 0;
        -:  691:}
        -:  692:
      100:  693:int useFeast(int currentPlayer, struct gameState *state, int choice1) {
        -:  694:    //gain card with cost up to 5
        -:  695:    //Backup hand
        -:  696:    int i, x;
        -:  697:    int temphand[MAX_HAND];
      700:  698:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
      600:  699:        temphand[i] = state->hand[currentPlayer][i];//Backup card
      600:  700:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  701:    }
        -:  702:    //Backup hand
        -:  703:
        -:  704:    //Update Coins for Buy
      100:  705:    updateCoins(currentPlayer, state, 5);
      100:  706:    x = 1;                                  //Condition to loop on
        -:  707:
      300:  708:    while( x == 1) {                        //Buy one card
      100:  709:        if (supplyCount(choice1, state) <= 0){
    #####:  710:            if (DEBUG)
        -:  711:                printf("None of that card left, sorry!\n");
    #####:  712:            if (DEBUG)
        -:  713:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:        }
      100:  715:        else if (state->coins < getCost(choice1)){
    #####:  716:            printf("That card is too expensive!\n");
    #####:  717:            if (DEBUG)
        -:  718:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:        }
        -:  720:        else{
      100:  721:            if (DEBUG)
        -:  722:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:
      100:  724:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
      100:  725:        x = 0;//No more buying cards
        -:  726:
      100:  727:        if (DEBUG)
        -:  728:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:        }
        -:  730:    }
        -:  731:
        -:  732:    //Reset Hand
      700:  733:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
      600:  734:        state->hand[currentPlayer][i] = temphand[i];
      600:  735:        temphand[i] = -1;
        -:  736:    }
        -:  737:    //Reset Hand
        -:  738:
      100:  739:    return 0;
        -:  740:}
        -:  741:
      260:  742:int useMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  743:    int i;
      260:  744:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
      260:  745:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
      120:  746:        return -1;
        -:  747:
      140:  748:    if (choice2 > treasure_map || choice2 < curse)
    #####:  749:        return -1;
        -:  750:
      140:  751:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
      100:  752:        return -1;
        -:  753:
       40:  754:    gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:    //discard card from hand
       40:  757:    discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:    //discard trashed card
      120:  760:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
      120:  761:        if (state->hand[currentPlayer][i] == j) {
       40:  762:	      discardCard(i, currentPlayer, state, 0);
       40:  763:	      break;
        -:  764:        }
        -:  765:	}
       40:  766:    return 0;
        -:  767:}
        -:  768:
    #####:  769:int useRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  770:    int i;
    #####:  771:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
    #####:  774:        return -1;
        -:  775:
    #####:  776:    gainCard(choice2, state, 0, currentPlayer);
        -:  777:
        -:  778:    //discard card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
        -:  780:
        -:  781:    //discard trashed card
    #####:  782:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  783:        if (state->hand[currentPlayer][i] == j) {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);
    #####:  785:	      break;
        -:  786:	    }
        -:  787:	}
        -:  788:
    #####:  789:    return 0;
        -:  790:}
        -:  791:
     2440:  792:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  793:{
        -:  794:  int i;
        -:  795:  int j;
        -:  796:  int k;
        -:  797:  int x;
        -:  798:  int index;
     2440:  799:  int currentPlayer = whoseTurn(state);
     2440:  800:  int nextPlayer = currentPlayer + 1;
        -:  801:
     2440:  802:  int tributeRevealedCards[2] = {-1, -1};
        -:  803:  int temphand[MAX_HAND];// moved above the if statement
     2440:  804:  int drawntreasure=0;
        -:  805:  int cardDrawn;
     2440:  806:  int z = 0;// this is the counter for the temp hand
     2440:  807:  if (nextPlayer > (state->numPlayers - 1)){
      480:  808:    nextPlayer = 0;
        -:  809:  }
        -:  810:
        -:  811:
        -:  812:  //uses switch to select card and perform actions
     2440:  813:  switch( card )
        -:  814:    {
        -:  815:    case adventurer:
      980:  816:      useAdventurer(currentPlayer, state);
      980:  817:      break;
        -:  818:    case council_room:
    #####:  819:        useCouncilRoom(currentPlayer, state, handPos);
    #####:  820:	break;
        -:  821:    case feast:
      100:  822:        useFeast(currentPlayer, state, choice1);
      100:  823:	break;
        -:  824:    case gardens:
    #####:  825:      return -1;
        -:  826:
        -:  827:    case mine:
      260:  828:        useMine(currentPlayer, state, choice1, choice2, handPos);
      260:  829:	break;
        -:  830:    case remodel:
    #####:  831:        useRemodel(currentPlayer, state, choice1, choice2, handPos);
    #####:  832:	break;
        -:  833:    case smithy:
        -:  834:      //+3 Cards
      640:  835:      for (i = 0; i < 3; i++)
        -:  836:	{
      480:  837:	  drawCard(currentPlayer, state);
        -:  838:	}
        -:  839:
        -:  840:      //discard card from hand
      160:  841:      discardCard(handPos, currentPlayer, state, 0);
      160:  842:      return 0;
        -:  843:
        -:  844:    case village:
        -:  845:      //+1 Card
       20:  846:      drawCard(currentPlayer, state);
        -:  847:
        -:  848:      //+2 Actions
       20:  849:      state->numActions = state->numActions + 2;
        -:  850:
        -:  851:      //discard played card from hand
       20:  852:      discardCard(handPos, currentPlayer, state, 0);
       20:  853:      return 0;
        -:  854:
        -:  855:    case baron:
      200:  856:      state->numBuys++;//Increase buys by 1!
      200:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
        -:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
    #####:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
    #####:  881:		isGameOver(state);
        -:  882:	      }
        -:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
        -:  885:	  }
        -:  886:
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:
        -:  893:      else{
      200:  894:	if (supplyCount(estate, state) > 0){
      200:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      200:  896:	  state->supplyCount[estate]--;//Decrement Estates
      200:  897:	  if (supplyCount(estate, state) == 0){
       20:  898:	    isGameOver(state);
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:
        -:  903:
      200:  904:      return 0;
        -:  905:
        -:  906:    case great_hall:
        -:  907:      //+1 Card
    #####:  908:      drawCard(currentPlayer, state);
        -:  909:
        -:  910:      //+1 Actions
    #####:  911:      state->numActions++;
        -:  912:
        -:  913:      //discard card from hand
    #####:  914:      discardCard(handPos, currentPlayer, state, 0);
    #####:  915:      return 0;
        -:  916:
        -:  917:    case minion:
        -:  918:      //+1 action
    #####:  919:      state->numActions++;
        -:  920:
        -:  921:      //discard card from hand
    #####:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:
    #####:  924:      if (choice1)		//+2 coins
        -:  925:	{
    #####:  926:	  state->coins = state->coins + 2;
        -:  927:	}
        -:  928:
    #####:  929:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  930:	{
        -:  931:	  //discard hand
    #####:  932:	  while(numHandCards(state) > 0)
        -:  933:	    {
    #####:  934:	      discardCard(handPos, currentPlayer, state, 0);
        -:  935:	    }
        -:  936:
        -:  937:	  //draw 4
    #####:  938:	  for (i = 0; i < 4; i++)
        -:  939:	    {
    #####:  940:	      drawCard(currentPlayer, state);
        -:  941:	    }
        -:  942:
        -:  943:	  //other players discard hand and redraw if hand size > 4
    #####:  944:	  for (i = 0; i < state->numPlayers; i++)
        -:  945:	    {
    #####:  946:	      if (i != currentPlayer)
        -:  947:		{
    #####:  948:		  if ( state->handCount[i] > 4 )
        -:  949:		    {
        -:  950:		      //discard hand
    #####:  951:		      while( state->handCount[i] > 0 )
        -:  952:			{
    #####:  953:			  discardCard(handPos, i, state, 0);
        -:  954:			}
        -:  955:
        -:  956:		      //draw 4
    #####:  957:		      for (j = 0; j < 4; j++)
        -:  958:			{
    #####:  959:			  drawCard(i, state);
        -:  960:			}
        -:  961:		    }
        -:  962:		}
        -:  963:	    }
        -:  964:
        -:  965:	}
    #####:  966:      return 0;
        -:  967:
        -:  968:    case steward:
       80:  969:      if (choice1 == 1)
        -:  970:	{
        -:  971:	  //+2 cards
       80:  972:	  drawCard(currentPlayer, state);
       80:  973:	  drawCard(currentPlayer, state);
        -:  974:	}
    #####:  975:      else if (choice1 == 2)
        -:  976:	{
        -:  977:	  //+2 coins
    #####:  978:	  state->coins = state->coins + 2;
        -:  979:	}
        -:  980:      else
        -:  981:	{
        -:  982:	  //trash 2 cards in hand
    #####:  983:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  984:	  discardCard(choice3, currentPlayer, state, 1);
        -:  985:	}
        -:  986:
        -:  987:      //discard card from hand
       80:  988:      discardCard(handPos, currentPlayer, state, 0);
       80:  989:      return 0;
        -:  990:
        -:  991:    case tribute:
    #####:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  993:	if (state->deckCount[nextPlayer] > 0){
    #####:  994:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	  state->deckCount[nextPlayer]--;
        -:  996:	}
    #####:  997:	else if (state->discardCount[nextPlayer] > 0){
    #####:  998:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  999:	  state->discardCount[nextPlayer]--;
        -: 1000:	}
        -: 1001:	else{
        -: 1002:	  //No Card to Reveal
    #####: 1003:	  if (DEBUG){
        -: 1004:	    printf("No cards to reveal\n");
        -: 1005:	  }
        -: 1006:	}
        -: 1007:      }
        -: 1008:
        -: 1009:      else{
    #####: 1010:	if (state->deckCount[nextPlayer] == 0){
    #####: 1011:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1012:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1013:	    state->deckCount[nextPlayer]++;
    #####: 1014:	    state->discard[nextPlayer][i] = -1;
    #####: 1015:	    state->discardCount[nextPlayer]--;
        -: 1016:	  }
        -: 1017:
    #####: 1018:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1019:	}
    #####: 1020:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1022:	state->deckCount[nextPlayer]--;
    #####: 1023:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1025:	state->deckCount[nextPlayer]--;
        -: 1026:      }
        -: 1027:
    #####: 1028:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1029:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1030:	state->playedCardCount++;
    #####: 1031:	tributeRevealedCards[1] = -1;
        -: 1032:      }
        -: 1033:
    #####: 1034:      for (i = 0; i <= 2; i ++){
    #####: 1035:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1036:	  state->coins += 2;
        -: 1037:	}
        -: 1038:
    #####: 1039:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1040:	  drawCard(currentPlayer, state);
    #####: 1041:	  drawCard(currentPlayer, state);
        -: 1042:	}
        -: 1043:	else{//Action Card
    #####: 1044:	  state->numActions = state->numActions + 2;
        -: 1045:	}
        -: 1046:      }
        -: 1047:
    #####: 1048:      return 0;
        -: 1049:
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:      if (choice2 > 2 || choice2 < 0)
        -: 1054:	{
    #####: 1055:	  return -1;
        -: 1056:	}
        -: 1057:
    #####: 1058:      if (choice1 == handPos)
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:
    #####: 1063:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1064:	{
    #####: 1065:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1066:	    {
    #####: 1067:	      j++;
        -: 1068:	    }
        -: 1069:	}
    #####: 1070:      if (j < choice2)
        -: 1071:	{
    #####: 1072:	  return -1;
        -: 1073:	}
        -: 1074:
    #####: 1075:      if (DEBUG)
        -: 1076:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:      //increase supply count for choosen card by amount being discarded
    #####: 1079:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:
        -: 1081:      //each other player gains a copy of revealed card
    #####: 1082:      for (i = 0; i < state->numPlayers; i++)
        -: 1083:	{
    #####: 1084:	  if (i != currentPlayer)
        -: 1085:	    {
    #####: 1086:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1087:	    }
        -: 1088:	}
        -: 1089:
        -: 1090:      //discard played card from hand
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
        -: 1092:
        -: 1093:      //trash copies of cards returned to supply
    #####: 1094:      for (j = 0; j < choice2; j++)
        -: 1095:	{
    #####: 1096:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	    {
    #####: 1098:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1099:		{
    #####: 1100:		  discardCard(i, currentPlayer, state, 1);
    #####: 1101:		  break;
        -: 1102:		}
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:
        -: 1108:    case cutpurse:
        -: 1109:
       40: 1110:      updateCoins(currentPlayer, state, 2);
      160: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
      120: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
       80: 1115:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1116:		{
    #####: 1117:		  if (state->hand[i][j] == copper)
        -: 1118:		    {
    #####: 1119:		      discardCard(j, i, state, 0);
    #####: 1120:		      break;
        -: 1121:		    }
    #####: 1122:		  if (j == state->handCount[i])
        -: 1123:		    {
    #####: 1124:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1125:			{
    #####: 1126:			  if (DEBUG)
        -: 1127:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1128:			}
    #####: 1129:		      break;
        -: 1130:		    }
        -: 1131:		}
        -: 1132:
        -: 1133:	    }
        -: 1134:
        -: 1135:	}
        -: 1136:
        -: 1137:      //discard played card from hand
       40: 1138:      discardCard(handPos, currentPlayer, state, 0);
        -: 1139:
       40: 1140:      return 0;
        -: 1141:
        -: 1142:
        -: 1143:    case embargo:
        -: 1144:      //+2 Coins
       40: 1145:      state->coins = state->coins + 2;
        -: 1146:
        -: 1147:      //see if selected pile is in play
       40: 1148:      if ( state->supplyCount[choice1] == -1 )
        -: 1149:	{
    #####: 1150:	  return -1;
        -: 1151:	}
        -: 1152:
        -: 1153:      //add embargo token to selected supply pile
       40: 1154:      state->embargoTokens[choice1]++;
        -: 1155:
        -: 1156:      //trash card
       40: 1157:      discardCard(handPos, currentPlayer, state, 1);
       40: 1158:      return 0;
        -: 1159:
        -: 1160:    case outpost:
        -: 1161:      //set outpost flag
       60: 1162:      state->outpostPlayed++;
        -: 1163:
        -: 1164:      //discard card
       60: 1165:      discardCard(handPos, currentPlayer, state, 0);
       60: 1166:      return 0;
        -: 1167:
        -: 1168:    case salvager:
        -: 1169:      //+1 buy
       40: 1170:      state->numBuys++;
        -: 1171:
       40: 1172:      if (choice1)
        -: 1173:	{
        -: 1174:	  //gain coins equal to trashed card
       40: 1175:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1176:	  //trash card
       40: 1177:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1178:	}
        -: 1179:
        -: 1180:      //discard card
       40: 1181:      discardCard(handPos, currentPlayer, state, 0);
       40: 1182:      return 0;
        -: 1183:
        -: 1184:    case sea_hag:
      840: 1185:      for (i = 0; i < state->numPlayers; i++){
      560: 1186:	if (i != currentPlayer){
      280: 1187:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      280: 1188:	  state->discardCount[i]++;
      280: 1189:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1190:	}
        -: 1191:      }
      280: 1192:      return 0;
        -: 1193:
        -: 1194:    case treasure_map:
        -: 1195:      //search hand for another treasure_map
      180: 1196:      index = -1;
     1120: 1197:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1198:	{
      940: 1199:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1200:	    {
    #####: 1201:	      index = i;
    #####: 1202:	      break;
        -: 1203:	    }
        -: 1204:	}
      180: 1205:      if (index > -1)
        -: 1206:	{
        -: 1207:	  //trash both treasure cards
    #####: 1208:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:	  discardCard(index, currentPlayer, state, 1);
        -: 1210:
        -: 1211:	  //gain 4 Gold cards
    #####: 1212:	  for (i = 0; i < 4; i++)
        -: 1213:	    {
    #####: 1214:	      gainCard(gold, state, 1, currentPlayer);
        -: 1215:	    }
        -: 1216:
        -: 1217:	  //return success
    #####: 1218:	  return 1;
        -: 1219:	}
        -: 1220:
        -: 1221:      //no second treasure_map found in hand
      180: 1222:      return -1;
        -: 1223:    }
        -: 1224:
     1340: 1225:  return -1;
        -: 1226:}
        -: 1227:
      560: 1228:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1229:{
        -: 1230:
        -: 1231:  //if card is not trashed, added to Played pile
      560: 1232:  if (trashFlag < 1)
        -: 1233:    {
        -: 1234:      //add card to played pile
      480: 1235:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      480: 1236:      state->playedCardCount++;
        -: 1237:    }
        -: 1238:
        -: 1239:  //set played card to -1
      560: 1240:  state->hand[currentPlayer][handPos] = -1;
        -: 1241:
        -: 1242:  //remove card from player's hand
      560: 1243:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1244:    {
        -: 1245:      //reduce number of cards in hand
       80: 1246:      state->handCount[currentPlayer]--;
        -: 1247:    }
      480: 1248:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1249:    {
        -: 1250:      //reduce number of cards in hand
    #####: 1251:      state->handCount[currentPlayer]--;
        -: 1252:    }
        -: 1253:  else
        -: 1254:    {
        -: 1255:      //replace discarded card with last card in hand
      480: 1256:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1257:      //set last card to -1
      480: 1258:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1259:      //reduce number of cards in hand
      480: 1260:      state->handCount[currentPlayer]--;
        -: 1261:    }
        -: 1262:
      560: 1263:  return 0;
        -: 1264:}
        -: 1265:
     9640: 1266:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1267:{
        -: 1268:  //Note: supplyPos is enum of choosen card
        -: 1269:
        -: 1270:  //check if supply pile is empty (0) or card is not used in game (-1)
     9640: 1271:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1272:    {
       40: 1273:      return -1;
        -: 1274:    }
        -: 1275:
        -: 1276:  //added card for [whoseTurn] current player:
        -: 1277:  // toFlag = 0 : add to discard
        -: 1278:  // toFlag = 1 : add to deck
        -: 1279:  // toFlag = 2 : add to hand
        -: 1280:
     9600: 1281:  if (toFlag == 1)
        -: 1282:    {
    #####: 1283:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1284:      state->deckCount[player]++;
        -: 1285:    }
     9600: 1286:  else if (toFlag == 2)
        -: 1287:    {
    #####: 1288:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1289:      state->handCount[player]++;
        -: 1290:    }
        -: 1291:  else
        -: 1292:    {
     9600: 1293:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     9600: 1294:      state->discardCount[player]++;
        -: 1295:    }
        -: 1296:
        -: 1297:  //decrease number in supply pile
     9600: 1298:  state->supplyCount[supplyPos]--;
        -: 1299:
     9600: 1300:  return 0;
        -: 1301:}
        -: 1302:
    16180: 1303:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1304:{
        -: 1305:  int i;
        -: 1306:
        -: 1307:  //reset coin count
    16180: 1308:  state->coins = 0;
        -: 1309:
        -: 1310:  //add coins for each Treasure card in player's hand
    97260: 1311:  for (i = 0; i < state->handCount[player]; i++)
        -: 1312:    {
    81080: 1313:      if (state->hand[player][i] == copper)
        -: 1314:	{
    30820: 1315:	  state->coins += 1;
        -: 1316:	}
    50260: 1317:      else if (state->hand[player][i] == silver)
        -: 1318:	{
    12340: 1319:	  state->coins += 2;
        -: 1320:	}
    37920: 1321:      else if (state->hand[player][i] == gold)
        -: 1322:	{
     6800: 1323:	  state->coins += 3;
        -: 1324:	}
        -: 1325:    }
        -: 1326:
        -: 1327:  //add bonus
    16180: 1328:  state->coins += bonus;
        -: 1329:
    16180: 1330:  return 0;
        -: 1331:}
        -: 1332:
        -: 1333:
        -: 1334://end of dominion.c
        -: 1335:
File 'dominion.c'
Lines executed:63.75% of 582
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   139080:    8:int compare(const void* a, const void* b) {
   139080:    9:  if (*(int*)a > *(int*)b)
    66200:   10:    return 1;
    72880:   11:  if (*(int*)a < *(int*)b)
    27900:   12:    return -1;
    44980:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       80:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       80:   44:  SelectStream(1);
       80:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
       80:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       80:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      880:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     8800:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     8000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       80:   73:  if (numPlayers == 2)
        -:   74:    {
       80:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       80:   87:  if (numPlayers == 2)
        -:   88:    {
       80:   89:      state->supplyCount[estate] = 8;
       80:   90:      state->supplyCount[duchy] = 8;
       80:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       80:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       80:  102:  state->supplyCount[silver] = 40;
       80:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1680:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    13200:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    12400:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      880:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       80:  115:		  if (numPlayers == 2){
       80:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      720:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      800:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    11600:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      240:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      160:  140:      state->deckCount[i] = 0;
      640:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      480:  143:	  state->deck[i][j] = estate;
      480:  144:	  state->deckCount[i]++;
        -:  145:	}
     1280:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     1120:  148:	  state->deck[i][j] = copper;
     1120:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      240:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      160:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      240:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
      160:  166:      state->handCount[i] = 0;
      160:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     2240:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     2160:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       80:  182:  state->outpostPlayed = 0;
       80:  183:  state->phase = 0;
       80:  184:  state->numActions = 1;
       80:  185:  state->numBuys = 1;
       80:  186:  state->playedCardCount = 0;
       80:  187:  state->whoseTurn = 0;
       80:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      480:  192:  for (it = 0; it < 5; it++){
      400:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       80:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       80:  198:  return 0;
        -:  199:}
        -:  200:
     7240:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     7240:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     7240:  209:  if (state->deckCount[player] < 1)
     3840:  210:    return -1;
     3400:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    54660:  214:  while (state->deckCount[player] > 0) {
    47860:  215:    card = floor(Random() * state->deckCount[player]);
    47860:  216:    newDeck[newDeckPos] = state->deck[player][card];
    47860:  217:    newDeckPos++;
   270520:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   222660:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    47860:  221:    state->deckCount[player]--;
        -:  222:  }
    51260:  223:  for (i = 0; i < newDeckPos; i++) {
    47860:  224:    state->deck[player][i] = newDeck[i];
    47860:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3400:  228:  return 0;
        -:  229:}
        -:  230:
    26920:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    26920:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    26920:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    26920:  243:  if ( state->numActions < 1 )
        -:  244:    {
      420:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    26500:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    26500:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    24460:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
     2040:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
     1400:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
      640:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      640:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
      640:  269:  return 0;
        -:  270:}
        -:  271:
     5020:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
     5020:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     5020:  280:  who = state->whoseTurn;
        -:  281:
     5020:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
     5020:  286:  } else if (supplyCount(supplyPos, state) <1){
      320:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      320:  289:    return -1;
     4700:  290:  } else if (state->coins < getCost(supplyPos)){
      900:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      900:  293:    return -1;
        -:  294:  } else {
     3800:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     3800:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
     3800:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     3800:  300:    state->numBuys--;
     3800:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
     3800:  308:  return 0;
        -:  309:}
        -:  310:
   146320:  311:int numHandCards(struct gameState *state) {
   146320:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
   618460:  315:int handCard(int handPos, struct gameState *state) {
   618460:  316:  int currentPlayer = whoseTurn(state);
   618460:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     9280:  320:int supplyCount(int card, struct gameState *state) {
     9280:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
   791120:  346:int whoseTurn(struct gameState *state) {
   791120:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
     8580:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     8580:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    50540:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    41960:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    41960:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
     8580:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
     8580:  363:  if (currentPlayer < (state->numPlayers - 1)){
     4320:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     4260:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     8580:  370:  state->outpostPlayed = 0;
     8580:  371:  state->phase = 0;
     8580:  372:  state->numActions = 1;
     8580:  373:  state->coins = 0;
     8580:  374:  state->numBuys = 1;
     8580:  375:  state->playedCardCount = 0;
     8580:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    51480:  380:  for (k = 0; k < 5; k++){
    42900:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
     8580:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
     8580:  387:  return 0;
        -:  388:}
        -:  389:
     8680:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
     8680:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
       80:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     8600:  401:  j = 0;
   223600:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   215000:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     5460:  406:	  j++;
        -:  407:	}
        -:  408:    }
     8600:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
     8600:  414:  return 0;
        -:  415:}
        -:  416:
    17480:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    17480:  420:  int score = 0;
        -:  421:  //score from hand
    57280:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    39800:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    39800:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    39800:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    39800:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    39800:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    39800:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   175260:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
   157780:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
   157780:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
   157780:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
   157780:  438:      if (state->discard[player][i] == province) { score = score + 6; };
   157780:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
   157780:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   175260:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
   157780:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
   157780:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
   157780:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
   157780:  449:      if (state->deck[player][i] == province) { score = score + 6; };
   157780:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
   157780:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    17480:  454:  return score;
        -:  455:}
        -:  456:
       80:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
      400:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
      320:  467:      if (i >= state->numPlayers)
        -:  468:	{
      160:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
      160:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
       80:  478:  j = 0;
      400:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
      320:  481:      if (players[i] > players[j])
        -:  482:	{
       60:  483:	  j = i;
        -:  484:	}
        -:  485:    }
       80:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
       80:  489:  currentPlayer = whoseTurn(state);
      400:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
      320:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
       20:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
       80:  499:  j = 0;
      400:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
      320:  502:      if ( players[i] > players[j] )
        -:  503:	{
       60:  504:	  j = i;
        -:  505:	}
        -:  506:    }
       80:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
      400:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
      320:  512:      if ( players[i] == highScore )
        -:  513:	{
       80:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
      240:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
       80:  522:  return 0;
        -:  523:}
        -:  524:
    48100:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    48100:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    52820:  533:    for (i = 0; i < state->discardCount[player];i++){
    45940:  534:      state->deck[player][i] = state->discard[player][i];
    45940:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     6880:  538:    state->deckCount[player] = state->discardCount[player];
     6880:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     6880:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
     6880:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     6880:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     6880:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
     6880:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     6880:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     6880:  559:    if (deckCounter == 0)
     3700:  560:      return -1;
        -:  561:
     3180:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     3180:  563:    state->deckCount[player]--;
     3180:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    41220:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    41220:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    41220:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    41220:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    41220:  576:    state->deckCount[player]--;
    41220:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    44400:  580:  return 0;
        -:  581:}
        -:  582:
     8580:  583:int getCost(int cardNumber)
        -:  584:{
     8580:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
     1340:  592:      return 5;
        -:  593:    case province:
     1720:  594:      return 8;
        -:  595:    case copper:
       20:  596:      return 0;
        -:  597:    case silver:
     1880:  598:      return 3;
        -:  599:    case gold:
     1600:  600:      return 6;
        -:  601:    case adventurer:
      980:  602:      return 6;
        -:  603:    case council_room:
      160:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
       40:  608:      return 4;
        -:  609:    case mine:
       60:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
      120:  618:      return 4;
        -:  619:    case great_hall:
       40:  620:      return 3;
        -:  621:    case minion:
      180:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
      280:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
      160:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
     1240:  646:int useAdventurer(int currentPlayer, struct gameState *state) {
     1240:  647:    int drawntreasure = 0;
        -:  648:    int cardDrawn;
        -:  649:    int temphand[MAX_HAND];
     1240:  650:    int z = 0; //used for temphand
        -:  651:
     6760:  652:    while(drawntreasure<2){
     4280:  653:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      140:  654:            shuffle(currentPlayer, state);
        -:  655:	}
     4280:  656:	drawCard(currentPlayer, state);
     4280:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6760:  658:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     2480:  659:            drawntreasure++;
        -:  660:        else {
     1800:  661:            temphand[z]=cardDrawn;
     1800:  662:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1800:  663:            z++;
        -:  664:        }
        -:  665:    }
     4280:  666:    while(z-1>=0) {
     1800:  667:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1800:  668:        z=z-1;
        -:  669:    }
     1240:  670:      return 0;
        -:  671:}
        -:  672:
       60:  673:int useCouncilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  674:    //+4 Cards
        -:  675:    int i;
      300:  676:    for (i = 0; i < 4; i++) {
      240:  677:        drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:    //+1 Buy
       60:  680:    state->numBuys++;
        -:  681:
        -:  682:    //Each other player draws a card
      180:  683:    for (i = 0; i < state->numPlayers; i++) {
      120:  684:        if ( i != currentPlayer )
       60:  685:	      drawCard(i, state);
        -:  686:	}
        -:  687:    //put played card in played card pile
       60:  688:    discardCard(handPos, currentPlayer, state, 0);
        -:  689:
       60:  690:    return 0;
        -:  691:}
        -:  692:
    #####:  693:int useFeast(int currentPlayer, struct gameState *state, int choice1) {
        -:  694:    //gain card with cost up to 5
        -:  695:    //Backup hand
        -:  696:    int i, x;
        -:  697:    int temphand[MAX_HAND];
    #####:  698:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  699:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  701:    }
        -:  702:    //Backup hand
        -:  703:
        -:  704:    //Update Coins for Buy
    #####:  705:    updateCoins(currentPlayer, state, 5);
    #####:  706:    x = 1;                                  //Condition to loop on
        -:  707:
    #####:  708:    while( x == 1) {                        //Buy one card
    #####:  709:        if (supplyCount(choice1, state) <= 0){
    #####:  710:            if (DEBUG)
        -:  711:                printf("None of that card left, sorry!\n");
    #####:  712:            if (DEBUG)
        -:  713:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:        }
    #####:  715:        else if (state->coins < getCost(choice1)){
    #####:  716:            printf("That card is too expensive!\n");
    #####:  717:            if (DEBUG)
        -:  718:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:        }
        -:  720:        else{
    #####:  721:            if (DEBUG)
        -:  722:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:
    #####:  724:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  725:        x = 0;//No more buying cards
        -:  726:
    #####:  727:        if (DEBUG)
        -:  728:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:        }
        -:  730:    }
        -:  731:
        -:  732:    //Reset Hand
    #####:  733:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  734:        state->hand[currentPlayer][i] = temphand[i];
    #####:  735:        temphand[i] = -1;
        -:  736:    }
        -:  737:    //Reset Hand
        -:  738:
    #####:  739:    return 0;
        -:  740:}
        -:  741:
      100:  742:int useMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  743:    int i;
      100:  744:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
      100:  745:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
       60:  746:        return -1;
        -:  747:
       40:  748:    if (choice2 > treasure_map || choice2 < curse)
    #####:  749:        return -1;
        -:  750:
       40:  751:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
       20:  752:        return -1;
        -:  753:
       20:  754:    gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:    //discard card from hand
       20:  757:    discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:    //discard trashed card
       40:  760:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
       40:  761:        if (state->hand[currentPlayer][i] == j) {
       20:  762:	      discardCard(i, currentPlayer, state, 0);
       20:  763:	      break;
        -:  764:        }
        -:  765:	}
       20:  766:    return 0;
        -:  767:}
        -:  768:
    #####:  769:int useRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  770:    int i;
    #####:  771:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
    #####:  774:        return -1;
        -:  775:
    #####:  776:    gainCard(choice2, state, 0, currentPlayer);
        -:  777:
        -:  778:    //discard card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
        -:  780:
        -:  781:    //discard trashed card
    #####:  782:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  783:        if (state->hand[currentPlayer][i] == j) {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);
    #####:  785:	      break;
        -:  786:	    }
        -:  787:	}
        -:  788:
    #####:  789:    return 0;
        -:  790:}
        -:  791:
     2040:  792:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  793:{
        -:  794:  int i;
        -:  795:  int j;
        -:  796:  int k;
        -:  797:  int x;
        -:  798:  int index;
     2040:  799:  int currentPlayer = whoseTurn(state);
     2040:  800:  int nextPlayer = currentPlayer + 1;
        -:  801:
     2040:  802:  int tributeRevealedCards[2] = {-1, -1};
        -:  803:  int temphand[MAX_HAND];// moved above the if statement
     2040:  804:  int drawntreasure=0;
        -:  805:  int cardDrawn;
     2040:  806:  int z = 0;// this is the counter for the temp hand
     2040:  807:  if (nextPlayer > (state->numPlayers - 1)){
     1160:  808:    nextPlayer = 0;
        -:  809:  }
        -:  810:
        -:  811:
        -:  812:  //uses switch to select card and perform actions
     2040:  813:  switch( card )
        -:  814:    {
        -:  815:    case adventurer:
     1240:  816:      useAdventurer(currentPlayer, state);
     1240:  817:      break;
        -:  818:    case council_room:
       60:  819:        useCouncilRoom(currentPlayer, state, handPos);
       60:  820:	break;
        -:  821:    case feast:
    #####:  822:        useFeast(currentPlayer, state, choice1);
    #####:  823:	break;
        -:  824:    case gardens:
    #####:  825:      return -1;
        -:  826:
        -:  827:    case mine:
      100:  828:        useMine(currentPlayer, state, choice1, choice2, handPos);
      100:  829:	break;
        -:  830:    case remodel:
    #####:  831:        useRemodel(currentPlayer, state, choice1, choice2, handPos);
    #####:  832:	break;
        -:  833:    case smithy:
        -:  834:      //+3 Cards
    #####:  835:      for (i = 0; i < 3; i++)
        -:  836:	{
    #####:  837:	  drawCard(currentPlayer, state);
        -:  838:	}
        -:  839:
        -:  840:      //discard card from hand
    #####:  841:      discardCard(handPos, currentPlayer, state, 0);
    #####:  842:      return 0;
        -:  843:
        -:  844:    case village:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
        -:  847:
        -:  848:      //+2 Actions
    #####:  849:      state->numActions = state->numActions + 2;
        -:  850:
        -:  851:      //discard played card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
    #####:  853:      return 0;
        -:  854:
        -:  855:    case baron:
      240:  856:      state->numBuys++;//Increase buys by 1!
      240:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
        -:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
    #####:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
    #####:  881:		isGameOver(state);
        -:  882:	      }
        -:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
        -:  885:	  }
        -:  886:
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:
        -:  893:      else{
      240:  894:	if (supplyCount(estate, state) > 0){
      100:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      100:  896:	  state->supplyCount[estate]--;//Decrement Estates
      100:  897:	  if (supplyCount(estate, state) == 0){
       20:  898:	    isGameOver(state);
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:
        -:  903:
      240:  904:      return 0;
        -:  905:
        -:  906:    case great_hall:
        -:  907:      //+1 Card
       20:  908:      drawCard(currentPlayer, state);
        -:  909:
        -:  910:      //+1 Actions
       20:  911:      state->numActions++;
        -:  912:
        -:  913:      //discard card from hand
       20:  914:      discardCard(handPos, currentPlayer, state, 0);
       20:  915:      return 0;
        -:  916:
        -:  917:    case minion:
        -:  918:      //+1 action
       80:  919:      state->numActions++;
        -:  920:
        -:  921:      //discard card from hand
       80:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:
       80:  924:      if (choice1)		//+2 coins
        -:  925:	{
       80:  926:	  state->coins = state->coins + 2;
        -:  927:	}
        -:  928:
    #####:  929:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  930:	{
        -:  931:	  //discard hand
    #####:  932:	  while(numHandCards(state) > 0)
        -:  933:	    {
    #####:  934:	      discardCard(handPos, currentPlayer, state, 0);
        -:  935:	    }
        -:  936:
        -:  937:	  //draw 4
    #####:  938:	  for (i = 0; i < 4; i++)
        -:  939:	    {
    #####:  940:	      drawCard(currentPlayer, state);
        -:  941:	    }
        -:  942:
        -:  943:	  //other players discard hand and redraw if hand size > 4
    #####:  944:	  for (i = 0; i < state->numPlayers; i++)
        -:  945:	    {
    #####:  946:	      if (i != currentPlayer)
        -:  947:		{
    #####:  948:		  if ( state->handCount[i] > 4 )
        -:  949:		    {
        -:  950:		      //discard hand
    #####:  951:		      while( state->handCount[i] > 0 )
        -:  952:			{
    #####:  953:			  discardCard(handPos, i, state, 0);
        -:  954:			}
        -:  955:
        -:  956:		      //draw 4
    #####:  957:		      for (j = 0; j < 4; j++)
        -:  958:			{
    #####:  959:			  drawCard(i, state);
        -:  960:			}
        -:  961:		    }
        -:  962:		}
        -:  963:	    }
        -:  964:
        -:  965:	}
       80:  966:      return 0;
        -:  967:
        -:  968:    case steward:
    #####:  969:      if (choice1 == 1)
        -:  970:	{
        -:  971:	  //+2 cards
    #####:  972:	  drawCard(currentPlayer, state);
    #####:  973:	  drawCard(currentPlayer, state);
        -:  974:	}
    #####:  975:      else if (choice1 == 2)
        -:  976:	{
        -:  977:	  //+2 coins
    #####:  978:	  state->coins = state->coins + 2;
        -:  979:	}
        -:  980:      else
        -:  981:	{
        -:  982:	  //trash 2 cards in hand
    #####:  983:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  984:	  discardCard(choice3, currentPlayer, state, 1);
        -:  985:	}
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:
        -:  991:    case tribute:
      220:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       40:  993:	if (state->deckCount[nextPlayer] > 0){
    #####:  994:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	  state->deckCount[nextPlayer]--;
        -:  996:	}
       40:  997:	else if (state->discardCount[nextPlayer] > 0){
       20:  998:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       20:  999:	  state->discardCount[nextPlayer]--;
        -: 1000:	}
        -: 1001:	else{
        -: 1002:	  //No Card to Reveal
       20: 1003:	  if (DEBUG){
        -: 1004:	    printf("No cards to reveal\n");
        -: 1005:	  }
        -: 1006:	}
        -: 1007:      }
        -: 1008:
        -: 1009:      else{
      180: 1010:	if (state->deckCount[nextPlayer] == 0){
      380: 1011:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
      320: 1012:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
      320: 1013:	    state->deckCount[nextPlayer]++;
      320: 1014:	    state->discard[nextPlayer][i] = -1;
      320: 1015:	    state->discardCount[nextPlayer]--;
        -: 1016:	  }
        -: 1017:
       60: 1018:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1019:	}
      180: 1020:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      180: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      180: 1022:	state->deckCount[nextPlayer]--;
      180: 1023:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      180: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      180: 1025:	state->deckCount[nextPlayer]--;
        -: 1026:      }
        -: 1027:
      220: 1028:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
       80: 1029:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       80: 1030:	state->playedCardCount++;
       80: 1031:	tributeRevealedCards[1] = -1;
        -: 1032:      }
        -: 1033:
      880: 1034:      for (i = 0; i <= 2; i ++){
      760: 1035:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
      100: 1036:	  state->coins += 2;
        -: 1037:	}
        -: 1038:
      660: 1039:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      100: 1040:	  drawCard(currentPlayer, state);
      100: 1041:	  drawCard(currentPlayer, state);
        -: 1042:	}
        -: 1043:	else{//Action Card
      460: 1044:	  state->numActions = state->numActions + 2;
        -: 1045:	}
        -: 1046:      }
        -: 1047:
      220: 1048:      return 0;
        -: 1049:
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:      if (choice2 > 2 || choice2 < 0)
        -: 1054:	{
    #####: 1055:	  return -1;
        -: 1056:	}
        -: 1057:
    #####: 1058:      if (choice1 == handPos)
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:
    #####: 1063:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1064:	{
    #####: 1065:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1066:	    {
    #####: 1067:	      j++;
        -: 1068:	    }
        -: 1069:	}
    #####: 1070:      if (j < choice2)
        -: 1071:	{
    #####: 1072:	  return -1;
        -: 1073:	}
        -: 1074:
    #####: 1075:      if (DEBUG)
        -: 1076:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:      //increase supply count for choosen card by amount being discarded
    #####: 1079:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:
        -: 1081:      //each other player gains a copy of revealed card
    #####: 1082:      for (i = 0; i < state->numPlayers; i++)
        -: 1083:	{
    #####: 1084:	  if (i != currentPlayer)
        -: 1085:	    {
    #####: 1086:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1087:	    }
        -: 1088:	}
        -: 1089:
        -: 1090:      //discard played card from hand
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
        -: 1092:
        -: 1093:      //trash copies of cards returned to supply
    #####: 1094:      for (j = 0; j < choice2; j++)
        -: 1095:	{
    #####: 1096:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	    {
    #####: 1098:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1099:		{
    #####: 1100:		  discardCard(i, currentPlayer, state, 1);
    #####: 1101:		  break;
        -: 1102:		}
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:
        -: 1108:    case cutpurse:
        -: 1109:
    #####: 1110:      updateCoins(currentPlayer, state, 2);
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1116:		{
    #####: 1117:		  if (state->hand[i][j] == copper)
        -: 1118:		    {
    #####: 1119:		      discardCard(j, i, state, 0);
    #####: 1120:		      break;
        -: 1121:		    }
    #####: 1122:		  if (j == state->handCount[i])
        -: 1123:		    {
    #####: 1124:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1125:			{
    #####: 1126:			  if (DEBUG)
        -: 1127:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1128:			}
    #####: 1129:		      break;
        -: 1130:		    }
        -: 1131:		}
        -: 1132:
        -: 1133:	    }
        -: 1134:
        -: 1135:	}
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);
        -: 1139:
    #####: 1140:      return 0;
        -: 1141:
        -: 1142:
        -: 1143:    case embargo:
        -: 1144:      //+2 Coins
       80: 1145:      state->coins = state->coins + 2;
        -: 1146:
        -: 1147:      //see if selected pile is in play
       80: 1148:      if ( state->supplyCount[choice1] == -1 )
        -: 1149:	{
    #####: 1150:	  return -1;
        -: 1151:	}
        -: 1152:
        -: 1153:      //add embargo token to selected supply pile
       80: 1154:      state->embargoTokens[choice1]++;
        -: 1155:
        -: 1156:      //trash card
       80: 1157:      discardCard(handPos, currentPlayer, state, 1);
       80: 1158:      return 0;
        -: 1159:
        -: 1160:    case outpost:
        -: 1161:      //set outpost flag
    #####: 1162:      state->outpostPlayed++;
        -: 1163:
        -: 1164:      //discard card
    #####: 1165:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1166:      return 0;
        -: 1167:
        -: 1168:    case salvager:
        -: 1169:      //+1 buy
    #####: 1170:      state->numBuys++;
        -: 1171:
    #####: 1172:      if (choice1)
        -: 1173:	{
        -: 1174:	  //gain coins equal to trashed card
    #####: 1175:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1176:	  //trash card
    #####: 1177:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1178:	}
        -: 1179:
        -: 1180:      //discard card
    #####: 1181:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1182:      return 0;
        -: 1183:
        -: 1184:    case sea_hag:
    #####: 1185:      for (i = 0; i < state->numPlayers; i++){
    #####: 1186:	if (i != currentPlayer){
    #####: 1187:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1188:	  state->discardCount[i]++;
    #####: 1189:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1190:	}
        -: 1191:      }
    #####: 1192:      return 0;
        -: 1193:
        -: 1194:    case treasure_map:
        -: 1195:      //search hand for another treasure_map
    #####: 1196:      index = -1;
    #####: 1197:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1198:	{
    #####: 1199:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1200:	    {
    #####: 1201:	      index = i;
    #####: 1202:	      break;
        -: 1203:	    }
        -: 1204:	}
    #####: 1205:      if (index > -1)
        -: 1206:	{
        -: 1207:	  //trash both treasure cards
    #####: 1208:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:	  discardCard(index, currentPlayer, state, 1);
        -: 1210:
        -: 1211:	  //gain 4 Gold cards
    #####: 1212:	  for (i = 0; i < 4; i++)
        -: 1213:	    {
    #####: 1214:	      gainCard(gold, state, 1, currentPlayer);
        -: 1215:	    }
        -: 1216:
        -: 1217:	  //return success
    #####: 1218:	  return 1;
        -: 1219:	}
        -: 1220:
        -: 1221:      //no second treasure_map found in hand
    #####: 1222:      return -1;
        -: 1223:    }
        -: 1224:
     1400: 1225:  return -1;
        -: 1226:}
        -: 1227:
      280: 1228:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1229:{
        -: 1230:
        -: 1231:  //if card is not trashed, added to Played pile
      280: 1232:  if (trashFlag < 1)
        -: 1233:    {
        -: 1234:      //add card to played pile
      200: 1235:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      200: 1236:      state->playedCardCount++;
        -: 1237:    }
        -: 1238:
        -: 1239:  //set played card to -1
      280: 1240:  state->hand[currentPlayer][handPos] = -1;
        -: 1241:
        -: 1242:  //remove card from player's hand
      280: 1243:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1244:    {
        -: 1245:      //reduce number of cards in hand
       20: 1246:      state->handCount[currentPlayer]--;
        -: 1247:    }
      260: 1248:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1249:    {
        -: 1250:      //reduce number of cards in hand
    #####: 1251:      state->handCount[currentPlayer]--;
        -: 1252:    }
        -: 1253:  else
        -: 1254:    {
        -: 1255:      //replace discarded card with last card in hand
      260: 1256:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1257:      //set last card to -1
      260: 1258:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1259:      //reduce number of cards in hand
      260: 1260:      state->handCount[currentPlayer]--;
        -: 1261:    }
        -: 1262:
      280: 1263:  return 0;
        -: 1264:}
        -: 1265:
     3920: 1266:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1267:{
        -: 1268:  //Note: supplyPos is enum of choosen card
        -: 1269:
        -: 1270:  //check if supply pile is empty (0) or card is not used in game (-1)
     3920: 1271:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1272:    {
       20: 1273:      return -1;
        -: 1274:    }
        -: 1275:
        -: 1276:  //added card for [whoseTurn] current player:
        -: 1277:  // toFlag = 0 : add to discard
        -: 1278:  // toFlag = 1 : add to deck
        -: 1279:  // toFlag = 2 : add to hand
        -: 1280:
     3900: 1281:  if (toFlag == 1)
        -: 1282:    {
    #####: 1283:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1284:      state->deckCount[player]++;
        -: 1285:    }
     3900: 1286:  else if (toFlag == 2)
        -: 1287:    {
    #####: 1288:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1289:      state->handCount[player]++;
        -: 1290:    }
        -: 1291:  else
        -: 1292:    {
     3900: 1293:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     3900: 1294:      state->discardCount[player]++;
        -: 1295:    }
        -: 1296:
        -: 1297:  //decrease number in supply pile
     3900: 1298:  state->supplyCount[supplyPos]--;
        -: 1299:
     3900: 1300:  return 0;
        -: 1301:}
        -: 1302:
     9300: 1303:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1304:{
        -: 1305:  int i;
        -: 1306:
        -: 1307:  //reset coin count
     9300: 1308:  state->coins = 0;
        -: 1309:
        -: 1310:  //add coins for each Treasure card in player's hand
    52300: 1311:  for (i = 0; i < state->handCount[player]; i++)
        -: 1312:    {
    43000: 1313:      if (state->hand[player][i] == copper)
        -: 1314:	{
    14780: 1315:	  state->coins += 1;
        -: 1316:	}
    28220: 1317:      else if (state->hand[player][i] == silver)
        -: 1318:	{
     6300: 1319:	  state->coins += 2;
        -: 1320:	}
    21920: 1321:      else if (state->hand[player][i] == gold)
        -: 1322:	{
     3000: 1323:	  state->coins += 3;
        -: 1324:	}
        -: 1325:    }
        -: 1326:
        -: 1327:  //add bonus
     9300: 1328:  state->coins += bonus;
        -: 1329:
     9300: 1330:  return 0;
        -: 1331:}
        -: 1332:
        -: 1333:
        -: 1334://end of dominion.c
        -: 1335:
File 'dominion.c'
Lines executed:72.16% of 582
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:14
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   204130:    8:int compare(const void* a, const void* b) {
   204130:    9:  if (*(int*)a > *(int*)b)
    95180:   10:    return 1;
   108950:   11:  if (*(int*)a < *(int*)b)
    39960:   12:    return -1;
    68990:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      165:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
      165:   44:  SelectStream(1);
      165:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
      165:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      165:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1815:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    18150:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    16500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      165:   73:  if (numPlayers == 2)
        -:   74:    {
      165:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      165:   87:  if (numPlayers == 2)
        -:   88:    {
      165:   89:      state->supplyCount[estate] = 8;
      165:   90:      state->supplyCount[duchy] = 8;
      165:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      165:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      165:  102:  state->supplyCount[silver] = 40;
      165:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3465:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    27229:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    25577:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1813:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      165:  115:		  if (numPlayers == 2){
      165:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1483:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1648:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    23929:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      495:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      330:  140:      state->deckCount[i] = 0;
     1320:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      990:  143:	  state->deck[i][j] = estate;
      990:  144:	  state->deckCount[i]++;
        -:  145:	}
     2640:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     2310:  148:	  state->deck[i][j] = copper;
     2310:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      495:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      330:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      495:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
      330:  166:      state->handCount[i] = 0;
      330:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
     4620:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     4455:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      165:  182:  state->outpostPlayed = 0;
      165:  183:  state->phase = 0;
      165:  184:  state->numActions = 1;
      165:  185:  state->numBuys = 1;
      165:  186:  state->playedCardCount = 0;
      165:  187:  state->whoseTurn = 0;
      165:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      990:  192:  for (it = 0; it < 5; it++){
      825:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      165:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      165:  198:  return 0;
        -:  199:}
        -:  200:
     8910:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     8910:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     8910:  209:  if (state->deckCount[player] < 1)
     3840:  210:    return -1;
     5070:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    82380:  214:  while (state->deckCount[player] > 0) {
    72240:  215:    card = floor(Random() * state->deckCount[player]);
    72240:  216:    newDeck[newDeckPos] = state->deck[player][card];
    72240:  217:    newDeckPos++;
   387320:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   315080:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    72240:  221:    state->deckCount[player]--;
        -:  222:  }
    77310:  223:  for (i = 0; i < newDeckPos; i++) {
    72240:  224:    state->deck[player][i] = newDeck[i];
    72240:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     5070:  228:  return 0;
        -:  229:}
        -:  230:
    42000:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    42000:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    42000:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    42000:  243:  if ( state->numActions < 1 )
        -:  244:    {
      560:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    41440:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
    41440:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    39180:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
     2260:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
     1420:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
      840:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      840:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
      840:  269:  return 0;
        -:  270:}
        -:  271:
     8140:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
     8140:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     8140:  280:  who = state->whoseTurn;
        -:  281:
     8140:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
     8140:  286:  } else if (supplyCount(supplyPos, state) <1){
      360:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      360:  289:    return -1;
     7780:  290:  } else if (state->coins < getCost(supplyPos)){
      920:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      920:  293:    return -1;
        -:  294:  } else {
     6860:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     6860:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
     6860:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     6860:  300:    state->numBuys--;
     6860:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
     6860:  308:  return 0;
        -:  309:}
        -:  310:
   225000:  311:int numHandCards(struct gameState *state) {
   225000:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
   937300:  315:int handCard(int handPos, struct gameState *state) {
   937300:  316:  int currentPlayer = whoseTurn(state);
   937300:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    15465:  320:int supplyCount(int card, struct gameState *state) {
    15465:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
  1201045:  346:int whoseTurn(struct gameState *state) {
  1201045:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    12960:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    12960:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
    76660:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    63700:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    63700:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    12960:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
    12960:  363:  if (currentPlayer < (state->numPlayers - 1)){
     6520:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     6440:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    12960:  370:  state->outpostPlayed = 0;
    12960:  371:  state->phase = 0;
    12960:  372:  state->numActions = 1;
    12960:  373:  state->coins = 0;
    12960:  374:  state->numBuys = 1;
    12960:  375:  state->playedCardCount = 0;
    12960:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    77760:  380:  for (k = 0; k < 5; k++){
    64800:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    12960:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    12960:  387:  return 0;
        -:  388:}
        -:  389:
    13144:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
    13144:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      161:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    12983:  401:  j = 0;
   337558:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   324575:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     6425:  406:	  j++;
        -:  407:	}
        -:  408:    }
    12983:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
    12982:  414:  return 0;
        -:  415:}
        -:  416:
    26560:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    26560:  420:  int score = 0;
        -:  421:  //score from hand
    89060:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    62500:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    62500:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    62500:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    62500:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    62500:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    62500:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   262320:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
   235760:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
   235760:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
   235760:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
   235760:  438:      if (state->discard[player][i] == province) { score = score + 6; };
   235760:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
   235760:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   262320:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
   235760:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
   235760:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
   235760:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
   235760:  449:      if (state->deck[player][i] == province) { score = score + 6; };
   235760:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
   235760:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    26560:  454:  return score;
        -:  455:}
        -:  456:
      160:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
      800:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
      640:  467:      if (i >= state->numPlayers)
        -:  468:	{
      320:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
      320:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
      160:  478:  j = 0;
      800:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
      640:  481:      if (players[i] > players[j])
        -:  482:	{
      120:  483:	  j = i;
        -:  484:	}
        -:  485:    }
      160:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
      160:  489:  currentPlayer = whoseTurn(state);
      800:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
      640:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
       60:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
      160:  499:  j = 0;
      800:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
      640:  502:      if ( players[i] > players[j] )
        -:  503:	{
      120:  504:	  j = i;
        -:  505:	}
        -:  506:    }
      160:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
      800:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
      640:  512:      if ( players[i] == highScore )
        -:  513:	{
      160:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
      480:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
      160:  522:  return 0;
        -:  523:}
        -:  524:
    70550:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    70550:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    77000:  533:    for (i = 0; i < state->discardCount[player];i++){
    68620:  534:      state->deck[player][i] = state->discard[player][i];
    68620:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     8380:  538:    state->deckCount[player] = state->discardCount[player];
     8380:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     8380:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
     8380:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
     8380:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     8380:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
     8380:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
     8380:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     8380:  559:    if (deckCounter == 0)
     3700:  560:      return -1;
        -:  561:
     4680:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     4680:  563:    state->deckCount[player]--;
     4680:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    62170:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    62170:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    62170:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    62170:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    62170:  576:    state->deckCount[player]--;
    62170:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    66850:  580:  return 0;
        -:  581:}
        -:  582:
    14830:  583:int getCost(int cardNumber)
        -:  584:{
    14830:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
       21:  590:      return 2;
        -:  591:    case duchy:
     2361:  592:      return 5;
        -:  593:    case province:
     3001:  594:      return 8;
        -:  595:    case copper:
       41:  596:      return 0;
        -:  597:    case silver:
     2901:  598:      return 3;
        -:  599:    case gold:
     3901:  600:      return 6;
        -:  601:    case adventurer:
      981:  602:      return 6;
        -:  603:    case council_room:
      241:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
       41:  608:      return 4;
        -:  609:    case mine:
       61:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
      121:  618:      return 4;
        -:  619:    case great_hall:
       81:  620:      return 3;
        -:  621:    case minion:
      181:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
      281:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
      241:  632:      return 2;
        -:  633:    case outpost:
      161:  634:      return 5;
        -:  635:    case salvager:
      161:  636:      return 4;
        -:  637:    case sea_hag:
       41:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
        1:  643:  return -1;
        -:  644:}
        -:  645:
     1240:  646:int useAdventurer(int currentPlayer, struct gameState *state) {
     1240:  647:    int drawntreasure = 0;
        -:  648:    int cardDrawn;
        -:  649:    int temphand[MAX_HAND];
     1240:  650:    int z = 0; //used for temphand
        -:  651:
     6760:  652:    while(drawntreasure<2){
     4280:  653:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      140:  654:            shuffle(currentPlayer, state);
        -:  655:	}
     4280:  656:	drawCard(currentPlayer, state);
     4280:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6760:  658:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     2480:  659:            drawntreasure++;
        -:  660:        else {
     1800:  661:            temphand[z]=cardDrawn;
     1800:  662:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1800:  663:            z++;
        -:  664:        }
        -:  665:    }
     4280:  666:    while(z-1>=0) {
     1800:  667:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1800:  668:        z=z-1;
        -:  669:    }
     1240:  670:      return 0;
        -:  671:}
        -:  672:
       81:  673:int useCouncilRoom(int currentPlayer, struct gameState *state, int handPos) {
        -:  674:    //+4 Cards
        -:  675:    int i;
      405:  676:    for (i = 0; i < 4; i++) {
      324:  677:        drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:    //+1 Buy
       81:  680:    state->numBuys++;
        -:  681:
        -:  682:    //Each other player draws a card
      243:  683:    for (i = 0; i < state->numPlayers; i++) {
      162:  684:        if ( i != currentPlayer )
       81:  685:	      drawCard(i, state);
        -:  686:	}
        -:  687:    //put played card in played card pile
       81:  688:    discardCard(handPos, currentPlayer, state, 0);
        -:  689:
       81:  690:    return 0;
        -:  691:}
        -:  692:
        2:  693:int useFeast(int currentPlayer, struct gameState *state, int choice1) {
        -:  694:    //gain card with cost up to 5
        -:  695:    //Backup hand
        -:  696:    int i, x;
        -:  697:    int temphand[MAX_HAND];
       14:  698:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
       12:  699:        temphand[i] = state->hand[currentPlayer][i];//Backup card
       12:  700:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  701:    }
        -:  702:    //Backup hand
        -:  703:
        -:  704:    //Update Coins for Buy
        2:  705:    updateCoins(currentPlayer, state, 5);
        2:  706:    x = 1;                                  //Condition to loop on
        -:  707:
        6:  708:    while( x == 1) {                        //Buy one card
        2:  709:        if (supplyCount(choice1, state) <= 0){
    #####:  710:            if (DEBUG)
        -:  711:                printf("None of that card left, sorry!\n");
    #####:  712:            if (DEBUG)
        -:  713:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:        }
        2:  715:        else if (state->coins < getCost(choice1)){
    #####:  716:            printf("That card is too expensive!\n");
    #####:  717:            if (DEBUG)
        -:  718:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  719:        }
        -:  720:        else{
        2:  721:            if (DEBUG)
        -:  722:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  723:
        2:  724:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
        2:  725:        x = 0;//No more buying cards
        -:  726:
        2:  727:        if (DEBUG)
        -:  728:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:        }
        -:  730:    }
        -:  731:
        -:  732:    //Reset Hand
       14:  733:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
       12:  734:        state->hand[currentPlayer][i] = temphand[i];
       12:  735:        temphand[i] = -1;
        -:  736:    }
        -:  737:    //Reset Hand
        -:  738:
        2:  739:    return 0;
        -:  740:}
        -:  741:
      100:  742:int useMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  743:    int i;
      100:  744:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
      100:  745:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
       60:  746:        return -1;
        -:  747:
       40:  748:    if (choice2 > treasure_map || choice2 < curse)
    #####:  749:        return -1;
        -:  750:
       40:  751:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
       20:  752:        return -1;
        -:  753:
       20:  754:    gainCard(choice2, state, 2, currentPlayer);
        -:  755:
        -:  756:    //discard card from hand
       20:  757:    discardCard(handPos, currentPlayer, state, 0);
        -:  758:
        -:  759:    //discard trashed card
       40:  760:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
       40:  761:        if (state->hand[currentPlayer][i] == j) {
       20:  762:	      discardCard(i, currentPlayer, state, 0);
       20:  763:	      break;
        -:  764:        }
        -:  765:	}
       20:  766:    return 0;
        -:  767:}
        -:  768:
    #####:  769:int useRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -:  770:    int i;
    #####:  771:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
    #####:  774:        return -1;
        -:  775:
    #####:  776:    gainCard(choice2, state, 0, currentPlayer);
        -:  777:
        -:  778:    //discard card from hand
    #####:  779:    discardCard(handPos, currentPlayer, state, 0);
        -:  780:
        -:  781:    //discard trashed card
    #####:  782:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  783:        if (state->hand[currentPlayer][i] == j) {
    #####:  784:	      discardCard(i, currentPlayer, state, 0);
    #####:  785:	      break;
        -:  786:	    }
        -:  787:	}
        -:  788:
    #####:  789:    return 0;
        -:  790:}
        -:  791:
     2263:  792:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  793:{
        -:  794:  int i;
        -:  795:  int j;
        -:  796:  int k;
        -:  797:  int x;
        -:  798:  int index;
     2263:  799:  int currentPlayer = whoseTurn(state);
     2263:  800:  int nextPlayer = currentPlayer + 1;
        -:  801:
     2263:  802:  int tributeRevealedCards[2] = {-1, -1};
        -:  803:  int temphand[MAX_HAND];// moved above the if statement
     2263:  804:  int drawntreasure=0;
        -:  805:  int cardDrawn;
     2263:  806:  int z = 0;// this is the counter for the temp hand
     2263:  807:  if (nextPlayer > (state->numPlayers - 1)){
     1320:  808:    nextPlayer = 0;
        -:  809:  }
        -:  810:
        -:  811:
        -:  812:  //uses switch to select card and perform actions
     2263:  813:  switch( card )
        -:  814:    {
        -:  815:    case adventurer:
     1240:  816:      useAdventurer(currentPlayer, state);
     1240:  817:      break;
        -:  818:    case council_room:
       81:  819:        useCouncilRoom(currentPlayer, state, handPos);
       81:  820:	break;
        -:  821:    case feast:
        2:  822:        useFeast(currentPlayer, state, choice1);
        2:  823:	break;
        -:  824:    case gardens:
    #####:  825:      return -1;
        -:  826:
        -:  827:    case mine:
      100:  828:        useMine(currentPlayer, state, choice1, choice2, handPos);
      100:  829:	break;
        -:  830:    case remodel:
    #####:  831:        useRemodel(currentPlayer, state, choice1, choice2, handPos);
    #####:  832:	break;
        -:  833:    case smithy:
        -:  834:      //+3 Cards
    #####:  835:      for (i = 0; i < 3; i++)
        -:  836:	{
    #####:  837:	  drawCard(currentPlayer, state);
        -:  838:	}
        -:  839:
        -:  840:      //discard card from hand
    #####:  841:      discardCard(handPos, currentPlayer, state, 0);
    #####:  842:      return 0;
        -:  843:
        -:  844:    case village:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
        -:  847:
        -:  848:      //+2 Actions
    #####:  849:      state->numActions = state->numActions + 2;
        -:  850:
        -:  851:      //discard played card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
    #####:  853:      return 0;
        -:  854:
        -:  855:    case baron:
      240:  856:      state->numBuys++;//Increase buys by 1!
      240:  857:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  858:	int p = 0;//Iterator for hand!
    #####:  859:	int card_not_discarded = 1;//Flag for discard set!
    #####:  860:	while(card_not_discarded){
    #####:  861:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  862:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  863:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  864:	    state->discardCount[currentPlayer]++;
    #####:  865:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  866:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  867:	    }
    #####:  868:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  869:	    state->handCount[currentPlayer]--;
    #####:  870:	    card_not_discarded = 0;//Exit the loop
        -:  871:	  }
    #####:  872:	  else if (p > state->handCount[currentPlayer]){
    #####:  873:	    if(DEBUG) {
        -:  874:	      printf("No estate cards in your hand, invalid choice\n");
        -:  875:	      printf("Must gain an estate if there are any\n");
        -:  876:	    }
    #####:  877:	    if (supplyCount(estate, state) > 0){
    #####:  878:	      gainCard(estate, state, 0, currentPlayer);
    #####:  879:	      state->supplyCount[estate]--;//Decrement estates
    #####:  880:	      if (supplyCount(estate, state) == 0){
    #####:  881:		isGameOver(state);
        -:  882:	      }
        -:  883:	    }
    #####:  884:	    card_not_discarded = 0;//Exit the loop
        -:  885:	  }
        -:  886:
        -:  887:	  else{
    #####:  888:	    p++;//Next card
        -:  889:	  }
        -:  890:	}
        -:  891:      }
        -:  892:
        -:  893:      else{
      240:  894:	if (supplyCount(estate, state) > 0){
      100:  895:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      100:  896:	  state->supplyCount[estate]--;//Decrement Estates
      100:  897:	  if (supplyCount(estate, state) == 0){
       20:  898:	    isGameOver(state);
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:
        -:  903:
      240:  904:      return 0;
        -:  905:
        -:  906:    case great_hall:
        -:  907:      //+1 Card
       40:  908:      drawCard(currentPlayer, state);
        -:  909:
        -:  910:      //+1 Actions
       40:  911:      state->numActions++;
        -:  912:
        -:  913:      //discard card from hand
       40:  914:      discardCard(handPos, currentPlayer, state, 0);
       40:  915:      return 0;
        -:  916:
        -:  917:    case minion:
        -:  918:      //+1 action
       80:  919:      state->numActions++;
        -:  920:
        -:  921:      //discard card from hand
       80:  922:      discardCard(handPos, currentPlayer, state, 0);
        -:  923:
       80:  924:      if (choice1)		//+2 coins
        -:  925:	{
       80:  926:	  state->coins = state->coins + 2;
        -:  927:	}
        -:  928:
    #####:  929:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  930:	{
        -:  931:	  //discard hand
    #####:  932:	  while(numHandCards(state) > 0)
        -:  933:	    {
    #####:  934:	      discardCard(handPos, currentPlayer, state, 0);
        -:  935:	    }
        -:  936:
        -:  937:	  //draw 4
    #####:  938:	  for (i = 0; i < 4; i++)
        -:  939:	    {
    #####:  940:	      drawCard(currentPlayer, state);
        -:  941:	    }
        -:  942:
        -:  943:	  //other players discard hand and redraw if hand size > 4
    #####:  944:	  for (i = 0; i < state->numPlayers; i++)
        -:  945:	    {
    #####:  946:	      if (i != currentPlayer)
        -:  947:		{
    #####:  948:		  if ( state->handCount[i] > 4 )
        -:  949:		    {
        -:  950:		      //discard hand
    #####:  951:		      while( state->handCount[i] > 0 )
        -:  952:			{
    #####:  953:			  discardCard(handPos, i, state, 0);
        -:  954:			}
        -:  955:
        -:  956:		      //draw 4
    #####:  957:		      for (j = 0; j < 4; j++)
        -:  958:			{
    #####:  959:			  drawCard(i, state);
        -:  960:			}
        -:  961:		    }
        -:  962:		}
        -:  963:	    }
        -:  964:
        -:  965:	}
       80:  966:      return 0;
        -:  967:
        -:  968:    case steward:
    #####:  969:      if (choice1 == 1)
        -:  970:	{
        -:  971:	  //+2 cards
    #####:  972:	  drawCard(currentPlayer, state);
    #####:  973:	  drawCard(currentPlayer, state);
        -:  974:	}
    #####:  975:      else if (choice1 == 2)
        -:  976:	{
        -:  977:	  //+2 coins
    #####:  978:	  state->coins = state->coins + 2;
        -:  979:	}
        -:  980:      else
        -:  981:	{
        -:  982:	  //trash 2 cards in hand
    #####:  983:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  984:	  discardCard(choice3, currentPlayer, state, 1);
        -:  985:	}
        -:  986:
        -:  987:      //discard card from hand
    #####:  988:      discardCard(handPos, currentPlayer, state, 0);
    #####:  989:      return 0;
        -:  990:
        -:  991:    case tribute:
      220:  992:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       40:  993:	if (state->deckCount[nextPlayer] > 0){
    #####:  994:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	  state->deckCount[nextPlayer]--;
        -:  996:	}
       40:  997:	else if (state->discardCount[nextPlayer] > 0){
       20:  998:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       20:  999:	  state->discardCount[nextPlayer]--;
        -: 1000:	}
        -: 1001:	else{
        -: 1002:	  //No Card to Reveal
       20: 1003:	  if (DEBUG){
        -: 1004:	    printf("No cards to reveal\n");
        -: 1005:	  }
        -: 1006:	}
        -: 1007:      }
        -: 1008:
        -: 1009:      else{
      180: 1010:	if (state->deckCount[nextPlayer] == 0){
      380: 1011:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
      320: 1012:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
      320: 1013:	    state->deckCount[nextPlayer]++;
      320: 1014:	    state->discard[nextPlayer][i] = -1;
      320: 1015:	    state->discardCount[nextPlayer]--;
        -: 1016:	  }
        -: 1017:
       60: 1018:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1019:	}
      180: 1020:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      180: 1021:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      180: 1022:	state->deckCount[nextPlayer]--;
      180: 1023:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
      180: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
      180: 1025:	state->deckCount[nextPlayer]--;
        -: 1026:      }
        -: 1027:
      220: 1028:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
       80: 1029:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
       80: 1030:	state->playedCardCount++;
       80: 1031:	tributeRevealedCards[1] = -1;
        -: 1032:      }
        -: 1033:
      880: 1034:      for (i = 0; i <= 2; i ++){
      760: 1035:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
      100: 1036:	  state->coins += 2;
        -: 1037:	}
        -: 1038:
      660: 1039:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      100: 1040:	  drawCard(currentPlayer, state);
      100: 1041:	  drawCard(currentPlayer, state);
        -: 1042:	}
        -: 1043:	else{//Action Card
      460: 1044:	  state->numActions = state->numActions + 2;
        -: 1045:	}
        -: 1046:      }
        -: 1047:
      220: 1048:      return 0;
        -: 1049:
        -: 1050:    case ambassador:
    #####: 1051:      j = 0;		//used to check if player has enough cards to discard
        -: 1052:
    #####: 1053:      if (choice2 > 2 || choice2 < 0)
        -: 1054:	{
    #####: 1055:	  return -1;
        -: 1056:	}
        -: 1057:
    #####: 1058:      if (choice1 == handPos)
        -: 1059:	{
    #####: 1060:	  return -1;
        -: 1061:	}
        -: 1062:
    #####: 1063:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1064:	{
    #####: 1065:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1066:	    {
    #####: 1067:	      j++;
        -: 1068:	    }
        -: 1069:	}
    #####: 1070:      if (j < choice2)
        -: 1071:	{
    #####: 1072:	  return -1;
        -: 1073:	}
        -: 1074:
    #####: 1075:      if (DEBUG)
        -: 1076:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1077:
        -: 1078:      //increase supply count for choosen card by amount being discarded
    #####: 1079:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1080:
        -: 1081:      //each other player gains a copy of revealed card
    #####: 1082:      for (i = 0; i < state->numPlayers; i++)
        -: 1083:	{
    #####: 1084:	  if (i != currentPlayer)
        -: 1085:	    {
    #####: 1086:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1087:	    }
        -: 1088:	}
        -: 1089:
        -: 1090:      //discard played card from hand
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
        -: 1092:
        -: 1093:      //trash copies of cards returned to supply
    #####: 1094:      for (j = 0; j < choice2; j++)
        -: 1095:	{
    #####: 1096:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1097:	    {
    #####: 1098:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1099:		{
    #####: 1100:		  discardCard(i, currentPlayer, state, 1);
    #####: 1101:		  break;
        -: 1102:		}
        -: 1103:	    }
        -: 1104:	}
        -: 1105:
    #####: 1106:      return 0;
        -: 1107:
        -: 1108:    case cutpurse:
        -: 1109:
    #####: 1110:      updateCoins(currentPlayer, state, 2);
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
        -: 1114:	    {
    #####: 1115:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1116:		{
    #####: 1117:		  if (state->hand[i][j] == copper)
        -: 1118:		    {
    #####: 1119:		      discardCard(j, i, state, 0);
    #####: 1120:		      break;
        -: 1121:		    }
    #####: 1122:		  if (j == state->handCount[i])
        -: 1123:		    {
    #####: 1124:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1125:			{
    #####: 1126:			  if (DEBUG)
        -: 1127:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1128:			}
    #####: 1129:		      break;
        -: 1130:		    }
        -: 1131:		}
        -: 1132:
        -: 1133:	    }
        -: 1134:
        -: 1135:	}
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);
        -: 1139:
    #####: 1140:      return 0;
        -: 1141:
        -: 1142:
        -: 1143:    case embargo:
        -: 1144:      //+2 Coins
      100: 1145:      state->coins = state->coins + 2;
        -: 1146:
        -: 1147:      //see if selected pile is in play
      100: 1148:      if ( state->supplyCount[choice1] == -1 )
        -: 1149:	{
    #####: 1150:	  return -1;
        -: 1151:	}
        -: 1152:
        -: 1153:      //add embargo token to selected supply pile
      100: 1154:      state->embargoTokens[choice1]++;
        -: 1155:
        -: 1156:      //trash card
      100: 1157:      discardCard(handPos, currentPlayer, state, 1);
      100: 1158:      return 0;
        -: 1159:
        -: 1160:    case outpost:
        -: 1161:      //set outpost flag
       40: 1162:      state->outpostPlayed++;
        -: 1163:
        -: 1164:      //discard card
       40: 1165:      discardCard(handPos, currentPlayer, state, 0);
       40: 1166:      return 0;
        -: 1167:
        -: 1168:    case salvager:
        -: 1169:      //+1 buy
       80: 1170:      state->numBuys++;
        -: 1171:
       80: 1172:      if (choice1)
        -: 1173:	{
        -: 1174:	  //gain coins equal to trashed card
       80: 1175:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1176:	  //trash card
       80: 1177:	  discardCard(choice1, currentPlayer, state, 1);
        -: 1178:	}
        -: 1179:
        -: 1180:      //discard card
       80: 1181:      discardCard(handPos, currentPlayer, state, 0);
       80: 1182:      return 0;
        -: 1183:
        -: 1184:    case sea_hag:
      120: 1185:      for (i = 0; i < state->numPlayers; i++){
       80: 1186:	if (i != currentPlayer){
       40: 1187:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       40: 1188:	  state->discardCount[i]++;
       40: 1189:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1190:	}
        -: 1191:      }
       40: 1192:      return 0;
        -: 1193:
        -: 1194:    case treasure_map:
        -: 1195:      //search hand for another treasure_map
    #####: 1196:      index = -1;
    #####: 1197:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1198:	{
    #####: 1199:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1200:	    {
    #####: 1201:	      index = i;
    #####: 1202:	      break;
        -: 1203:	    }
        -: 1204:	}
    #####: 1205:      if (index > -1)
        -: 1206:	{
        -: 1207:	  //trash both treasure cards
    #####: 1208:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1209:	  discardCard(index, currentPlayer, state, 1);
        -: 1210:
        -: 1211:	  //gain 4 Gold cards
    #####: 1212:	  for (i = 0; i < 4; i++)
        -: 1213:	    {
    #####: 1214:	      gainCard(gold, state, 1, currentPlayer);
        -: 1215:	    }
        -: 1216:
        -: 1217:	  //return success
    #####: 1218:	  return 1;
        -: 1219:	}
        -: 1220:
        -: 1221:      //no second treasure_map found in hand
    #####: 1222:      return -1;
        -: 1223:    }
        -: 1224:
     1423: 1225:  return -1;
        -: 1226:}
        -: 1227:
      541: 1228:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1229:{
        -: 1230:
        -: 1231:  //if card is not trashed, added to Played pile
      541: 1232:  if (trashFlag < 1)
        -: 1233:    {
        -: 1234:      //add card to played pile
      361: 1235:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
      361: 1236:      state->playedCardCount++;
        -: 1237:    }
        -: 1238:
        -: 1239:  //set played card to -1
      541: 1240:  state->hand[currentPlayer][handPos] = -1;
        -: 1241:
        -: 1242:  //remove card from player's hand
      541: 1243:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1244:    {
        -: 1245:      //reduce number of cards in hand
      100: 1246:      state->handCount[currentPlayer]--;
        -: 1247:    }
      441: 1248:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1249:    {
        -: 1250:      //reduce number of cards in hand
    #####: 1251:      state->handCount[currentPlayer]--;
        -: 1252:    }
        -: 1253:  else
        -: 1254:    {
        -: 1255:      //replace discarded card with last card in hand
      441: 1256:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1257:      //set last card to -1
      441: 1258:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1259:      //reduce number of cards in hand
      441: 1260:      state->handCount[currentPlayer]--;
        -: 1261:    }
        -: 1262:
      541: 1263:  return 0;
        -: 1264:}
        -: 1265:
     6982: 1266:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1267:{
        -: 1268:  //Note: supplyPos is enum of choosen card
        -: 1269:
        -: 1270:  //check if supply pile is empty (0) or card is not used in game (-1)
     6982: 1271:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1272:    {
       20: 1273:      return -1;
        -: 1274:    }
        -: 1275:
        -: 1276:  //added card for [whoseTurn] current player:
        -: 1277:  // toFlag = 0 : add to discard
        -: 1278:  // toFlag = 1 : add to deck
        -: 1279:  // toFlag = 2 : add to hand
        -: 1280:
     6962: 1281:  if (toFlag == 1)
        -: 1282:    {
    #####: 1283:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1284:      state->deckCount[player]++;
        -: 1285:    }
     6962: 1286:  else if (toFlag == 2)
        -: 1287:    {
    #####: 1288:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1289:      state->handCount[player]++;
        -: 1290:    }
        -: 1291:  else
        -: 1292:    {
     6962: 1293:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     6962: 1294:      state->discardCount[player]++;
        -: 1295:    }
        -: 1296:
        -: 1297:  //decrease number in supply pile
     6962: 1298:  state->supplyCount[supplyPos]--;
        -: 1299:
     6962: 1300:  return 0;
        -: 1301:}
        -: 1302:
    13967: 1303:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1304:{
        -: 1305:  int i;
        -: 1306:
        -: 1307:  //reset coin count
    13967: 1308:  state->coins = 0;
        -: 1309:
        -: 1310:  //add coins for each Treasure card in player's hand
    80082: 1311:  for (i = 0; i < state->handCount[player]; i++)
        -: 1312:    {
    66115: 1313:      if (state->hand[player][i] == copper)
        -: 1314:	{
    24837: 1315:	  state->coins += 1;
        -: 1316:	}
    41278: 1317:      else if (state->hand[player][i] == silver)
        -: 1318:	{
     8920: 1319:	  state->coins += 2;
        -: 1320:	}
    32358: 1321:      else if (state->hand[player][i] == gold)
        -: 1322:	{
     6120: 1323:	  state->coins += 3;
        -: 1324:	}
        -: 1325:    }
        -: 1326:
        -: 1327:  //add bonus
    13967: 1328:  state->coins += bonus;
        -: 1329:
    13967: 1330:  return 0;
        -: 1331:}
        -: 1332:
        -: 1333:
        -: 1334://end of dominion.c
        -: 1335:
File 'dominion.c'
Lines executed:65.04% of 595
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   116380:    8:int compare(const void* a, const void* b) {
   116380:    9:  if (*(int*)a > *(int*)b)
    52400:   10:    return 1;
    63980:   11:  if (*(int*)a < *(int*)b)
    20600:   12:    return -1;
    43380:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       80:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       80:   44:  SelectStream(1);
       80:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       80:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       80:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      880:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     8800:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     8000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       80:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       80:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       80:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       80:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       80:   95:      state->supplyCount[estate] = 12;
       80:   96:      state->supplyCount[duchy] = 12;
       80:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       80:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       80:  102:  state->supplyCount[silver] = 40;
       80:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1680:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    13200:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    12400:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      800:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      800:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      800:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    11600:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      400:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      320:  140:      state->deckCount[i] = 0;
     1280:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      960:  143:	  state->deck[i][j] = estate;
      960:  144:	  state->deckCount[i]++;
        -:  145:	}
     2560:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     2240:  148:	  state->deck[i][j] = copper;
     2240:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      400:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      320:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      400:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      320:  166:      state->handCount[i] = 0;
      320:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2240:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     2160:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       80:  182:  state->outpostPlayed = 0;
       80:  183:  state->phase = 0;
       80:  184:  state->numActions = 1;
       80:  185:  state->numBuys = 1;
       80:  186:  state->playedCardCount = 0;
       80:  187:  state->whoseTurn = 0;
       80:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      480:  192:  for (it = 0; it < 5; it++){
      400:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       80:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       80:  198:  return 0;
        -:  199:}
        -:  200:
     3320:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3320:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3320:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     3320:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    51620:  214:  while (state->deckCount[player] > 0) {
    44980:  215:    card = floor(Random() * state->deckCount[player]);
    44980:  216:    newDeck[newDeckPos] = state->deck[player][card];
    44980:  217:    newDeckPos++;
   205500:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   160520:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    44980:  221:    state->deckCount[player]--;
        -:  222:  }
    48300:  223:  for (i = 0; i < newDeckPos; i++) {
    44980:  224:    state->deck[player][i] = newDeck[i];
    44980:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     3320:  228:  return 0;
        -:  229:}
        -:  230:
    27500:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    27500:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    27500:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    27500:  243:  if ( state->numActions < 1 )
        -:  244:    {
      180:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    27320:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    27320:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    26960:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      360:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
      100:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      260:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      260:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      260:  269:  return 0;
        -:  270:}
        -:  271:
     5420:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
     5420:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     5420:  280:  who = state->whoseTurn;
        -:  281:
     5420:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
     5420:  286:  } else if (supplyCount(supplyPos, state) <1){
      200:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      200:  289:    return -1;
     5220:  290:  } else if (state->coins < getCost(supplyPos)){
       20:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       20:  293:    return -1;
        -:  294:  } else {
     5200:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     5200:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
     5200:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     5200:  300:    state->numBuys--;
     5200:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
     5200:  308:  return 0;
        -:  309:}
        -:  310:
   146980:  311:int numHandCards(struct gameState *state) {
   146980:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
   606600:  315:int handCard(int handPos, struct gameState *state) {
   606600:  316:  int currentPlayer = whoseTurn(state);
   606600:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    10860:  320:int supplyCount(int card, struct gameState *state) {
    10860:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
   776240:  346:int whoseTurn(struct gameState *state) {
   776240:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
     8160:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     8160:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    49000:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    40840:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    40840:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
     8160:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
     8160:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
     6140:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     2020:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     8160:  370:  state->outpostPlayed = 0;
     8160:  371:  state->phase = 0;
     8160:  372:  state->numActions = 1;
     8160:  373:  state->coins = 0;
     8160:  374:  state->numBuys = 1;
     8160:  375:  state->playedCardCount = 0;
     8160:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    48960:  380:  for (k = 0; k < 5; k++){
    40800:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
     8160:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
     8160:  387:  return 0;
        -:  388:}
        -:  389:
     8240:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     8240:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
       80:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     8160:  401:  j = 0;
   212160:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   204000:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     1940:  406:	  j++;
        -:  407:	}
        -:  408:    }
     8160:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
     8160:  414:  return 0;
        -:  415:}
        -:  416:
    33280:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    33280:  420:  int score = 0;
        -:  421:  //score from hand
    74940:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    41660:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    41660:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    41660:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    41660:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    41660:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    41660:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   342480:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
   309200:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
   309200:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
   309200:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
   309200:  438:      if (state->discard[player][i] == province) { score = score + 6; };
   309200:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
   309200:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   342480:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
   309200:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
   309200:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
   309200:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
   309200:  449:      if (state->deck[player][i] == province) { score = score + 6; };
   309200:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
   309200:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    33280:  454:  return score;
        -:  455:}
        -:  456:
       80:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
      400:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
      320:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
      320:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
       80:  478:  j = 0;
      400:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
      320:  481:      if (players[i] > players[j])
        -:  482:	{
       40:  483:	  j = i;
        -:  484:	}
        -:  485:    }
       80:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
       80:  489:  currentPlayer = whoseTurn(state);
      400:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
      320:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
       20:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
       80:  499:  j = 0;
      400:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
      320:  502:      if ( players[i] > players[j] )
        -:  503:	{
       40:  504:	  j = i;
        -:  505:	}
        -:  506:    }
       80:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
      400:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
      320:  512:      if ( players[i] == highScore )
        -:  513:	{
       80:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
      240:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
       80:  522:  return 0;
        -:  523:}
        -:  524:
    41460:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    41460:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    44580:  533:    for (i = 0; i < state->discardCount[player];i++){
    41600:  534:      state->deck[player][i] = state->discard[player][i];
    41600:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     2980:  538:    state->deckCount[player] = state->discardCount[player];
     2980:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     2980:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
     2980:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     2980:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     2980:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
     2980:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     2980:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     2980:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
     2980:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     2980:  563:    state->deckCount[player]--;
     2980:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    38480:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    38480:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    38480:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    38480:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    38480:  576:    state->deckCount[player]--;
    38480:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    41460:  580:  return 0;
        -:  581:}
        -:  582:
    10540:  583:int getCost(int cardNumber)
        -:  584:{
    10540:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
     1920:  592:      return 5;
        -:  593:    case province:
     1940:  594:      return 8;
        -:  595:    case copper:
      100:  596:      return 0;
        -:  597:    case silver:
     2480:  598:      return 3;
        -:  599:    case gold:
     3480:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
       40:  604:      return 5;
        -:  605:    case feast:
      120:  606:      return 4;
        -:  607:    case gardens:
       20:  608:      return 4;
        -:  609:    case mine:
       40:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
       80:  622:      return 5;
        -:  623:    case steward:
       80:  624:      return 3;
        -:  625:    case tribute:
       40:  626:      return 5;
        -:  627:    case ambassador:
       40:  628:      return 3;
        -:  629:    case cutpurse:
       40:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
      120:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int adventurer_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int x;
        -:  651:  int index;
    #####:  652:  int currentPlayer = whoseTurn(state);
    #####:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
    #####:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
    #####:  657:  int drawntreasure=0;
        -:  658:  int cardDrawn;
    #####:  659:  int z = 0;// this is the counter for the temp hand
    #####:  660:  while(drawntreasure<2){
    #####:  661:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  662:	  	shuffle(currentPlayer, state);
        -:  663:		}
    #####:  664:		drawCard(currentPlayer, state);
    #####:  665:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  666:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  667:	  	drawntreasure++;
        -:  668:		else{
    #####:  669:	  	temphand[z]=cardDrawn;
    #####:  670:	  	state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  671:	  	z++;
        -:  672:		}
        -:  673:	      }
    #####:  674:     	 while(z-1>=0){
    #####:  675:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  676:		z=z-1;
        -:  677:      	}
    #####:  678:     	return -1;//return 0
        -:  679:
        -:  680:}
        -:  681:
       20:  682:int council_room_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  683:  int i;
        -:  684:  int j;
        -:  685:  int k;
        -:  686:  int x;
        -:  687:  int index;
       20:  688:  int currentPlayer = whoseTurn(state);
       20:  689:  int nextPlayer = currentPlayer + 1;
        -:  690:
       20:  691:  int tributeRevealedCards[2] = {-1, -1};
        -:  692:  int temphand[MAX_HAND];// moved above the if statement
       20:  693:  int drawntreasure=0;
        -:  694:  int cardDrawn;
       20:  695:  int z = 0;// this is the counter for the temp hand
        -:  696://+4 Cards
      100:  697:      for (i = 0; i < 4; i++)
        -:  698:	{
       80:  699:	  drawCard(currentPlayer, state);
        -:  700:	}
        -:  701:			
        -:  702:      //+1 Buy
       20:  703:      state->numBuys++;
        -:  704:			
        -:  705:      //Each other player draws a card
      100:  706:      for (i = 0; i < state->numPlayers; i++)
        -:  707:	{
       80:  708:	  if ( i != currentPlayer )
        -:  709:	    {
       60:  710:	      drawCard(i, state);
        -:  711:	    }
        -:  712:	}
        -:  713:			
        -:  714:      //put played card in played card pile
       20:  715:      discardCard(handPos, currentPlayer, state, 0);
        -:  716:			
       20:  717:      return -1;//return 0
        -:  718:
        -:  719:}
        -:  720:
       80:  721:int feast_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  722:   int i;
        -:  723:  int j;
        -:  724:  int k;
        -:  725:  int x;
        -:  726:  int index;
       80:  727:  int currentPlayer = whoseTurn(state);
       80:  728:  int nextPlayer = currentPlayer + 1;
        -:  729:
       80:  730:  int tributeRevealedCards[2] = {-1, -1};
        -:  731:  int temphand[MAX_HAND];// moved above the if statement
       80:  732:  int drawntreasure=0;
        -:  733:  int cardDrawn;
       80:  734:  int z = 0;// this is the counter for the temp hand
        -:  735://gain card with cost up to 5
        -:  736:      //Backup hand
      560:  737:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
      480:  738:	temphand[i] = state->hand[currentPlayer][i];//Backup card
      480:  739:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  740:      }
        -:  741:      //Backup hand
        -:  742:
        -:  743:      //Update Coins for Buy
       80:  744:      updateCoins(currentPlayer, state, 5);
       80:  745:      x = 1;//Condition to loop on
      240:  746:      while( x == 1) {//Buy one card
       80:  747:	if (supplyCount(choice1, state) <= 0){
    #####:  748:	  if (DEBUG)
        -:  749:	    printf("None of that card left, sorry!\n");
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  753:	  }
        -:  754:	}
       80:  755:	else if (state->coins < getCost(choice1)){
    #####:  756:	  printf("That card is too expensive!\n");
        -:  757:
    #####:  758:	  if (DEBUG){
        -:  759:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  760:	  }
        -:  761:	}
        -:  762:	else{
        -:  763:
       80:  764:	  if (DEBUG){
        -:  765:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  766:	  }
        -:  767:
       80:  768:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
       80:  769:	  x = 0;//No more buying cards
        -:  770:
       80:  771:	  if (DEBUG){
        -:  772:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  773:	  }
        -:  774:
        -:  775:	}
        -:  776:      }     
        -:  777:
        -:  778:      //Reset Hand
      560:  779:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
      480:  780:	state->hand[currentPlayer][i] = temphand[i];
      480:  781:	temphand[i] = -1;
        -:  782:      }
        -:  783:      //Reset Hand
        -:  784:      			
       80:  785:      return 0;
        -:  786:}
        -:  787:
    #####:  788:int gardens_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
    #####:  789:	return -1;
        -:  790:}
       20:  791:int mine_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  792:	 int i;
        -:  793:  int j;
        -:  794:  int k;
        -:  795:  int x;
        -:  796:  int index;
       20:  797:  int currentPlayer = whoseTurn(state);
       20:  798:  int nextPlayer = currentPlayer + 1;
        -:  799:
       20:  800:  int tributeRevealedCards[2] = {-1, -1};
        -:  801:  int temphand[MAX_HAND];// moved above the if statement
       20:  802:  int drawntreasure=0;
        -:  803:  int cardDrawn;
       20:  804:  int z = 0;// this is the counter for the temp hand
        -:  805:
       20:  806:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
       20:  808:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:		
       20:  813:      if (choice2 > treasure_map || choice2 < curse)
        -:  814:	{
    #####:  815:	  return -1;
        -:  816:	}
        -:  817:
       20:  818:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:
       20:  823:      gainCard(choice2, state, 2, currentPlayer);
        -:  824:
        -:  825:      //discard card from hand
       20:  826:      discardCard(handPos, currentPlayer, state, 0);
        -:  827:
        -:  828:      //discard trashed card
       40:  829:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  830:	{
       40:  831:	  if (state->hand[currentPlayer][i] == j)
        -:  832:	    {
       20:  833:	      discardCard(i, currentPlayer, state, 0);			
       20:  834:	      break;
        -:  835:	    }
        -:  836:	}
        -:  837:			
       20:  838:      return 0;
        -:  839:
        -:  840:}
        -:  841:
      360:  842:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  843:{
        -:  844:  int i;
        -:  845:  int j;
        -:  846:  int k;
        -:  847:  int x;
        -:  848:  int index;
      360:  849:  int currentPlayer = whoseTurn(state);
      360:  850:  int nextPlayer = currentPlayer + 1;
        -:  851:
      360:  852:  int tributeRevealedCards[2] = {-1, -1};
        -:  853:  int temphand[MAX_HAND];// moved above the if statement
      360:  854:  int drawntreasure=0;
        -:  855:  int cardDrawn;
      360:  856:  int z = 0;// this is the counter for the temp hand
      360:  857:  if (nextPlayer > (state->numPlayers - 1)){
      140:  858:    nextPlayer = 0;
        -:  859:  }
        -:  860: 
        -:  861:	
        -:  862:  //uses switch to select card and perform actions
      360:  863:  switch( card ) 
        -:  864:    {
        -:  865:    case adventurer:
        -:  866:    
    #####:  867:    	return adventurer_(card,choice1,choice2,choice3,state,handPos,bonus);
        -:  868:
        -:  869:    case council_room:
        -:  870:      	
       20:  871:	return council_room_(card,choice1,choice2,choice3,state,handPos,bonus);
        -:  872:	
        -:  873:    case feast:
        -:  874:
       80:  875:    	return feast_(card,choice1,choice2,choice3,state,handPos,bonus);
        -:  876:			
        -:  877:    case gardens:
        -:  878:    	
    #####:  879:	return gardens_(card,choice1,choice2,choice3,state,handPos,bonus);
        -:  880:			
        -:  881:    case mine:
        -:  882:    
       20:  883:    	return mine_(card,choice1,choice2,choice3,state,handPos,bonus);		
        -:  884:    case remodel:
    #####:  885:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  886:
    #####:  887:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  888:	{
    #####:  889:	  return -1;
        -:  890:	}
        -:  891:
    #####:  892:      gainCard(choice2, state, 0, currentPlayer);
        -:  893:
        -:  894:      //discard card from hand
    #####:  895:      discardCard(handPos, currentPlayer, state, 0);
        -:  896:
        -:  897:      //discard trashed card
    #####:  898:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  899:	{
    #####:  900:	  if (state->hand[currentPlayer][i] == j)
        -:  901:	    {
    #####:  902:	      discardCard(i, currentPlayer, state, 0);			
    #####:  903:	      break;
        -:  904:	    }
        -:  905:	}
        -:  906:
        -:  907:
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case smithy:
        -:  911:      //+3 Cards
    #####:  912:      for (i = 0; i < 3; i++)
        -:  913:	{
    #####:  914:	  drawCard(currentPlayer, state);
        -:  915:	}
        -:  916:			
        -:  917:      //discard card from hand
    #####:  918:      discardCard(handPos, currentPlayer, state, 0);
    #####:  919:      return 0;
        -:  920:		
        -:  921:    case village:
        -:  922:      //+1 Card
    #####:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+2 Actions
    #####:  926:      state->numActions = state->numActions + 2;
        -:  927:			
        -:  928:      //discard played card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
    #####:  930:      return 0;
        -:  931:		
        -:  932:    case baron:
    #####:  933:      state->numBuys++;//Increase buys by 1!
    #####:  934:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  935:	int p = 0;//Iterator for hand!
    #####:  936:	int card_not_discarded = 1;//Flag for discard set!
    #####:  937:	while(card_not_discarded){
    #####:  938:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  939:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  940:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  941:	    state->discardCount[currentPlayer]++;
    #####:  942:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  943:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  944:	    }
    #####:  945:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  946:	    state->handCount[currentPlayer]--;
    #####:  947:	    card_not_discarded = 0;//Exit the loop
        -:  948:	  }
    #####:  949:	  else if (p > state->handCount[currentPlayer]){
    #####:  950:	    if(DEBUG) {
        -:  951:	      printf("No estate cards in your hand, invalid choice\n");
        -:  952:	      printf("Must gain an estate if there are any\n");
        -:  953:	    }
    #####:  954:	    if (supplyCount(estate, state) > 0){
    #####:  955:	      gainCard(estate, state, 0, currentPlayer);
    #####:  956:	      state->supplyCount[estate]--;//Decrement estates
    #####:  957:	      if (supplyCount(estate, state) == 0){
    #####:  958:		isGameOver(state);
        -:  959:	      }
        -:  960:	    }
    #####:  961:	    card_not_discarded = 0;//Exit the loop
        -:  962:	  }
        -:  963:			    
        -:  964:	  else{
    #####:  965:	    p++;//Next card
        -:  966:	  }
        -:  967:	}
        -:  968:      }
        -:  969:			    
        -:  970:      else{
    #####:  971:	if (supplyCount(estate, state) > 0){
    #####:  972:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  973:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  974:	  if (supplyCount(estate, state) == 0){
    #####:  975:	    isGameOver(state);
        -:  976:	  }
        -:  977:	}
        -:  978:      }
        -:  979:	    
        -:  980:      
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case great_hall:
        -:  984:      //+1 Card
    #####:  985:      drawCard(currentPlayer, state);
        -:  986:			
        -:  987:      //+1 Actions
    #####:  988:      state->numActions++;
        -:  989:			
        -:  990:      //discard card from hand
    #####:  991:      discardCard(handPos, currentPlayer, state, 0);
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case minion:
        -:  995:      //+1 action
       20:  996:      state->numActions++;
        -:  997:			
        -:  998:      //discard card from hand
       20:  999:      discardCard(handPos, currentPlayer, state, 0);
        -: 1000:			
       20: 1001:      if (choice1)		//+2 coins
        -: 1002:	{
       20: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:			
    #####: 1006:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1007:	{
        -: 1008:	  //discard hand
    #####: 1009:	  while(numHandCards(state) > 0)
        -: 1010:	    {
    #####: 1011:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:	    }
        -: 1013:				
        -: 1014:	  //draw 4
    #####: 1015:	  for (i = 0; i < 4; i++)
        -: 1016:	    {
    #####: 1017:	      drawCard(currentPlayer, state);
        -: 1018:	    }
        -: 1019:				
        -: 1020:	  //other players discard hand and redraw if hand size > 4
    #####: 1021:	  for (i = 0; i < state->numPlayers; i++)
        -: 1022:	    {
    #####: 1023:	      if (i != currentPlayer)
        -: 1024:		{
    #####: 1025:		  if ( state->handCount[i] > 4 )
        -: 1026:		    {
        -: 1027:		      //discard hand
    #####: 1028:		      while( state->handCount[i] > 0 )
        -: 1029:			{
    #####: 1030:			  discardCard(handPos, i, state, 0);
        -: 1031:			}
        -: 1032:							
        -: 1033:		      //draw 4
    #####: 1034:		      for (j = 0; j < 4; j++)
        -: 1035:			{
    #####: 1036:			  drawCard(i, state);
        -: 1037:			}
        -: 1038:		    }
        -: 1039:		}
        -: 1040:	    }
        -: 1041:				
        -: 1042:	}
       20: 1043:      return 0;
        -: 1044:		
        -: 1045:    case steward:
       20: 1046:      if (choice1 == 1)
        -: 1047:	{
        -: 1048:	  //+2 cards
       20: 1049:	  drawCard(currentPlayer, state);
       20: 1050:	  drawCard(currentPlayer, state);
        -: 1051:	}
    #####: 1052:      else if (choice1 == 2)
        -: 1053:	{
        -: 1054:	  //+2 coins
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:      else
        -: 1058:	{
        -: 1059:	  //trash 2 cards in hand
    #####: 1060:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1061:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1062:	}
        -: 1063:			
        -: 1064:      //discard card from hand
       20: 1065:      discardCard(handPos, currentPlayer, state, 0);
       20: 1066:      return 0;
        -: 1067:		
        -: 1068:    case tribute:
       80: 1069:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1070:	if (state->deckCount[nextPlayer] > 0){
    #####: 1071:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1072:	  state->deckCount[nextPlayer]--;
        -: 1073:	}
    #####: 1074:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1075:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1076:	  state->discardCount[nextPlayer]--;
        -: 1077:	}
        -: 1078:	else{
        -: 1079:	  //No Card to Reveal
    #####: 1080:	  if (DEBUG){
        -: 1081:	    printf("No cards to reveal\n");
        -: 1082:	  }
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
        -: 1086:      else{
       80: 1087:	if (state->deckCount[nextPlayer] == 0){
      200: 1088:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
      180: 1089:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
      180: 1090:	    state->deckCount[nextPlayer]++;
      180: 1091:	    state->discard[nextPlayer][i] = -1;
      180: 1092:	    state->discardCount[nextPlayer]--;
        -: 1093:	  }
        -: 1094:			    
       20: 1095:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1096:	} 
       80: 1097:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       80: 1098:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       80: 1099:	state->deckCount[nextPlayer]--;
       80: 1100:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       80: 1101:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       80: 1102:	state->deckCount[nextPlayer]--;
        -: 1103:      }    
        -: 1104:		       
       80: 1105:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1106:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1107:	state->playedCardCount++;
    #####: 1108:	tributeRevealedCards[1] = -1;
        -: 1109:      }
        -: 1110:
      320: 1111:      for (i = 0; i <= 2; i ++){
      300: 1112:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
       60: 1113:	  state->coins += 2;
        -: 1114:	}
        -: 1115:		    
      220: 1116:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
       40: 1117:	  drawCard(currentPlayer, state);
       40: 1118:	  drawCard(currentPlayer, state);
        -: 1119:	}
        -: 1120:	else{//Action Card
      140: 1121:	  state->numActions = state->numActions + 2;
        -: 1122:	}
        -: 1123:      }
        -: 1124:	    
       80: 1125:      return 0;
        -: 1126:		
        -: 1127:    case ambassador:
       20: 1128:      j = 0;		//used to check if player has enough cards to discard
        -: 1129:
       20: 1130:      if (choice2 > 2 || choice2 < 0)
        -: 1131:	{
    #####: 1132:	  return -1;				
        -: 1133:	}
        -: 1134:
       20: 1135:      if (choice1 == handPos)
        -: 1136:	{
    #####: 1137:	  return -1;
        -: 1138:	}
        -: 1139:
      120: 1140:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1141:	{
      100: 1142:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1143:	    {
       20: 1144:	      j++;
        -: 1145:	    }
        -: 1146:	}
       20: 1147:      if (j < choice2)
        -: 1148:	{
    #####: 1149:	  return -1;				
        -: 1150:	}
        -: 1151:
       20: 1152:      if (DEBUG) 
        -: 1153:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1154:
        -: 1155:      //increase supply count for choosen card by amount being discarded
       20: 1156:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1157:			
        -: 1158:      //each other player gains a copy of revealed card
      100: 1159:      for (i = 0; i < state->numPlayers; i++)
        -: 1160:	{
       80: 1161:	  if (i != currentPlayer)
        -: 1162:	    {
       60: 1163:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1164:	    }
        -: 1165:	}
        -: 1166:
        -: 1167:      //discard played card from hand
       20: 1168:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1169:
        -: 1170:      //trash copies of cards returned to supply
       40: 1171:      for (j = 0; j < choice2; j++)
        -: 1172:	{
       40: 1173:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1174:	    {
       40: 1175:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1176:		{
       20: 1177:		  discardCard(i, currentPlayer, state, 1);
       20: 1178:		  break;
        -: 1179:		}
        -: 1180:	    }
        -: 1181:	}			
        -: 1182:
       20: 1183:      return 0;
        -: 1184:		
        -: 1185:    case cutpurse:
        -: 1186:
       20: 1187:      updateCoins(currentPlayer, state, 2);
      100: 1188:      for (i = 0; i < state->numPlayers; i++)
        -: 1189:	{
       80: 1190:	  if (i != currentPlayer)
        -: 1191:	    {
       60: 1192:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1193:		{
    #####: 1194:		  if (state->hand[i][j] == copper)
        -: 1195:		    {
    #####: 1196:		      discardCard(j, i, state, 0);
    #####: 1197:		      break;
        -: 1198:		    }
    #####: 1199:		  if (j == state->handCount[i])
        -: 1200:		    {
    #####: 1201:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1202:			{
    #####: 1203:			  if (DEBUG)
        -: 1204:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1205:			}	
    #####: 1206:		      break;
        -: 1207:		    }		
        -: 1208:		}
        -: 1209:					
        -: 1210:	    }
        -: 1211:				
        -: 1212:	}				
        -: 1213:
        -: 1214:      //discard played card from hand
       20: 1215:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1216:
       20: 1217:      return 0;
        -: 1218:
        -: 1219:		
        -: 1220:    case embargo: 
        -: 1221:      //+2 Coins
    #####: 1222:      state->coins = state->coins + 2;
        -: 1223:			
        -: 1224:      //see if selected pile is in play
    #####: 1225:      if ( state->supplyCount[choice1] == -1 )
        -: 1226:	{
    #####: 1227:	  return -1;
        -: 1228:	}
        -: 1229:			
        -: 1230:      //add embargo token to selected supply pile
    #####: 1231:      state->embargoTokens[choice1]++;
        -: 1232:			
        -: 1233:      //trash card
    #####: 1234:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case outpost:
        -: 1238:      //set outpost flag
    #####: 1239:      state->outpostPlayed++;
        -: 1240:			
        -: 1241:      //discard card
    #####: 1242:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1243:      return 0;
        -: 1244:		
        -: 1245:    case salvager:
        -: 1246:      //+1 buy
    #####: 1247:      state->numBuys++;
        -: 1248:			
    #####: 1249:      if (choice1)
        -: 1250:	{
        -: 1251:	  //gain coins equal to trashed card
    #####: 1252:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1253:	  //trash card
    #####: 1254:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card
    #####: 1258:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1259:      return 0;
        -: 1260:		
        -: 1261:    case sea_hag:
    #####: 1262:      for (i = 0; i < state->numPlayers; i++){
    #####: 1263:	if (i != currentPlayer){
    #####: 1264:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1265:	  state->discardCount[i]++;
    #####: 1266:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1267:	}
        -: 1268:      }
    #####: 1269:      return 0;
        -: 1270:		
        -: 1271:    case treasure_map:
        -: 1272:      //search hand for another treasure_map
       80: 1273:      index = -1;
      480: 1274:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1275:	{
      400: 1276:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1277:	    {
    #####: 1278:	      index = i;
    #####: 1279:	      break;
        -: 1280:	    }
        -: 1281:	}
       80: 1282:      if (index > -1)
        -: 1283:	{
        -: 1284:	  //trash both treasure cards
    #####: 1285:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1286:	  discardCard(index, currentPlayer, state, 1);
        -: 1287:
        -: 1288:	  //gain 4 Gold cards
    #####: 1289:	  for (i = 0; i < 4; i++)
        -: 1290:	    {
    #####: 1291:	      gainCard(gold, state, 1, currentPlayer);
        -: 1292:	    }
        -: 1293:				
        -: 1294:	  //return success
    #####: 1295:	  return 1;
        -: 1296:	}
        -: 1297:			
        -: 1298:      //no second treasure_map found in hand
       80: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
    #####: 1302:  return -1;
        -: 1303:}
        -: 1304:
        -: 1305:
      160: 1306:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1307:{
        -: 1308:	
        -: 1309:  //if card is not trashed, added to Played pile 
      160: 1310:  if (trashFlag < 1)
        -: 1311:    {
        -: 1312:      //add card to played pile
      140: 1313:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      140: 1314:      state->playedCardCount++;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //set played card to -1
      160: 1318:  state->hand[currentPlayer][handPos] = -1;
        -: 1319:	
        -: 1320:  //remove card from player's hand
      160: 1321:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1322:    {
        -: 1323:      //reduce number of cards in hand
       40: 1324:      state->handCount[currentPlayer]--;
        -: 1325:    }
      120: 1326:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1327:    {
        -: 1328:      //reduce number of cards in hand
    #####: 1329:      state->handCount[currentPlayer]--;
        -: 1330:    }
        -: 1331:  else 	
        -: 1332:    {
        -: 1333:      //replace discarded card with last card in hand
      120: 1334:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1335:      //set last card to -1
      120: 1336:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1337:      //reduce number of cards in hand
      120: 1338:      state->handCount[currentPlayer]--;
        -: 1339:    }
        -: 1340:	
      160: 1341:  return 0;
        -: 1342:}
        -: 1343:
     5360: 1344:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1345:{
        -: 1346:  //Note: supplyPos is enum of choosen card
        -: 1347:	
        -: 1348:  //check if supply pile is empty (0) or card is not used in game (-1)
     5360: 1349:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1350:    {
       60: 1351:      return -1;
        -: 1352:    }
        -: 1353:	
        -: 1354:  //added card for [whoseTurn] current player:
        -: 1355:  // toFlag = 0 : add to discard
        -: 1356:  // toFlag = 1 : add to deck
        -: 1357:  // toFlag = 2 : add to hand
        -: 1358:
     5300: 1359:  if (toFlag == 1)
        -: 1360:    {
    #####: 1361:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1362:      state->deckCount[player]++;
        -: 1363:    }
     5300: 1364:  else if (toFlag == 2)
        -: 1365:    {
    #####: 1366:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1367:      state->handCount[player]++;
        -: 1368:    }
        -: 1369:  else
        -: 1370:    {
     5300: 1371:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     5300: 1372:      state->discardCount[player]++;
        -: 1373:    }
        -: 1374:	
        -: 1375:  //decrease number in supply pile
     5300: 1376:  state->supplyCount[supplyPos]--;
        -: 1377:	 
     5300: 1378:  return 0;
        -: 1379:}
        -: 1380:
     8600: 1381:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1382:{
        -: 1383:  int i;
        -: 1384:	
        -: 1385:  //reset coin count
     8600: 1386:  state->coins = 0;
        -: 1387:
        -: 1388:  //add coins for each Treasure card in player's hand
    51580: 1389:  for (i = 0; i < state->handCount[player]; i++)
        -: 1390:    {
    42980: 1391:      if (state->hand[player][i] == copper)
        -: 1392:	{
    19020: 1393:	  state->coins += 1;
        -: 1394:	}
    23960: 1395:      else if (state->hand[player][i] == silver)
        -: 1396:	{
     5320: 1397:	  state->coins += 2;
        -: 1398:	}
    18640: 1399:      else if (state->hand[player][i] == gold)
        -: 1400:	{
     3840: 1401:	  state->coins += 3;
        -: 1402:	}	
        -: 1403:    }	
        -: 1404:
        -: 1405:  //add bonus
     8600: 1406:  state->coins += bonus;
        -: 1407:
     8600: 1408:  return 0;
        -: 1409:}
        -: 1410:
        -: 1411:
        -: 1412://end of dominion.c
        -: 1413:
File 'dominion.c'
Lines executed:82.18% of 595
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:18
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   381816:    8:int compare(const void* a, const void* b) {
   381816:    9:  if (*(int*)a > *(int*)b)
   135800:   10:    return 1;
   246016:   11:  if (*(int*)a < *(int*)b)
    79300:   12:    return -1;
   166716:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     4671:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4671:   44:  SelectStream(1);
     4671:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     4671:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
     2243:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2428:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    26708:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   267080:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   242800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2428:   73:  if (numPlayers == 2)
        -:   74:    {
     1129:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     1299:   77:  else if (numPlayers == 3)
        -:   78:    {
     1139:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      160:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2428:   87:  if (numPlayers == 2)
        -:   88:    {
     1129:   89:      state->supplyCount[estate] = 8;
     1129:   90:      state->supplyCount[duchy] = 8;
     1129:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     1299:   95:      state->supplyCount[estate] = 12;
     1299:   96:      state->supplyCount[duchy] = 12;
     1299:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2428:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2428:  102:  state->supplyCount[silver] = 40;
     2428:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    50988:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   400645:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   376360:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    26663:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2388:  115:		  if (numPlayers == 2){ 
     1129:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     1259:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    21887:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    24275:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   352085:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     8743:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     6315:  140:      state->deckCount[i] = 0;
    25260:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    18945:  143:	  state->deck[i][j] = estate;
    18945:  144:	  state->deckCount[i]++;
        -:  145:	}
    50520:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    44205:  148:	  state->deck[i][j] = copper;
    44205:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     8743:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     6315:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     8743:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     6315:  166:      state->handCount[i] = 0;
     6315:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    67984:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    65556:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     2428:  182:  state->outpostPlayed = 0;
     2428:  183:  state->phase = 0;
     2428:  184:  state->numActions = 1;
     2428:  185:  state->numBuys = 1;
     2428:  186:  state->playedCardCount = 0;
     2428:  187:  state->whoseTurn = 0;
     2428:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    14568:  192:  for (it = 0; it < 5; it++){
    12140:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     2428:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     2428:  198:  return 0;
        -:  199:}
        -:  200:
    14581:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    14581:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    14581:  209:  if (state->deckCount[player] < 1)
      185:  210:    return -1;
    14396:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   199755:  214:  while (state->deckCount[player] > 0) {
   170963:  215:    card = floor(Random() * state->deckCount[player]);
   170963:  216:    newDeck[newDeckPos] = state->deck[player][card];
   170963:  217:    newDeckPos++;
   715602:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   544639:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   170963:  221:    state->deckCount[player]--;
        -:  222:  }
   185359:  223:  for (i = 0; i < newDeckPos; i++) {
   170963:  224:    state->deck[player][i] = newDeck[i];
   170963:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    14396:  228:  return 0;
        -:  229:}
        -:  230:
    68480:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    68480:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    68480:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    68480:  243:  if ( state->numActions < 1 )
        -:  244:    {
      640:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    67840:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    67840:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    65600:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     2240:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
     1300:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      940:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      940:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      940:  269:  return 0;
        -:  270:}
        -:  271:
    13220:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    13220:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    13220:  280:  who = state->whoseTurn;
        -:  281:
    13220:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    13220:  286:  } else if (supplyCount(supplyPos, state) <1){
      960:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      960:  289:    return -1;
    12260:  290:  } else if (state->coins < getCost(supplyPos)){
      980:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      980:  293:    return -1;
        -:  294:  } else {
    11280:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    11280:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    11280:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    11280:  300:    state->numBuys--;
    11280:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    11280:  308:  return 0;
        -:  309:}
        -:  310:
   362300:  311:int numHandCards(struct gameState *state) {
   362300:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
  1545700:  315:int handCard(int handPos, struct gameState *state) {
  1545700:  316:  int currentPlayer = whoseTurn(state);
  1545700:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    25381:  320:int supplyCount(int card, struct gameState *state) {
    25381:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
     3340:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     3340:  326:  int count = 0;
        -:  327:
    21100:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    17760:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
     6640:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
     3300:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    36400:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    33060:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
     3340:  343:  return count;
        -:  344:}
        -:  345:
  1971717:  346:int whoseTurn(struct gameState *state) {
  1971717:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    20000:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    20000:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
   122080:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
   102080:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
   102080:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    20000:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    20000:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    15060:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     4940:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    20000:  370:  state->outpostPlayed = 0;
    20000:  371:  state->phase = 0;
    20000:  372:  state->numActions = 1;
    20000:  373:  state->coins = 0;
    20000:  374:  state->numBuys = 1;
    20000:  375:  state->playedCardCount = 0;
    20000:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
   120000:  380:  for (k = 0; k < 5; k++){
   100000:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    20000:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    20000:  387:  return 0;
        -:  388:}
        -:  389:
    20164:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    20164:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
      161:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    20003:  401:  j = 0;
   520078:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
   500075:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     7945:  406:	  j++;
        -:  407:	}
        -:  408:    }
    20003:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
    20002:  414:  return 0;
        -:  415:}
        -:  416:
    81280:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    81280:  420:  int score = 0;
        -:  421:  //score from hand
   183000:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
   101720:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
   101720:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
   101720:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
   101720:  427:      if (state->hand[player][i] == province) { score = score + 6; };
   101720:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
   101720:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
   822020:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
   740740:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
   740740:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
   740740:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
   740740:  438:      if (state->discard[player][i] == province) { score = score + 6; };
   740740:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
   740740:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
   822020:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
   740740:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
   740740:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
   740740:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
   740740:  449:      if (state->deck[player][i] == province) { score = score + 6; };
   740740:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
   740740:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    81280:  454:  return score;
        -:  455:}
        -:  456:
      160:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
      800:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
      640:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
      640:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
      160:  478:  j = 0;
      800:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
      640:  481:      if (players[i] > players[j])
        -:  482:	{
       80:  483:	  j = i;
        -:  484:	}
        -:  485:    }
      160:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
      160:  489:  currentPlayer = whoseTurn(state);
      800:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
      640:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
       20:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
      160:  499:  j = 0;
      800:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
      640:  502:      if ( players[i] > players[j] )
        -:  503:	{
       80:  504:	  j = i;
        -:  505:	}
        -:  506:    }
      160:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
      800:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
      640:  512:      if ( players[i] == highScore )
        -:  513:	{
      160:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
      480:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
      160:  522:  return 0;
        -:  523:}
        -:  524:
   116787:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   116787:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   115696:  533:    for (i = 0; i < state->discardCount[player];i++){
   107633:  534:      state->deck[player][i] = state->discard[player][i];
   107633:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     8063:  538:    state->deckCount[player] = state->discardCount[player];
     8063:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     8063:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
     8063:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     8063:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     8063:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
     8063:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     8063:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     8063:  559:    if (deckCounter == 0)
        2:  560:      return -1;
        -:  561:
     8061:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     8061:  563:    state->deckCount[player]--;
     8061:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   108724:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
   108724:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   108724:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   108724:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   108724:  576:    state->deckCount[player]--;
   108724:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   116785:  580:  return 0;
        -:  581:}
        -:  582:
    23754:  583:int getCost(int cardNumber)
        -:  584:{
    23754:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
       23:  590:      return 2;
        -:  591:    case duchy:
     3841:  592:      return 5;
        -:  593:    case province:
     4401:  594:      return 8;
        -:  595:    case copper:
      121:  596:      return 0;
        -:  597:    case silver:
     5981:  598:      return 3;
        -:  599:    case gold:
     6581:  600:      return 6;
        -:  601:    case adventurer:
     1022:  602:      return 6;
        -:  603:    case council_room:
       81:  604:      return 5;
        -:  605:    case feast:
      161:  606:      return 4;
        -:  607:    case gardens:
       62:  608:      return 4;
        -:  609:    case mine:
       41:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
      201:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
       81:  620:      return 3;
        -:  621:    case minion:
       81:  622:      return 5;
        -:  623:    case steward:
       81:  624:      return 3;
        -:  625:    case tribute:
       41:  626:      return 5;
        -:  627:    case ambassador:
       81:  628:      return 3;
        -:  629:    case cutpurse:
      221:  630:      return 4;
        -:  631:    case embargo: 
       41:  632:      return 2;
        -:  633:    case outpost:
       81:  634:      return 5;
        -:  635:    case salvager:
      121:  636:      return 4;
        -:  637:    case sea_hag:
      281:  638:      return 4;
        -:  639:    case treasure_map:
      121:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
     1183:  646:int adventurer_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int x;
        -:  651:  int index;
     1183:  652:  int currentPlayer = whoseTurn(state);
     1183:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
     1183:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
     1183:  657:  int drawntreasure=0;
        -:  658:  int cardDrawn;
     1183:  659:  int z = 0;// this is the counter for the temp hand
     6465:  660:  while(drawntreasure<2){
     4099:  661:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
      183:  662:	  	shuffle(currentPlayer, state);
        -:  663:		}
     4099:  664:		drawCard(currentPlayer, state);
     4099:  665:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6465:  666:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     2366:  667:	  	drawntreasure++;
        -:  668:		else{
     1733:  669:	  	temphand[z]=cardDrawn;
     1733:  670:	  	state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1733:  671:	  	z++;
        -:  672:		}
        -:  673:	      }
     4099:  674:     	 while(z-1>=0){
     1733:  675:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1733:  676:		z=z-1;
        -:  677:      	}
     1183:  678:     	return -1;//return 0
        -:  679:
        -:  680:}
        -:  681:
       41:  682:int council_room_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  683:  int i;
        -:  684:  int j;
        -:  685:  int k;
        -:  686:  int x;
        -:  687:  int index;
       41:  688:  int currentPlayer = whoseTurn(state);
       41:  689:  int nextPlayer = currentPlayer + 1;
        -:  690:
       41:  691:  int tributeRevealedCards[2] = {-1, -1};
        -:  692:  int temphand[MAX_HAND];// moved above the if statement
       41:  693:  int drawntreasure=0;
        -:  694:  int cardDrawn;
       41:  695:  int z = 0;// this is the counter for the temp hand
        -:  696://+4 Cards
      205:  697:      for (i = 0; i < 4; i++)
        -:  698:	{
      164:  699:	  drawCard(currentPlayer, state);
        -:  700:	}
        -:  701:			
        -:  702:      //+1 Buy
       41:  703:      state->numBuys++;
        -:  704:			
        -:  705:      //Each other player draws a card
      203:  706:      for (i = 0; i < state->numPlayers; i++)
        -:  707:	{
      162:  708:	  if ( i != currentPlayer )
        -:  709:	    {
      121:  710:	      drawCard(i, state);
        -:  711:	    }
        -:  712:	}
        -:  713:			
        -:  714:      //put played card in played card pile
       41:  715:      discardCard(handPos, currentPlayer, state, 0);
        -:  716:			
       41:  717:      return -1;//return 0
        -:  718:
        -:  719:}
        -:  720:
      102:  721:int feast_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  722:   int i;
        -:  723:  int j;
        -:  724:  int k;
        -:  725:  int x;
        -:  726:  int index;
      102:  727:  int currentPlayer = whoseTurn(state);
      102:  728:  int nextPlayer = currentPlayer + 1;
        -:  729:
      102:  730:  int tributeRevealedCards[2] = {-1, -1};
        -:  731:  int temphand[MAX_HAND];// moved above the if statement
      102:  732:  int drawntreasure=0;
        -:  733:  int cardDrawn;
      102:  734:  int z = 0;// this is the counter for the temp hand
        -:  735://gain card with cost up to 5
        -:  736:      //Backup hand
      714:  737:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
      612:  738:	temphand[i] = state->hand[currentPlayer][i];//Backup card
      612:  739:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  740:      }
        -:  741:      //Backup hand
        -:  742:
        -:  743:      //Update Coins for Buy
      102:  744:      updateCoins(currentPlayer, state, 5);
      102:  745:      x = 1;//Condition to loop on
      306:  746:      while( x == 1) {//Buy one card
      102:  747:	if (supplyCount(choice1, state) <= 0){
    #####:  748:	  if (DEBUG)
        -:  749:	    printf("None of that card left, sorry!\n");
        -:  750:
    #####:  751:	  if (DEBUG){
        -:  752:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  753:	  }
        -:  754:	}
      102:  755:	else if (state->coins < getCost(choice1)){
    #####:  756:	  printf("That card is too expensive!\n");
        -:  757:
    #####:  758:	  if (DEBUG){
        -:  759:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  760:	  }
        -:  761:	}
        -:  762:	else{
        -:  763:
      102:  764:	  if (DEBUG){
        -:  765:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  766:	  }
        -:  767:
      102:  768:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
      102:  769:	  x = 0;//No more buying cards
        -:  770:
      102:  771:	  if (DEBUG){
        -:  772:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  773:	  }
        -:  774:
        -:  775:	}
        -:  776:      }     
        -:  777:
        -:  778:      //Reset Hand
      714:  779:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
      612:  780:	state->hand[currentPlayer][i] = temphand[i];
      612:  781:	temphand[i] = -1;
        -:  782:      }
        -:  783:      //Reset Hand
        -:  784:      			
      102:  785:      return 0;
        -:  786:}
        -:  787:
    #####:  788:int gardens_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
    #####:  789:	return -1;
        -:  790:}
       20:  791:int mine_(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  792:	 int i;
        -:  793:  int j;
        -:  794:  int k;
        -:  795:  int x;
        -:  796:  int index;
       20:  797:  int currentPlayer = whoseTurn(state);
       20:  798:  int nextPlayer = currentPlayer + 1;
        -:  799:
       20:  800:  int tributeRevealedCards[2] = {-1, -1};
        -:  801:  int temphand[MAX_HAND];// moved above the if statement
       20:  802:  int drawntreasure=0;
        -:  803:  int cardDrawn;
       20:  804:  int z = 0;// this is the counter for the temp hand
        -:  805:
       20:  806:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  807:
       20:  808:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  809:	{
    #####:  810:	  return -1;
        -:  811:	}
        -:  812:		
       20:  813:      if (choice2 > treasure_map || choice2 < curse)
        -:  814:	{
    #####:  815:	  return -1;
        -:  816:	}
        -:  817:
       20:  818:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:
       20:  823:      gainCard(choice2, state, 2, currentPlayer);
        -:  824:
        -:  825:      //discard card from hand
       20:  826:      discardCard(handPos, currentPlayer, state, 0);
        -:  827:
        -:  828:      //discard trashed card
       40:  829:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  830:	{
       40:  831:	  if (state->hand[currentPlayer][i] == j)
        -:  832:	    {
       20:  833:	      discardCard(i, currentPlayer, state, 0);			
       20:  834:	      break;
        -:  835:	    }
        -:  836:	}
        -:  837:			
       20:  838:      return 0;
        -:  839:
        -:  840:}
        -:  841:
     6749:  842:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  843:{
        -:  844:  int i;
        -:  845:  int j;
        -:  846:  int k;
        -:  847:  int x;
        -:  848:  int index;
     6749:  849:  int currentPlayer = whoseTurn(state);
     6749:  850:  int nextPlayer = currentPlayer + 1;
        -:  851:
     6749:  852:  int tributeRevealedCards[2] = {-1, -1};
        -:  853:  int temphand[MAX_HAND];// moved above the if statement
     6749:  854:  int drawntreasure=0;
        -:  855:  int cardDrawn;
     6749:  856:  int z = 0;// this is the counter for the temp hand
     6749:  857:  if (nextPlayer > (state->numPlayers - 1)){
      542:  858:    nextPlayer = 0;
        -:  859:  }
        -:  860: 
        -:  861:	
        -:  862:  //uses switch to select card and perform actions
     6749:  863:  switch( card ) 
        -:  864:    {
        -:  865:    case adventurer:
        -:  866:    
     1183:  867:    	return adventurer_(card,choice1,choice2,choice3,state,handPos,bonus);
        -:  868:
        -:  869:    case council_room:
        -:  870:      	
       41:  871:	return council_room_(card,choice1,choice2,choice3,state,handPos,bonus);
        -:  872:	
        -:  873:    case feast:
        -:  874:
      102:  875:    	return feast_(card,choice1,choice2,choice3,state,handPos,bonus);
        -:  876:			
        -:  877:    case gardens:
        -:  878:    	
    #####:  879:	return gardens_(card,choice1,choice2,choice3,state,handPos,bonus);
        -:  880:			
        -:  881:    case mine:
        -:  882:    
       20:  883:    	return mine_(card,choice1,choice2,choice3,state,handPos,bonus);		
        -:  884:    case remodel:
        2:  885:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  886:
        2:  887:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  888:	{
    #####:  889:	  return -1;
        -:  890:	}
        -:  891:
        2:  892:      gainCard(choice2, state, 0, currentPlayer);
        -:  893:
        -:  894:      //discard card from hand
        2:  895:      discardCard(handPos, currentPlayer, state, 0);
        -:  896:
        -:  897:      //discard trashed card
        7:  898:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  899:	{
        7:  900:	  if (state->hand[currentPlayer][i] == j)
        -:  901:	    {
        2:  902:	      discardCard(i, currentPlayer, state, 0);			
        2:  903:	      break;
        -:  904:	    }
        -:  905:	}
        -:  906:
        -:  907:
        2:  908:      return 0;
        -:  909:		
        -:  910:    case smithy:
        -:  911:      //+3 Cards
        4:  912:      for (i = 0; i < 3; i++)
        -:  913:	{
        3:  914:	  drawCard(currentPlayer, state);
        -:  915:	}
        -:  916:			
        -:  917:      //discard card from hand
        1:  918:      discardCard(handPos, currentPlayer, state, 0);
        1:  919:      return 0;
        -:  920:		
        -:  921:    case village:
        -:  922:      //+1 Card
      100:  923:      drawCard(currentPlayer, state);
        -:  924:			
        -:  925:      //+2 Actions
      100:  926:      state->numActions = state->numActions + 2;
        -:  927:			
        -:  928:      //discard played card from hand
      100:  929:      discardCard(handPos, currentPlayer, state, 0);
      100:  930:      return 0;
        -:  931:		
        -:  932:    case baron:
    #####:  933:      state->numBuys++;//Increase buys by 1!
    #####:  934:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  935:	int p = 0;//Iterator for hand!
    #####:  936:	int card_not_discarded = 1;//Flag for discard set!
    #####:  937:	while(card_not_discarded){
    #####:  938:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  939:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  940:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  941:	    state->discardCount[currentPlayer]++;
    #####:  942:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  943:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  944:	    }
    #####:  945:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  946:	    state->handCount[currentPlayer]--;
    #####:  947:	    card_not_discarded = 0;//Exit the loop
        -:  948:	  }
    #####:  949:	  else if (p > state->handCount[currentPlayer]){
    #####:  950:	    if(DEBUG) {
        -:  951:	      printf("No estate cards in your hand, invalid choice\n");
        -:  952:	      printf("Must gain an estate if there are any\n");
        -:  953:	    }
    #####:  954:	    if (supplyCount(estate, state) > 0){
    #####:  955:	      gainCard(estate, state, 0, currentPlayer);
    #####:  956:	      state->supplyCount[estate]--;//Decrement estates
    #####:  957:	      if (supplyCount(estate, state) == 0){
    #####:  958:		isGameOver(state);
        -:  959:	      }
        -:  960:	    }
    #####:  961:	    card_not_discarded = 0;//Exit the loop
        -:  962:	  }
        -:  963:			    
        -:  964:	  else{
    #####:  965:	    p++;//Next card
        -:  966:	  }
        -:  967:	}
        -:  968:      }
        -:  969:			    
        -:  970:      else{
    #####:  971:	if (supplyCount(estate, state) > 0){
    #####:  972:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  973:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  974:	  if (supplyCount(estate, state) == 0){
    #####:  975:	    isGameOver(state);
        -:  976:	  }
        -:  977:	}
        -:  978:      }
        -:  979:	    
        -:  980:      
    #####:  981:      return 0;
        -:  982:		
        -:  983:    case great_hall:
        -:  984:      //+1 Card
       40:  985:      drawCard(currentPlayer, state);
        -:  986:			
        -:  987:      //+1 Actions
       40:  988:      state->numActions++;
        -:  989:			
        -:  990:      //discard card from hand
       40:  991:      discardCard(handPos, currentPlayer, state, 0);
       40:  992:      return 0;
        -:  993:		
        -:  994:    case minion:
        -:  995:      //+1 action
       20:  996:      state->numActions++;
        -:  997:			
        -:  998:      //discard card from hand
       20:  999:      discardCard(handPos, currentPlayer, state, 0);
        -: 1000:			
       20: 1001:      if (choice1)		//+2 coins
        -: 1002:	{
       20: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:			
    #####: 1006:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1007:	{
        -: 1008:	  //discard hand
    #####: 1009:	  while(numHandCards(state) > 0)
        -: 1010:	    {
    #####: 1011:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1012:	    }
        -: 1013:				
        -: 1014:	  //draw 4
    #####: 1015:	  for (i = 0; i < 4; i++)
        -: 1016:	    {
    #####: 1017:	      drawCard(currentPlayer, state);
        -: 1018:	    }
        -: 1019:				
        -: 1020:	  //other players discard hand and redraw if hand size > 4
    #####: 1021:	  for (i = 0; i < state->numPlayers; i++)
        -: 1022:	    {
    #####: 1023:	      if (i != currentPlayer)
        -: 1024:		{
    #####: 1025:		  if ( state->handCount[i] > 4 )
        -: 1026:		    {
        -: 1027:		      //discard hand
    #####: 1028:		      while( state->handCount[i] > 0 )
        -: 1029:			{
    #####: 1030:			  discardCard(handPos, i, state, 0);
        -: 1031:			}
        -: 1032:							
        -: 1033:		      //draw 4
    #####: 1034:		      for (j = 0; j < 4; j++)
        -: 1035:			{
    #####: 1036:			  drawCard(i, state);
        -: 1037:			}
        -: 1038:		    }
        -: 1039:		}
        -: 1040:	    }
        -: 1041:				
        -: 1042:	}
       20: 1043:      return 0;
        -: 1044:		
        -: 1045:    case steward:
       20: 1046:      if (choice1 == 1)
        -: 1047:	{
        -: 1048:	  //+2 cards
       20: 1049:	  drawCard(currentPlayer, state);
       20: 1050:	  drawCard(currentPlayer, state);
        -: 1051:	}
    #####: 1052:      else if (choice1 == 2)
        -: 1053:	{
        -: 1054:	  //+2 coins
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:      else
        -: 1058:	{
        -: 1059:	  //trash 2 cards in hand
    #####: 1060:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1061:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1062:	}
        -: 1063:			
        -: 1064:      //discard card from hand
       20: 1065:      discardCard(handPos, currentPlayer, state, 0);
       20: 1066:      return 0;
        -: 1067:		
        -: 1068:    case tribute:
       80: 1069:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1070:	if (state->deckCount[nextPlayer] > 0){
    #####: 1071:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1072:	  state->deckCount[nextPlayer]--;
        -: 1073:	}
    #####: 1074:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1075:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1076:	  state->discardCount[nextPlayer]--;
        -: 1077:	}
        -: 1078:	else{
        -: 1079:	  //No Card to Reveal
    #####: 1080:	  if (DEBUG){
        -: 1081:	    printf("No cards to reveal\n");
        -: 1082:	  }
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
        -: 1086:      else{
       80: 1087:	if (state->deckCount[nextPlayer] == 0){
      200: 1088:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
      180: 1089:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
      180: 1090:	    state->deckCount[nextPlayer]++;
      180: 1091:	    state->discard[nextPlayer][i] = -1;
      180: 1092:	    state->discardCount[nextPlayer]--;
        -: 1093:	  }
        -: 1094:			    
       20: 1095:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1096:	} 
       80: 1097:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       80: 1098:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       80: 1099:	state->deckCount[nextPlayer]--;
       80: 1100:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       80: 1101:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       80: 1102:	state->deckCount[nextPlayer]--;
        -: 1103:      }    
        -: 1104:		       
       80: 1105:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1106:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1107:	state->playedCardCount++;
    #####: 1108:	tributeRevealedCards[1] = -1;
        -: 1109:      }
        -: 1110:
      320: 1111:      for (i = 0; i <= 2; i ++){
      300: 1112:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
       60: 1113:	  state->coins += 2;
        -: 1114:	}
        -: 1115:		    
      220: 1116:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
       40: 1117:	  drawCard(currentPlayer, state);
       40: 1118:	  drawCard(currentPlayer, state);
        -: 1119:	}
        -: 1120:	else{//Action Card
      140: 1121:	  state->numActions = state->numActions + 2;
        -: 1122:	}
        -: 1123:      }
        -: 1124:	    
       80: 1125:      return 0;
        -: 1126:		
        -: 1127:    case ambassador:
       40: 1128:      j = 0;		//used to check if player has enough cards to discard
        -: 1129:
       40: 1130:      if (choice2 > 2 || choice2 < 0)
        -: 1131:	{
    #####: 1132:	  return -1;				
        -: 1133:	}
        -: 1134:
       40: 1135:      if (choice1 == handPos)
        -: 1136:	{
    #####: 1137:	  return -1;
        -: 1138:	}
        -: 1139:
      240: 1140:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1141:	{
      200: 1142:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1143:	    {
       40: 1144:	      j++;
        -: 1145:	    }
        -: 1146:	}
       40: 1147:      if (j < choice2)
        -: 1148:	{
    #####: 1149:	  return -1;				
        -: 1150:	}
        -: 1151:
       40: 1152:      if (DEBUG) 
        -: 1153:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1154:
        -: 1155:      //increase supply count for choosen card by amount being discarded
       40: 1156:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1157:			
        -: 1158:      //each other player gains a copy of revealed card
      200: 1159:      for (i = 0; i < state->numPlayers; i++)
        -: 1160:	{
      160: 1161:	  if (i != currentPlayer)
        -: 1162:	    {
      120: 1163:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1164:	    }
        -: 1165:	}
        -: 1166:
        -: 1167:      //discard played card from hand
       40: 1168:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1169:
        -: 1170:      //trash copies of cards returned to supply
       80: 1171:      for (j = 0; j < choice2; j++)
        -: 1172:	{
       80: 1173:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1174:	    {
       80: 1175:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1176:		{
       40: 1177:		  discardCard(i, currentPlayer, state, 1);
       40: 1178:		  break;
        -: 1179:		}
        -: 1180:	    }
        -: 1181:	}			
        -: 1182:
       40: 1183:      return 0;
        -: 1184:		
        -: 1185:    case cutpurse:
        -: 1186:
     4580: 1187:      updateCoins(currentPlayer, state, 2);
    16169: 1188:      for (i = 0; i < state->numPlayers; i++)
        -: 1189:	{
    11589: 1190:	  if (i != currentPlayer)
        -: 1191:	    {
   663165: 1192:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1193:		{
   656287: 1194:		  if (state->hand[i][j] == copper)
        -: 1195:		    {
      133: 1196:		      discardCard(j, i, state, 0);
      133: 1197:		      break;
        -: 1198:		    }
   656154: 1199:		  if (j == state->handCount[i])
        -: 1200:		    {
    #####: 1201:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1202:			{
    #####: 1203:			  if (DEBUG)
        -: 1204:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1205:			}	
    #####: 1206:		      break;
        -: 1207:		    }		
        -: 1208:		}
        -: 1209:					
        -: 1210:	    }
        -: 1211:				
        -: 1212:	}				
        -: 1213:
        -: 1214:      //discard played card from hand
     4580: 1215:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1216:
     4580: 1217:      return 0;
        -: 1218:
        -: 1219:		
        -: 1220:    case embargo: 
        -: 1221:      //+2 Coins
       20: 1222:      state->coins = state->coins + 2;
        -: 1223:			
        -: 1224:      //see if selected pile is in play
       20: 1225:      if ( state->supplyCount[choice1] == -1 )
        -: 1226:	{
    #####: 1227:	  return -1;
        -: 1228:	}
        -: 1229:			
        -: 1230:      //add embargo token to selected supply pile
       20: 1231:      state->embargoTokens[choice1]++;
        -: 1232:			
        -: 1233:      //trash card
       20: 1234:      discardCard(handPos, currentPlayer, state, 1);		
       20: 1235:      return 0;
        -: 1236:		
        -: 1237:    case outpost:
        -: 1238:      //set outpost flag
       40: 1239:      state->outpostPlayed++;
        -: 1240:			
        -: 1241:      //discard card
       40: 1242:      discardCard(handPos, currentPlayer, state, 0);
       40: 1243:      return 0;
        -: 1244:		
        -: 1245:    case salvager:
        -: 1246:      //+1 buy
       40: 1247:      state->numBuys++;
        -: 1248:			
       40: 1249:      if (choice1)
        -: 1250:	{
        -: 1251:	  //gain coins equal to trashed card
       40: 1252:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1253:	  //trash card
       40: 1254:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1255:	}
        -: 1256:			
        -: 1257:      //discard card
       40: 1258:      discardCard(handPos, currentPlayer, state, 0);
       40: 1259:      return 0;
        -: 1260:		
        -: 1261:    case sea_hag:
     1700: 1262:      for (i = 0; i < state->numPlayers; i++){
     1360: 1263:	if (i != currentPlayer){
     1020: 1264:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
     1020: 1265:	  state->discardCount[i]++;
     1020: 1266:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1267:	}
        -: 1268:      }
      340: 1269:      return 0;
        -: 1270:		
        -: 1271:    case treasure_map:
        -: 1272:      //search hand for another treasure_map
       80: 1273:      index = -1;
      480: 1274:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1275:	{
      400: 1276:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1277:	    {
    #####: 1278:	      index = i;
    #####: 1279:	      break;
        -: 1280:	    }
        -: 1281:	}
       80: 1282:      if (index > -1)
        -: 1283:	{
        -: 1284:	  //trash both treasure cards
    #####: 1285:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1286:	  discardCard(index, currentPlayer, state, 1);
        -: 1287:
        -: 1288:	  //gain 4 Gold cards
    #####: 1289:	  for (i = 0; i < 4; i++)
        -: 1290:	    {
    #####: 1291:	      gainCard(gold, state, 1, currentPlayer);
        -: 1292:	    }
        -: 1293:				
        -: 1294:	  //return success
    #####: 1295:	  return 1;
        -: 1296:	}
        -: 1297:			
        -: 1298:      //no second treasure_map found in hand
       80: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
    #####: 1302:  return -1;
        -: 1303:}
        -: 1304:
        -: 1305:
     5199: 1306:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1307:{
        -: 1308:	
        -: 1309:  //if card is not trashed, added to Played pile 
     5199: 1310:  if (trashFlag < 1)
        -: 1311:    {
        -: 1312:      //add card to played pile
     5099: 1313:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5099: 1314:      state->playedCardCount++;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //set played card to -1
     5199: 1318:  state->hand[currentPlayer][handPos] = -1;
        -: 1319:	
        -: 1320:  //remove card from player's hand
     5199: 1321:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1322:    {
        -: 1323:      //reduce number of cards in hand
      263: 1324:      state->handCount[currentPlayer]--;
        -: 1325:    }
     4936: 1326:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1327:    {
        -: 1328:      //reduce number of cards in hand
    #####: 1329:      state->handCount[currentPlayer]--;
        -: 1330:    }
        -: 1331:  else 	
        -: 1332:    {
        -: 1333:      //replace discarded card with last card in hand
     4936: 1334:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1335:      //set last card to -1
     4936: 1336:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1337:      //reduce number of cards in hand
     4936: 1338:      state->handCount[currentPlayer]--;
        -: 1339:    }
        -: 1340:	
     5199: 1341:  return 0;
        -: 1342:}
        -: 1343:
    12058: 1344:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1345:{
        -: 1346:  //Note: supplyPos is enum of choosen card
        -: 1347:	
        -: 1348:  //check if supply pile is empty (0) or card is not used in game (-1)
    12058: 1349:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1350:    {
       60: 1351:      return -1;
        -: 1352:    }
        -: 1353:	
        -: 1354:  //added card for [whoseTurn] current player:
        -: 1355:  // toFlag = 0 : add to discard
        -: 1356:  // toFlag = 1 : add to deck
        -: 1357:  // toFlag = 2 : add to hand
        -: 1358:
    11998: 1359:  if (toFlag == 1)
        -: 1360:    {
    #####: 1361:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1362:      state->deckCount[player]++;
        -: 1363:    }
    11998: 1364:  else if (toFlag == 2)
        -: 1365:    {
      534: 1366:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      534: 1367:      state->handCount[player]++;
        -: 1368:    }
        -: 1369:  else
        -: 1370:    {
    11464: 1371:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    11464: 1372:      state->discardCount[player]++;
        -: 1373:    }
        -: 1374:	
        -: 1375:  //decrease number in supply pile
    11998: 1376:  state->supplyCount[supplyPos]--;
        -: 1377:	 
    11998: 1378:  return 0;
        -: 1379:}
        -: 1380:
    28050: 1381:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1382:{
        -: 1383:  int i;
        -: 1384:	
        -: 1385:  //reset coin count
    28050: 1386:  state->coins = 0;
        -: 1387:
        -: 1388:  //add coins for each Treasure card in player's hand
   941969: 1389:  for (i = 0; i < state->handCount[player]; i++)
        -: 1390:    {
   913919: 1391:      if (state->hand[player][i] == copper)
        -: 1392:	{
    66116: 1393:	  state->coins += 1;
        -: 1394:	}
   847803: 1395:      else if (state->hand[player][i] == silver)
        -: 1396:	{
    15520: 1397:	  state->coins += 2;
        -: 1398:	}
   832283: 1399:      else if (state->hand[player][i] == gold)
        -: 1400:	{
     7700: 1401:	  state->coins += 3;
        -: 1402:	}	
        -: 1403:    }	
        -: 1404:
        -: 1405:  //add bonus
    28050: 1406:  state->coins += bonus;
        -: 1407:
    28050: 1408:  return 0;
        -: 1409:}
        -: 1410:
        -: 1411:
        -: 1412://end of dominion.c
        -: 1413:
