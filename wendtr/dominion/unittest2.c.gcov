        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "assert.h"
        -:    2:#include "dominion.h"
        -:    3:#include <stdio.h>
        -:    4:#include "rngs.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:
        2:    8:int main(int argc, char** argv)
        -:    9:{
        -:   10:  struct gameState G;
        -:   11:  int r;
        2:   12:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, baron, tribute, smithy};
        2:   13:  printf("\n");
        2:   14:  printf("***Start Testing isGameOver***\n");
        -:   15:
        2:   16:  printf("Initialize Game...\n");
        2:   17:  initializeGame(2,k, 3, &G); 
        -:   18:  
        2:   19:  printf("We have 2 provinces left\n\n");
        2:   20:  G.supplyCount[province] = 2;
        2:   21:  r = isGameOver(&G);
        2:   22:  assert(r == 0);
        -:   23:
        2:   24:  printf("No more provinces left, game should be over\n\n");
        2:   25:  G.supplyCount[province] = 0;
        2:   26:  r = isGameOver(&G);
        2:   27:  assert(r == 1);
        -:   28:  
        2:   29:  G.supplyCount[province] = 3;
        -:   30:
        -:   31:  // printf("i am here %s %s %d\n", __FILE__, __FUNCTION__, __LINE__);
        2:   32:  printf("Less than 3 cards are gone, game continues:\n\n");
        2:   33:  G.supplyCount[mine] = 0;
        2:   34:  r = isGameOver(&G);
        2:   35:  assert(r == 0);
        -:   36:
        2:   37:  printf("More than 3  cards are gone, game should be over\n\n");
        2:   38:  G.supplyCount[smithy] = 0;
        2:   39:  G.supplyCount[adventurer] = 0;
        2:   40:  G.supplyCount[baron] = 0;
        2:   41:  r = isGameOver(&G);
        2:   42:  assert(r == 1);
        -:   43:
        2:   44:  printf("Tests Are Successful\n\n");
        2:   45:  return 0;
        -:   46:}
