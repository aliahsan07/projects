Name: Spencer Hubbard
Date: 6/9/15
CS 362 Project

I started with my failing unit test called cardtest2.c. This unit test fails if
the player is allowed to gain a treasure card costing > 3 more when playing the
mine card. Since this test failed, it follows that the implementation of the
mine card effect in dominion.c is wrong.

After running my unit test, I ran gcov on dominion.c to find out which lines
were executed by the unit test. This allowed my to narrow down the choices for
where I should set break points when I began debugging. I also used my tarantula
implementation for the same the same purpose. A comparison of my experience
using these two techniques is given in tarantula.txt.

I used gdb for debugging. I decided to set a break point on line 880 of
dominion.c. This line is the beginning of a case in a switch statement that is
executed when the unit test is run. I stepped through the lines in this case up
to line 892. This line is a test for an if statement that should pass for my
unit test. However, the test failed and the body of the if statement was never
executed. After taking a closer look at the if statement test, I realized that
the direction of the inequality was backwards.

After correcting the direction of the inequality, the unit test passed. This
means that I identified and corrected the bug.

Although gdb was used in the debugging process, it was not necessary. I could
have discovered this bug just as easily by more carefully reading the gcov file
or output from tarantula.

The output generated by my implementation of tarantula (before fixing the bug
described in debugging.txt) is captured in the file named tarantula.out. To view
this file, use the cat command. For example, you may type

$ cat tarantula.out

where the dollar symbol should be interpreted as the bash prompt.
