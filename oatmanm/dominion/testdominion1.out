File 'dominion1.c'
Lines executed:59.30% of 575
dominion1.c:creating 'dominion1.c.gcov'

        -:    0:Source:dominion1.c
        -:    0:Graph:dominion1.gcno
        -:    0:Data:dominion1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     1283:    8:int compare(const void* a, const void* b) {
     1283:    9:  if (*(int*)a > *(int*)b)
      620:   10:    return 1;
      663:   11:  if (*(int*)a < *(int*)b)
      275:   12:    return -1;
      388:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       11:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        1:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
       63:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       63:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       63:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       63:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      688:  214:  while (state->deckCount[player] > 0) {
      562:  215:    card = floor(Random() * state->deckCount[player]);
      562:  216:    newDeck[newDeckPos] = state->deck[player][card];
      562:  217:    newDeckPos++;
     2197:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1635:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      562:  221:    state->deckCount[player]--;
        -:  222:  }
      625:  223:  for (i = 0; i < newDeckPos; i++) {
      562:  224:    state->deck[player][i] = newDeck[i];
      562:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       63:  228:  return 0;
        -:  229:}
        -:  230:
       90:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       90:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       90:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       90:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       90:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       90:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       90:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
        6:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       84:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       84:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       84:  269:  return 0;
        -:  270:}
        -:  271:
      186:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
      186:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      186:  280:  who = state->whoseTurn;
        -:  281:
      186:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      186:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
      186:  290:  } else if (state->coins < getCost(supplyPos)){
      130:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      130:  293:    return -1;
        -:  294:  } else {
       56:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       56:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       56:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       56:  300:    state->numBuys--;
       56:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       56:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
       90:  315:int handCard(int handPos, struct gameState *state) {
       90:  316:  int currentPlayer = whoseTurn(state);
       90:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      293:  320:int supplyCount(int card, struct gameState *state) {
      293:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       10:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       10:  326:  int count = 0;
        -:  327:
       50:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
       40:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
       10:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
      220:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
      210:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       10:  343:  return count;
        -:  344:}
        -:  345:
      289:  346:int whoseTurn(struct gameState *state) {
      289:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      109:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      109:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      581:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      472:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      472:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      109:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      109:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       55:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       54:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      109:  370:  state->outpostPlayed = 0;
      109:  371:  state->phase = 0;
      109:  372:  state->numActions = 1;
      109:  373:  state->coins = 0;
      109:  374:  state->numBuys = 1;
      109:  375:  state->playedCardCount = 0;
      109:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      654:  380:  for (k = 0; k < 5; k++){
      545:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      109:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      109:  387:  return 0;
        -:  388:}
        -:  389:
      110:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      110:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      110:  401:  j = 0;
     2860:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     2750:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       90:  406:	  j++;
        -:  407:	}
        -:  408:    }
      110:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
      109:  414:  return 0;
        -:  415:}
        -:  416:
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       23:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       21:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       21:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       21:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       21:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       21:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       21:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       23:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       21:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       21:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       21:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       21:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       21:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       21:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      561:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      561:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      603:  533:    for (i = 0; i < state->discardCount[player];i++){
      542:  534:      state->deck[player][i] = state->discard[player][i];
      542:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       61:  538:    state->deckCount[player] = state->discardCount[player];
       61:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       61:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
       61:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       61:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       61:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
       61:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       61:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       61:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       61:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       61:  563:    state->deckCount[player]--;
       61:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      500:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
      500:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      500:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      500:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      500:  576:    state->deckCount[player]--;
      500:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      561:  580:  return 0;
        -:  581:}
        -:  582:
     2528:  583:int getCost(int cardNumber)
        -:  584:{
     2528:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
      181:  590:      return 2;
        -:  591:    case duchy:
      141:  592:      return 5;
        -:  593:    case province:
      125:  594:      return 8;
        -:  595:    case copper:
      265:  596:      return 0;
        -:  597:    case silver:
      227:  598:      return 3;
        -:  599:    case gold:
      164:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
      128:  606:      return 4;
        -:  607:    case gardens:
      151:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
      137:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
      160:  616:      return 3;
        -:  617:    case baron:
      134:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
      127:  622:      return 5;
        -:  623:    case steward:
      160:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
      165:  632:      return 2;
        -:  633:    case outpost:
      132:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
      131:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int card_Mine(int i, int j, int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos [], int z){
    #####:  647:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  648:
    #####:  649:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  650:	{
    #####:  651:		return -1;
        -:  652:	}
        -:  653:
    #####:  654:	if (choice2 > treasure_map || choice2 < curse)
        -:  655:	{
    #####:  656:		return -1;
        -:  657:	}
        -:  658:
    #####:  659:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2))
        -:  660:	{
    #####:  661:		return -1;
        -:  662:	}
        -:  663:
    #####:  664:	gainCard(choice2, state, 2, currentPlayer);
        -:  665:
        -:  666:	//discard card from hand
    #####:  667:	discardCard(handPos, currentPlayer, state, 0);
        -:  668:
        -:  669:	//discard trashed card
    #####:  670:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  671:	{
    #####:  672:		if (state->hand[currentPlayer][i] == j)
        -:  673:		{
    #####:  674:			discardCard(i, currentPlayer, state, 0);
    #####:  675:			break;
        -:  676:		}
        -:  677:	}
        -:  678:
    #####:  679:	return 0;
        -:  680:}
        -:  681:
        -:  682:
        4:  683:int card_Feast(int i, int x, int currentPlayer, int temphand [], struct gameState *state, int choice1, int z){
        -:  684:	//gain card with cost up to 5
        -:  685:	//Backup hand
       28:  686:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
       24:  687:		temphand[i] = state->hand[currentPlayer][i];//Backup card
       24:  688:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  689:	}
        -:  690:	//Backup hand
        -:  691:
        -:  692:	//Update Coins for Buy
        4:  693:	updateCoins(currentPlayer, state, 5);
        4:  694:	x = 1;//Condition to loop on
       12:  695:	while (x == 1) {//Buy one card
        4:  696:		if (supplyCount(choice1, state) <= 0){
    #####:  697:			if (DEBUG)
        -:  698:				printf("None of that card left, sorry!\n");
        -:  699:
    #####:  700:			if (DEBUG){
        -:  701:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  702:			}
        -:  703:		}
        4:  704:		else if (state->coins < getCost(choice1)){
    #####:  705:			printf("That card is too expensive!\n");
        -:  706:
    #####:  707:			if (DEBUG){
        -:  708:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  709:			}
        -:  710:		}
        -:  711:		else{
        -:  712:
        4:  713:			if (DEBUG){
        -:  714:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:			}
        -:  716:
        4:  717:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
        4:  718:			x = 0;//No more buying cards
        -:  719:
        4:  720:			if (DEBUG){
        -:  721:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  722:			}
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//Reset Hand
       28:  727:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
       24:  728:		state->hand[currentPlayer][i] = temphand[i];
       24:  729:		temphand[i] = 0;
        -:  730:	}
        -:  731:	//Reset Hand
        -:  732:
        4:  733:	return -1;
        -:  734:}
        -:  735:
    #####:  736:int card_Ambassador(int i, int j, int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer){
    #####:  737:	j = 0;		//used to check if player has enough cards to discard
        -:  738:
    #####:  739:	if (choice2 > 2 || choice2 < 0)
        -:  740:	{
    #####:  741:		return -1;
        -:  742:	}
        -:  743:
    #####:  744:	if (choice2 == handPos)
        -:  745:	{
    #####:  746:		return -1;
        -:  747:	}
        -:  748:
    #####:  749:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  750:	{
    #####:  751:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  752:		{
    #####:  753:			j++;
        -:  754:		}
        -:  755:	}
    #####:  756:	if (j < choice2)
        -:  757:	{
    #####:  758:		return -1;
        -:  759:	}
        -:  760:
    #####:  761:	if (DEBUG)
        -:  762:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  763:
        -:  764:	//increase supply count for choosen card by amount being discarded
    #####:  765:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  766:
        -:  767:	//each other player gains a copy of revealed card
    #####:  768:	for (i = 0; i < state->numPlayers; i++)
        -:  769:	{
    #####:  770:		if (i != currentPlayer)
        -:  771:		{
    #####:  772:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  773:		}
        -:  774:	}
        -:  775:
        -:  776:	//discard played card from hand
    #####:  777:	discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:	//trash copies of cards returned to supply
    #####:  780:	for (j = 0; j < choice2; j++)
        -:  781:	{
    #####:  782:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  783:		{
    #####:  784:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  785:			{
    #####:  786:				discardCard(i, currentPlayer, state, 1);
    #####:  787:				break;
        -:  788:			}
        -:  789:		}
        -:  790:	}
        -:  791:
    #####:  792:	return 0;
        -:  793:}
        -:  794:
        -:  795:
    #####:  796:int card_Tribute(int i, struct gameState *state, int currentPlayer, int tributeRevealedCards [], int nextPlayer){
    #####:  797:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  798:		if (state->deckCount[nextPlayer] > 0){
    #####:  799:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  800:			state->deckCount[nextPlayer]--;
        -:  801:		}
    #####:  802:		else if (state->discardCount[nextPlayer] > 0){
    #####:  803:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  804:			state->discardCount[nextPlayer]--;
        -:  805:		}
        -:  806:		else{
        -:  807:			//No Card to Reveal
    #####:  808:			if (DEBUG){
        -:  809:				printf("No cards to reveal\n");
        -:  810:			}
        -:  811:		}
        -:  812:	}
        -:  813:
        -:  814:	else{
    #####:  815:		if (state->deckCount[nextPlayer] == 0){
    #####:  816:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  817:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  818:				state->deckCount[nextPlayer]++;
    #####:  819:				state->discard[nextPlayer][i] = -1;
    #####:  820:				state->discardCount[nextPlayer]--;
        -:  821:			}
        -:  822:
    #####:  823:			shuffle(nextPlayer, state);//Shuffle the deck
        -:  824:		}
    #####:  825:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  826:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  827:		state->deckCount[nextPlayer]--;
    #####:  828:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  829:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  830:		state->deckCount[nextPlayer]--;
        -:  831:	}
        -:  832:
    #####:  833:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  834:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  835:		state->playedCardCount++;
    #####:  836:		tributeRevealedCards[1] = -1;
        -:  837:	}
        -:  838:
    #####:  839:	for (i = 0; i <= 2; i++){
    #####:  840:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  841:			state->coins += 2;
        -:  842:		}
        -:  843:
    #####:  844:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  845:			drawCard(currentPlayer, state);
    #####:  846:			drawCard(currentPlayer, state);
        -:  847:		}
        -:  848:		else{//Action Card
    #####:  849:			state->numActions = state->numActions + 2;
        -:  850:		}
        -:  851:	}
        -:  852:
    #####:  853:	return 0;
        -:  854:}
        -:  855:
       42:  856:int card_Baron(int i, int choice1, struct gameState *state, int currentPlayer){
       42:  857:	state->numBuys++;//Increase buys by 1!
       42:  858:	if (choice1 > 0){//Boolean true or going to discard an estate
       23:  859:		int p = 0;//Iterator for hand!
       23:  860:		int card_not_discarded = 1;//Flag for discard set!
      112:  861:		while (card_not_discarded){
       66:  862:			if (state->hand[currentPlayer][p] == estate){//Found an estate card!
       19:  863:				state->coins += 4;//Add 4 coins to the amount of coins
       19:  864:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
       19:  865:				state->discardCount[currentPlayer]++;
       95:  866:				for (; p < state->handCount[currentPlayer]; p++){
       76:  867:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  868:				}
       19:  869:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
       19:  870:				state->handCount[currentPlayer]--;
       19:  871:				card_not_discarded = 0;//Exit the loop
        -:  872:			}
       47:  873:			else if (p > state->handCount[currentPlayer]){
        4:  874:				if (DEBUG) {
        -:  875:					printf("No estate cards in your hand, invalid choice\n");
        -:  876:					printf("Must gain an estate if there are any\n");
        -:  877:				}
        4:  878:				if (supplyCount(estate, state) > 0){
    #####:  879:					gainCard(estate, state, 0, currentPlayer);
    #####:  880:					state->supplyCount[estate]--;//Decrement estates
    #####:  881:					if (supplyCount(estate, state) == 0){
    #####:  882:						isGameOver(state);
        -:  883:					}
        -:  884:				}
        4:  885:				card_not_discarded = 0;//Exit the loop
        -:  886:			}
        -:  887:
        -:  888:			else{
       43:  889:				p++;//Next card
        -:  890:			}
        -:  891:		}
        -:  892:	}
        -:  893:
        -:  894:	else{
       19:  895:		if (supplyCount(estate, state) > 0){
        4:  896:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
        4:  897:			state->supplyCount[estate]--;//Decrement Estates
        4:  898:			if (supplyCount(estate, state) == 0){
    #####:  899:				isGameOver(state);
        -:  900:			}
        -:  901:		}
        -:  902:	}
        -:  903:
       42:  904:	return 0;
        -:  905:}
        -:  906:
       90:  907:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  908:{
        -:  909:  int i;
        -:  910:  int j;
        -:  911:  int k;
        -:  912:  int x;
        -:  913:  int index;
       90:  914:  int currentPlayer = whoseTurn(state);
       90:  915:  int nextPlayer = currentPlayer + 1;
        -:  916:
       90:  917:  int tributeRevealedCards[2] = {-1, -1};
        -:  918:  int temphand[MAX_HAND];// moved above the if statement
       90:  919:  int drawntreasure=0;
        -:  920:  int cardDrawn;
       90:  921:  int z = 0;// this is the counter for the temp hand
       90:  922:  if (nextPlayer > (state->numPlayers - 1)){
       42:  923:    nextPlayer = 0;
        -:  924:  }
        -:  925:  
        -:  926:	
        -:  927:  //uses switch to select card and perform actions
       90:  928:  switch( card ) 
        -:  929:    {
        -:  930:	//Refactored card #1
        -:  931:	case mine:
    #####:  932:		return card_Mine(i, j, choice1, choice2, state, currentPlayer, handPos, z);
        -:  933:
        -:  934:	//Refactored card #2
        -:  935:	case feast:
        4:  936:		return card_Feast(i, x,currentPlayer, temphand, state, choice1, z);
        -:  937:
        -:  938:	//Refactored card #3
        -:  939:	case ambassador:
    #####:  940:		return card_Ambassador(i, j, choice1, choice2, handPos, state, currentPlayer);
        -:  941:
        -:  942:	//Refactored card #4
        -:  943:	case tribute:
    #####:  944:		return card_Tribute(i, state, currentPlayer, tributeRevealedCards, nextPlayer);
        -:  945:
        -:  946:	//Refactored card #5
        -:  947:	case baron:
       42:  948:		return card_Baron(i, choice1, state, currentPlayer);
        -:  949:
        -:  950:    case adventurer:
    #####:  951:      while(drawntreasure<2){
    #####:  952:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  953:	  shuffle(currentPlayer, state);
        -:  954:	}
    #####:  955:	drawCard(currentPlayer, state);
    #####:  956:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  957:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  958:	  drawntreasure++;
        -:  959:	else{
    #####:  960:	  temphand[z]=cardDrawn;
    #####:  961:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  962:	  z++;
        -:  963:	}
        -:  964:      }
    #####:  965:      while(z-1>=0){
    #####:  966:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  967:	z=z-1;
        -:  968:      }
    #####:  969:      return 0;
        -:  970:			
        -:  971:    case council_room:
        -:  972:      //+4 Cards
    #####:  973:      for (i = 0; i < 4; i++)
        -:  974:	{
    #####:  975:	  drawCard(currentPlayer, state);
        -:  976:	}
        -:  977:			
        -:  978:      //+1 Buy
    #####:  979:      state->numBuys++;
        -:  980:			
        -:  981:      //Each other player draws a card
    #####:  982:      for (i = 0; i < state->numPlayers; i++)
        -:  983:	{
    #####:  984:	  if ( i != currentPlayer )
        -:  985:	    {
    #####:  986:	      drawCard(i, state);
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      //put played card in played card pile
    #####:  991:      discardCard(handPos, currentPlayer, state, 0);
        -:  992:			
    #####:  993:      return 0;
        -:  994:				
        -:  995:    case gardens:
    #####:  996:      return -1;
        -:  997:			
        -:  998:    case remodel:
        8:  999:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1000:
        8: 1001:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
        -: 1002:	{
    #####: 1003:	  return -1;
        -: 1004:	}
        -: 1005:
        8: 1006:      gainCard(choice2, state, 0, currentPlayer);
        -: 1007:
        -: 1008:      //discard card from hand
        8: 1009:      discardCard(handPos, currentPlayer, state, 0);
        -: 1010:
        -: 1011:      //discard trashed card
       17: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1013:	{
       17: 1014:	  if (state->hand[currentPlayer][i] == j)
        -: 1015:	    {
        8: 1016:	      discardCard(i, currentPlayer, state, 0);			
        8: 1017:	      break;
        -: 1018:	    }
        -: 1019:	}
        -: 1020:
        -: 1021:
        8: 1022:      return 0;
        -: 1023:		
        -: 1024:    case smithy:
        -: 1025:      //+3 Cards
    #####: 1026:      for (i = 0; i < 3; i++)
        -: 1027:	{
    #####: 1028:	  drawCard(currentPlayer, state);
        -: 1029:	}
        -: 1030:			
        -: 1031:      //discard card from hand
    #####: 1032:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case village:
        -: 1036:      //+1 Card
        9: 1037:      drawCard(currentPlayer, state);
        -: 1038:			
        -: 1039:      //+2 Actions
        9: 1040:      state->numActions = state->numActions + 2;
        -: 1041:			
        -: 1042:      //discard played card from hand
        9: 1043:      discardCard(handPos, currentPlayer, state, 0);
        9: 1044:      return 0;
        -: 1045:	
        -: 1046:		
        -: 1047:    case great_hall:
        -: 1048:      //+1 Card
    #####: 1049:      drawCard(currentPlayer, state);
        -: 1050:			
        -: 1051:      //+1 Actions
    #####: 1052:      state->numActions++;
        -: 1053:			
        -: 1054:      //discard card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case minion:
        -: 1059:      //+1 action
        1: 1060:      state->numActions++;
        -: 1061:			
        -: 1062:      //discard card from hand
        1: 1063:      discardCard(handPos, currentPlayer, state, 0);
        -: 1064:			
        1: 1065:      if (choice1)		//+2 coins
        -: 1066:	{
        1: 1067:	  state->coins = state->coins + 2;
        -: 1068:	}
        -: 1069:			
    #####: 1070:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1071:	{
        -: 1072:	  //discard hand
    #####: 1073:	  while(numHandCards(state) > 0)
        -: 1074:	    {
    #####: 1075:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1076:	    }
        -: 1077:				
        -: 1078:	  //draw 4
    #####: 1079:	  for (i = 0; i < 4; i++)
        -: 1080:	    {
    #####: 1081:	      drawCard(currentPlayer, state);
        -: 1082:	    }
        -: 1083:				
        -: 1084:	  //other players discard hand and redraw if hand size > 4
    #####: 1085:	  for (i = 0; i < state->numPlayers; i++)
        -: 1086:	    {
    #####: 1087:	      if (i != currentPlayer)
        -: 1088:		{
    #####: 1089:		  if ( state->handCount[i] > 4 )
        -: 1090:		    {
        -: 1091:		      //discard hand
    #####: 1092:		      while( state->handCount[i] > 0 )
        -: 1093:			{
    #####: 1094:			  discardCard(handPos, i, state, 0);
        -: 1095:			}
        -: 1096:							
        -: 1097:		      //draw 4
    #####: 1098:		      for (j = 0; j < 4; j++)
        -: 1099:			{
    #####: 1100:			  drawCard(i, state);
        -: 1101:			}
        -: 1102:		    }
        -: 1103:		}
        -: 1104:	    }
        -: 1105:				
        -: 1106:	}
        1: 1107:      return 0;
        -: 1108:		
        -: 1109:    case steward:
       10: 1110:      if (choice1 == 1)
        -: 1111:	{
        -: 1112:	  //+2 cards
        1: 1113:	  drawCard(currentPlayer, state);
        1: 1114:	  drawCard(currentPlayer, state);
        -: 1115:	}
        9: 1116:      else if (choice1 == 2)
        -: 1117:	{
        -: 1118:	  //+2 coins
        2: 1119:	  state->coins = state->coins + 2;
        -: 1120:	}
        -: 1121:      else
        -: 1122:	{
        -: 1123:	  //trash 2 cards in hand
        7: 1124:	  discardCard(choice2, currentPlayer, state, 1);
        7: 1125:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1126:	}
        -: 1127:			
        -: 1128:      //discard card from hand
       10: 1129:      discardCard(handPos, currentPlayer, state, 0);
       10: 1130:      return 0;
        -: 1131:		
        -: 1132:
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	     {
    #####: 1138:	       if (i != currentPlayer)
        -: 1139:	       {
    #####: 1140:	        for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		      {
    #####: 1142:		       if (state->hand[i][j] == copper)
        -: 1143:		     {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
    #####: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
       10: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
       10: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
       10: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
       10: 1182:      discardCard(handPos, currentPlayer, state, 1);		
       10: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
        3: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
        3: 1190:      discardCard(handPos, currentPlayer, state, 0);
        3: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
    #####: 1195:      state->numBuys++;
        -: 1196:			
    #####: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
    #####: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
    #####: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
    #####: 1206:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
        3: 1221:      index = -1;
       15: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
       13: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
        1: 1226:	      index = i;
        1: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
        3: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
        1: 1233:	  discardCard(handPos, currentPlayer, state, 1);
        1: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
        5: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
        4: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
        1: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
        2: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
       65: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
       65: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
       39: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       39: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
       65: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
       65: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
        8: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
       57: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
       57: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
       57: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
       57: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
       65: 1287:  return 0;
        -: 1288:}
        -: 1289:
       76: 1290:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1291:{
        -: 1292:  //Note: supplyPos is enum of choosen card
        -: 1293:	
        -: 1294:  //check if supply pile is empty (0) or card is not used in game (-1)
       76: 1295:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1296:    {
    #####: 1297:      return -1;
        -: 1298:    }
        -: 1299:	
        -: 1300:  //added card for [whoseTurn] current player:
        -: 1301:  // toFlag = 0 : add to discard
        -: 1302:  // toFlag = 1 : add to deck
        -: 1303:  // toFlag = 2 : add to hand
        -: 1304:
       76: 1305:  if (toFlag == 1)
        -: 1306:    {
        4: 1307:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1308:      state->deckCount[player]++;
        -: 1309:    }
       72: 1310:  else if (toFlag == 2)
        -: 1311:    {
    #####: 1312:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1313:      state->handCount[player]++;
        -: 1314:    }
        -: 1315:  else
        -: 1316:    {
       72: 1317:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       72: 1318:      state->discardCount[player]++;
        -: 1319:    }
        -: 1320:	
        -: 1321:  //decrease number in supply pile
       76: 1322:  state->supplyCount[supplyPos]--;
        -: 1323:	 
       76: 1324:  return 0;
        -: 1325:}
        -: 1326:
      198: 1327:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1328:{
        -: 1329:  int i;
        -: 1330:	
        -: 1331:  //reset coin count
      198: 1332:  state->coins = 0;
        -: 1333:
        -: 1334:  //add coins for each Treasure card in player's hand
     1115: 1335:  for (i = 0; i < state->handCount[player]; i++)
        -: 1336:    {
      917: 1337:      if (state->hand[player][i] == copper)
        -: 1338:	     {
      255: 1339:	        state->coins += 1;
        -: 1340:	     }
      662: 1341:      else if (state->hand[player][i] == silver)
        -: 1342:	     {
       75: 1343:	       state->coins += 2;
        -: 1344:	     }
      587: 1345:      else if (state->hand[player][i] == gold)
        -: 1346:	     {
       26: 1347:      	  state->coins += 3;
        -: 1348:	     }	
        -: 1349:    }	
        -: 1350:
        -: 1351:  //add bonus
      198: 1352:  state->coins += bonus;
        -: 1353:
      198: 1354:  return 0;
        -: 1355:}
        -: 1356:
        -: 1357:
        -: 1358://end of dominion.c
        -: 1359:
File 'dominion1.c'
Lines executed:67.13% of 575
dominion1.c:creating 'dominion1.c.gcov'

        -:    0:Source:dominion1.c
        -:    0:Graph:dominion1.gcno
        -:    0:Data:dominion1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     2348:    8:int compare(const void* a, const void* b) {
     2348:    9:  if (*(int*)a > *(int*)b)
     1121:   10:    return 1;
     1227:   11:  if (*(int*)a < *(int*)b)
      433:   12:    return -1;
      794:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
        2:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       21:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        1:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       19:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        6:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        4:  140:      state->deckCount[i] = 0;
       16:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       12:  143:	  state->deck[i][j] = estate;
       12:  144:	  state->deckCount[i]++;
        -:  145:	}
       32:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       28:  148:	  state->deck[i][j] = copper;
       28:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        6:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        4:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        6:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        4:  166:      state->handCount[i] = 0;
        4:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
       10:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
       58:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       58:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       58:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       58:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      960:  214:  while (state->deckCount[player] > 0) {
      844:  215:    card = floor(Random() * state->deckCount[player]);
      844:  216:    newDeck[newDeckPos] = state->deck[player][card];
      844:  217:    newDeckPos++;
     4030:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     3186:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      844:  221:    state->deckCount[player]--;
        -:  222:  }
      902:  223:  for (i = 0; i < newDeckPos; i++) {
      844:  224:    state->deck[player][i] = newDeck[i];
      844:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       58:  228:  return 0;
        -:  229:}
        -:  230:
      161:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      161:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      161:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      161:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      161:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      161:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      161:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       81:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       80:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       80:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       80:  269:  return 0;
        -:  270:}
        -:  271:
      126:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
      126:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      126:  280:  who = state->whoseTurn;
        -:  281:
      126:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      126:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
      126:  290:  } else if (state->coins < getCost(supplyPos)){
       20:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       20:  293:    return -1;
        -:  294:  } else {
      106:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      106:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      106:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      106:  300:    state->numBuys--;
      106:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      106:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      166:  315:int handCard(int handPos, struct gameState *state) {
      166:  316:  int currentPlayer = whoseTurn(state);
      166:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      321:  320:int supplyCount(int card, struct gameState *state) {
      321:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      477:  346:int whoseTurn(struct gameState *state) {
      477:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      150:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      150:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      846:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      696:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      696:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      150:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      150:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       75:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       75:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      150:  370:  state->outpostPlayed = 0;
      150:  371:  state->phase = 0;
      150:  372:  state->numActions = 1;
      150:  373:  state->coins = 0;
      150:  374:  state->numBuys = 1;
      150:  375:  state->playedCardCount = 0;
      150:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      900:  380:  for (k = 0; k < 5; k++){
      750:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      150:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      150:  387:  return 0;
        -:  388:}
        -:  389:
      152:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      152:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      152:  401:  j = 0;
     3952:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     3800:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      183:  406:	  j++;
        -:  407:	}
        -:  408:    }
      152:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
      150:  414:  return 0;
        -:  415:}
        -:  416:
        4:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        4:  420:  int score = 0;
        -:  421:  //score from hand
       14:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       10:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       10:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       10:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       10:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       10:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       10:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       50:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       46:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       46:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       46:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       46:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       46:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       46:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       50:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       46:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       46:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       46:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       46:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       46:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       46:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        4:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      798:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      798:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      858:  533:    for (i = 0; i < state->discardCount[player];i++){
      804:  534:      state->deck[player][i] = state->discard[player][i];
      804:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       54:  538:    state->deckCount[player] = state->discardCount[player];
       54:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       54:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
       54:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       54:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       54:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
       54:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       54:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       54:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       54:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       54:  563:    state->deckCount[player]--;
       54:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      744:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
      744:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      744:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      744:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      744:  576:    state->deckCount[player]--;
      744:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      798:  580:  return 0;
        -:  581:}
        -:  582:
     3903:  583:int getCost(int cardNumber)
        -:  584:{
     3903:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
      334:  590:      return 2;
        -:  591:    case duchy:
      237:  592:      return 5;
        -:  593:    case province:
      196:  594:      return 8;
        -:  595:    case copper:
      404:  596:      return 0;
        -:  597:    case silver:
      321:  598:      return 3;
        -:  599:    case gold:
      212:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
       95:  604:      return 5;
        -:  605:    case feast:
      115:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
      201:  610:      return 5;
        -:  611:    case remodel:
      214:  612:      return 4;
        -:  613:    case smithy:
      104:  614:      return 4;
        -:  615:    case village:
      111:  616:      return 3;
        -:  617:    case baron:
      109:  618:      return 4;
        -:  619:    case great_hall:
      128:  620:      return 3;
        -:  621:    case minion:
      111:  622:      return 5;
        -:  623:    case steward:
      225:  624:      return 3;
        -:  625:    case tribute:
      128:  626:      return 5;
        -:  627:    case ambassador:
      119:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
      240:  632:      return 2;
        -:  633:    case outpost:
       94:  634:      return 5;
        -:  635:    case salvager:
      106:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
       99:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int card_Mine(int i, int j, int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos [], int z){
    #####:  647:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  648:
    #####:  649:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  650:	{
    #####:  651:		return -1;
        -:  652:	}
        -:  653:
    #####:  654:	if (choice2 > treasure_map || choice2 < curse)
        -:  655:	{
    #####:  656:		return -1;
        -:  657:	}
        -:  658:
    #####:  659:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2))
        -:  660:	{
    #####:  661:		return -1;
        -:  662:	}
        -:  663:
    #####:  664:	gainCard(choice2, state, 2, currentPlayer);
        -:  665:
        -:  666:	//discard card from hand
    #####:  667:	discardCard(handPos, currentPlayer, state, 0);
        -:  668:
        -:  669:	//discard trashed card
    #####:  670:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  671:	{
    #####:  672:		if (state->hand[currentPlayer][i] == j)
        -:  673:		{
    #####:  674:			discardCard(i, currentPlayer, state, 0);
    #####:  675:			break;
        -:  676:		}
        -:  677:	}
        -:  678:
    #####:  679:	return 0;
        -:  680:}
        -:  681:
        -:  682:
       37:  683:int card_Feast(int i, int x, int currentPlayer, int temphand [], struct gameState *state, int choice1, int z){
        -:  684:	//gain card with cost up to 5
        -:  685:	//Backup hand
      262:  686:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
      225:  687:		temphand[i] = state->hand[currentPlayer][i];//Backup card
      225:  688:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  689:	}
        -:  690:	//Backup hand
        -:  691:
        -:  692:	//Update Coins for Buy
       37:  693:	updateCoins(currentPlayer, state, 5);
       37:  694:	x = 1;//Condition to loop on
      111:  695:	while (x == 1) {//Buy one card
       37:  696:		if (supplyCount(choice1, state) <= 0){
    #####:  697:			if (DEBUG)
        -:  698:				printf("None of that card left, sorry!\n");
        -:  699:
    #####:  700:			if (DEBUG){
        -:  701:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  702:			}
        -:  703:		}
       37:  704:		else if (state->coins < getCost(choice1)){
    #####:  705:			printf("That card is too expensive!\n");
        -:  706:
    #####:  707:			if (DEBUG){
        -:  708:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  709:			}
        -:  710:		}
        -:  711:		else{
        -:  712:
       37:  713:			if (DEBUG){
        -:  714:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:			}
        -:  716:
       37:  717:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
       37:  718:			x = 0;//No more buying cards
        -:  719:
       37:  720:			if (DEBUG){
        -:  721:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  722:			}
        -:  723:		}
        -:  724:	}
        -:  725:
        -:  726:	//Reset Hand
      262:  727:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
      225:  728:		state->hand[currentPlayer][i] = temphand[i];
      225:  729:		temphand[i] = 0;
        -:  730:	}
        -:  731:	//Reset Hand
        -:  732:
       37:  733:	return -1;
        -:  734:}
        -:  735:
        8:  736:int card_Ambassador(int i, int j, int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer){
        8:  737:	j = 0;		//used to check if player has enough cards to discard
        -:  738:
        8:  739:	if (choice2 > 2 || choice2 < 0)
        -:  740:	{
    #####:  741:		return -1;
        -:  742:	}
        -:  743:
        8:  744:	if (choice2 == handPos)
        -:  745:	{
        1:  746:		return -1;
        -:  747:	}
        -:  748:
       42:  749:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  750:	{
       35:  751:		if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  752:		{
        2:  753:			j++;
        -:  754:		}
        -:  755:	}
        7:  756:	if (j < choice2)
        -:  757:	{
        4:  758:		return -1;
        -:  759:	}
        -:  760:
        3:  761:	if (DEBUG)
        -:  762:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  763:
        -:  764:	//increase supply count for choosen card by amount being discarded
        3:  765:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  766:
        -:  767:	//each other player gains a copy of revealed card
        9:  768:	for (i = 0; i < state->numPlayers; i++)
        -:  769:	{
        6:  770:		if (i != currentPlayer)
        -:  771:		{
        3:  772:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  773:		}
        -:  774:	}
        -:  775:
        -:  776:	//discard played card from hand
        3:  777:	discardCard(handPos, currentPlayer, state, 0);
        -:  778:
        -:  779:	//trash copies of cards returned to supply
        5:  780:	for (j = 0; j < choice2; j++)
        -:  781:	{
        3:  782:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  783:		{
        3:  784:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  785:			{
        2:  786:				discardCard(i, currentPlayer, state, 1);
        2:  787:				break;
        -:  788:			}
        -:  789:		}
        -:  790:	}
        -:  791:
        3:  792:	return 0;
        -:  793:}
        -:  794:
        -:  795:
        8:  796:int card_Tribute(int i, struct gameState *state, int currentPlayer, int tributeRevealedCards [], int nextPlayer){
        8:  797:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        1:  798:		if (state->deckCount[nextPlayer] > 0){
    #####:  799:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  800:			state->deckCount[nextPlayer]--;
        -:  801:		}
        1:  802:		else if (state->discardCount[nextPlayer] > 0){
        1:  803:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
        1:  804:			state->discardCount[nextPlayer]--;
        -:  805:		}
        -:  806:		else{
        -:  807:			//No Card to Reveal
    #####:  808:			if (DEBUG){
        -:  809:				printf("No cards to reveal\n");
        -:  810:			}
        -:  811:		}
        -:  812:	}
        -:  813:
        -:  814:	else{
        7:  815:		if (state->deckCount[nextPlayer] == 0){
    #####:  816:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  817:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  818:				state->deckCount[nextPlayer]++;
    #####:  819:				state->discard[nextPlayer][i] = -1;
    #####:  820:				state->discardCount[nextPlayer]--;
        -:  821:			}
        -:  822:
    #####:  823:			shuffle(nextPlayer, state);//Shuffle the deck
        -:  824:		}
        7:  825:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        7:  826:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        7:  827:		state->deckCount[nextPlayer]--;
        7:  828:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        7:  829:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        7:  830:		state->deckCount[nextPlayer]--;
        -:  831:	}
        -:  832:
        8:  833:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        5:  834:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        5:  835:		state->playedCardCount++;
        5:  836:		tributeRevealedCards[1] = -1;
        -:  837:	}
        -:  838:
       32:  839:	for (i = 0; i <= 2; i++){
       27:  840:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        3:  841:			state->coins += 2;
        -:  842:		}
        -:  843:
       22:  844:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        1:  845:			drawCard(currentPlayer, state);
        1:  846:			drawCard(currentPlayer, state);
        -:  847:		}
        -:  848:		else{//Action Card
       20:  849:			state->numActions = state->numActions + 2;
        -:  850:		}
        -:  851:	}
        -:  852:
        8:  853:	return 0;
        -:  854:}
        -:  855:
        3:  856:int card_Baron(int i, int choice1, struct gameState *state, int currentPlayer){
        3:  857:	state->numBuys++;//Increase buys by 1!
        3:  858:	if (choice1 > 0){//Boolean true or going to discard an estate
        1:  859:		int p = 0;//Iterator for hand!
        1:  860:		int card_not_discarded = 1;//Flag for discard set!
        9:  861:		while (card_not_discarded){
        7:  862:			if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  863:				state->coins += 4;//Add 4 coins to the amount of coins
    #####:  864:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  865:				state->discardCount[currentPlayer]++;
    #####:  866:				for (; p < state->handCount[currentPlayer]; p++){
    #####:  867:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  868:				}
    #####:  869:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  870:				state->handCount[currentPlayer]--;
    #####:  871:				card_not_discarded = 0;//Exit the loop
        -:  872:			}
        7:  873:			else if (p > state->handCount[currentPlayer]){
        1:  874:				if (DEBUG) {
        -:  875:					printf("No estate cards in your hand, invalid choice\n");
        -:  876:					printf("Must gain an estate if there are any\n");
        -:  877:				}
        1:  878:				if (supplyCount(estate, state) > 0){
    #####:  879:					gainCard(estate, state, 0, currentPlayer);
    #####:  880:					state->supplyCount[estate]--;//Decrement estates
    #####:  881:					if (supplyCount(estate, state) == 0){
    #####:  882:						isGameOver(state);
        -:  883:					}
        -:  884:				}
        1:  885:				card_not_discarded = 0;//Exit the loop
        -:  886:			}
        -:  887:
        -:  888:			else{
        6:  889:				p++;//Next card
        -:  890:			}
        -:  891:		}
        -:  892:	}
        -:  893:
        -:  894:	else{
        2:  895:		if (supplyCount(estate, state) > 0){
    #####:  896:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  897:			state->supplyCount[estate]--;//Decrement Estates
    #####:  898:			if (supplyCount(estate, state) == 0){
    #####:  899:				isGameOver(state);
        -:  900:			}
        -:  901:		}
        -:  902:	}
        -:  903:
        3:  904:	return 0;
        -:  905:}
        -:  906:
      161:  907:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  908:{
        -:  909:  int i;
        -:  910:  int j;
        -:  911:  int k;
        -:  912:  int x;
        -:  913:  int index;
      161:  914:  int currentPlayer = whoseTurn(state);
      161:  915:  int nextPlayer = currentPlayer + 1;
        -:  916:
      161:  917:  int tributeRevealedCards[2] = {-1, -1};
        -:  918:  int temphand[MAX_HAND];// moved above the if statement
      161:  919:  int drawntreasure=0;
        -:  920:  int cardDrawn;
      161:  921:  int z = 0;// this is the counter for the temp hand
      161:  922:  if (nextPlayer > (state->numPlayers - 1)){
       49:  923:    nextPlayer = 0;
        -:  924:  }
        -:  925:  
        -:  926:	
        -:  927:  //uses switch to select card and perform actions
      161:  928:  switch( card ) 
        -:  929:    {
        -:  930:	//Refactored card #1
        -:  931:	case mine:
    #####:  932:		return card_Mine(i, j, choice1, choice2, state, currentPlayer, handPos, z);
        -:  933:
        -:  934:	//Refactored card #2
        -:  935:	case feast:
       37:  936:		return card_Feast(i, x,currentPlayer, temphand, state, choice1, z);
        -:  937:
        -:  938:	//Refactored card #3
        -:  939:	case ambassador:
        8:  940:		return card_Ambassador(i, j, choice1, choice2, handPos, state, currentPlayer);
        -:  941:
        -:  942:	//Refactored card #4
        -:  943:	case tribute:
        8:  944:		return card_Tribute(i, state, currentPlayer, tributeRevealedCards, nextPlayer);
        -:  945:
        -:  946:	//Refactored card #5
        -:  947:	case baron:
        3:  948:		return card_Baron(i, choice1, state, currentPlayer);
        -:  949:
        -:  950:    case adventurer:
    #####:  951:      while(drawntreasure<2){
    #####:  952:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  953:	  shuffle(currentPlayer, state);
        -:  954:	}
    #####:  955:	drawCard(currentPlayer, state);
    #####:  956:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  957:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  958:	  drawntreasure++;
        -:  959:	else{
    #####:  960:	  temphand[z]=cardDrawn;
    #####:  961:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  962:	  z++;
        -:  963:	}
        -:  964:      }
    #####:  965:      while(z-1>=0){
    #####:  966:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  967:	z=z-1;
        -:  968:      }
    #####:  969:      return 0;
        -:  970:			
        -:  971:    case council_room:
        -:  972:      //+4 Cards
        5:  973:      for (i = 0; i < 4; i++)
        -:  974:	{
        4:  975:	  drawCard(currentPlayer, state);
        -:  976:	}
        -:  977:			
        -:  978:      //+1 Buy
        1:  979:      state->numBuys++;
        -:  980:			
        -:  981:      //Each other player draws a card
        3:  982:      for (i = 0; i < state->numPlayers; i++)
        -:  983:	{
        2:  984:	  if ( i != currentPlayer )
        -:  985:	    {
        1:  986:	      drawCard(i, state);
        -:  987:	    }
        -:  988:	}
        -:  989:			
        -:  990:      //put played card in played card pile
        1:  991:      discardCard(handPos, currentPlayer, state, 0);
        -:  992:			
        1:  993:      return 0;
        -:  994:				
        -:  995:    case gardens:
    #####:  996:      return -1;
        -:  997:			
        -:  998:    case remodel:
        9:  999:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1000:
        9: 1001:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
        -: 1002:	{
    #####: 1003:	  return -1;
        -: 1004:	}
        -: 1005:
        9: 1006:      gainCard(choice2, state, 0, currentPlayer);
        -: 1007:
        -: 1008:      //discard card from hand
        9: 1009:      discardCard(handPos, currentPlayer, state, 0);
        -: 1010:
        -: 1011:      //discard trashed card
       13: 1012:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1013:	{
       13: 1014:	  if (state->hand[currentPlayer][i] == j)
        -: 1015:	    {
        9: 1016:	      discardCard(i, currentPlayer, state, 0);			
        9: 1017:	      break;
        -: 1018:	    }
        -: 1019:	}
        -: 1020:
        -: 1021:
        9: 1022:      return 0;
        -: 1023:		
        -: 1024:    case smithy:
        -: 1025:      //+3 Cards
       24: 1026:      for (i = 0; i < 3; i++)
        -: 1027:	{
       18: 1028:	  drawCard(currentPlayer, state);
        -: 1029:	}
        -: 1030:			
        -: 1031:      //discard card from hand
        6: 1032:      discardCard(handPos, currentPlayer, state, 0);
        6: 1033:      return 0;
        -: 1034:		
        -: 1035:    case village:
        -: 1036:      //+1 Card
        7: 1037:      drawCard(currentPlayer, state);
        -: 1038:			
        -: 1039:      //+2 Actions
        7: 1040:      state->numActions = state->numActions + 2;
        -: 1041:			
        -: 1042:      //discard played card from hand
        7: 1043:      discardCard(handPos, currentPlayer, state, 0);
        7: 1044:      return 0;
        -: 1045:	
        -: 1046:		
        -: 1047:    case great_hall:
        -: 1048:      //+1 Card
    #####: 1049:      drawCard(currentPlayer, state);
        -: 1050:			
        -: 1051:      //+1 Actions
    #####: 1052:      state->numActions++;
        -: 1053:			
        -: 1054:      //discard card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case minion:
        -: 1059:      //+1 action
        4: 1060:      state->numActions++;
        -: 1061:			
        -: 1062:      //discard card from hand
        4: 1063:      discardCard(handPos, currentPlayer, state, 0);
        -: 1064:			
        4: 1065:      if (choice1)		//+2 coins
        -: 1066:	{
        4: 1067:	  state->coins = state->coins + 2;
        -: 1068:	}
        -: 1069:			
    #####: 1070:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1071:	{
        -: 1072:	  //discard hand
    #####: 1073:	  while(numHandCards(state) > 0)
        -: 1074:	    {
    #####: 1075:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1076:	    }
        -: 1077:				
        -: 1078:	  //draw 4
    #####: 1079:	  for (i = 0; i < 4; i++)
        -: 1080:	    {
    #####: 1081:	      drawCard(currentPlayer, state);
        -: 1082:	    }
        -: 1083:				
        -: 1084:	  //other players discard hand and redraw if hand size > 4
    #####: 1085:	  for (i = 0; i < state->numPlayers; i++)
        -: 1086:	    {
    #####: 1087:	      if (i != currentPlayer)
        -: 1088:		{
    #####: 1089:		  if ( state->handCount[i] > 4 )
        -: 1090:		    {
        -: 1091:		      //discard hand
    #####: 1092:		      while( state->handCount[i] > 0 )
        -: 1093:			{
    #####: 1094:			  discardCard(handPos, i, state, 0);
        -: 1095:			}
        -: 1096:							
        -: 1097:		      //draw 4
    #####: 1098:		      for (j = 0; j < 4; j++)
        -: 1099:			{
    #####: 1100:			  drawCard(i, state);
        -: 1101:			}
        -: 1102:		    }
        -: 1103:		}
        -: 1104:	    }
        -: 1105:				
        -: 1106:	}
        4: 1107:      return 0;
        -: 1108:		
        -: 1109:    case steward:
       14: 1110:      if (choice1 == 1)
        -: 1111:	{
        -: 1112:	  //+2 cards
        3: 1113:	  drawCard(currentPlayer, state);
        3: 1114:	  drawCard(currentPlayer, state);
        -: 1115:	}
       11: 1116:      else if (choice1 == 2)
        -: 1117:	{
        -: 1118:	  //+2 coins
        8: 1119:	  state->coins = state->coins + 2;
        -: 1120:	}
        -: 1121:      else
        -: 1122:	{
        -: 1123:	  //trash 2 cards in hand
        3: 1124:	  discardCard(choice2, currentPlayer, state, 1);
        3: 1125:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1126:	}
        -: 1127:			
        -: 1128:      //discard card from hand
       14: 1129:      discardCard(handPos, currentPlayer, state, 0);
       14: 1130:      return 0;
        -: 1131:		
        -: 1132:
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
        -: 1137:	     {
    #####: 1138:	       if (i != currentPlayer)
        -: 1139:	       {
    #####: 1140:	        for (j = 0; j < state->handCount[i]; j++)
        -: 1141:		      {
    #####: 1142:		       if (state->hand[i][j] == copper)
        -: 1143:		     {
    #####: 1144:		      discardCard(j, i, state, 0);
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1150:			{
    #####: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
       19: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
       19: 1173:      if ( state->supplyCount[choice1] == -1 )
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
       19: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
       19: 1182:      discardCard(handPos, currentPlayer, state, 1);		
       19: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
        1: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
        1: 1190:      discardCard(handPos, currentPlayer, state, 0);
        1: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
        5: 1195:      state->numBuys++;
        -: 1196:			
        5: 1197:      if (choice1)
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
        5: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:	  //trash card
        5: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
        5: 1206:      discardCard(handPos, currentPlayer, state, 0);
        5: 1207:      return 0;
        -: 1208:		
        -: 1209:    case sea_hag:
    #####: 1210:      for (i = 0; i < state->numPlayers; i++){
    #####: 1211:	if (i != currentPlayer){
    #####: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:	  state->discardCount[i]++;
    #####: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
    #####: 1217:      return 0;
        -: 1218:		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
       39: 1221:      index = -1;
      234: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:	{
      195: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
       39: 1230:      if (index > -1)
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
       39: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
    #####: 1250:  return -1;
        -: 1251:}
        -: 1252:
       91: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
       91: 1257:  if (trashFlag < 1)
        -: 1258:    {
        -: 1259:      //add card to played pile
       59: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       59: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
       91: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
       91: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
        7: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
       84: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
       84: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
       84: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
       84: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
       91: 1287:  return 0;
        -: 1288:}
        -: 1289:
      155: 1290:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1291:{
        -: 1292:  //Note: supplyPos is enum of choosen card
        -: 1293:	
        -: 1294:  //check if supply pile is empty (0) or card is not used in game (-1)
      155: 1295:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1296:    {
    #####: 1297:      return -1;
        -: 1298:    }
        -: 1299:	
        -: 1300:  //added card for [whoseTurn] current player:
        -: 1301:  // toFlag = 0 : add to discard
        -: 1302:  // toFlag = 1 : add to deck
        -: 1303:  // toFlag = 2 : add to hand
        -: 1304:
      155: 1305:  if (toFlag == 1)
        -: 1306:    {
    #####: 1307:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1308:      state->deckCount[player]++;
        -: 1309:    }
      155: 1310:  else if (toFlag == 2)
        -: 1311:    {
    #####: 1312:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1313:      state->handCount[player]++;
        -: 1314:    }
        -: 1315:  else
        -: 1316:    {
      155: 1317:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      155: 1318:      state->discardCount[player]++;
        -: 1319:    }
        -: 1320:	
        -: 1321:  //decrease number in supply pile
      155: 1322:  state->supplyCount[supplyPos]--;
        -: 1323:	 
      155: 1324:  return 0;
        -: 1325:}
        -: 1326:
      269: 1327:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1328:{
        -: 1329:  int i;
        -: 1330:	
        -: 1331:  //reset coin count
      269: 1332:  state->coins = 0;
        -: 1333:
        -: 1334:  //add coins for each Treasure card in player's hand
     1570: 1335:  for (i = 0; i < state->handCount[player]; i++)
        -: 1336:    {
     1301: 1337:      if (state->hand[player][i] == copper)
        -: 1338:	     {
      439: 1339:	        state->coins += 1;
        -: 1340:	     }
      862: 1341:      else if (state->hand[player][i] == silver)
        -: 1342:	     {
       91: 1343:	       state->coins += 2;
        -: 1344:	     }
      771: 1345:      else if (state->hand[player][i] == gold)
        -: 1346:	     {
        3: 1347:      	  state->coins += 3;
        -: 1348:	     }	
        -: 1349:    }	
        -: 1350:
        -: 1351:  //add bonus
      269: 1352:  state->coins += bonus;
        -: 1353:
      269: 1354:  return 0;
        -: 1355:}
        -: 1356:
        -: 1357:
        -: 1358://end of dominion.c
        -: 1359:
