Starting random testing for adventurer...
Hand Count Error 1: Parameters: handCount = 495, deckCount = 3, discardCount = 2
	Final Parameters: handCount = 495, deckCount = 0, discardCount = 5
	Test number: 1057/10000
	Error caused by not enough treasure existing in the deck/discard
Discard Count Error 1: Parameters: handCount = 495, deckCount = 3, discardCount = 2
	Final Parameters: handCount = 495, deckCount = 0, discardCount = 5
	Test number: 1057/10000
Hand Count Error 2: Parameters: handCount = 499, deckCount = 0, discardCount = 3
	Final Parameters: handCount = 499, deckCount = 0, discardCount = 3
	Test number: 1156/10000
	Error caused by not enough treasure existing in the deck/discard
Discard Count Error 2: Parameters: handCount = 499, deckCount = 0, discardCount = 3
	Final Parameters: handCount = 499, deckCount = 0, discardCount = 3
	Test number: 1156/10000
Hand Count Error 3: Parameters: handCount = 499, deckCount = 0, discardCount = 1
	Final Parameters: handCount = 499, deckCount = 0, discardCount = 1
	Test number: 1321/10000
	Error caused by not enough treasure existing in the deck/discard
Discard Count Error 3: Parameters: handCount = 499, deckCount = 0, discardCount = 1
	Final Parameters: handCount = 499, deckCount = 0, discardCount = 1
	Test number: 1321/10000
Hand Count Error 4: Parameters: handCount = 498, deckCount = 0, discardCount = 3
	Final Parameters: handCount = 492, deckCount = 0, discardCount = 9
	Test number: 6615/10000
	Error caused by not enough treasure existing in the deck/discard
Discard Count Error 4: Parameters: handCount = 498, deckCount = 0, discardCount = 3
	Final Parameters: handCount = 492, deckCount = 0, discardCount = 9
	Test number: 6615/10000
Hand Count Error 5: Parameters: handCount = 227, deckCount = 5, discardCount = 0
	Final Parameters: handCount = 227, deckCount = 0, discardCount = 5
	Test number: 7927/10000
	Error caused by not enough treasure existing in the deck/discard
Discard Count Error 5: Parameters: handCount = 227, deckCount = 5, discardCount = 0
	Final Parameters: handCount = 227, deckCount = 0, discardCount = 5
	Test number: 7927/10000
Hand Count Error 6: Parameters: handCount = 278, deckCount = 0, discardCount = 1
	Final Parameters: handCount = 278, deckCount = 0, discardCount = 1
	Test number: 8523/10000
	Error caused by not enough treasure existing in the deck/discard
Discard Count Error 6: Parameters: handCount = 278, deckCount = 0, discardCount = 1
	Final Parameters: handCount = 278, deckCount = 0, discardCount = 1
	Test number: 8523/10000
Total number of errors in the handCount: 6/20000 times played
Total number of errors in the discardCount: 6/20000 times played
Total number of errors in the total card count: 0/20000 times played
Total number of errors caused by not enough treasure existing in the deck: 6/6
Finished random testing adventurer.
File 'dominion.c'
Lines executed:27.13% of 586
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  2812487:    8:int compare(const void* a, const void* b) {
  2812487:    9:  if (*(int*)a > *(int*)b)
  1180638:   10:    return 1;
  1631849:   11:  if (*(int*)a < *(int*)b)
   524521:   12:    return -1;
  1107328:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    10000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    10000:   44:  SelectStream(1);
    10000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    10000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    10000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   110000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
  1100000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
  1000000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    10000:   73:  if (numPlayers == 2)
        -:   74:    {
     3281:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
     6719:   77:  else if (numPlayers == 3)
        -:   78:    {
     3282:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
     3437:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    10000:   87:  if (numPlayers == 2)
        -:   88:    {
     3281:   89:      state->supplyCount[estate] = 8;
     3281:   90:      state->supplyCount[duchy] = 8;
     3281:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
     6719:   95:      state->supplyCount[estate] = 12;
     6719:   96:      state->supplyCount[duchy] = 12;
     6719:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    10000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10000:  102:  state->supplyCount[silver] = 40;
    10000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   210000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
  1650000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
  1550000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   110000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    10000:  115:		  if (numPlayers == 2){ 
     3281:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
     6719:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    90000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   100000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1450000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    40156:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    30156:  140:      state->deckCount[i] = 0;
   120624:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    90468:  143:	  state->deck[i][j] = estate;
    90468:  144:	  state->deckCount[i]++;
        -:  145:	}
   241248:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
   211092:  148:	  state->deck[i][j] = copper;
   211092:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    40156:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    30156:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    40156:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    30156:  166:      state->handCount[i] = 0;
    30156:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   280000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   270000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    10000:  182:  state->outpostPlayed = 0;
    10000:  183:  state->phase = 0;
    10000:  184:  state->numActions = 1;
    10000:  185:  state->numBuys = 1;
    10000:  186:  state->playedCardCount = 0;
    10000:  187:  state->whoseTurn = 0;
    10000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    60000:  192:  for (it = 0; it < 5; it++){
    50000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    10000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    10000:  198:  return 0;
        -:  199:}
        -:  200:
    32858:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    32858:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    32858:  209:  if (state->deckCount[player] < 1)
     1363:  210:    return -1;
    31495:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   702406:  214:  while (state->deckCount[player] > 0) {
   639416:  215:    card = floor(Random() * state->deckCount[player]);
   639416:  216:    newDeck[newDeckPos] = state->deck[player][card];
   639416:  217:    newDeckPos++;
 29706727:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
 29067311:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   639416:  221:    state->deckCount[player]--;
        -:  222:  }
   670911:  223:  for (i = 0; i < newDeckPos; i++) {
   639416:  224:    state->deck[player][i] = newDeck[i];
   639416:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    31495:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    30156:  346:int whoseTurn(struct gameState *state) {
    30156:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
  7672080:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  7672080:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   339207:  533:    for (i = 0; i < state->discardCount[player];i++){
   337856:  534:      state->deck[player][i] = state->discard[player][i];
   337856:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1351:  538:    state->deckCount[player] = state->discardCount[player];
     1351:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1351:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
     1351:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1351:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1351:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
     1351:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1351:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1351:  559:    if (deckCounter == 0)
       12:  560:      return -1;
        -:  561:
     1339:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1339:  563:    state->deckCount[player]--;
     1339:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
  7670729:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
  7670729:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
  7670729:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
  7670729:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  7670729:  576:    state->deckCount[player]--;
  7670729:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
  7672068:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    30156:  646:int adventurerCard(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int temphand [], int handPos, int z, int i){
    30156:  647:  int count = 0;
        -:  648:
   180710:  649:  while(drawntreasure<2){
   120398:  650:    count++;
   120398:  651:    if (state->deckCount[currentPlayer] <1)//if the deck is empty we need to shuffle discard and add to deck
     1351:  652:      shuffle(currentPlayer, state);
   120398:  653:    drawCard(currentPlayer, state);
   120398:  654:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   180710:  655:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    60312:  656:      drawntreasure++;
        -:  657:    else{
    60086:  658:      temphand[z]=cardDrawn;
    60086:  659:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    60086:  660:      z++;
        -:  661:    }
        -:  662:  }
        -:  663:
   120398:  664:  while(z-1>=0){
    60086:  665:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    60086:  666:    z=z-1;
        -:  667:  }
        -:  668:
    30156:  669:  discardCard(handPos, currentPlayer, state, 0);
        -:  670:  //printf("count = %d\n", count);
        -:  671:
    30156:  672:  return 0;
        -:  673:}
        -:  674:
    #####:  675:int councilRoomCard(struct gameState *state, int currentPlayer, int handPos, int i){
    #####:  676:  for (i = 0; i < 4; i++)
    #####:  677:    drawCard(currentPlayer, state);
    #####:  678:  state->numBuys++;
    #####:  679:  for (i = 0; i < state->numPlayers; i++){  //Each other player draws a card
    #####:  680:    if ( i != currentPlayer )
    #####:  681:      drawCard(i, state);
        -:  682:  }
    #####:  683:  discardCard(handPos, currentPlayer, state, 0); //put played card in played card pile
        -:  684:      
    #####:  685:  return 0;
        -:  686:}
        -:  687:
    #####:  688:int feastCard(struct gameState *state, int temphand [], int currentPlayer, int choice1, int i, int x){
    #####:  689:  for (i = 0; i <= state->handCount[currentPlayer]; i++){  
    #####:  690:    temphand[i] = state->hand[currentPlayer][i];
    #####:  691:    state->hand[currentPlayer][i] = -1;
        -:  692:  }
    #####:  693:  updateCoins(currentPlayer, state, 5);
    #####:  694:  x = 1;
    #####:  695:  while( x == 1) {
    #####:  696:    if (supplyCount(choice1, state) <= 0){
    #####:  697:      if (DEBUG)
        -:  698:        printf("None of that card left, sorry!\n");
        -:  699:
    #####:  700:      if (DEBUG)
        -:  701:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  702:    }
    #####:  703:    else if (state->coins < getCost(choice1)){
    #####:  704:      printf("That card is too expensive!\n");
    #####:  705:      if (DEBUG)
        -:  706:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  707:    }
        -:  708:    else{
    #####:  709:      if (DEBUG)
        -:  710:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
    #####:  711:      gainCard(choice1, state, 0, currentPlayer);
    #####:  712:      x = 0;
    #####:  713:      if (DEBUG)
        -:  714:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:    }
        -:  716:  }
        -:  717:
    #####:  718:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  719:    state->hand[currentPlayer][i] = temphand[i];
    #####:  720:    temphand[i] = -1;
        -:  721:  }
        -:  722:            
    #####:  723:      return 0;
        -:  724:}
        -:  725:
    #####:  726:int mineCard(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i, int j){
    #####:  727:  j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  728:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    #####:  729:    return -1;  
    #####:  730:  if (choice2 > treasure_map || choice2 < curse)
    #####:  731:    return -1;
    #####:  732:  if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    #####:  733:    return -1;
    #####:  734:  gainCard(choice2, state, 2, currentPlayer);
    #####:  735:  discardCard(handPos, currentPlayer, state, 0);
    #####:  736:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  737:    if (state->hand[currentPlayer][i] == j){
    #####:  738:      discardCard(i, currentPlayer, state, 0);      
    #####:  739:      break;
        -:  740:    }
        -:  741:  }
        -:  742:      
    #####:  743:      return 0;
        -:  744:}
        -:  745:
    #####:  746:int remodelCard(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos, int i, int j){
    #####:  747:  j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  748:  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    #####:  749:    return -1;
    #####:  750:  gainCard(choice2, state, 0, currentPlayer);
    #####:  751:  discardCard(handPos, currentPlayer, state, 0);
    #####:  752:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  753:    if (state->hand[currentPlayer][i] == j){
    #####:  754:        discardCard(i, currentPlayer, state, 0);      
    #####:  755:        break;
        -:  756:    }
        -:  757:  }
    #####:  758:      return 0;
        -:  759:}
        -:  760:
    30156:  761:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  762:{
        -:  763:  int i;
        -:  764:  int j;
        -:  765:  int k;
        -:  766:  int x;
        -:  767:  int index;
    30156:  768:  int currentPlayer = whoseTurn(state);
    30156:  769:  int nextPlayer = currentPlayer + 1;
        -:  770:
    30156:  771:  int tributeRevealedCards[2] = {-1, -1};
        -:  772:  int temphand[MAX_HAND];// moved above the if statement
    30156:  773:  int drawntreasure=0;
        -:  774:  int cardDrawn;
    30156:  775:  int z = 0;// this is the counter for the temp hand
    30156:  776:  if (nextPlayer > (state->numPlayers - 1)){
    10000:  777:    nextPlayer = 0;
        -:  778:  }
        -:  779:  
        -:  780:	
        -:  781:  //uses switch to select card and perform actions
    30156:  782:  switch( card ) 
        -:  783:    {
        -:  784:    case adventurer:
    30156:  785:      adventurerCard(drawntreasure, state, currentPlayer, cardDrawn, temphand, handPos, z, i);
    30156:  786:      break;
        -:  787:      
        -:  788:    case council_room:
    #####:  789:      councilRoomCard(state, currentPlayer, handPos, i);
    #####:  790:      break;
        -:  791:			
        -:  792:    case feast:
    #####:  793:      feastCard(state, temphand, currentPlayer, choice1, i, x);
    #####:  794:      break;
        -:  795:
        -:  796:    case gardens:
    #####:  797:      return -1;
        -:  798:			
        -:  799:    case mine:
    #####:  800:      mineCard(state, currentPlayer, choice1, choice2, handPos, i, j);
    #####:  801:      break;
        -:  802:			
        -:  803:    case remodel:
    #####:  804:      remodelCard(state, currentPlayer, choice1, choice2, handPos, i, j);
    #####:  805:      break;
        -:  806:		
        -:  807:    case smithy:
        -:  808:      //+3 Cards
    #####:  809:      for (i = 0; i < 3; i++)
        -:  810:	{
    #####:  811:	  drawCard(currentPlayer, state);
        -:  812:	}
        -:  813:			
        -:  814:      //discard card from hand
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case village:
        -:  819:      //+1 Card
    #####:  820:      drawCard(currentPlayer, state);
        -:  821:			
        -:  822:      //+2 Actions
    #####:  823:      state->numActions = state->numActions + 2;
        -:  824:			
        -:  825:      //discard played card from hand
    #####:  826:      discardCard(handPos, currentPlayer, state, 0);
    #####:  827:      return 0;
        -:  828:		
        -:  829:    case baron:
    #####:  830:      state->numBuys++;//Increase buys by 1!
    #####:  831:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  832:	int p = 0;//Iterator for hand!
    #####:  833:	int card_not_discarded = 1;//Flag for discard set!
    #####:  834:	while(card_not_discarded){
    #####:  835:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  836:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  837:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  838:	    state->discardCount[currentPlayer]++;
    #####:  839:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  840:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  841:	    }
    #####:  842:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  843:	    state->handCount[currentPlayer]--;
    #####:  844:	    card_not_discarded = 0;//Exit the loop
        -:  845:	  }
    #####:  846:	  else if (p > state->handCount[currentPlayer]){
    #####:  847:	    if(DEBUG) {
        -:  848:	      printf("No estate cards in your hand, invalid choice\n");
        -:  849:	      printf("Must gain an estate if there are any\n");
        -:  850:	    }
    #####:  851:	    if (supplyCount(estate, state) > 0){
    #####:  852:	      gainCard(estate, state, 0, currentPlayer);
    #####:  853:	      state->supplyCount[estate]--;//Decrement estates
    #####:  854:	      if (supplyCount(estate, state) == 0){
    #####:  855:		isGameOver(state);
        -:  856:	      }
        -:  857:	    }
    #####:  858:	    card_not_discarded = 0;//Exit the loop
        -:  859:	  }
        -:  860:			    
        -:  861:	  else{
    #####:  862:	    p++;//Next card
        -:  863:	  }
        -:  864:	}
        -:  865:      }
        -:  866:			    
        -:  867:      else{
    #####:  868:	if (supplyCount(estate, state) > 0){
    #####:  869:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  870:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  871:	  if (supplyCount(estate, state) == 0){
    #####:  872:	    isGameOver(state);
        -:  873:	  }
        -:  874:	}
        -:  875:      }
        -:  876:	    
        -:  877:      
    #####:  878:      return 0;
        -:  879:		
        -:  880:    case great_hall:
        -:  881:      //+1 Card
    #####:  882:      drawCard(currentPlayer, state);
        -:  883:			
        -:  884:      //+1 Actions
    #####:  885:      state->numActions++;
        -:  886:			
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case minion:
        -:  892:      //+1 action
    #####:  893:      state->numActions++;
        -:  894:			
        -:  895:      //discard card from hand
    #####:  896:      discardCard(handPos, currentPlayer, state, 0);
        -:  897:			
    #####:  898:      if (choice1)		//+2 coins
        -:  899:	{
    #####:  900:	  state->coins = state->coins + 2;
        -:  901:	}
        -:  902:			
    #####:  903:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  904:	{
        -:  905:	  //discard hand
    #####:  906:	  while(numHandCards(state) > 0)
        -:  907:	    {
    #####:  908:	      discardCard(handPos, currentPlayer, state, 0);
        -:  909:	    }
        -:  910:				
        -:  911:	  //draw 4
    #####:  912:	  for (i = 0; i < 4; i++)
        -:  913:	    {
    #####:  914:	      drawCard(currentPlayer, state);
        -:  915:	    }
        -:  916:				
        -:  917:	  //other players discard hand and redraw if hand size > 4
    #####:  918:	  for (i = 0; i < state->numPlayers; i++)
        -:  919:	    {
    #####:  920:	      if (i != currentPlayer)
        -:  921:		{
    #####:  922:		  if ( state->handCount[i] > 4 )
        -:  923:		    {
        -:  924:		      //discard hand
    #####:  925:		      while( state->handCount[i] > 0 )
        -:  926:			{
    #####:  927:			  discardCard(handPos, i, state, 0);
        -:  928:			}
        -:  929:							
        -:  930:		      //draw 4
    #####:  931:		      for (j = 0; j < 4; j++)
        -:  932:			{
    #####:  933:			  drawCard(i, state);
        -:  934:			}
        -:  935:		    }
        -:  936:		}
        -:  937:	    }
        -:  938:				
        -:  939:	}
    #####:  940:      return 0;
        -:  941:		
        -:  942:    case steward:
    #####:  943:      if (choice1 == 1)
        -:  944:	{
        -:  945:	  //+2 cards
    #####:  946:	  drawCard(currentPlayer, state);
    #####:  947:	  drawCard(currentPlayer, state);
        -:  948:	}
    #####:  949:      else if (choice1 == 2)
        -:  950:	{
        -:  951:	  //+2 coins
    #####:  952:	  state->coins = state->coins + 2;
        -:  953:	}
        -:  954:      else
        -:  955:	{
        -:  956:	  //trash 2 cards in hand
    #####:  957:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  958:	  discardCard(choice3, currentPlayer, state, 1);
        -:  959:	}
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case tribute:
    #####:  966:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  967:	if (state->deckCount[nextPlayer] > 0){
    #####:  968:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  969:	  state->deckCount[nextPlayer]--;
        -:  970:	}
    #####:  971:	else if (state->discardCount[nextPlayer] > 0){
    #####:  972:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  973:	  state->discardCount[nextPlayer]--;
        -:  974:	}
        -:  975:	else{
        -:  976:	  //No Card to Reveal
    #####:  977:	  if (DEBUG){
        -:  978:	    printf("No cards to reveal\n");
        -:  979:	  }
        -:  980:	}
        -:  981:      }
        -:  982:	    
        -:  983:      else{
    #####:  984:	if (state->deckCount[nextPlayer] == 0){
    #####:  985:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  986:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  987:	    state->deckCount[nextPlayer]++;
    #####:  988:	    state->discard[nextPlayer][i] = -1;
    #####:  989:	    state->discardCount[nextPlayer]--;
        -:  990:	  }
        -:  991:			    
    #####:  992:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  993:	} 
    #####:  994:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  995:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  996:	state->deckCount[nextPlayer]--;
    #####:  997:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  998:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  999:	state->deckCount[nextPlayer]--;
        -: 1000:      }    
        -: 1001:		       
    #####: 1002:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1003:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1004:	state->playedCardCount++;
    #####: 1005:	tributeRevealedCards[1] = -1;
        -: 1006:      }
        -: 1007:
    #####: 1008:      for (i = 0; i <= 2; i ++){
    #####: 1009:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1010:	  state->coins += 2;
        -: 1011:	}
        -: 1012:		    
    #####: 1013:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1014:	  drawCard(currentPlayer, state);
    #####: 1015:	  drawCard(currentPlayer, state);
        -: 1016:	}
        -: 1017:	else{//Action Card
    #####: 1018:	  state->numActions = state->numActions + 2;
        -: 1019:	}
        -: 1020:      }
        -: 1021:	    
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case ambassador:
    #####: 1025:      j = 0;		//used to check if player has enough cards to discard
        -: 1026:
    #####: 1027:      if (choice2 > 2 || choice2 < 0)
        -: 1028:	{
    #####: 1029:	  return -1;				
        -: 1030:	}
        -: 1031:
    #####: 1032:      if (choice1 == handPos)
        -: 1033:	{
    #####: 1034:	  return -1;
        -: 1035:	}
        -: 1036:
    #####: 1037:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1038:	{
    #####: 1039:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1040:	    {
    #####: 1041:	      j++;
        -: 1042:	    }
        -: 1043:	}
    #####: 1044:      if (j < choice2)
        -: 1045:	{
    #####: 1046:	  return -1;				
        -: 1047:	}
        -: 1048:
    #####: 1049:      if (DEBUG) 
        -: 1050:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1051:
        -: 1052:      //increase supply count for choosen card by amount being discarded
    #####: 1053:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1054:			
        -: 1055:      //each other player gains a copy of revealed card
    #####: 1056:      for (i = 0; i < state->numPlayers; i++)
        -: 1057:	{
    #####: 1058:	  if (i != currentPlayer)
        -: 1059:	    {
    #####: 1060:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1061:	    }
        -: 1062:	}
        -: 1063:
        -: 1064:      //discard played card from hand
    #####: 1065:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1066:
        -: 1067:      //trash copies of cards returned to supply
    #####: 1068:      for (j = 0; j < choice2; j++)
        -: 1069:	{
    #####: 1070:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1071:	    {
    #####: 1072:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1073:		{
    #####: 1074:		  discardCard(i, currentPlayer, state, 1);
    #####: 1075:		  break;
        -: 1076:		}
        -: 1077:	    }
        -: 1078:	}			
        -: 1079:
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case cutpurse:
        -: 1083:
    #####: 1084:      updateCoins(currentPlayer, state, 2);
    #####: 1085:      for (i = 0; i < state->numPlayers; i++)
        -: 1086:	{
    #####: 1087:	  if (i != currentPlayer)
        -: 1088:	    {
    #####: 1089:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1090:		{
    #####: 1091:		  if (state->hand[i][j] == copper)
        -: 1092:		    {
    #####: 1093:		      discardCard(j, i, state, 0);
    #####: 1094:		      break;
        -: 1095:		    }
    #####: 1096:		  if (j == state->handCount[i])
        -: 1097:		    {
    #####: 1098:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1099:			{
    #####: 1100:			  if (DEBUG)
        -: 1101:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1102:			}	
    #####: 1103:		      break;
        -: 1104:		    }		
        -: 1105:		}
        -: 1106:					
        -: 1107:	    }
        -: 1108:				
        -: 1109:	}				
        -: 1110:
        -: 1111:      //discard played card from hand
    #####: 1112:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1113:
    #####: 1114:      return 0;
        -: 1115:
        -: 1116:		
        -: 1117:    case embargo: 
        -: 1118:      //+2 Coins
    #####: 1119:      state->coins = state->coins + 2;
        -: 1120:			
        -: 1121:      //see if selected pile is in play
    #####: 1122:      if ( state->supplyCount[choice1] == -1 )
        -: 1123:	{
    #####: 1124:	  return -1;
        -: 1125:	}
        -: 1126:			
        -: 1127:      //add embargo token to selected supply pile
    #####: 1128:      state->embargoTokens[choice1]++;
        -: 1129:			
        -: 1130:      //trash card
    #####: 1131:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1132:      return 0;
        -: 1133:		
        -: 1134:    case outpost:
        -: 1135:      //set outpost flag
    #####: 1136:      state->outpostPlayed++;
        -: 1137:			
        -: 1138:      //discard card
    #####: 1139:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1140:      return 0;
        -: 1141:		
        -: 1142:    case salvager:
        -: 1143:      //+1 buy
    #####: 1144:      state->numBuys++;
        -: 1145:			
    #####: 1146:      if (choice1)
        -: 1147:	{
        -: 1148:	  //gain coins equal to trashed card
    #####: 1149:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1150:	  //trash card
    #####: 1151:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1152:	}
        -: 1153:			
        -: 1154:      //discard card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case sea_hag:
    #####: 1159:      for (i = 0; i < state->numPlayers; i++){
    #####: 1160:	if (i != currentPlayer){
    #####: 1161:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1162:	  state->discardCount[i]++;
    #####: 1163:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1164:	}
        -: 1165:      }
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case treasure_map:
        -: 1169:      //search hand for another treasure_map
    #####: 1170:      index = -1;
    #####: 1171:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1172:	{
    #####: 1173:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1174:	    {
    #####: 1175:	      index = i;
    #####: 1176:	      break;
        -: 1177:	    }
        -: 1178:	}
    #####: 1179:      if (index > -1)
        -: 1180:	{
        -: 1181:	  //trash both treasure cards
    #####: 1182:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1183:	  discardCard(index, currentPlayer, state, 1);
        -: 1184:
        -: 1185:	  //gain 4 Gold cards
    #####: 1186:	  for (i = 0; i < 4; i++)
        -: 1187:	    {
    #####: 1188:	      gainCard(gold, state, 1, currentPlayer);
        -: 1189:	    }
        -: 1190:				
        -: 1191:	  //return success
    #####: 1192:	  return 1;
        -: 1193:	}
        -: 1194:			
        -: 1195:      //no second treasure_map found in hand
    #####: 1196:      return -1;
        -: 1197:    }
        -: 1198:
    30156: 1199:  return -1;
        -: 1200:}
        -: 1201:
    30156: 1202:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1203:{
        -: 1204:	
        -: 1205:  //if card is not trashed, added to Played pile 
    30156: 1206:  if (trashFlag < 1)
        -: 1207:    {
        -: 1208:      //add card to played pile
    30156: 1209:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    30156: 1210:      state->playedCardCount++;
        -: 1211:    }
        -: 1212:	
        -: 1213:  //set played card to -1
    30156: 1214:  state->hand[currentPlayer][handPos] = -1;
        -: 1215:	
        -: 1216:  //remove card from player's hand
    30156: 1217:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1218:    {
        -: 1219:      //reduce number of cards in hand
    #####: 1220:      state->handCount[currentPlayer]--;
    #####: 1221:      state->discardCount[currentPlayer]++;
        -: 1222:    }
    30156: 1223:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1224:    {
        -: 1225:      //reduce number of cards in hand
    #####: 1226:      state->handCount[currentPlayer]--;
    #####: 1227:      state->discardCount[currentPlayer]++;
        -: 1228:    }
        -: 1229:  else 	
        -: 1230:    {
        -: 1231:      //replace discarded card with last card in hand
    30156: 1232:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1233:      //set last card to -1
    30156: 1234:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1235:      //reduce number of cards in hand
    30156: 1236:      state->handCount[currentPlayer]--;
    30156: 1237:      state->discardCount[currentPlayer]++;
        -: 1238:    }
        -: 1239:	
    30156: 1240:  return 0;
        -: 1241:}
        -: 1242:
    #####: 1243:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1244:{
        -: 1245:  //Note: supplyPos is enum of choosen card
        -: 1246:	
        -: 1247:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1248:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1249:    {
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
        -: 1253:  //added card for [whoseTurn] current player:
        -: 1254:  // toFlag = 0 : add to discard
        -: 1255:  // toFlag = 1 : add to deck
        -: 1256:  // toFlag = 2 : add to hand
        -: 1257:
    #####: 1258:  if (toFlag == 1)
        -: 1259:    {
    #####: 1260:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1261:      state->deckCount[player]++;
        -: 1262:    }
    #####: 1263:  else if (toFlag == 2)
        -: 1264:    {
    #####: 1265:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1266:      state->handCount[player]++;
        -: 1267:    }
        -: 1268:  else
        -: 1269:    {
    #####: 1270:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1271:      state->discardCount[player]++;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //decrease number in supply pile
    #####: 1275:  state->supplyCount[supplyPos]--;
        -: 1276:	 
    #####: 1277:  return 0;
        -: 1278:}
        -: 1279:
    10000: 1280:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1281:{
        -: 1282:  int i;
        -: 1283:	
        -: 1284:  //reset coin count
    10000: 1285:  state->coins = 0;
        -: 1286:
        -: 1287:  //add coins for each Treasure card in player's hand
    60000: 1288:  for (i = 0; i < state->handCount[player]; i++)
        -: 1289:    {
    50000: 1290:      if (state->hand[player][i] == copper)
        -: 1291:	{
    35050: 1292:	  state->coins += 1;
        -: 1293:	}
    14950: 1294:      else if (state->hand[player][i] == silver)
        -: 1295:	{
    #####: 1296:	  state->coins += 2;
        -: 1297:	}
    14950: 1298:      else if (state->hand[player][i] == gold)
        -: 1299:	{
    #####: 1300:	  state->coins += 3;
        -: 1301:	}	
        -: 1302:    }	
        -: 1303:
        -: 1304:  //add bonus
    10000: 1305:  state->coins += bonus;
        -: 1306:
    10000: 1307:  return 0;
        -: 1308:}
        -: 1309:
        -: 1310://end of dominion.c
        -: 1311:
