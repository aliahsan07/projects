File 'dominion.c'
Lines executed:65.86% of 580
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    36475:    8:int compare(const void* a, const void* b) {
    36475:    9:  if (*(int*)a > *(int*)b)
    17125:   10:    return 1;
    19350:   11:  if (*(int*)a < *(int*)b)
     8540:   12:    return -1;
    10810:   13:  return 0;
        -:   14:}
        -:   15:
        5:   16:struct gameState* newGame() {
        5:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        5:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       10:  115:		  if (numPlayers == 2){ 
       10:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       40:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
     1425:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1425:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1425:  209:  if (state->deckCount[player] < 1)
       35:  210:    return -1;
     1390:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    17535:  214:  while (state->deckCount[player] > 0) {
    14755:  215:    card = floor(Random() * state->deckCount[player]);
    14755:  216:    newDeck[newDeckPos] = state->deck[player][card];
    14755:  217:    newDeckPos++;
    62955:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    48200:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    14755:  221:    state->deckCount[player]--;
        -:  222:  }
    16145:  223:  for (i = 0; i < newDeckPos; i++) {
    14755:  224:    state->deck[player][i] = newDeck[i];
    14755:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1390:  228:  return 0;
        -:  229:}
        -:  230:
     3855:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
     3855:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
     3855:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
     3855:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
     3855:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
     3855:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
     2815:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
     1040:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
      350:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
      690:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
      690:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
      690:  269:  return 0;
        -:  270:}
        -:  271:
      815:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
      815:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      815:  280:  who = state->whoseTurn;
        -:  281:
      815:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      815:  286:  } else if (supplyCount(supplyPos, state) <1){
       75:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
       75:  289:    return -1;
      740:  290:  } else if (state->coins < getCost(supplyPos)){
      370:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      370:  293:    return -1;
        -:  294:  } else {
      370:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      370:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      370:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      370:  300:    state->numBuys--;
      370:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      370:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
     3855:  315:int handCard(int handPos, struct gameState *state) {
     3855:  316:  int currentPlayer = whoseTurn(state);
     3855:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     1505:  320:int supplyCount(int card, struct gameState *state) {
     1505:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
     1660:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     1660:  326:  int count = 0;
        -:  327:
    13065:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    11405:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
     9945:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
     8285:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    20240:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    18580:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
     1660:  343:  return count;
        -:  344:}
        -:  345:
    10550:  346:int whoseTurn(struct gameState *state) {
    10550:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
     2825:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     2825:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    16860:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    14035:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    14035:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
     2825:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
     2825:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
     1415:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     1410:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     2825:  370:  state->outpostPlayed = 0;
     2825:  371:  state->phase = 0;
     2825:  372:  state->numActions = 1;
     2825:  373:  state->coins = 0;
     2825:  374:  state->numBuys = 1;
     2825:  375:  state->playedCardCount = 0;
     2825:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    16950:  380:  for (k = 0; k < 5; k++){
    14125:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
     2825:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
     2825:  387:  return 0;
        -:  388:}
        -:  389:
     2835:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     2835:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     2835:  401:  j = 0;
    73710:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    70875:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     4045:  406:	  j++;
        -:  407:	}
        -:  408:    }
     2835:  409:  if ( j >= 3)
        -:  410:    {
        5:  411:      return 1;
        -:  412:    }
        -:  413:
     2830:  414:  return 0;
        -:  415:}
        -:  416:
     2835:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
     2835:  420:  int score = 0;
        -:  421:  //score from hand
    16890:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    14055:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    14055:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    14055:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    14055:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    14055:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    14055:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    15720:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    12885:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    12885:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    12885:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    12885:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    12885:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    12885:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    15720:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    12885:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    12885:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    12885:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    12885:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    12885:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    12885:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
     2835:  454:  return score;
        -:  455:}
        -:  456:
        5:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
       25:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
       20:  467:      if (i >= state->numPlayers)
        -:  468:	{
       10:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
       10:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
        5:  478:  j = 0;
       25:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
       20:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
        5:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
        5:  489:  currentPlayer = whoseTurn(state);
       25:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
       20:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
        5:  499:  j = 0;
       25:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
       20:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
        5:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
       25:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
       20:  512:      if ( players[i] == highScore )
        -:  513:	{
        5:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
       15:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
        5:  522:  return 0;
        -:  523:}
        -:  524:
    14365:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    14365:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    16070:  533:    for (i = 0; i < state->discardCount[player];i++){
    14655:  534:      state->deck[player][i] = state->discard[player][i];
    14655:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1415:  538:    state->deckCount[player] = state->discardCount[player];
     1415:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1415:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
     1415:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1415:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1415:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
     1415:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1415:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1415:  559:    if (deckCounter == 0)
       35:  560:      return -1;
        -:  561:
     1380:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1380:  563:    state->deckCount[player]--;
     1380:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    12950:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    12950:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    12950:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    12950:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    12950:  576:    state->deckCount[player]--;
    12950:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    14330:  580:  return 0;
        -:  581:}
        -:  582:
     1150:  583:int getCost(int cardNumber)
        -:  584:{
     1150:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
      115:  588:      return 0;
        -:  589:    case estate:
       20:  590:      return 2;
        -:  591:    case duchy:
       75:  592:      return 5;
        -:  593:    case province:
       30:  594:      return 8;
        -:  595:    case copper:
      120:  596:      return 0;
        -:  597:    case silver:
       30:  598:      return 3;
        -:  599:    case gold:
       25:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
       70:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
       75:  608:      return 4;
        -:  609:    case mine:
       75:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
       85:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
       80:  618:      return 4;
        -:  619:    case great_hall:
      105:  620:      return 3;
        -:  621:    case minion:
       75:  622:      return 5;
        -:  623:    case steward:
       70:  624:      return 3;
        -:  625:    case tribute:
       45:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
       55:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int doAdventurer(int currentPlayer, struct gameState *state){
    #####:  647:	int drawntreasure = 0;
        -:  648:	int cardDrawn;
    #####:  649:	int z = 0;// this is the counter for the temp hand
        -:  650:	int temphand[MAX_HAND];
    #####:  651:	while(drawntreasure<2){
    #####:  652:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:	  shuffle(currentPlayer, state);
        -:  654:	}
    #####:  655:	drawCard(currentPlayer, state);
    #####:  656:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  657:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  658:	  drawntreasure++;
        -:  659:	else{
    #####:  660:	  temphand[z]=cardDrawn;
    #####:  661:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  662:	  z++;
        -:  663:	}
        -:  664:      }
    #####:  665:     while(z-1>=0){
    #####:  666:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  667:		z=z-1;
        -:  668:    }
    #####:  669:	return 0;
        -:  670:}
        -:  671:
       15:  672:int doCouncil_room(int handPos, int currentPlayer, struct gameState *state){
        -:  673:	int i;
       75:  674:	for (i = 0; i < 4; i++)
        -:  675:	{
       60:  676:	  drawCard(currentPlayer, state);
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
       15:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
       45:  683:      for (i = 0; i < state->numPlayers; i++)
        -:  684:	{
       30:  685:	  if ( i != currentPlayer )
        -:  686:	    {
       15:  687:	      drawCard(i, state);
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
       15:  692:      discardCard(handPos, currentPlayer, state, 0);
       15:  693:	  return 0;
        -:  694:}
        -:  695:
    #####:  696:int doVillage(int handPos, int currentPlayer, struct gameState *state){
        -:  697: //+1 Card
    #####:  698:      drawCard(currentPlayer, state);
        -:  699:			
        -:  700:      //+2 Actions
    #####:  701:      state->numActions = state->numActions + 2;
        -:  702:			
        -:  703:      //discard played card from hand
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
    #####:  705:	  return 0;
        -:  706:}
        -:  707:
       30:  708:int doGreat_hall(int handPos, int currentPlayer, struct gameState *state){
        -:  709:	 //+1 Card
       30:  710:      drawCard(currentPlayer, state);
        -:  711:			
        -:  712:      //+1 Actions
       30:  713:      state->numActions++;
        -:  714:			
        -:  715:      //discard card from hand
       30:  716:      discardCard(handPos, currentPlayer, state, 0);
       30:  717:	  return 0;
        -:  718:}
        -:  719:
       20:  720:int doSmithy(int handPos, int currentPlayer, struct gameState *state){
        -:  721:	 //+3 Cards
        -:  722:	 int i;
       80:  723:      for (i = 0; i < 3; i++)
        -:  724:	{
       60:  725:	  drawCard(currentPlayer, state);
        -:  726:	}
        -:  727:			
        -:  728:      //discard card from hand
       20:  729:      discardCard(handPos, currentPlayer, state, 0);
       20:  730:	  return 0;
        -:  731:}
        -:  732:
     1040:  733:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  734:{
        -:  735:  int i;
        -:  736:  int j;
        -:  737:  int k;
        -:  738:  int x;
        -:  739:  int index;
     1040:  740:  int currentPlayer = whoseTurn(state);
     1040:  741:  int nextPlayer = currentPlayer + 1;
        -:  742:
     1040:  743:  int tributeRevealedCards[2] = {-1, -1};
        -:  744:  int temphand[MAX_HAND];// moved above the if statement
     1040:  745:  if (nextPlayer > (state->numPlayers - 1)){
      585:  746:    nextPlayer = 0;
        -:  747:  }
        -:  748:  
        -:  749:	
        -:  750:  //uses switch to select card and perform actions
     1040:  751:  switch( card ) 
        -:  752:    {
        -:  753:    case adventurer:
    #####:  754:	  doAdventurer(currentPlayer, state);
    #####:  755:      return 0;
        -:  756:			
        -:  757:    case council_room:
        -:  758:      //+4 Cards
       15:  759:	  doCouncil_room(handPos, currentPlayer, state);
        -:  760:			
       15:  761:      return 0;
        -:  762:			
        -:  763:    case feast:
        -:  764:      //gain card with cost up to 5
        -:  765:      //Backup hand
    #####:  766:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  767:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  768:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  769:      }
        -:  770:      //Backup hand
        -:  771:
        -:  772:      //Update Coins for Buy
    #####:  773:      updateCoins(currentPlayer, state, 5);
    #####:  774:      x = 1;//Condition to loop on
    #####:  775:      while( x == 1) {//Buy one card
    #####:  776:	if (supplyCount(choice1, state) <= 0){
    #####:  777:	  if (DEBUG)
        -:  778:	    printf("None of that card left, sorry!\n");
        -:  779:
    #####:  780:	  if (DEBUG){
        -:  781:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  782:	  }
        -:  783:	}
    #####:  784:	else if (state->coins < getCost(choice1)){
    #####:  785:	  printf("That card is too expensive!\n");
        -:  786:
    #####:  787:	  if (DEBUG){
        -:  788:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  789:	  }
        -:  790:	}
        -:  791:	else{
        -:  792:
    #####:  793:	  if (DEBUG){
        -:  794:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  795:	  }
        -:  796:
    #####:  797:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  798:	  x = 0;//No more buying cards
        -:  799:
    #####:  800:	  if (DEBUG){
        -:  801:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  802:	  }
        -:  803:
        -:  804:	}
        -:  805:      }     
        -:  806:
        -:  807:      //Reset Hand
    #####:  808:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  809:	state->hand[currentPlayer][i] = temphand[i];
    #####:  810:	temphand[i] = -1;
        -:  811:      }
        -:  812:      //Reset Hand
        -:  813:      			
    #####:  814:      return 0;
        -:  815:			
        -:  816:    case gardens:
      155:  817:      return -1;
        -:  818:			
        -:  819:    case mine:
      200:  820:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  821:
      200:  822:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  823:	{
      180:  824:	  return -1;
        -:  825:	}
        -:  826:		
       20:  827:      if (choice2 > treasure_map || choice2 < curse)
        -:  828:	{
    #####:  829:	  return -1;
        -:  830:	}
        -:  831:
       20:  832:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  833:	{
       15:  834:	  return -1;
        -:  835:	}
        -:  836:
        5:  837:      gainCard(choice2, state, 2, currentPlayer);
        -:  838:
        -:  839:      //discard card from hand
        5:  840:      discardCard(handPos, currentPlayer, state, 0);
        -:  841:
        -:  842:      //discard trashed card
       10:  843:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  844:	{
       10:  845:	  if (state->hand[currentPlayer][i] == j)
        -:  846:	    {
        5:  847:	      discardCard(i, currentPlayer, state, 0);			
        5:  848:	      break;
        -:  849:	    }
        -:  850:	}
        -:  851:			
        5:  852:      return 0;
        -:  853:			
        -:  854:    case remodel:
    #####:  855:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  856:
    #####:  857:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  858:	{
    #####:  859:	  return -1;
        -:  860:	}
        -:  861:
    #####:  862:      gainCard(choice2, state, 0, currentPlayer);
        -:  863:
        -:  864:      //discard card from hand
    #####:  865:      discardCard(handPos, currentPlayer, state, 0);
        -:  866:
        -:  867:      //discard trashed card
    #####:  868:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  869:	{
    #####:  870:	  if (state->hand[currentPlayer][i] == j)
        -:  871:	    {
    #####:  872:	      discardCard(i, currentPlayer, state, 0);			
    #####:  873:	      break;
        -:  874:	    }
        -:  875:	}
        -:  876:
        -:  877:
    #####:  878:      return 0;
        -:  879:		
        -:  880:    case smithy:
       20:  881:     doSmithy(handPos, currentPlayer, state);
       20:  882:      return 0;
        -:  883:		
        -:  884:    case village:
    #####:  885:     doVillage(handPos, currentPlayer, state);
    #####:  886:      return 0;
        -:  887:		
        -:  888:    case baron:
      375:  889:      state->numBuys++;//Increase buys by 1!
      375:  890:      if (choice1 > 0){//Boolean true or going to discard an estate
      235:  891:	int p = 0;//Iterator for hand!
      235:  892:	int card_not_discarded = 1;//Flag for discard set!
     1725:  893:	while(card_not_discarded){
     1255:  894:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
       90:  895:	    state->coins += 4;//Add 4 coins to the amount of coins
       90:  896:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
       90:  897:	    state->discardCount[currentPlayer]++;
      390:  898:	    for (;p < state->handCount[currentPlayer]; p++){
      300:  899:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:	    }
       90:  901:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
       90:  902:	    state->handCount[currentPlayer]--;
       90:  903:	    card_not_discarded = 0;//Exit the loop
        -:  904:	  }
     1165:  905:	  else if (p > state->handCount[currentPlayer]){
      145:  906:	    if(DEBUG) {
        -:  907:	      printf("No estate cards in your hand, invalid choice\n");
        -:  908:	      printf("Must gain an estate if there are any\n");
        -:  909:	    }
      145:  910:	    if (supplyCount(estate, state) > 0){
    #####:  911:	      gainCard(estate, state, 0, currentPlayer);
    #####:  912:	      state->supplyCount[estate]--;//Decrement estates
    #####:  913:	      if (supplyCount(estate, state) == 0){
    #####:  914:		isGameOver(state);
        -:  915:	      }
        -:  916:	    }
      145:  917:	    card_not_discarded = 0;//Exit the loop
        -:  918:	  }
        -:  919:			    
        -:  920:	  else{
     1020:  921:	    p++;//Next card
        -:  922:	  }
        -:  923:	}
        -:  924:      }
        -:  925:			    
        -:  926:      else{
      140:  927:	if (supplyCount(estate, state) > 0){
       15:  928:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
       15:  929:	  state->supplyCount[estate]--;//Decrement Estates
       15:  930:	  if (supplyCount(estate, state) == 0){
        5:  931:	    isGameOver(state);
        -:  932:	  }
        -:  933:	}
        -:  934:      }
        -:  935:	    
        -:  936:      
      375:  937:      return 0;
        -:  938:		
        -:  939:    case great_hall:
       30:  940:	  doGreat_hall(handPos, currentPlayer, state);
       30:  941:      return 0;
        -:  942:		
        -:  943:    case minion:
        -:  944:      //+1 action
       15:  945:      state->numActions++;
        -:  946:			
        -:  947:      //discard card from hand
       15:  948:      discardCard(handPos, currentPlayer, state, 0);
        -:  949:			
       15:  950:      if (choice1)		//+2 coins
        -:  951:	{
       15:  952:	  state->coins = state->coins + 2;
        -:  953:	}
        -:  954:			
    #####:  955:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:	{
        -:  957:	  //discard hand
    #####:  958:	  while(numHandCards(state) > 0)
        -:  959:	    {
    #####:  960:	      discardCard(handPos, currentPlayer, state, 0);
        -:  961:	    }
        -:  962:				
        -:  963:	  //draw 4
    #####:  964:	  for (i = 0; i < 4; i++)
        -:  965:	    {
    #####:  966:	      drawCard(currentPlayer, state);
        -:  967:	    }
        -:  968:				
        -:  969:	  //other players discard hand and redraw if hand size > 4
    #####:  970:	  for (i = 0; i < state->numPlayers; i++)
        -:  971:	    {
    #####:  972:	      if (i != currentPlayer)
        -:  973:		{
    #####:  974:		  if ( state->handCount[i] > 4 )
        -:  975:		    {
        -:  976:		      //discard hand
    #####:  977:		      while( state->handCount[i] > 0 )
        -:  978:			{
    #####:  979:			  discardCard(handPos, i, state, 0);
        -:  980:			}
        -:  981:							
        -:  982:		      //draw 4
    #####:  983:		      for (j = 0; j < 4; j++)
        -:  984:			{
    #####:  985:			  drawCard(i, state);
        -:  986:			}
        -:  987:		    }
        -:  988:		}
        -:  989:	    }
        -:  990:				
        -:  991:	}
       15:  992:      return 0;
        -:  993:		
        -:  994:    case steward:
       30:  995:      if (choice1 == 1)
        -:  996:	{
        -:  997:	  //+2 cards
       10:  998:	  drawCard(currentPlayer, state);
       10:  999:	  drawCard(currentPlayer, state);
        -: 1000:	}
       20: 1001:      else if (choice1 == 2)
        -: 1002:	{
        -: 1003:	  //+2 coins
        5: 1004:	  state->coins = state->coins + 2;
        -: 1005:	}
        -: 1006:      else
        -: 1007:	{
        -: 1008:	  //trash 2 cards in hand
       15: 1009:	  discardCard(choice2, currentPlayer, state, 1);
       15: 1010:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1011:	}
        -: 1012:			
        -: 1013:      //discard card from hand
       30: 1014:      discardCard(handPos, currentPlayer, state, 0);
       30: 1015:      return 0;
        -: 1016:		
        -: 1017:    case tribute:
       25: 1018:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:	if (state->deckCount[nextPlayer] > 0){
    #####: 1020:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:	  state->deckCount[nextPlayer]--;
        -: 1022:	}
    #####: 1023:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:	  state->discardCount[nextPlayer]--;
        -: 1026:	}
        -: 1027:	else{
        -: 1028:	  //No Card to Reveal
    #####: 1029:	  if (DEBUG){
        -: 1030:	    printf("No cards to reveal\n");
        -: 1031:	  }
        -: 1032:	}
        -: 1033:      }
        -: 1034:	    
        -: 1035:      else{
       25: 1036:	if (state->deckCount[nextPlayer] == 0){
    #####: 1037:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:	    state->deckCount[nextPlayer]++;
    #####: 1040:	    state->discard[nextPlayer][i] = -1;
    #####: 1041:	    state->discardCount[nextPlayer]--;
        -: 1042:	  }
        -: 1043:			    
    #####: 1044:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:	} 
       25: 1046:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       25: 1047:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       25: 1048:	state->deckCount[nextPlayer]--;
       25: 1049:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       25: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       25: 1051:	state->deckCount[nextPlayer]--;
        -: 1052:      }    
        -: 1053:		       
       25: 1054:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        5: 1055:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        5: 1056:	state->playedCardCount++;
        5: 1057:	tributeRevealedCards[1] = -1;
        -: 1058:      }
        -: 1059:
      100: 1060:      for (i = 0; i <= 2; i ++){
       80: 1061:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        5: 1062:	  state->coins += 2;
        -: 1063:	}
        -: 1064:		    
       85: 1065:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
       15: 1066:	  drawCard(currentPlayer, state);
       15: 1067:	  drawCard(currentPlayer, state);
        -: 1068:	}
        -: 1069:	else{//Action Card
       55: 1070:	  state->numActions = state->numActions + 2;
        -: 1071:	}
        -: 1072:      }
        -: 1073:	    
       25: 1074:      return 0;
        -: 1075:		
        -: 1076:    case ambassador:
    #####: 1077:      j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:      if (choice2 > 2 || choice2 < 0)
        -: 1080:	{
    #####: 1081:	  return -1;				
        -: 1082:	}
        -: 1083:
    #####: 1084:      if (choice1 == handPos)
        -: 1085:	{
    #####: 1086:	  return -1;
        -: 1087:	}
        -: 1088:
    #####: 1089:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:	{
    #####: 1091:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:	    {
    #####: 1093:	      j++;
        -: 1094:	    }
        -: 1095:	}
    #####: 1096:      if (j < choice2)
        -: 1097:	{
    #####: 1098:	  return -1;				
        -: 1099:	}
        -: 1100:
    #####: 1101:      if (DEBUG) 
        -: 1102:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:      //increase supply count for choosen card by amount being discarded
    #####: 1105:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:			
        -: 1107:      //each other player gains a copy of revealed card
    #####: 1108:      for (i = 0; i < state->numPlayers; i++)
        -: 1109:	{
    #####: 1110:	  if (i != currentPlayer)
        -: 1111:	    {
    #####: 1112:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:	    }
        -: 1114:	}
        -: 1115:
        -: 1116:      //discard played card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:      //trash copies of cards returned to supply
    #####: 1120:      for (j = 0; j < choice2; j++)
        -: 1121:	{
    #####: 1122:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:	    {
    #####: 1124:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:		{
    #####: 1126:		  discardCard(i, currentPlayer, state, 1);
    #####: 1127:		  break;
        -: 1128:		}
        -: 1129:	    }
        -: 1130:	}			
        -: 1131:
    #####: 1132:      return 0;
        -: 1133:		
        -: 1134:    case cutpurse:
        -: 1135:
    #####: 1136:      updateCoins(currentPlayer, state, 2);
    #####: 1137:      for (i = 0; i < state->numPlayers; i++)
        -: 1138:	{
    #####: 1139:	  if (i != currentPlayer)
        -: 1140:	    {
    #####: 1141:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1142:		{
    #####: 1143:		  if (state->hand[i][j] == copper)
        -: 1144:		    {
    #####: 1145:		      discardCard(j, i, state, 0);
    #####: 1146:		      break;
        -: 1147:		    }
    #####: 1148:		  if (j == state->handCount[i])
        -: 1149:		    {
    #####: 1150:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1151:			{
    #####: 1152:			  if (DEBUG)
        -: 1153:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:			}	
    #####: 1155:		      break;
        -: 1156:		    }		
        -: 1157:		}
        -: 1158:					
        -: 1159:	    }
        -: 1160:				
        -: 1161:	}				
        -: 1162:
        -: 1163:      //discard played card from hand
    #####: 1164:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:      return 0;
        -: 1167:
        -: 1168:		
        -: 1169:    case embargo: 
        -: 1170:      //+2 Coins
    #####: 1171:      state->coins = state->coins + 2;
        -: 1172:			
        -: 1173:      //see if selected pile is in play
    #####: 1174:      if ( state->supplyCount[choice1] == -1 )
        -: 1175:	{
    #####: 1176:	  return -1;
        -: 1177:	}
        -: 1178:			
        -: 1179:      //add embargo token to selected supply pile
    #####: 1180:      state->embargoTokens[choice1]++;
        -: 1181:			
        -: 1182:      //trash card
    #####: 1183:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:      return 0;
        -: 1185:		
        -: 1186:    case outpost:
        -: 1187:      //set outpost flag
    #####: 1188:      state->outpostPlayed++;
        -: 1189:			
        -: 1190:      //discard card
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case salvager:
        -: 1195:      //+1 buy
    #####: 1196:      state->numBuys++;
        -: 1197:			
    #####: 1198:      if (choice1)
        -: 1199:	{
        -: 1200:	  //gain coins equal to trashed card
    #####: 1201:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1202:	  //trash card
    #####: 1203:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case sea_hag:
      525: 1211:      for (i = 0; i < state->numPlayers; i++){
      350: 1212:	if (i != currentPlayer){
      175: 1213:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      175: 1214:	  state->discardCount[i]++;
      175: 1215:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:	}
        -: 1217:      }
      175: 1218:      return 0;
        -: 1219:		
        -: 1220:    case treasure_map:
        -: 1221:      //search hand for another treasure_map
    #####: 1222:      index = -1;
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:	{
    #####: 1225:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1226:	    {
    #####: 1227:	      index = i;
    #####: 1228:	      break;
        -: 1229:	    }
        -: 1230:	}
    #####: 1231:      if (index > -1)
        -: 1232:	{
        -: 1233:	  //trash both treasure cards
    #####: 1234:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1235:	  discardCard(index, currentPlayer, state, 1);
        -: 1236:
        -: 1237:	  //gain 4 Gold cards
    #####: 1238:	  for (i = 0; i < 4; i++)
        -: 1239:	    {
    #####: 1240:	      gainCard(gold, state, 1, currentPlayer);
        -: 1241:	    }
        -: 1242:				
        -: 1243:	  //return success
    #####: 1244:	  return 1;
        -: 1245:	}
        -: 1246:			
        -: 1247:      //no second treasure_map found in hand
    #####: 1248:      return -1;
        -: 1249:    }
        -: 1250:	
    #####: 1251:  return -1;
        -: 1252:}
        -: 1253:
      150: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:	
        -: 1257:  //if card is not trashed, added to Played pile 
      150: 1258:  if (trashFlag < 1)
        -: 1259:    {
        -: 1260:      //add card to played pile
      120: 1261:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      120: 1262:      state->playedCardCount++;
        -: 1263:    }
        -: 1264:	
        -: 1265:  //set played card to -1
      150: 1266:  state->hand[currentPlayer][handPos] = -1;
        -: 1267:	
        -: 1268:  //remove card from player's hand
      150: 1269:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
       10: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
      140: 1274:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:      //reduce number of cards in hand
    #####: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:  else 	
        -: 1280:    {
        -: 1281:      //replace discarded card with last card in hand
      140: 1282:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:      //set last card to -1
      140: 1284:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:      //reduce number of cards in hand
      140: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:	
      150: 1289:  return 0;
        -: 1290:}
        -: 1291:
      390: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:  //Note: supplyPos is enum of choosen card
        -: 1295:	
        -: 1296:  //check if supply pile is empty (0) or card is not used in game (-1)
      390: 1297:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:      return -1;
        -: 1300:    }
        -: 1301:	
        -: 1302:  //added card for [whoseTurn] current player:
        -: 1303:  // toFlag = 0 : add to discard
        -: 1304:  // toFlag = 1 : add to deck
        -: 1305:  // toFlag = 2 : add to hand
        -: 1306:
      390: 1307:  if (toFlag == 1)
        -: 1308:    {
    #####: 1309:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:      state->deckCount[player]++;
        -: 1311:    }
      390: 1312:  else if (toFlag == 2)
        -: 1313:    {
        5: 1314:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1315:      state->handCount[player]++;
        -: 1316:    }
        -: 1317:  else
        -: 1318:    {
      385: 1319:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      385: 1320:      state->discardCount[player]++;
        -: 1321:    }
        -: 1322:	
        -: 1323:  //decrease number in supply pile
      390: 1324:  state->supplyCount[supplyPos]--;
        -: 1325:	 
      390: 1326:  return 0;
        -: 1327:}
        -: 1328:
     6345: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:  int i;
        -: 1332:	
        -: 1333:  //reset coin count
     6345: 1334:  state->coins = 0;
        -: 1335:
        -: 1336:  //add coins for each Treasure card in player's hand
    37880: 1337:  for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
    31535: 1339:      if (state->hand[player][i] == copper)
        -: 1340:	{
    10410: 1341:	  state->coins += 1;
        -: 1342:	}
    21125: 1343:      else if (state->hand[player][i] == silver)
        -: 1344:	{
      295: 1345:	  state->coins += 2;
        -: 1346:	}
    20830: 1347:      else if (state->hand[player][i] == gold)
        -: 1348:	{
    #####: 1349:	  state->coins += 3;
        -: 1350:	}	
        -: 1351:    }	
        -: 1352:
        -: 1353:  //add bonus
     6345: 1354:  state->coins += bonus;
        -: 1355:
     6345: 1356:  return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c
        -: 1361:
