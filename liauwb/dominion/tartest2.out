File 'dominion.c'
Lines executed:59.20% of 576
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     6860:    8:int compare(const void* a, const void* b) {
     6860:    9:  if (*(int*)a > *(int*)b)
     3236:   10:    return 1;
     3624:   11:  if (*(int*)a < *(int*)b)
     1392:   12:    return -1;
     2232:   13:  return 0;
        -:   14:}
        -:   15:
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       11:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        1:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
      156:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      156:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      156:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      156:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2756:  214:  while (state->deckCount[player] > 0) {
     2444:  215:    card = floor(Random() * state->deckCount[player]);
     2444:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2444:  217:    newDeckPos++;
    12337:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     9893:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2444:  221:    state->deckCount[player]--;
        -:  222:  }
     2600:  223:  for (i = 0; i < newDeckPos; i++) {
     2444:  224:    state->deck[player][i] = newDeck[i];
     2444:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      156:  228:  return 0;
        -:  229:}
        -:  230:
      686:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      686:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      686:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      686:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      686:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      686:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
      613:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       73:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       29:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       44:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       44:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       44:  269:  return 0;
        -:  270:}
        -:  271:
      115:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
      115:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      115:  280:  who = state->whoseTurn;
        -:  281:
      115:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      115:  286:  } else if (supplyCount(supplyPos, state) <1){
        8:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        8:  289:    return -1;
      107:  290:  } else if (state->coins < getCost(supplyPos)){
       24:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       24:  293:    return -1;
        -:  294:  } else {
       83:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       83:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       83:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       83:  300:    state->numBuys--;
       83:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       83:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      690:  315:int handCard(int handPos, struct gameState *state) {
      690:  316:  int currentPlayer = whoseTurn(state);
      690:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      204:  320:int supplyCount(int card, struct gameState *state) {
      204:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
     1730:  346:int whoseTurn(struct gameState *state) {
     1730:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      483:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      483:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     2854:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     2371:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     2371:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      483:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      483:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      242:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
      241:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      483:  370:  state->outpostPlayed = 0;
      483:  371:  state->phase = 0;
      483:  372:  state->numActions = 1;
      483:  373:  state->coins = 0;
      483:  374:  state->numBuys = 1;
      483:  375:  state->playedCardCount = 0;
      483:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     2898:  380:  for (k = 0; k < 5; k++){
     2415:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      483:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      483:  387:  return 0;
        -:  388:}
        -:  389:
      484:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      484:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      484:  401:  j = 0;
    12584:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    12100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      362:  406:	  j++;
        -:  407:	}
        -:  408:    }
      484:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
      483:  414:  return 0;
        -:  415:}
        -:  416:
      485:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      485:  420:  int score = 0;
        -:  421:  //score from hand
     2861:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     2376:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     2376:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     2376:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     2376:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     2376:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     2376:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     3402:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     2917:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     2917:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     2917:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     2917:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     2917:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     2917:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     3402:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     2917:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     2917:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     2917:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     2917:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     2917:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     2917:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
      485:  454:  return score;
        -:  455:}
        -:  456:
        1:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
        5:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
        4:  467:      if (i >= state->numPlayers)
        -:  468:	{
        2:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
        2:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
        1:  478:  j = 0;
        5:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
        4:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
        1:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
        1:  489:  currentPlayer = whoseTurn(state);
        5:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
        4:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
        1:  499:  j = 0;
        5:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
        4:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
        1:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
        5:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
        4:  512:      if ( players[i] == highScore )
        -:  513:	{
        1:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
        3:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
        1:  522:  return 0;
        -:  523:}
        -:  524:
     2440:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     2440:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     2578:  533:    for (i = 0; i < state->discardCount[player];i++){
     2424:  534:      state->deck[player][i] = state->discard[player][i];
     2424:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      154:  538:    state->deckCount[player] = state->discardCount[player];
      154:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      154:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
      154:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      154:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      154:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
      154:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      154:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      154:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
      154:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      154:  563:    state->deckCount[player]--;
      154:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     2286:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
     2286:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     2286:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2286:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2286:  576:    state->deckCount[player]--;
     2286:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     2440:  580:  return 0;
        -:  581:}
        -:  582:
      218:  583:int getCost(int cardNumber)
        -:  584:{
      218:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
       18:  588:      return 0;
        -:  589:    case estate:
       18:  590:      return 2;
        -:  591:    case duchy:
        8:  592:      return 5;
        -:  593:    case province:
       17:  594:      return 8;
        -:  595:    case copper:
       23:  596:      return 0;
        -:  597:    case silver:
        6:  598:      return 3;
        -:  599:    case gold:
       11:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
        7:  612:      return 4;
        -:  613:    case smithy:
       10:  614:      return 4;
        -:  615:    case village:
       13:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
        4:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
       22:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
       11:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
       23:  632:      return 2;
        -:  633:    case outpost:
        9:  634:      return 5;
        -:  635:    case salvager:
       12:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
        6:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int doAdventurer(int currentPlayer, struct gameState *state){
    #####:  647:	int drawntreasure = 0;
        -:  648:	int cardDrawn;
    #####:  649:	int z = 0;// this is the counter for the temp hand
        -:  650:	int temphand[MAX_HAND];
    #####:  651:	while(drawntreasure<2){
    #####:  652:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:		  shuffle(currentPlayer, state);
        -:  654:		}
    #####:  655:		drawCard(currentPlayer, state);
    #####:  656:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  657:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  658:		  drawntreasure++;
        -:  659:		else{
    #####:  660:			state->discard[currentPlayer][(state->discardCount[currentPlayer])+1] = cardDrawn;
    #####:  661:			state->hand[currentPlayer][state->handCount[currentPlayer]-1] = -1;
    #####:  662:			state->handCount[currentPlayer]--;
        -:  663:		}
        -:  664:    }
    #####:  665:	return 0;
        -:  666:}
        -:  667:
    #####:  668:int doCouncil_room(int handPos, int currentPlayer, struct gameState *state){
        -:  669:	int i;
    #####:  670:	for (i = 0; i < 4; i++)
        -:  671:	{
    #####:  672:	  drawCard(currentPlayer, state);
        -:  673:	}
        -:  674:			
        -:  675:      //+1 Buy
    #####:  676:      state->numBuys++;
        -:  677:			
        -:  678:      //Each other player draws a card
    #####:  679:      for (i = 0; i < state->numPlayers; i++)
        -:  680:	{
    #####:  681:	  if ( i != currentPlayer )
        -:  682:	    {
    #####:  683:	      drawCard(i, state);
        -:  684:	    }
        -:  685:	}
        -:  686:			
        -:  687:      //put played card in played card pile
    #####:  688:      discardCard(handPos, currentPlayer, state, 0);
    #####:  689:	  return 0;
        -:  690:}
        -:  691:
        6:  692:int doVillage(int handPos, int currentPlayer, struct gameState *state){
        -:  693: //+1 Card
        6:  694:      drawCard(currentPlayer, state);
        -:  695:			
        -:  696:      //+2 Actions
        6:  697:      state->numActions = state->numActions + 2;
        -:  698:			
        -:  699:      //discard played card from hand
        6:  700:      discardCard(handPos, currentPlayer, state, 0);
        6:  701:	  return 0;
        -:  702:}
        -:  703:
        2:  704:int doGreat_hall(int handPos, int currentPlayer, struct gameState *state){
        -:  705:	 //+1 Card
        2:  706:      drawCard(currentPlayer, state);
        -:  707:			
        -:  708:      //+1 Actions
        2:  709:      state->numActions++;
        -:  710:			
        -:  711:      //discard card from hand
        2:  712:      discardCard(handPos, currentPlayer, state, 0);
        2:  713:	  return 0;
        -:  714:}
        -:  715:
        4:  716:int doSmithy(int handPos, int currentPlayer, struct gameState *state){
        -:  717:	 //+3 Cards
        -:  718:	 int i;
       16:  719:      for (i = 0; i < 3; i++)
        -:  720:	{
       12:  721:	  drawCard(currentPlayer, state);
        -:  722:	}
        -:  723:			
        -:  724:      //discard card from hand
        4:  725:      discardCard(handPos, currentPlayer, state, 0);
        4:  726:	  return 0;
        -:  727:}
        -:  728:
       73:  729:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  730:{
        -:  731:  int i;
        -:  732:  int j;
        -:  733:  int k;
        -:  734:  int x;
        -:  735:  int index;
       73:  736:  int currentPlayer = whoseTurn(state);
       73:  737:  int nextPlayer = currentPlayer + 1;
        -:  738:
       73:  739:  int tributeRevealedCards[2] = {-1, -1};
        -:  740:  int temphand[MAX_HAND];// moved above the if statement
       73:  741:  if (nextPlayer > (state->numPlayers - 1)){
       36:  742:    nextPlayer = 0;
        -:  743:  }
        -:  744:  
        -:  745:	
        -:  746:  //uses switch to select card and perform actions
       73:  747:  switch( card ) 
        -:  748:    {
        -:  749:    case adventurer:
    #####:  750:	  doAdventurer(currentPlayer, state);
    #####:  751:      return 0;
        -:  752:			
        -:  753:    case council_room:
        -:  754:      //+4 Cards
    #####:  755:	  doCouncil_room(handPos, currentPlayer, state);
        -:  756:			
    #####:  757:      return 0;
        -:  758:			
        -:  759:    case feast:
        -:  760:      //gain card with cost up to 5
        -:  761:      //Backup hand
    #####:  762:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  763:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  764:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  765:      }
        -:  766:      //Backup hand
        -:  767:
        -:  768:      //Update Coins for Buy
    #####:  769:      updateCoins(currentPlayer, state, 5);
    #####:  770:      x = 1;//Condition to loop on
    #####:  771:      while( x == 1) {//Buy one card
    #####:  772:	if (supplyCount(choice1, state) <= 0){
    #####:  773:	  if (DEBUG)
        -:  774:	    printf("None of that card left, sorry!\n");
        -:  775:
    #####:  776:	  if (DEBUG){
        -:  777:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  778:	  }
        -:  779:	}
    #####:  780:	else if (state->coins < getCost(choice1)){
    #####:  781:	  printf("That card is too expensive!\n");
        -:  782:
    #####:  783:	  if (DEBUG){
        -:  784:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  785:	  }
        -:  786:	}
        -:  787:	else{
        -:  788:
    #####:  789:	  if (DEBUG){
        -:  790:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:	  }
        -:  792:
    #####:  793:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  794:	  x = 0;//No more buying cards
        -:  795:
    #####:  796:	  if (DEBUG){
        -:  797:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  798:	  }
        -:  799:
        -:  800:	}
        -:  801:      }     
        -:  802:
        -:  803:      //Reset Hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  805:	state->hand[currentPlayer][i] = temphand[i];
    #####:  806:	temphand[i] = -1;
        -:  807:      }
        -:  808:      //Reset Hand
        -:  809:      			
    #####:  810:      return 0;
        -:  811:			
        -:  812:    case gardens:
    #####:  813:      return -1;
        -:  814:			
        -:  815:    case mine:
    #####:  816:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  817:
    #####:  818:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  819:	{
    #####:  820:	  return -1;
        -:  821:	}
        -:  822:		
    #####:  823:      if (choice2 > treasure_map || choice2 < curse)
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:
    #####:  828:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:
    #####:  833:      gainCard(choice2, state, 2, currentPlayer);
        -:  834:
        -:  835:      //discard card from hand
    #####:  836:      discardCard(handPos, currentPlayer, state, 0);
        -:  837:
        -:  838:      //discard trashed card
    #####:  839:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  840:	{
    #####:  841:	  if (state->hand[currentPlayer][i] == j)
        -:  842:	    {
    #####:  843:	      discardCard(i, currentPlayer, state, 0);			
    #####:  844:	      break;
        -:  845:	    }
        -:  846:	}
        -:  847:			
    #####:  848:      return 0;
        -:  849:			
        -:  850:    case remodel:
       12:  851:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  852:
       12:  853:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  854:	{
       10:  855:	  return -1;
        -:  856:	}
        -:  857:
        2:  858:      gainCard(choice2, state, 0, currentPlayer);
        -:  859:
        -:  860:      //discard card from hand
        2:  861:      discardCard(handPos, currentPlayer, state, 0);
        -:  862:
        -:  863:      //discard trashed card
        4:  864:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  865:	{
        4:  866:	  if (state->hand[currentPlayer][i] == j)
        -:  867:	    {
        2:  868:	      discardCard(i, currentPlayer, state, 0);			
        2:  869:	      break;
        -:  870:	    }
        -:  871:	}
        -:  872:
        -:  873:
        2:  874:      return 0;
        -:  875:		
        -:  876:    case smithy:
        4:  877:     doSmithy(handPos, currentPlayer, state);
        4:  878:      return 0;
        -:  879:		
        -:  880:    case village:
        6:  881:     doVillage(handPos, currentPlayer, state);
        6:  882:      return 0;
        -:  883:		
        -:  884:    case baron:
    #####:  885:      state->numBuys++;//Increase buys by 1!
    #####:  886:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  887:	int p = 0;//Iterator for hand!
    #####:  888:	int card_not_discarded = 1;//Flag for discard set!
    #####:  889:		while(card_not_discarded){
    #####:  890:		  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  891:			state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:			state->discardCount[currentPlayer]++;
    #####:  894:			for (;p < state->handCount[currentPlayer]; p++){
    #####:  895:			  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  896:			}
    #####:  897:			state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:			state->handCount[currentPlayer]--;
    #####:  899:			card_not_discarded = 0;//Exit the loop
        -:  900:		  }
    #####:  901:		  else if (p > state->handCount[currentPlayer]){
    #####:  902:			if(DEBUG) {
        -:  903:			  printf("No estate cards in your hand, invalid choice\n");
        -:  904:			  printf("Must gain an estate if there are any\n");
        -:  905:			}
    #####:  906:			if (supplyCount(estate, state) > 0){
    #####:  907:			  gainCard(estate, state, 0, currentPlayer);
    #####:  908:			  if (supplyCount(estate, state) == 0){
    #####:  909:			isGameOver(state);
        -:  910:			  }
        -:  911:			}
    #####:  912:			card_not_discarded = 0;//Exit the loop
        -:  913:		  }
        -:  914:					
        -:  915:		  else{
    #####:  916:			p++;//Next card
        -:  917:		  }
        -:  918:		}
        -:  919:    }
        -:  920:			    
        -:  921:      else{
    #####:  922:	if (supplyCount(estate, state) > 0){
    #####:  923:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  924:	  if (supplyCount(estate, state) == 0){
    #####:  925:	    isGameOver(state);
        -:  926:	  }
        -:  927:	}
        -:  928:      }
        -:  929:	    
        -:  930:      
    #####:  931:      return 0;
        -:  932:		
        -:  933:    case great_hall:
        2:  934:	  doGreat_hall(handPos, currentPlayer, state);
        2:  935:      return 0;
        -:  936:		
        -:  937:    case minion:
        -:  938:      //+1 action
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
        -:  943:			
    #####:  944:      if (choice1)		//+2 coins
        -:  945:	{
    #####:  946:	  state->coins = state->coins + 2;
        -:  947:	}
        -:  948:			
    #####:  949:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  950:	{
        -:  951:	  //discard hand
    #####:  952:	  while(numHandCards(state) > 0)
        -:  953:	    {
    #####:  954:	      discardCard(handPos, currentPlayer, state, 0);
        -:  955:	    }
        -:  956:				
        -:  957:	  //draw 4
    #####:  958:	  for (i = 0; i < 4; i++)
        -:  959:	    {
    #####:  960:	      drawCard(currentPlayer, state);
        -:  961:	    }
        -:  962:				
        -:  963:	  //other players discard hand and redraw if hand size > 4
    #####:  964:	  for (i = 0; i < state->numPlayers; i++)
        -:  965:	    {
    #####:  966:	      if (i != currentPlayer)
        -:  967:		{
    #####:  968:		  if ( state->handCount[i] > 4 )
        -:  969:		    {
        -:  970:		      //discard hand
    #####:  971:		      while( state->handCount[i] > 0 )
        -:  972:			{
    #####:  973:			  discardCard(handPos, i, state, 0);
        -:  974:			}
        -:  975:							
        -:  976:		      //draw 4
    #####:  977:		      for (j = 0; j < 4; j++)
        -:  978:			{
    #####:  979:			  drawCard(i, state);
        -:  980:			}
        -:  981:		    }
        -:  982:		}
        -:  983:	    }
        -:  984:				
        -:  985:	}
    #####:  986:      return 0;
        -:  987:		
        -:  988:    case steward:
        9:  989:      if (choice1 == 1)
        -:  990:	{
        -:  991:	  //+2 cards
    #####:  992:	  drawCard(currentPlayer, state);
    #####:  993:	  drawCard(currentPlayer, state);
        -:  994:	}
        9:  995:      else if (choice1 == 2)
        -:  996:	{
        -:  997:	  //+2 coins
        2:  998:	  state->coins = state->coins + 2;
        -:  999:	}
        -: 1000:      else
        -: 1001:	{
        -: 1002:	  //trash 2 cards in hand
        7: 1003:	  discardCard(choice2, currentPlayer, state, 1);
        7: 1004:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1005:	}
        -: 1006:			
        -: 1007:      //discard card from hand
        9: 1008:      discardCard(handPos, currentPlayer, state, 0);
        9: 1009:      return 0;
        -: 1010:		
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
    #####: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:	    
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:			    
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1039:	} 
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }    
        -: 1047:		       
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:		    
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1060:	  drawCard(currentPlayer, state);
    #####: 1061:	  drawCard(currentPlayer, state);
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:	    
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case ambassador:
       10: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
       10: 1073:      if (choice2 > 2 || choice2 < 0)
        -: 1074:	{
        4: 1075:	  return -1;				
        -: 1076:	}
        -: 1077:
        6: 1078:      if (choice1 == handPos)
        -: 1079:	{
        2: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
       24: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1084:	{
       20: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1086:	    {
        3: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
        4: 1090:      if (j < choice2)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
        4: 1095:      if (DEBUG) 
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
        4: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:			
        -: 1101:      //each other player gains a copy of revealed card
       12: 1102:      for (i = 0; i < state->numPlayers; i++)
        -: 1103:	{
        8: 1104:	  if (i != currentPlayer)
        -: 1105:	    {
        4: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
        4: 1111:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
        4: 1114:      for (j = 0; j < choice2; j++)
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}			
        -: 1125:
        4: 1126:      return 0;
        -: 1127:		
        -: 1128:    case cutpurse:
        -: 1129:
    #####: 1130:      updateCoins(currentPlayer, state, 2);
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
        -: 1134:	    {
    #####: 1135:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1136:		{
    #####: 1137:		  if (state->hand[i][j] == copper)
        -: 1138:		    {
    #####: 1139:		      discardCard(j, i, state, 0);
    #####: 1140:		      break;
        -: 1141:		    }
    #####: 1142:		  if (j == state->handCount[i])
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1145:			{
    #####: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}	
    #####: 1149:		      break;
        -: 1150:		    }		
        -: 1151:		}
        -: 1152:					
        -: 1153:	    }
        -: 1154:				
        -: 1155:	}				
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:		
        -: 1163:    case embargo: 
        -: 1164:      //+2 Coins
        8: 1165:      state->coins = state->coins + 2;
        -: 1166:			
        -: 1167:      //see if selected pile is in play
        8: 1168:      if ( state->supplyCount[choice1] == -1 )
        -: 1169:	{
    #####: 1170:	  return -1;
        -: 1171:	}
        -: 1172:			
        -: 1173:      //add embargo token to selected supply pile
        8: 1174:      state->embargoTokens[choice1]++;
        -: 1175:			
        -: 1176:      //trash card
        8: 1177:      discardCard(handPos, currentPlayer, state, 1);		
        8: 1178:      return 0;
        -: 1179:		
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
        3: 1182:      state->outpostPlayed++;
        -: 1183:			
        -: 1184:      //discard card
        3: 1185:      discardCard(handPos, currentPlayer, state, 0);
        3: 1186:      return 0;
        -: 1187:		
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
        6: 1190:      state->numBuys++;
        -: 1191:			
        6: 1192:      if (choice1)
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
        4: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1196:	  //trash card
        4: 1197:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1198:	}
        -: 1199:			
        -: 1200:      //discard card
        6: 1201:      discardCard(handPos, currentPlayer, state, 0);
        6: 1202:      return 0;
        -: 1203:		
        -: 1204:    case sea_hag:
    #####: 1205:      for (i = 0; i < state->numPlayers; i++){
    #####: 1206:	if (i != currentPlayer){
    #####: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1208:	  state->discardCount[i]++;
    #####: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
    #####: 1212:      return 0;
        -: 1213:		
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
       13: 1216:      index = -1;
       78: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1218:	{
       65: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
       13: 1225:      if (index > -1)
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
        -: 1235:	    }
        -: 1236:				
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:			
        -: 1241:      //no second treasure_map found in hand
       13: 1242:      return -1;
        -: 1243:    }
        -: 1244:	
    #####: 1245:  return -1;
        -: 1246:}
        -: 1247:
       64: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:	
        -: 1251:  //if card is not trashed, added to Played pile 
       64: 1252:  if (trashFlag < 1)
        -: 1253:    {
        -: 1254:      //add card to played pile
       38: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       38: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:	
        -: 1259:  //set played card to -1
       64: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:	
        -: 1262:  //remove card from player's hand
       64: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
        3: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
       61: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else 	
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
       61: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
       61: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
       61: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:	
       64: 1283:  return 0;
        -: 1284:}
        -: 1285:
       89: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:	
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
       89: 1291:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1292:    {
    #####: 1293:      return -1;
        -: 1294:    }
        -: 1295:	
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
       89: 1301:  if (toFlag == 1)
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
       89: 1306:  else if (toFlag == 2)
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
       89: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       89: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //decrease number in supply pile
       89: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:	 
       89: 1320:  return 0;
        -: 1321:}
        -: 1322:
     1011: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
     1011: 1326:	printf("updating coins\n");
        -: 1327:  //reset coin count
     1011: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
     5978: 1331:  for (i = 0; i < state->handCount[player]; i++)
        -: 1332:    {
     4967: 1333:      if (state->hand[player][i] == copper)
        -: 1334:	{
     1989: 1335:	  state->coins += 1;
        -: 1336:	}
     2978: 1337:      else if (state->hand[player][i] == silver)
        -: 1338:	{
      188: 1339:	  state->coins += 2;
        -: 1340:	}
     2790: 1341:      else if (state->hand[player][i] == gold)
        -: 1342:	{
      229: 1343:	  state->coins += 3;
        -: 1344:	}	
        -: 1345:    }	
        -: 1346:
        -: 1347:  //add bonus
     1011: 1348:  state->coins += bonus;
        -: 1349:
     1011: 1350:  return 0;
        -: 1351:}
        -: 1352:
        -: 1353:
        -: 1354://end of dominion.c
        -: 1355:
