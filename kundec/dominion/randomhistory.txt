Adventurer - 

Game State generation:
First task was to randomly generate valid full gameStates.  I started by randomly generating sets of kingdom cards and passing them to the initializeGame() function.  By looping through that until I got a valid result.  I had to adjust the code to get it to work correctly, then I added a random number of players to the intitialize function call.  With valid gameStates being generated with predictable values for each player, I sought to create a random state for the player testing the card routine.  

Randomly selecting the test player, I generated random deck, hand, and discard pile sizes with random cards in each. 

Once the test gameState was prepared, I copied it so I could compare before and after.  Then, I ran the adventurer routine on one copy of the test game state.  I logged the before and after gamestates to my output file, making sure that actions were being taken.  I added a loop to do this 1,000 times, to be check that memory was being properly freed at the end of the test (commenting out the free commands on some runs to compare).  

Checking actions:
- First test was making sure there weren't too many cards added to the hand.  I adjusted the routine to cause this error, and the test correctly recorded it.  
- Secondly, I ensured that the same number of each card type were in the combined deck, discard, and additional cards in the hand before and after the routine ran.  I counted them all and showed errors for each count change.  I changed the routine to shift each drawn card by one, and the test recorded the issue correctly.
- Then, I made sure the same cards were in the same place in the hand before and after the routine.  I added a line in the routine to change a random card in the hand, and the test correctly recorded the error.
- I checked the deck in the same way, ensuring a shuffle wasn't required.  I added a line in the routine to change a random card in the deck, and the test correctly recorded the error.
- I then made sure that if there weren't a combined 2 treasure cards in the deck and discard piles, all cards in the deck and discard ended up in the discard pile.  

Running the tests:
I boosted my max tests from 10 to 100, then to 10,000.  I got a seg-fault when the routine indexed past the end of the discard array, crushing other areas of the game state and beyond.
After running these tests over 1million times in a single go, I realized that I missed a test to see if the routine had actually *reduced* the number of cards in the hand.  I added a test for just that and it was found in the first run of 100 after it was added.  

Bugs:  
I logged the two bugs that this test found.

Feast - 

Game State generation:
I started with the generator from adventurer testing, but I added a routine that randomized the supply numbers of the kingdom cards.  Running through 10 cycles of generation, the supply values were being correctly randomized between 0 and maximum for that card.  

Checking actions:
Beginning with the most basic, I simply ran the cardEffect routine for feast with Curse (A card that can always be purchased) and with Gold (A card that is too expensive).  The Curse test executed, but the Gold test had to be killed off due to an infinite loop printing "That card is too expensive!" until the process was killed off.  In order to complete the test, I removed the while loop.

I added tests for each portion of the gameState that should be affected, adding code to the function to force each error.  Along the way, I found and logged a few different bugs.  When a valid choice is made, the procedure executes correctly.  Invalid choices do not return a failure and change the gamestate.  

Coverage:
As soon as I increased the number of tests past one thousand, I hit 100% reachable statement coverage in both cases.  There are statements in Feast that are unreachable due to a DEBUG variable flag.  