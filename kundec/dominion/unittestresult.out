Starting Unit Test 1

*********************************************************
Successfully finished Unit Test 1
*********************************************************


Starting Unit Test 2 (-initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state)-)

minTest result -1
maxTest result -1
duplicateTest result -1

****************2-Player Setup Values********************
twoPlayerTest result 0

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Copper Copper Copper Estate Copper 
Player Deck Count:  5
Player Deck:  Estate Estate Copper Copper Copper 
Player Discard Count:  0

Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Estate Copper Copper Copper Copper 
Player Discard Count:  0
Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  4, Cards Played:  0

****************3-Player Setup Values********************
threePlayerTest result 0

Treasure Cards:
Copper:  39, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  12, Duchy:  12,  Province:  12,  Curse:  20
Non-Standard (Count/Embargo)- Gardens:  12/0, Great Hall:  12/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Estate Copper Estate Copper Copper 
Player Deck Count:  5
Player Deck:  Estate Copper Copper Copper Copper 
Player Discard Count:  0

Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Copper Copper Copper Copper Copper Copper Copper Estate Estate 
Player Discard Count:  0

Player 3:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Copper Estate Copper Copper Copper Copper Estate Copper Copper Estate 
Player Discard Count:  0
Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

****************4-Player Setup Values********************
fourPlayerTest result 0

Treasure Cards:
Copper:  32, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  12, Duchy:  12,  Province:  12,  Curse:  30
Non-Standard (Count/Embargo)- Gardens:  12/0, Great Hall:  12/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Copper Estate Copper Estate Copper 
Player Deck Count:  5
Player Deck:  Estate Copper Copper Copper Copper 
Player Discard Count:  0

Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Copper Estate Copper Estate Copper Estate Copper Copper Copper Copper 
Player Discard Count:  0

Player 3:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Copper Copper Copper Copper Copper Copper Estate Copper Estate 
Player Discard Count:  0

Player 4:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Copper Copper Estate Estate Copper Estate Copper Copper Copper Copper 
Player Discard Count:  0
Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

*********************************************************
Successfully finished Unit Test 2
*********************************************************


Starting Unit Test 3 (fullDeckCount)
Copper count:  7, Estate Count:  3, Feast Count:  0, Baron Count:  0
*********************************************************
Successfully finished Unit Test 3
*********************************************************


Starting Unit Test 4 (drawCard)

**********************Before Draw**************************

Treasure Cards:
Copper:  32, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  12, Duchy:  12,  Province:  12,  Curse:  30
Non-Standard (Count/Embargo)- Gardens:  12/0, Great Hall:  12/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Copper Estate Copper Estate Copper 
Player Deck Count:  5
Player Deck:  Estate Copper Copper Copper Copper 
Player Discard Count:  0

Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Copper Estate Copper Estate Copper Estate Copper Copper Copper Copper 
Player Discard Count:  0

Player 3:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Copper Copper Copper Copper Copper Copper Estate Copper Estate 
Player Discard Count:  0

Player 4:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Copper Copper Estate Estate Copper Estate Copper Copper Copper Copper 
Player Discard Count:  0
Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

**********************After Draw**************************

Treasure Cards:
Copper:  32, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  12, Duchy:  12,  Province:  12,  Curse:  30
Non-Standard (Count/Embargo)- Gardens:  12/0, Great Hall:  12/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  6
Player Hand:  Copper Estate Copper Estate Copper Copper 
Player Deck Count:  4
Player Deck:  Estate Copper Copper Copper 
Player Discard Count:  0

Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Copper Estate Copper Estate Copper Estate Copper Copper Copper Copper 
Player Discard Count:  0

Player 3:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Copper Copper Copper Copper Copper Copper Estate Copper Estate 
Player Discard Count:  0

Player 4:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Copper Copper Estate Estate Copper Estate Copper Copper Copper Copper 
Player Discard Count:  0
Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

************************************************

Top of deck:  Copper
New Card in Hand:  Copper

*********************************************************
Successfully finished Unit Test 4
*********************************************************


Starting Card Test 1 (Smithy)

*********Before card effect***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Smithy Copper Copper Copper Copper 
Player Deck Count:  5
Player Deck:  Estate Silver Gold Village Minion 
Player Discard Count:  0


Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

*********After card effect***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  7
Player Hand:  Gold Copper Copper Copper Copper Minion Village 
Player Deck Count:  2
Player Deck:  Estate Silver 
Player Discard Count:  0


Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  1
Hand Count Before:  5, Hand Count After:  7
Deck Count Before:  5, Deck Count After:  2
2 - Hand Count Before:  0, Hand Count After:  0
2 - Deck Count Before:  10, Deck Count After:  10

*********************************************************
*********Successfully finished Card Test 1***********
*********************************************************


Starting Card Test 2 (adventurer)

*********Before card effect***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Adventurer Copper Copper Copper Copper 
Player Deck Count:  5
Player Deck:  Estate Silver Gold Village Minion 
Player Discard Count:  0


Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

*********After card effect***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  7
Player Hand:  Adventurer Copper Copper Copper Copper Gold Silver 
Player Deck Count:  1
Player Deck:  Estate 
Player Discard Count:  2
Village Minion 

Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

*********************************************************
*********Successfully finished Card Test 2***********
*********************************************************


Starting Card Test 3 (baron)

*********Before card effect (No Discard)***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Estate Baron Copper Copper Copper 
Player Deck Count:  5
Player Deck:  Estate Silver Gold Village Minion 
Player Discard Count:  0


Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

*********After card effect(No Discard)***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  6, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Estate Baron Copper Copper Copper 
Player Deck Count:  5
Player Deck:  Estate Silver Gold Village Minion 
Player Discard Count:  1
Estate 

Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  2, Coins:  3, Cards Played:  0

*********Before card effect (With Discard)***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Estate Baron Copper Estate Copper 
Player Deck Count:  5
Player Deck:  Estate Silver Gold Village Minion 
Player Discard Count:  0


Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

*********After card effect(With Discard)***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  4
Player Hand:  Baron Copper Estate Copper 
Player Deck Count:  5
Player Deck:  Estate Silver Gold Village Minion 
Player Discard Count:  1
Estate 

Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  2, Coins:  7, Cards Played:  0

*********************************************************
*********Successfully finished Card Test 3***********
*********************************************************


Starting Card Test 4 (gardens)

*********Before card effect***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Estate Baron Copper Gardens Copper 
Player Deck Count:  5
Player Deck:  Estate Silver Gold Village Minion 
Player Discard Count:  0


Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0

*********After card effect***********

Treasure Cards:
Copper:  46, Silver:  40, Gold:  30

Victory Cards:
Standard - Estate:  8, Duchy:  8,  Province:  8,  Curse:  10
Non-Standard (Count/Embargo)- Gardens:  8/0, Great Hall:  8/0

Non-Victory Cards (Count/Embargo):  
Council Room:  10/0, Feast:  10/0,  Mine:  10/0,  Cutpurse:  10/0
Treasure Map:  10/0, Outpost:  10/0,  Smithy:  10/0,  Embargo:  10/0

Unused Cards (Count/Embargo):  
Adventurer:  -1/0, Remodel:  -1/0, Village:  -1/0, Baron:  -1/0
Minion:  -1/0, Steward:  -1/0, Tribute:  -1/0, Ambassador:  -1/0
Salvager:  -1/0, Sea Hag:  -1/0

Player 1:  
Player Hand Count:  5
Player Hand:  Estate Baron Copper Gardens Copper 
Player Deck Count:  5
Player Deck:  Estate Silver Gold Village Minion 
Player Discard Count:  0


Player 2:  
Player Hand Count:  0
Player Hand:  
Player Deck Count:  10
Player Deck:  Estate Estate Copper Copper Copper Tribute Salvager Adventurer Baron Remodel 
Player Discard Count:  0

Game State values
Outpost Played:  0, Outpost Turn:  0
Player's Turn:  0, Phase:  0, Actions Remaining:  1, Buys Remaining:  1, Coins:  3, Cards Played:  0
cardEffect returns:  -1

*********************************************************
*********Successfully finished Card Test 4***********
*********************************************************

File 'dominion.c'
Lines executed:35.54% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      406:    8:int compare(const void* a, const void* b) {
      406:    9:	if (*(int*)a > *(int*)b)
    #####:   10:		return 1;
      406:   11:	if (*(int*)a < *(int*)b)
      145:   12:		return -1;
      261:   13:	return 0;
        -:   14:}
        -:   15:
       14:   16:struct gameState* newGame() {
       14:   17:	struct gameState* g = malloc(sizeof(struct gameState));
       14:   18:	return g;
        -:   19:}
        -:   20:
        9:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:	int k8, int k9, int k10) {
        9:   23:	int* k = malloc(10 * sizeof(int));
        9:   24:	k[0] = k1;
        9:   25:	k[1] = k2;
        9:   26:	k[2] = k3;
        9:   27:	k[3] = k4;
        9:   28:	k[4] = k5;
        9:   29:	k[5] = k6;
        9:   30:	k[6] = k7;
        9:   31:	k[7] = k8;
        9:   32:	k[8] = k9;
        9:   33:	k[9] = k10;
        9:   34:	return k;
        -:   35:}
        -:   36:
       14:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
       14:   44:	SelectStream(1);
       14:   45:	PutSeed((long)randomSeed);
        -:   46:
        -:   47:	//check number of players
       14:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:	{
        2:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
       12:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
      122:   57:	for (i = 0; i < 10; i++)
        -:   58:	{
     1212:   59:		for (j = 0; j < 10; j++)
        -:   60:		{
     1102:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:			{
        1:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
       11:   73:	if (numPlayers == 2)
        -:   74:	{
        7:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
        4:   77:	else if (numPlayers == 3)
        -:   78:	{
        1:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
        3:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
       11:   87:	if (numPlayers == 2)
        -:   88:	{
        7:   89:		state->supplyCount[estate] = 8;
        7:   90:		state->supplyCount[duchy] = 8;
        7:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
        4:   95:		state->supplyCount[estate] = 12;
        4:   96:		state->supplyCount[duchy] = 12;
        4:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
       11:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:	state->supplyCount[silver] = 40;
       11:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
      231:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:	{
     1815:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:		{
     1705:  110:			if (kingdomCards[j] == i)
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
      110:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:				{
       44:  115:					if (numPlayers == 2){
       14:  116:						state->supplyCount[i] = 8;
        -:  117:					}
        8:  118:					else{ state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
       88:  122:					state->supplyCount[i] = 10;
        -:  123:				}
      110:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
     1595:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
       40:  138:	for (i = 0; i < numPlayers; i++)
        -:  139:	{
       29:  140:		state->deckCount[i] = 0;
      116:  141:		for (j = 0; j < 3; j++)
        -:  142:		{
       87:  143:			state->deck[i][j] = estate;
       87:  144:			state->deckCount[i]++;
        -:  145:		}
      232:  146:		for (j = 3; j < 10; j++)
        -:  147:		{
      203:  148:			state->deck[i][j] = copper;
      203:  149:			state->deckCount[i]++;
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
       40:  154:	for (i = 0; i < numPlayers; i++)
        -:  155:	{
       29:  156:		if (shuffle(i, state) < 0)
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
       40:  163:	for (i = 0; i < numPlayers; i++)
        -:  164:	{
        -:  165:		//initialize hand size to zero
       29:  166:		state->handCount[i] = 0;
       29:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
      308:  176:	for (i = 0; i <= treasure_map; i++)
        -:  177:	{
      297:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
       11:  182:	state->outpostPlayed = 0;
       11:  183:	state->phase = 0;
       11:  184:	state->numActions = 1;
       11:  185:	state->numBuys = 1;
       11:  186:	state->playedCardCount = 0;
       11:  187:	state->whoseTurn = 0;
       11:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
       66:  192:	for (it = 0; it < 5; it++){
       55:  193:		drawCard(state->whoseTurn, state);
        -:  194:	}
        -:  195:
       11:  196:	updateCoins(state->whoseTurn, state, 0);
        -:  197:
       11:  198:	return 0;
        -:  199:}
        -:  200:
       29:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
       29:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
       29:  209:	if (state->deckCount[player] < 1)
    #####:  210:		return -1;
       29:  211:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      348:  214:	while (state->deckCount[player] > 0) {
      290:  215:		card = floor(Random() * state->deckCount[player]);
      290:  216:		newDeck[newDeckPos] = state->deck[player][card];
      290:  217:		newDeckPos++;
     1054:  218:		for (i = card; i < state->deckCount[player] - 1; i++) {
      764:  219:			state->deck[player][i] = state->deck[player][i + 1];
        -:  220:		}
      290:  221:		state->deckCount[player]--;
        -:  222:	}
      319:  223:	for (i = 0; i < newDeckPos; i++) {
      290:  224:		state->deck[player][i] = newDeck[i];
      290:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
       29:  228:	return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
    #####:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
    #####:  237:	if (state->phase != 0)
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
    #####:  243:	if (state->numActions < 1)
        -:  244:	{
    #####:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
    #####:  249:	card = handCard(handPos, state);
        -:  250:
        -:  251:	//check if selected card is an action
    #####:  252:	if (card < adventurer || card > treasure_map)
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
    #####:  258:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
    #####:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
    #####:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:	return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG){
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
    #####:  280:	who = state->whoseTurn;
        -:  281:
    #####:  282:	if (state->numBuys < 1){
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
        -:  286:	}
    #####:  287:	else if (supplyCount(supplyPos, state) < 1){
        -:  288:		if (DEBUG)
        -:  289:			printf("There are not any of that type of card left\n");
    #####:  290:		return -1;
        -:  291:	}
    #####:  292:	else if (state->coins < getCost(supplyPos)){
        -:  293:		if (DEBUG)
        -:  294:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:		return -1;
        -:  296:	}
        -:  297:	else {
    #####:  298:		state->phase = 1;
        -:  299:		//state->supplyCount[supplyPos]--;
    #####:  300:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:
    #####:  302:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:		state->numBuys--;
        -:  304:		if (DEBUG)
        -:  305:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:	}
        -:  307:
        -:  308:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:	//state->discardCount[who]++;
        -:  310:
    #####:  311:	return 0;
        -:  312:}
        -:  313:
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:	return state->handCount[whoseTurn(state)];
        -:  316:}
        -:  317:
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:	int currentPlayer = whoseTurn(state);
    #####:  320:	return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
        3:  323:int supplyCount(int card, struct gameState *state) {
        3:  324:	return state->supplyCount[card];
        -:  325:}
        -:  326:
        4:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:	int i;
        4:  329:	int count = 0;
        -:  330:
       24:  331:	for (i = 0; i < state->deckCount[player]; i++)
        -:  332:	{
       20:  333:		if (state->deck[player][i] == card) count++;
        -:  334:	}
        -:  335:
       24:  336:	for (i = 0; i < state->handCount[player]; i++)
        -:  337:	{
       20:  338:		if (state->hand[player][i] == card) count++;
        -:  339:	}
        -:  340:
        4:  341:	for (i = 0; i < state->discardCount[player]; i++)
        -:  342:	{
    #####:  343:		if (state->discard[player][i] == card) count++;
        -:  344:	}
        -:  345:
        4:  346:	return count;
        -:  347:}
        -:  348:
        5:  349:int whoseTurn(struct gameState *state) {
        5:  350:	return state->whoseTurn;
        -:  351:}
        -:  352:
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:	int k;
        -:  355:	int i;
    #####:  356:	int currentPlayer = whoseTurn(state);
        -:  357:
        -:  358:	//Discard hand
    #####:  359:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  360:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:	}
    #####:  363:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:	//Code for determining the player
    #####:  366:	if (currentPlayer < (state->numPlayers - 1)){
    #####:  367:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:	}
        -:  369:	else{
    #####:  370:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:	}
        -:  372:
    #####:  373:	state->outpostPlayed = 0;
    #####:  374:	state->phase = 0;
    #####:  375:	state->numActions = 1;
    #####:  376:	state->coins = 0;
    #####:  377:	state->numBuys = 1;
    #####:  378:	state->playedCardCount = 0;
    #####:  379:	state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:	//int k; move to top
        -:  382:	//Next player draws hand
    #####:  383:	for (k = 0; k < 5; k++){
    #####:  384:		drawCard(state->whoseTurn, state);//Draw a card
        -:  385:	}
        -:  386:
        -:  387:	//Update money
    #####:  388:	updateCoins(state->whoseTurn, state, 0);
        -:  389:
    #####:  390:	return 0;
        -:  391:}
        -:  392:
    #####:  393:int isGameOver(struct gameState *state) {
        -:  394:	int i;
        -:  395:	int j;
        -:  396:
        -:  397:	//if stack of Province cards is empty, the game ends
    #####:  398:	if (state->supplyCount[province] == 0)
        -:  399:	{
    #####:  400:		return 1;
        -:  401:	}
        -:  402:
        -:  403:	//if three supply pile are at 0, the game ends
    #####:  404:	j = 0;
    #####:  405:	for (i = 0; i < 25; i++)
        -:  406:	{
    #####:  407:		if (state->supplyCount[i] == 0)
        -:  408:		{
    #####:  409:			j++;
        -:  410:		}
        -:  411:	}
    #####:  412:	if (j >= 3)
        -:  413:	{
    #####:  414:		return 1;
        -:  415:	}
        -:  416:
    #####:  417:	return 0;
        -:  418:}
        -:  419:
    #####:  420:int scoreFor(int player, struct gameState *state) {
        -:  421:
        -:  422:	int i;
    #####:  423:	int score = 0;
        -:  424:	//score from hand
    #####:  425:	for (i = 0; i < state->handCount[player]; i++)
        -:  426:	{
    #####:  427:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  428:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  429:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  430:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  431:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  432:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  433:	}
        -:  434:
        -:  435:	//score from discard
    #####:  436:	for (i = 0; i < state->discardCount[player]; i++)
        -:  437:	{
    #####:  438:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  439:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  440:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  441:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  442:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  443:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  444:	}
        -:  445:
        -:  446:	//score from deck
    #####:  447:	for (i = 0; i < state->discardCount[player]; i++)
        -:  448:	{
    #####:  449:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  450:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  451:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  452:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  453:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  454:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
        -:  455:	}
        -:  456:
    #####:  457:	return score;
        -:  458:}
        -:  459:
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:	int i;
        -:  462:	int j;
        -:  463:	int highScore;
        -:  464:	int currentPlayer;
        -:  465:
        -:  466:	//get score for each player
    #####:  467:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:	{
        -:  469:		//set unused player scores to -9999
    #####:  470:		if (i >= state->numPlayers)
        -:  471:		{
    #####:  472:			players[i] = -9999;
        -:  473:		}
        -:  474:		else
        -:  475:		{
    #####:  476:			players[i] = scoreFor(i, state);
        -:  477:		}
        -:  478:	}
        -:  479:
        -:  480:	//find highest score
    #####:  481:	j = 0;
    #####:  482:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  483:	{
    #####:  484:		if (players[i] > players[j])
        -:  485:		{
    #####:  486:			j = i;
        -:  487:		}
        -:  488:	}
    #####:  489:	highScore = players[j];
        -:  490:
        -:  491:	//add 1 to players who had less turns
    #####:  492:	currentPlayer = whoseTurn(state);
    #####:  493:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:	{
    #####:  495:		if (players[i] == highScore && i > currentPlayer)
        -:  496:		{
    #####:  497:			players[i]++;
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	//find new highest score
    #####:  502:	j = 0;
    #####:  503:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:	{
    #####:  505:		if (players[i] > players[j])
        -:  506:		{
    #####:  507:			j = i;
        -:  508:		}
        -:  509:	}
    #####:  510:	highScore = players[j];
        -:  511:
        -:  512:	//set winners in array to 1 and rest to 0
    #####:  513:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:	{
    #####:  515:		if (players[i] == highScore)
        -:  516:		{
    #####:  517:			players[i] = 1;
        -:  518:		}
        -:  519:		else
        -:  520:		{
    #####:  521:			players[i] = 0;
        -:  522:		}
        -:  523:	}
        -:  524:
    #####:  525:	return 0;
        -:  526:}
        -:  527:
       63:  528:int drawCard(int player, struct gameState *state)
        -:  529:{
        -:  530:	int count;
        -:  531:	int deckCounter;
       63:  532:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:
        -:  534:		//Step 1 Shuffle the discard pile back into a deck
        -:  535:		int i;
        -:  536:		//Move discard to deck
    #####:  537:		for (i = 0; i < state->discardCount[player]; i++){
    #####:  538:			state->deck[player][i] = state->discard[player][i];
    #####:  539:			state->discard[player][i] = -1;
        -:  540:		}
        -:  541:
    #####:  542:		state->deckCount[player] = state->discardCount[player];
    #####:  543:		state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:		//Shufffle the deck
    #####:  546:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:
        -:  548:		if (DEBUG){//Debug statements
        -:  549:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:		}
        -:  551:
    #####:  552:		state->discardCount[player] = 0;
        -:  553:
        -:  554:		//Step 2 Draw Card
    #####:  555:		count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:		if (DEBUG){//Debug statements
        -:  558:			printf("Current hand count: %d\n", count);
        -:  559:		}
        -:  560:
    #####:  561:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:		if (deckCounter == 0)
    #####:  564:			return -1;
        -:  565:
    #####:  566:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  567:		state->deckCount[player]--;
    #####:  568:		state->handCount[player]++;//Increment hand count
        -:  569:	}
        -:  570:
        -:  571:	else{
       63:  572:		int count = state->handCount[player];//Get current hand count for player
        -:  573:		int deckCounter;
        -:  574:		if (DEBUG){//Debug statements
        -:  575:			printf("Current hand count: %d\n", count);
        -:  576:		}
        -:  577:
       63:  578:		deckCounter = state->deckCount[player];//Create holder for the deck count
       63:  579:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       63:  580:		state->deckCount[player]--;
       63:  581:		state->handCount[player]++;//Increment hand count
        -:  582:	}
        -:  583:
       63:  584:	return 0;
        -:  585:}
        -:  586:
    #####:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:	switch (cardNumber)
        -:  590:	{
        -:  591:	case curse:
    #####:  592:		return 0;
        -:  593:	case estate:
    #####:  594:		return 2;
        -:  595:	case duchy:
    #####:  596:		return 5;
        -:  597:	case province:
    #####:  598:		return 8;
        -:  599:	case copper:
    #####:  600:		return 0;
        -:  601:	case silver:
    #####:  602:		return 3;
        -:  603:	case gold:
    #####:  604:		return 6;
        -:  605:	case adventurer:
    #####:  606:		return 6;
        -:  607:	case council_room:
    #####:  608:		return 5;
        -:  609:	case feast:
    #####:  610:		return 4;
        -:  611:	case gardens:
    #####:  612:		return 4;
        -:  613:	case mine:
    #####:  614:		return 5;
        -:  615:	case remodel:
    #####:  616:		return 4;
        -:  617:	case smithy:
    #####:  618:		return 4;
        -:  619:	case village:
    #####:  620:		return 3;
        -:  621:	case baron:
    #####:  622:		return 4;
        -:  623:	case great_hall:
    #####:  624:		return 3;
        -:  625:	case minion:
    #####:  626:		return 5;
        -:  627:	case steward:
    #####:  628:		return 3;
        -:  629:	case tribute:
    #####:  630:		return 5;
        -:  631:	case ambassador:
    #####:  632:		return 3;
        -:  633:	case cutpurse:
    #####:  634:		return 4;
        -:  635:	case embargo:
    #####:  636:		return 2;
        -:  637:	case outpost:
    #####:  638:		return 5;
        -:  639:	case salvager:
    #####:  640:		return 4;
        -:  641:	case sea_hag:
    #####:  642:		return 4;
        -:  643:	case treasure_map:
    #####:  644:		return 4;
        -:  645:	}
        -:  646:
    #####:  647:	return -1;
        -:  648:}
        -:  649:
        1:  650:void playAdventurer(struct gameState *state, int currentPlayer)
        -:  651:// Reveal cards from deck until 2 Treasure cards are found.  Put those Treasure cards in the hand and discard the rest.
        -:  652:{
        1:  653:	int drawntreasure = 0;
        -:  654:	int temphand[MAX_HAND];
        -:  655:	int cardDrawn;
        1:  656:	int z = 0; // this is the counter for the temp hand
        -:  657:
        6:  658:	while (drawntreasure < 2){
        4:  659:		if (state->deckCount[currentPlayer] < 1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  660:			shuffle(currentPlayer, state);
        -:  661:		}
        4:  662:		drawCard(currentPlayer, state);
        4:  663:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        4:  664:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  665:			drawntreasure++;
        -:  666:		else{
        2:  667:			temphand[z] = cardDrawn;
        2:  668:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2:  669:			z++;
        -:  670:		}
        -:  671:	}
        4:  672:	while (z - 1 >= 0){
        2:  673:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        2:  674:		z = z - 1;
        -:  675:	}
        1:  676:}
        -:  677:
    #####:  678:int playRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos)
        -:  679://Trash a card in the hand, and gain a card costing up to $2 more than the trashed card
        -:  680:{
        -:  681:	int i;
    #####:  682:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  683:
    #####:  684:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  685:	{
    #####:  686:		return -1;
        -:  687:	}
        -:  688:
    #####:  689:	gainCard(choice2, state, 0, currentPlayer);
        -:  690:
        -:  691:	//discard card from hand
    #####:  692:	discardCard(handPos, currentPlayer, state, 0);
        -:  693:
        -:  694:	//discard trashed card
    #####:  695:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  696:	{
    #####:  697:		if (state->hand[currentPlayer][i] == j)
        -:  698:		{
    #####:  699:			discardCard(i, currentPlayer, state, 0);
    #####:  700:			break;
        -:  701:		}
        -:  702:	}
        -:  703:
    #####:  704:	return 0;
        -:  705:}
        -:  706:
        1:  707:void playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  708:// Draw 3 cards
        -:  709:{
        -:  710:	int i;
        4:  711:	for (i = 0; i < 3; i++)
        -:  712:	{
        3:  713:		drawCard(currentPlayer, state);
        -:  714:	}
        -:  715:
        -:  716:	//discard card from hand
        1:  717:	discardCard(handPos, currentPlayer, state, 0);
        1:  718:}
        -:  719:
        2:  720:void playBaron(struct gameState *state, int currentPlayer, int choice1, int handPos)
        -:  721://Add a buy.  OPTION:  Discard an Estate card and gain $4.  Otherwise, gain an Estate card.
        -:  722:{
        2:  723:	state->numBuys++;//Increase buys by 1!
        2:  724:	if (choice1 > 0){//Boolean true or going to discard an estate
        1:  725:		int p = 0;//Iterator for hand!
        1:  726:		int card_not_discarded = 1;//Flag for discard set!
        3:  727:		while (card_not_discarded){
        1:  728:			if (state->hand[currentPlayer][p] == estate){ //Found an estate card!
        1:  729:				state->coins += 4;//Add 4 coins to the amount of coins
        1:  730:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  731:				state->discardCount[currentPlayer]++;
        6:  732:				for (; p < state->handCount[currentPlayer]; p++){
        5:  733:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  734:				}
        1:  735:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  736:				state->handCount[currentPlayer]--;
        1:  737:				card_not_discarded = 0;//Exit the loop
        -:  738:			}
    #####:  739:			else if (p > state->handCount[currentPlayer]){
        -:  740:				if (DEBUG) {
        -:  741:					printf("No estate cards in your hand, invalid choice\n");
        -:  742:					printf("Must gain an estate if there are any\n");
        -:  743:				}
    #####:  744:				if (supplyCount(estate, state) > 0){
    #####:  745:					gainCard(estate, state, 1, currentPlayer);
    #####:  746:					state->supplyCount[estate]--;//Decrement estates
    #####:  747:					if (supplyCount(estate, state) == 0){
    #####:  748:						isGameOver(state);
        -:  749:					}
        -:  750:				}
    #####:  751:				card_not_discarded = 0;//Exit the loop
        -:  752:			}
        -:  753:
        -:  754:			else{
    #####:  755:				p++;//Next card
        -:  756:			}
        -:  757:		}
        -:  758:	}
        -:  759:
        -:  760:	else{
        1:  761:		if (supplyCount(estate, state) > 0){
        1:  762:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  763:			state->supplyCount[estate]--;//Decrement Estates
        1:  764:			if (supplyCount(estate, state) == 0){
    #####:  765:				isGameOver(state);
        -:  766:			}
        -:  767:		}
        -:  768:	}
        2:  769:}
        -:  770:
    #####:  771:int playTreasureMap(struct gameState *state, int currentPlayer, int handPos)
        -:  772://Trashing two treasure map cards from the hand = four gold on top of the deck.
        -:  773:{
        -:  774:	int i;
        -:  775:	int index;
        -:  776:
        -:  777:	//search hand for another treasure_map
    #####:  778:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  779:	{
    #####:  780:		if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -:  781:		{
    #####:  782:			index = i;
    #####:  783:			break;
        -:  784:		}
        -:  785:	}
    #####:  786:	if (index > -1)
        -:  787:	{
        -:  788:		//trash both treasure cards
    #####:  789:		discardCard(handPos, currentPlayer, state, 1);
    #####:  790:		discardCard(index, currentPlayer, state, 1);
        -:  791:
        -:  792:		//gain 4 Gold cards
    #####:  793:		for (i = 0; i < 4; i++)
        -:  794:		{
    #####:  795:			gainCard(gold, state, 1, currentPlayer);
        -:  796:		}
        -:  797:
        -:  798:		//return success
    #####:  799:		return 1;
        -:  800:	}
        -:  801:
        -:  802:	//no second treasure_map found in hand
    #####:  803:	return -1;
        -:  804:}
        -:  805:
        5:  806:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  807:{
        -:  808:	int i;
        -:  809:	int j;
        -:  810:	int k;
        -:  811:	int x;
        5:  812:	int currentPlayer = whoseTurn(state);
        5:  813:	int nextPlayer = currentPlayer + 1;
        -:  814:	int temphand[MAX_HAND];
        -:  815:
        5:  816:	int tributeRevealedCards[2] = { -1, -1 };
        -:  817:
        5:  818:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  819:		nextPlayer = 0;
        -:  820:	}
        -:  821:
        -:  822:	//uses switch to select card and perform actions
        5:  823:	switch (card)
        -:  824:	{
        -:  825:	case adventurer:
        -:  826:
        1:  827:		playAdventurer(state, currentPlayer);
        1:  828:		return 0;
        -:  829:
        -:  830:	case council_room:
        -:  831:		//+4 Cards
    #####:  832:		for (i = 0; i < 4; i++)
        -:  833:		{
    #####:  834:			drawCard(currentPlayer, state);
        -:  835:		}
        -:  836:
        -:  837:		//+1 Buy
    #####:  838:		state->numBuys++;
        -:  839:
        -:  840:		//Each other player draws a card
    #####:  841:		for (i = 0; i < state->numPlayers; i++)
        -:  842:		{
    #####:  843:			if (i != currentPlayer)
        -:  844:			{
    #####:  845:				drawCard(i, state);
        -:  846:			}
        -:  847:		}
        -:  848:
        -:  849:		//put played card in played card pile
    #####:  850:		discardCard(handPos, currentPlayer, state, 0);
        -:  851:
    #####:  852:		return 0;
        -:  853:
        -:  854:	case feast:
        -:  855:		//gain card with cost up to 5
        -:  856:		//Backup hand
    #####:  857:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  858:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  859:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  860:		}
        -:  861:		//Backup hand
        -:  862:
        -:  863:		//Update Coins for Buy
    #####:  864:		updateCoins(currentPlayer, state, 5);
    #####:  865:		x = 1;//Condition to loop on
    #####:  866:		while (x == 1) {//Buy one card
    #####:  867:			if (supplyCount(choice1, state) <= 0){
        -:  868:				if (DEBUG)
        -:  869:					printf("None of that card left, sorry!\n");
        -:  870:
        -:  871:				if (DEBUG){
        -:  872:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  873:				}
        -:  874:			}
    #####:  875:			else if (state->coins < getCost(choice1)){
    #####:  876:				printf("That card is too expensive!\n");
        -:  877:
        -:  878:				if (DEBUG){
        -:  879:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  880:				}
        -:  881:			}
        -:  882:			else{
        -:  883:
        -:  884:				if (DEBUG){
        -:  885:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  886:				}
        -:  887:
    #####:  888:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  889:				x = 0;//No more buying cards
        -:  890:
        -:  891:				if (DEBUG){
        -:  892:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  893:				}
        -:  894:
        -:  895:			}
        -:  896:		}
        -:  897:
        -:  898:		//Reset Hand
    #####:  899:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  900:			state->hand[currentPlayer][i] = temphand[i];
    #####:  901:			temphand[i] = -1;
        -:  902:		}
        -:  903:		//Reset Hand
        -:  904:
    #####:  905:		return 0;
        -:  906:
        -:  907:	case gardens:
        1:  908:		return -1;
        -:  909:
        -:  910:	case mine:
    #####:  911:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  912:
    #####:  913:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  914:		{
    #####:  915:			return -1;
        -:  916:		}
        -:  917:
    #####:  918:		if (choice2 > treasure_map || choice2 < curse)
        -:  919:		{
    #####:  920:			return -1;
        -:  921:		}
        -:  922:
    #####:  923:		if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  924:		{
    #####:  925:			return -1;
        -:  926:		}
        -:  927:
    #####:  928:		gainCard(choice2, state, 2, currentPlayer);
        -:  929:
        -:  930:		//discard card from hand
    #####:  931:		discardCard(handPos, currentPlayer, state, 0);
        -:  932:
        -:  933:		//discard trashed card
    #####:  934:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  935:		{
    #####:  936:			if (state->hand[currentPlayer][i] == j)
        -:  937:			{
    #####:  938:				discardCard(i, currentPlayer, state, 0);
    #####:  939:				break;
        -:  940:			}
        -:  941:		}
        -:  942:
    #####:  943:		return 0;
        -:  944:
        -:  945:	case remodel:
        -:  946:
    #####:  947:		return playRemodel(state, currentPlayer, choice1, choice2, handPos);
        -:  948:
        -:  949:	case smithy:
        -:  950:
        1:  951:		playSmithy(state, currentPlayer, handPos);
        1:  952:		return 0;
        -:  953:
        -:  954:	case village:
        -:  955:		//+1 Card
    #####:  956:		drawCard(currentPlayer, state);
        -:  957:
        -:  958:		//+2 Actions
    #####:  959:		state->numActions = state->numActions + 2;
        -:  960:
        -:  961:		//discard played card from hand
    #####:  962:		discardCard(handPos, currentPlayer, state, 0);
    #####:  963:		return 0;
        -:  964:
        -:  965:	case baron:
        -:  966:
        2:  967:		playBaron(state, currentPlayer, choice1, handPos);
        2:  968:		return 0;
        -:  969:
        -:  970:	case great_hall:
        -:  971:		//+1 Card
    #####:  972:		drawCard(currentPlayer, state);
        -:  973:
        -:  974:		//+1 Actions
    #####:  975:		state->numActions++;
        -:  976:
        -:  977:		//discard card from hand
    #####:  978:		discardCard(handPos, currentPlayer, state, 0);
    #####:  979:		return 0;
        -:  980:
        -:  981:	case minion:
        -:  982:		//+1 action
    #####:  983:		state->numActions++;
        -:  984:
        -:  985:		//discard card from hand
    #####:  986:		discardCard(handPos, currentPlayer, state, 0);
        -:  987:
    #####:  988:		if (choice1)		//+2 coins
        -:  989:		{
    #####:  990:			state->coins = state->coins + 2;
        -:  991:		}
        -:  992:
    #####:  993:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  994:		{
        -:  995:			//discard hand
    #####:  996:			while (numHandCards(state) > 0)
        -:  997:			{
    #####:  998:				discardCard(handPos, currentPlayer, state, 0);
        -:  999:			}
        -: 1000:
        -: 1001:			//draw 4
    #####: 1002:			for (i = 0; i < 4; i++)
        -: 1003:			{
    #####: 1004:				drawCard(currentPlayer, state);
        -: 1005:			}
        -: 1006:
        -: 1007:			//other players discard hand and redraw if hand size > 4
    #####: 1008:			for (i = 0; i < state->numPlayers; i++)
        -: 1009:			{
    #####: 1010:				if (i != currentPlayer)
        -: 1011:				{
    #####: 1012:					if (state->handCount[i] > 4)
        -: 1013:					{
        -: 1014:						//discard hand
    #####: 1015:						while (state->handCount[i] > 0)
        -: 1016:						{
    #####: 1017:							discardCard(handPos, i, state, 0);
        -: 1018:						}
        -: 1019:
        -: 1020:						//draw 4
    #####: 1021:						for (j = 0; j < 4; j++)
        -: 1022:						{
    #####: 1023:							drawCard(i, state);
        -: 1024:						}
        -: 1025:					}
        -: 1026:				}
        -: 1027:			}
        -: 1028:
        -: 1029:		}
    #####: 1030:		return 0;
        -: 1031:
        -: 1032:	case steward:
    #####: 1033:		if (choice1 == 1)
        -: 1034:		{
        -: 1035:			//+2 cards
    #####: 1036:			drawCard(currentPlayer, state);
    #####: 1037:			drawCard(currentPlayer, state);
        -: 1038:		}
    #####: 1039:		else if (choice1 == 2)
        -: 1040:		{
        -: 1041:			//+2 coins
    #####: 1042:			state->coins = state->coins + 2;
        -: 1043:		}
        -: 1044:		else
        -: 1045:		{
        -: 1046:			//trash 2 cards in hand
    #####: 1047:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1048:			discardCard(choice3, currentPlayer, state, 1);
        -: 1049:		}
        -: 1050:
        -: 1051:		//discard card from hand
    #####: 1052:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1053:		return 0;
        -: 1054:
        -: 1055:	case tribute:
    #####: 1056:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1057:			if (state->deckCount[nextPlayer] > 0){
    #####: 1058:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1059:				state->deckCount[nextPlayer]--;
        -: 1060:			}
    #####: 1061:			else if (state->discardCount[nextPlayer] > 0){
    #####: 1062:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1063:				state->discardCount[nextPlayer]--;
        -: 1064:			}
        -: 1065:			else{
        -: 1066:				//No Card to Reveal
        -: 1067:				if (DEBUG){
        -: 1068:					printf("No cards to reveal\n");
        -: 1069:				}
        -: 1070:			}
        -: 1071:		}
        -: 1072:
        -: 1073:		else{
    #####: 1074:			if (state->deckCount[nextPlayer] == 0){
    #####: 1075:				for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1076:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1077:					state->deckCount[nextPlayer]++;
    #####: 1078:					state->discard[nextPlayer][i] = -1;
    #####: 1079:					state->discardCount[nextPlayer]--;
        -: 1080:				}
        -: 1081:
    #####: 1082:				shuffle(nextPlayer, state);//Shuffle the deck
        -: 1083:			}
    #####: 1084:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1085:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1086:			state->deckCount[nextPlayer]--;
    #####: 1087:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1088:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:			state->deckCount[nextPlayer]--;
        -: 1090:		}
        -: 1091:
    #####: 1092:		if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1093:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1094:			state->playedCardCount++;
    #####: 1095:			tributeRevealedCards[1] = -1;
        -: 1096:		}
        -: 1097:
    #####: 1098:		for (i = 0; i <= 2; i++){
    #####: 1099:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1100:				state->coins += 2;
        -: 1101:			}
        -: 1102:
    #####: 1103:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1104:				drawCard(currentPlayer, state);
    #####: 1105:				drawCard(currentPlayer, state);
        -: 1106:			}
        -: 1107:			else{//Action Card
    #####: 1108:				state->numActions = state->numActions + 2;
        -: 1109:			}
        -: 1110:		}
        -: 1111:
    #####: 1112:		return 0;
        -: 1113:
        -: 1114:	case ambassador:
    #####: 1115:		j = 0;		//used to check if player has enough cards to discard
        -: 1116:
    #####: 1117:		if (choice2 > 2 || choice2 < 0)
        -: 1118:		{
    #####: 1119:			return -1;
        -: 1120:		}
        -: 1121:
    #####: 1122:		if (choice1 == handPos)
        -: 1123:		{
    #####: 1124:			return -1;
        -: 1125:		}
        -: 1126:
    #####: 1127:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:		{
    #####: 1129:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:			{
    #####: 1131:				j++;
        -: 1132:			}
        -: 1133:		}
    #####: 1134:		if (j < choice2)
        -: 1135:		{
    #####: 1136:			return -1;
        -: 1137:		}
        -: 1138:
        -: 1139:		if (DEBUG)
        -: 1140:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:		//increase supply count for choosen card by amount being discarded
    #####: 1143:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:
        -: 1145:		//each other player gains a copy of revealed card
    #####: 1146:		for (i = 0; i < state->numPlayers; i++)
        -: 1147:		{
    #####: 1148:			if (i != currentPlayer)
        -: 1149:			{
    #####: 1150:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:			}
        -: 1152:		}
        -: 1153:
        -: 1154:		//discard played card from hand
    #####: 1155:		discardCard(handPos, currentPlayer, state, 0);
        -: 1156:
        -: 1157:		//trash copies of cards returned to supply
    #####: 1158:		for (j = 0; j < choice2; j++)
        -: 1159:		{
    #####: 1160:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:			{
    #####: 1162:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:				{
    #####: 1164:					discardCard(i, currentPlayer, state, 1);
    #####: 1165:					break;
        -: 1166:				}
        -: 1167:			}
        -: 1168:		}
        -: 1169:
    #####: 1170:		return 0;
        -: 1171:
        -: 1172:	case cutpurse:
        -: 1173:
    #####: 1174:		updateCoins(currentPlayer, state, 2);
    #####: 1175:		for (i = 0; i < state->numPlayers; i++)
        -: 1176:		{
    #####: 1177:			if (i != currentPlayer)
        -: 1178:			{
    #####: 1179:				for (j = 0; j < state->handCount[i]; j++)
        -: 1180:				{
    #####: 1181:					if (state->hand[i][j] == copper)
        -: 1182:					{
    #####: 1183:						discardCard(j, i, state, 0);
    #####: 1184:						break;
        -: 1185:					}
    #####: 1186:					if (j == state->handCount[i])
        -: 1187:					{
    #####: 1188:						for (k = 0; k < state->handCount[i]; k++)
        -: 1189:						{
        -: 1190:							if (DEBUG)
        -: 1191:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:						}
    #####: 1193:						break;
        -: 1194:					}
        -: 1195:				}
        -: 1196:
        -: 1197:			}
        -: 1198:
        -: 1199:		}
        -: 1200:
        -: 1201:		//discard played card from hand
    #####: 1202:		discardCard(handPos, currentPlayer, state, 0);
        -: 1203:
    #####: 1204:		return 0;
        -: 1205:
        -: 1206:
        -: 1207:	case embargo:
        -: 1208:		//+2 Coins
    #####: 1209:		state->coins = state->coins + 2;
        -: 1210:
        -: 1211:		//see if selected pile is in play
    #####: 1212:		if (state->supplyCount[choice1] == -1)
        -: 1213:		{
    #####: 1214:			return -1;
        -: 1215:		}
        -: 1216:
        -: 1217:		//add embargo token to selected supply pile
    #####: 1218:		state->embargoTokens[choice1]++;
        -: 1219:
        -: 1220:		//trash card
    #####: 1221:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1222:		return 0;
        -: 1223:
        -: 1224:	case outpost:
        -: 1225:		//set outpost flag
    #####: 1226:		state->outpostPlayed++;
        -: 1227:
        -: 1228:		//discard card
    #####: 1229:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1230:		return 0;
        -: 1231:
        -: 1232:	case salvager:
        -: 1233:		//+1 buy
    #####: 1234:		state->numBuys++;
        -: 1235:
    #####: 1236:		if (choice1)
        -: 1237:		{
        -: 1238:			//gain coins equal to trashed card
    #####: 1239:			state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1240:			//trash card
    #####: 1241:			discardCard(choice1, currentPlayer, state, 1);
        -: 1242:		}
        -: 1243:
        -: 1244:		//discard card
    #####: 1245:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1246:		return 0;
        -: 1247:
        -: 1248:	case sea_hag:
    #####: 1249:		for (i = 0; i < state->numPlayers; i++){
    #####: 1250:			if (i != currentPlayer){
    #####: 1251:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1252:				state->discardCount[i]++;
    #####: 1253:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1254:			}
        -: 1255:		}
    #####: 1256:		return 0;
        -: 1257:
        -: 1258:	case treasure_map:
        -: 1259:
    #####: 1260:		return playTreasureMap(state, currentPlayer, handPos);
        -: 1261:	}
    #####: 1262:	return -1;
        -: 1263:}
        -: 1264:
        1: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:
        -: 1268:	//if card is not trashed, added to Played pile 
        1: 1269:	if (trashFlag < 1)
        -: 1270:	{
        -: 1271:		//add card to played pile
        1: 1272:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        1: 1273:		state->playedCardCount++;
        -: 1274:	}
        -: 1275:
        -: 1276:	//set played card to -1
        1: 1277:	state->hand[currentPlayer][handPos] = -1;
        -: 1278:
        -: 1279:	//remove card from player's hand
        1: 1280:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
        -: 1281:	{
        -: 1282:		//reduce number of cards in hand
    #####: 1283:		state->handCount[currentPlayer]--;
        -: 1284:	}
        1: 1285:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1286:	{
        -: 1287:		//reduce number of cards in hand
    #####: 1288:		state->handCount[currentPlayer]--;
        -: 1289:	}
        -: 1290:	else
        -: 1291:	{
        -: 1292:		//replace discarded card with last card in hand
        1: 1293:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1294:		//set last card to -1
        1: 1295:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:		//reduce number of cards in hand
        1: 1297:		state->handCount[currentPlayer]--;
        -: 1298:	}
        -: 1299:
        1: 1300:	return 0;
        -: 1301:}
        -: 1302:
        1: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:	//Note: supplyPos is enum of choosen card
        -: 1306:
        -: 1307:	//check if supply pile is empty (0) or card is not used in game (-1)
        1: 1308:	if (supplyCount(supplyPos, state) < 1)
        -: 1309:	{
    #####: 1310:		return -1;
        -: 1311:	}
        -: 1312:
        -: 1313:	//added card for [whoseTurn] current player:
        -: 1314:	// toFlag = 0 : add to discard
        -: 1315:	// toFlag = 1 : add to deck
        -: 1316:	// toFlag = 2 : add to hand
        -: 1317:
        1: 1318:	if (toFlag == 1)
        -: 1319:	{
    #####: 1320:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1321:		state->deckCount[player]++;
        -: 1322:	}
        1: 1323:	else if (toFlag == 2)
        -: 1324:	{
    #####: 1325:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1326:		state->handCount[player]++;
        -: 1327:	}
        -: 1328:	else
        -: 1329:	{
        1: 1330:		state->discard[player][state->discardCount[player]] = supplyPos;
        1: 1331:		state->discardCount[player]++;
        -: 1332:	}
        -: 1333:
        -: 1334:	//decrease number in supply pile
        1: 1335:	state->supplyCount[supplyPos]--;
        -: 1336:
        1: 1337:	return 0;
        -: 1338:}
        -: 1339:
       11: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:	int i;
        -: 1343:
        -: 1344:	//reset coin count
       11: 1345:	state->coins = 0;
        -: 1346:
        -: 1347:	//add coins for each Treasure card in player's hand
       66: 1348:	for (i = 0; i < state->handCount[player]; i++)
        -: 1349:	{
       55: 1350:		if (state->hand[player][i] == copper)
        -: 1351:		{
       34: 1352:			state->coins += 1;
        -: 1353:		}
       21: 1354:		else if (state->hand[player][i] == silver)
        -: 1355:		{
    #####: 1356:			state->coins += 2;
        -: 1357:		}
       21: 1358:		else if (state->hand[player][i] == gold)
        -: 1359:		{
    #####: 1360:			state->coins += 3;
        -: 1361:		}
        -: 1362:	}
        -: 1363:
        -: 1364:	//add bonus
       11: 1365:	state->coins += bonus;
        -: 1366:
       11: 1367:	return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
