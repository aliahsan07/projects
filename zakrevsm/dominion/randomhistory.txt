design for test random card:
since this is a random test case it is important to have the testing be very automated. This means that I need to use iterative loop structures to handle this. I will need to make sure to use any number of these loops for the other players as minion also has an effect on the other players. I will need to make sure to have hands for the other players. I plan to have a randomly generated seed and number of players through each test. I will run this 100 times.

card to test: minion

main(){
	declare variables
	
	for( i< 100)
	malloc a new state


	
	randomize seed and numplayers
	numplayers = rand %2 +2//(edit) this was changed when I realized that this could result in zero.
	
	initalizeGame()	
	
	fill hands randomly with card from the kingdom card array. 

	play Adventurer//using card effect currently, Could not get playCard
	free(state)	
	
}


major changes:
added switch statement to increase the coverage of the different choices that you can choose from when using the minion card.This switch recives three options and will return -1, 0, 1 as a result of the switrch statement.

decided to use malloc instead of memset. This result in segmentation faults as a result of the memset setting all values to zero.

had to iniialize extra coins, actions, and busy in order to allow the player to fill their decks of cards. could set this to random but since I am trying to gauruntee that I was hitting code of every test. 

Coverage anlysis:
As far as coverage goes for the minion card there was a lot of coverage within the cardEffect function, as the switch statement allowed for the other options to be covered. There was a decent amount of selection as the the random number gererator produced a number of player between 2 and 4. If the the number of players were equal to zero there could be a serious issue for the card as it requires more people. I suppose that this could increase the coverage by a small amount but this is not a very impotant bug as the game should always have at least tow players. 

The use of playCard would also inrease the coverage in comparison to card effect, but this test is to cover the use of the minion card rather than the use of play card which would only increase the other functions as a result and since we are looking at the minion card specifically I felt that the cardEffect was the bertter choice. 



Design for test random adventurer:
this is a random test for the random adventurer card. The adventurer card does not require interaction between the player and their opponents but it does require the player to have treasure cards within their deck. This card does not have much effect on the gamestate in comarison to certian cards. It will only effect the player who plays the card. 

test random adventurer psuedo code:

main()
	declare variables
	for(i < 100){
	malloc a new state.
	random seed
	initializeGame()
	fill the player's deck with kingdom cards and treasure.
	playadventurer
	free(state)
}

changes to design:
I was planning on using memset on the strcutre for the new state but like the minion test case I found that this idea was not very good and casued a few problems with segmentation faults in the code.

I also change the playCard to cardEffect for similair reason to the the minion test card. This is because the play card function is not required for testing the card effect as I am replacing the state for every test using dynamic memory so the clean up pahse of draw card is not neccessary.

Coverage anlysis:
By filling the deck with a random amount of kingdom cards and treasure cards there was a lot of coverage that was met in the end. The adventurer section of card effect was covered and due to the amount of treasure ther were onlya few cases where the card did not have both treasure cards in the draw. 
	
The overall coverage within the dominion code was limited to the initializeGame fuinction, cardEffect, draw and discard card. There would not have been a significant increase in coverage if I were to use the playCard function instead. This was due to the fact that the playCard function cleans up afterwards with draw and discard functions but would not increase coverage to new functions.


	

	


