Inspection.txt
Inspected: dominion.c implementation by Andrew Gass
Inspected by Matthew Zakrevsky(lead) and Harrison Kaiser

	This code inspection was very informative as the to the state of Andrew's, harrisons, and my own code. There were a few very sneaky bug within this implementation as well as some overall very obvious code. Andrew chose to not fix bugs as he went through the process of testing the dominion implementation given to us at the beginning of the term. His code as well as my own and Harrison's was poorly written to begin with and was overall an utter mess that should have been deleted and rewritten from scratch. This was an overall consensus that was felt by all three of us. There were many bugs that we found such as in the adventurer effecct that would only count two treasure and would potentially go out of bounds due to the for loop havin =< instead < as its endign condition
	There were many bugs that could be found in all of our code as a result of the same code having been given to us at the beginmning of the term and it was very obvious that the code was intentionally buggy and was meant to be ineffective as a real dominion implementation. There were many bugs that we found that exsited between our code but Amdrew had the most interesting bug of all three of us. 
	This bug was centered around the refactoring of his minion effect. The bug was introduced as a partof assignment1 and would have been very difficult to find without his source code. The minion card takes in two choices for its effects and much to our suprise Andrew had swpped the ordering of the effects in the function call. In all honesty I would have missed it in any other case where I was looking at his code that was not a code inspection and had access to his source code. There are many cases where this would have been passsed over in randoming testing asnd would have been very difficult to find. In a unit test this bug would have been virtually impossible to find as a result of its nature and even knowing about the bug a unit test to reproduce its effects would have been very to reproduce.
	We also found and infinite loop as a result of his feast implementation that would occur as a result of the lack of a return when an invalid input was passsed into the card eefect. This implementation also did not have the player replace a card, instead allowing the player to purchase a card costing 5 or less while the player's hand was placed in a temporary hand that could go out of array bounds as a result of re setting the hand at the end of the function. This effect like many other functions did not discard the card after it was used, allowing it to be used again in that turn.
	Through out the code there were many situations where the same bug was repeatedand by far the most common was not discarding a card after it had been played, handling of invalid options(returning -1), and array bounds. The discarding of cards were not breaking in many implementation whereas in comparison the invallid reponse was. There three differnt case of infinite loops in card effects that could have been fixed with returning -1 or breaking from a loop rather than continueing. Bounds were not as much of a problem but still a problem that would result incorrect card effects such as the adventurer getting three items instead of 2, which was not a breaking point for the progra,m itself.
	The overall opinion held is that it would be better to rewrite this code rather than trying to find every bug within the code. This is espcially true just becasue of the sheer number of bugs located within the code and may being subtle in nature. It would take way longer to debugg and fix every problem rather than rewriting it due to the large amount of inconsistency within the code. If this was to be rewritten it would best be done an object oriented manner rather than an array based state.     
	

