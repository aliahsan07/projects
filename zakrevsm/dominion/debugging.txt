debugging.txt
Matthew Zakrevsky

Bug to fix: scoreFor function counting the number of curses intead of entire deck.
	 I first discoveredf this bug in the first assignment when I was writing my first set of unit tests. I nmoticed that this was a problem  due to the preliminary tests that resulted in the incorrect score of each of the different that I wrote for this preliminary tests. The first that I noticed when I was using the score function was the scores that had gardens were not producing the correct values in the end when the function had finishied running its course and that the number of curses a  player would also result in an decreased score after all of the victory cards were added together.
	I began by setting up the debbugger and target the specific sections of the code that I really wanted go through to se what was happenning with the code. At first I noticed that the cards werre going into the player's hand  instead of the discard. I wanted to keep things going to the correct place and it would make it easier to know where I placed the cards I was working with. 
	This test follwed the idea that I would be able to calculate all fo the final scores and then from there i could check the actual values at the end and so I could actively know what cards were what since the debugger cannot print the values of the enums. Through this  I also found that there was an extra curse being added into the scoring of another player completetly seperate of the bug I was looking for.. I am not entirely sure why though becasue the test itself was only written with ten curses, but this was not the bug I was targeting.
	I discovered what the bug was based upon the first time that I stepped into the afunction using the  debugger. This was the error on line 431 in the dominion.c file that I had been working with for the entirety of the class this term. I found that the deck that the function was actually the number of curses that the deck had, as the fullDeckCount function only counts the number of a specific card in the deck. (see curses.png for a screen shot)
	The method I took to fix the problem was more of a brute force method where I got the number of gardens, got the number of total cards using members of the state, divided by ten, multipled the floor of the remainder of the cards by the number of gardens and added them together.(see fixtoScore.png)
	While this did not necessarily fix all of the bugs in the scoreForfunction fixing the bug did fix the problem with the incorrect number of cards in the deck. As i was runnign thre dubugger that my test itself was also flawed. This resulted in extra cardss where there shouldn't have been, junk data, and an overall incorrect score, but the gardens were being scored correctly.(see debuggerFinalResults.png)
	In the end I did find that the gardens were being scored correctly and not using ther incorrect number of cards in the deck. if you open debuggerFinalResults.png you will see the final debugger run where the gardens were being scored correctly. In that instance of the score function the total number of cards that the player had was 28 and when thaty was divided by ten, the score of the gardens are then 2 which is shown by the vairable garden score, and since there was only 1 garden the total added to the score would be 2. As you can seee the the total score was three, which means that the therewas only one point in the end.
	The ulitmate goal of this deugging exercise was to fix the problem rgarding the gardens not being corrected. The most difficult part of this was first recognizing that the totalDeckCount function was the incorrect option and where the count was being thrown off. This follows both the principles of knowing your codse well and getting a bug to repropogate in your testing. From there the actual fix was directed towards only a sigular bug that was apart of a larger over arching bug, following the principle of breaking down the overall bug and finding where there were problems. While this was not the fix for the bug in scoring it was an important piece.


