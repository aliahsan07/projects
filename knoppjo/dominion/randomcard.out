        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:12
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   381822:    8:int compare(const void* a, const void* b) {
   381822:    9:	if (*(int*)a > *(int*)b)
    #####:   10:		return 1;
   381822:   11:	if (*(int*)a < *(int*)b)
   136365:   12:		return -1;
   245457:   13:	return 0;
   381822:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
       24:   17:	struct gameState* g = malloc(sizeof(struct gameState));
       12:   18:	return g;
        -:   19:}
        -:   20:
        -:   21://comment
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    #####:   24:		int k8, int k9, int k10) {
    #####:   25:	int* k = malloc(10 * sizeof(int));
    #####:   26:	k[0] = k1;
    #####:   27:	k[1] = k2;
    #####:   28:	k[2] = k3;
    #####:   29:	k[3] = k4;
    #####:   30:	k[4] = k5;
    #####:   31:	k[5] = k6;
    #####:   32:	k[6] = k7;
    #####:   33:	k[7] = k8;
    #####:   34:	k[8] = k9;
    #####:   35:	k[9] = k10;
    #####:   36:	return k;
        -:   37:}
        -:   38:
     9036:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     9036:   40:		struct gameState *state) {
        -:   41:
     9036:   42:	int i;
     9036:   43:	int j;
     9036:   44:	int it;
        -:   45:	//set up random number generator
     9036:   46:	SelectStream(1);
     9036:   47:	PutSeed((long)randomSeed);
        -:   48:
        -:   49:	//check number of players
    18072:   50:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:	{
    #####:   52:		return -1;
        -:   53:	}
        -:   54:
        -:   55:	//set number of players
     9036:   56:	state->numPlayers = numPlayers;
        -:   57:
        -:   58:	//check selected kingdom cards are different
   198792:   59:	for (i = 0; i < 10; i++)
        -:   60:	{
  1987920:   61:		for (j = 0; j < 10; j++)
        -:   62:		{
  1716840:   63:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:			{
    #####:   65:				return -1;
        -:   66:			}
   903600:   67:		}
    90360:   68:	}
        -:   69:
        -:   70:
        -:   71:	//initialize supply
        -:   72:	///////////////////////////////
        -:   73:
        -:   74:	//set number of Curse cards
     9036:   75:	if (numPlayers == 2)
        -:   76:	{
     2910:   77:		state->supplyCount[curse] = 10;
     2910:   78:	}
     6126:   79:	else if (numPlayers == 3)
        -:   80:	{
     3051:   81:		state->supplyCount[curse] = 20;
     3051:   82:	}
        -:   83:	else
        -:   84:	{
     3075:   85:		state->supplyCount[curse] = 30;
        -:   86:	}
        -:   87:
        -:   88:	//set number of Victory cards
     9036:   89:	if (numPlayers == 2)
        -:   90:	{
     2910:   91:		state->supplyCount[estate] = 8;
     2910:   92:		state->supplyCount[duchy] = 8;
     2910:   93:		state->supplyCount[province] = 8;
     2910:   94:	}
        -:   95:	else
        -:   96:	{
     6126:   97:		state->supplyCount[estate] = 12;
     6126:   98:		state->supplyCount[duchy] = 12;
     6126:   99:		state->supplyCount[province] = 12;
        -:  100:	}
        -:  101:
        -:  102:	//set number of Treasure cards
     9036:  103:	state->supplyCount[copper] = 60 - (7 * numPlayers);
     9036:  104:	state->supplyCount[silver] = 40;
     9036:  105:	state->supplyCount[gold] = 30;
        -:  106:
        -:  107:	//set number of Kingdom cards
   379512:  108:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:	{
  2981880:  110:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:		{
  1400580:  112:			if (kingdomCards[j] == i)
        -:  113:			{
        -:  114:				//check if card is a 'Victory' Kingdom card
   180720:  115:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:				{
     9036:  117:					if (numPlayers == 2){
     2910:  118:						state->supplyCount[i] = 8;
     2910:  119:					}
     6126:  120:					else{ state->supplyCount[i] = 12; }
     9036:  121:				}
        -:  122:				else
        -:  123:				{
    81324:  124:					state->supplyCount[i] = 10;
        -:  125:				}
    90360:  126:				break;
        -:  127:			}
        -:  128:			else    //card is not in the set choosen for the game
        -:  129:			{
  1310220:  130:				state->supplyCount[i] = -1;
        -:  131:			}
  1310220:  132:		}
        -:  133:
   180720:  134:	}
        -:  135:
        -:  136:	////////////////////////
        -:  137:	//supply intilization complete
        -:  138:
        -:  139:	//set player decks
    72618:  140:	for (i = 0; i < numPlayers; i++)
        -:  141:	{
    27273:  142:		state->deckCount[i] = 0;
   218184:  143:		for (j = 0; j < 3; j++)
        -:  144:		{
    81819:  145:			state->deck[i][j] = estate;
    81819:  146:			state->deckCount[i]++;
    81819:  147:		}
   436368:  148:		for (j = 3; j < 10; j++)
        -:  149:		{
   190911:  150:			state->deck[i][j] = copper;
   190911:  151:			state->deckCount[i]++;
   190911:  152:		}
    27273:  153:	}
        -:  154:
        -:  155:	//shuffle player decks
    72618:  156:	for (i = 0; i < numPlayers; i++)
        -:  157:	{
    27273:  158:		if ( shuffle(i, state) < 0 )
        -:  159:		{
    #####:  160:			return -1;
        -:  161:		}
    27273:  162:	}
        -:  163:
        -:  164:	//draw player hands
    72618:  165:	for (i = 0; i < numPlayers; i++)
        -:  166:	{
        -:  167:		//initialize hand size to zero
    27273:  168:		state->handCount[i] = 0;
    27273:  169:		state->discardCount[i] = 0;
        -:  170:		//draw 5 cards
        -:  171:		// for (j = 0; j < 5; j++)
        -:  172:		//	{
        -:  173:		//	  drawCard(i, state);
        -:  174:		//	}
    27273:  175:	}
        -:  176:
        -:  177:	//set embargo tokens to 0 for all supply piles
   506016:  178:	for (i = 0; i <= treasure_map; i++)
        -:  179:	{
   243972:  180:		state->embargoTokens[i] = 0;
   243972:  181:	}
        -:  182:
        -:  183:	//initialize first player's turn
     9036:  184:	state->outpostPlayed = 0;
     9036:  185:	state->phase = 0;
     9036:  186:	state->numActions = 1;
     9036:  187:	state->numBuys = 1;
     9036:  188:	state->playedCardCount = 0;
     9036:  189:	state->whoseTurn = 0;
     9036:  190:	state->handCount[state->whoseTurn] = 0;
        -:  191:	//int it; move to top
        -:  192:
        -:  193:	//Moved draw cards to here, only drawing at the start of a turn
   108432:  194:	for (it = 0; it < 5; it++){
    45180:  195:		drawCard(state->whoseTurn, state);
    45180:  196:	}
        -:  197:
     9036:  198:	updateCoins(state->whoseTurn, state, 0);
        -:  199:
     9036:  200:	return 0;
     9036:  201:}
        -:  202:
    27273:  203:int shuffle(int player, struct gameState *state) {
        -:  204:
        -:  205:
    27273:  206:	int newDeck[MAX_DECK];
    27273:  207:	int newDeckPos = 0;
    27273:  208:	int card;
    27273:  209:	int i;
        -:  210:
    27273:  211:	if (state->deckCount[player] < 1)
    #####:  212:		return -1;
    27273:  213:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  214:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
   327276:  216:	while (state->deckCount[player] > 0) {
   272730:  217:		card = floor(Random() * state->deckCount[player]);
   272730:  218:		newDeck[newDeckPos] = state->deck[player][card];
   272730:  219:		newDeckPos++;
  1773030:  220:		for (i = card; i < state->deckCount[player]-1; i++) {
   613785:  221:			state->deck[player][i] = state->deck[player][i+1];
   613785:  222:		}
   272730:  223:		state->deckCount[player]--;
   272730:  224:	}
   600006:  225:	for (i = 0; i < newDeckPos; i++) {
   272730:  226:		state->deck[player][i] = newDeck[i];
   272730:  227:		state->deckCount[player]++;
   272730:  228:	}
        -:  229:
    27273:  230:	return 0;
    27273:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
    #####:  235:	int card;
    #####:  236:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:	//check if it is the right phase
    #####:  239:	if (state->phase != 0)
        -:  240:	{
    #####:  241:		return -1;
        -:  242:	}
        -:  243:
        -:  244:	//check if player has enough actions
    #####:  245:	if ( state->numActions < 1 )
        -:  246:	{
    #####:  247:		return -1;
        -:  248:	}
        -:  249:
        -:  250:	//get card played
    #####:  251:	card = handCard(handPos, state);
        -:  252:
        -:  253:	//check if selected card is an action
    #####:  254:	if ( card < adventurer || card > treasure_map )
        -:  255:	{
    #####:  256:		return -1;
        -:  257:	}
        -:  258:
        -:  259:	//play card
    #####:  260:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:	{
    #####:  262:		return -1;
        -:  263:	}
        -:  264:
        -:  265:	//reduce number of actions
    #####:  266:	state->numActions--;
        -:  267:
        -:  268:	//update coins (Treasure cards may be added with card draws)
    #####:  269:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:
    #####:  271:	return 0;
    #####:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
    #####:  275:	int who;
        -:  276:	if (DEBUG){
        -:  277:		printf("Entering buyCard...\n");
        -:  278:	}
        -:  279:
        -:  280:	// I don't know what to do about the phase thing.
        -:  281:
    #####:  282:	who = state->whoseTurn;
        -:  283:
    #####:  284:	if (state->numBuys < 1){
        -:  285:		if (DEBUG)
        -:  286:			printf("You do not have any buys left\n");
    #####:  287:		return -1;
    #####:  288:	} else if (supplyCount(supplyPos, state) <1){
        -:  289:		if (DEBUG)
        -:  290:			printf("There are not any of that type of card left\n");
    #####:  291:		return -1;
    #####:  292:	} else if (state->coins < getCost(supplyPos)){
        -:  293:		if (DEBUG)
        -:  294:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:		return -1;
        -:  296:	} else {
    #####:  297:		state->phase=1;
        -:  298:		//state->supplyCount[supplyPos]--;
    #####:  299:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:
    #####:  301:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:		state->numBuys--;
        -:  303:		if (DEBUG)
        -:  304:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:	}
        -:  306:
        -:  307:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:	//state->discardCount[who]++;
        -:  309:
    #####:  310:	return 0;
    #####:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:	return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:	int currentPlayer = whoseTurn(state);
    #####:  319:	return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:	return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
    #####:  327:	int i;
    #####:  328:	int count = 0;
        -:  329:
    #####:  330:	for (i = 0; i < state->deckCount[player]; i++)
        -:  331:	{
    #####:  332:		if (state->deck[player][i] == card) count++;
    #####:  333:	}
        -:  334:
    #####:  335:	for (i = 0; i < state->handCount[player]; i++)
        -:  336:	{
    #####:  337:		if (state->hand[player][i] == card) count++;
    #####:  338:	}
        -:  339:
    #####:  340:	for (i = 0; i < state->discardCount[player]; i++)
        -:  341:	{
    #####:  342:		if (state->discard[player][i] == card) count++;
    #####:  343:	}
        -:  344:
    #####:  345:	return count;
        -:  346:}
        -:  347:
     9036:  348:int whoseTurn(struct gameState *state) {
     9036:  349:	return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
    #####:  353:	int k;
    #####:  354:	int i;
    #####:  355:	int currentPlayer = whoseTurn(state);
        -:  356:
        -:  357:	//Discard hand
    #####:  358:	for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:		state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  361:	}
    #####:  362:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:
        -:  364:	//Code for determining the player
    #####:  365:	if (currentPlayer < (state->numPlayers - 1)){
    #####:  366:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  367:	}
        -:  368:	else{
    #####:  369:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:	}
        -:  371:
    #####:  372:	state->outpostPlayed = 0;
    #####:  373:	state->phase = 0;
    #####:  374:	state->numActions = 1;
    #####:  375:	state->coins = 0;
    #####:  376:	state->numBuys = 1;
    #####:  377:	state->playedCardCount = 0;
    #####:  378:	state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:	//int k; move to top
        -:  381:	//Next player draws hand
    #####:  382:	for (k = 0; k < 5; k++){
    #####:  383:		drawCard(state->whoseTurn, state);//Draw a card
    #####:  384:	}
        -:  385:
        -:  386:	//Update money
    #####:  387:	updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:	return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
    #####:  393:	int i;
    #####:  394:	int j;
        -:  395:
        -:  396:	//if stack of Province cards is empty, the game ends
    #####:  397:	if (state->supplyCount[province] == 0)
        -:  398:	{
    #####:  399:		return 1;
        -:  400:	}
        -:  401:
        -:  402:	//if three supply pile are at 0, the game ends
    #####:  403:	j = 0;
    #####:  404:	for (i = 0; i < 25; i++)
        -:  405:	{
    #####:  406:		if (state->supplyCount[i] == 0)
        -:  407:		{
    #####:  408:			j++;
    #####:  409:		}
    #####:  410:	}
    #####:  411:	if ( j >= 3)
        -:  412:	{
    #####:  413:		return 1;
        -:  414:	}
        -:  415:
    #####:  416:	return 0;
    #####:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
    #####:  421:	int i;
    #####:  422:	int score = 0;
        -:  423:	//score from hand
    #####:  424:	for (i = 0; i < state->handCount[player]; i++)
        -:  425:	{
    #####:  426:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  432:	}
        -:  433:
        -:  434:	//score from discard
    #####:  435:	for (i = 0; i < state->discardCount[player]; i++)
        -:  436:	{
    #####:  437:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  443:	}
        -:  444:
        -:  445:	//score from deck
    #####:  446:	for (i = 0; i < state->discardCount[player]; i++)
        -:  447:	{
    #####:  448:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  454:	}
        -:  455:
    #####:  456:	return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    #####:  460:	int i;
    #####:  461:	int j;
    #####:  462:	int highScore;
    #####:  463:	int currentPlayer;
        -:  464:
        -:  465:	//get score for each player
    #####:  466:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:	{
        -:  468:		//set unused player scores to -9999
    #####:  469:		if (i >= state->numPlayers)
        -:  470:		{
    #####:  471:			players[i] = -9999;
    #####:  472:		}
        -:  473:		else
        -:  474:		{
    #####:  475:			players[i] = scoreFor (i, state);
        -:  476:		}
    #####:  477:	}
        -:  478:
        -:  479:	//find highest score
    #####:  480:	j = 0;
    #####:  481:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:	{
    #####:  483:		if (players[i] > players[j])
        -:  484:		{
    #####:  485:			j = i;
    #####:  486:		}
    #####:  487:	}
    #####:  488:	highScore = players[j];
        -:  489:
        -:  490:	//add 1 to players who had less turns
    #####:  491:	currentPlayer = whoseTurn(state);
    #####:  492:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:	{
    #####:  494:		if ( players[i] == highScore && i > currentPlayer )
        -:  495:		{
    #####:  496:			players[i]++;
    #####:  497:		}
    #####:  498:	}
        -:  499:
        -:  500:	//find new highest score
    #####:  501:	j = 0;
    #####:  502:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:	{
    #####:  504:		if ( players[i] > players[j] )
        -:  505:		{
    #####:  506:			j = i;
    #####:  507:		}
    #####:  508:	}
    #####:  509:	highScore = players[j];
        -:  510:
        -:  511:	//set winners in array to 1 and rest to 0
    #####:  512:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:	{
    #####:  514:		if ( players[i] == highScore )
        -:  515:		{
    #####:  516:			players[i] = 1;
    #####:  517:		}
        -:  518:		else
        -:  519:		{
    #####:  520:			players[i] = 0;
        -:  521:		}
    #####:  522:	}
        -:  523:
    #####:  524:	return 0;
        -:  525:}
        -:  526:
   297558:  527:int drawCard(int player, struct gameState *state)
   297558:  528:{	int count;
   297558:  529:int deckCounter;
   297558:  530:if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:
        -:  532:	//Step 1 Shuffle the discard pile back into a deck
    #####:  533:	int i;
        -:  534:	//Move discard to deck
    #####:  535:	for (i = 0; i < state->discardCount[player];i++){
    #####:  536:		state->deck[player][i] = state->discard[player][i];
    #####:  537:		state->discard[player][i] = -1;
    #####:  538:	}
        -:  539:
    #####:  540:	state->deckCount[player] = state->discardCount[player];
    #####:  541:	state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:	//Shufffle the deck
    #####:  544:	shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:
        -:  546:	if (DEBUG){//Debug statements
        -:  547:		printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:	}
        -:  549:
    #####:  550:	state->discardCount[player] = 0;
        -:  551:
        -:  552:	//Step 2 Draw Card
    #####:  553:	count = state->handCount[player];//Get current player's hand count
        -:  554:
        -:  555:	if (DEBUG){//Debug statements
        -:  556:		printf("Current hand count: %d\n", count);
        -:  557:	}
        -:  558:
    #####:  559:	deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:	if (deckCounter == 0)
    #####:  562:		return -1;
        -:  563:
    #####:  564:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:	state->deckCount[player]--;
    #####:  566:	state->handCount[player]++;//Increment hand count
    #####:  567:}
        -:  568:
        -:  569:else{
   297558:  570:	int count = state->handCount[player];//Get current hand count for player
   297558:  571:	int deckCounter;
        -:  572:	if (DEBUG){//Debug statements
        -:  573:		printf("Current hand count: %d\n", count);
        -:  574:	}
        -:  575:
   297558:  576:	deckCounter = state->deckCount[player];//Create holder for the deck count
   297558:  577:	state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   297558:  578:	state->deckCount[player]--;
   297558:  579:	state->handCount[player]++;//Increment hand count
        -:  580:}
        -:  581:
   297558:  582:return 0;
   297558:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:	switch( cardNumber )
        -:  588:	{
        -:  589:	case curse:
    #####:  590:		return 0;
        -:  591:	case estate:
    #####:  592:		return 2;
        -:  593:	case duchy:
    #####:  594:		return 5;
        -:  595:	case province:
    #####:  596:		return 8;
        -:  597:	case copper:
    #####:  598:		return 0;
        -:  599:	case silver:
    #####:  600:		return 3;
        -:  601:	case gold:
    #####:  602:		return 6;
        -:  603:	case adventurer:
    #####:  604:		return 6;
        -:  605:	case council_room:
    #####:  606:		return 5;
        -:  607:	case feast:
    #####:  608:		return 4;
        -:  609:	case gardens:
    #####:  610:		return 4;
        -:  611:	case mine:
    #####:  612:		return 5;
        -:  613:	case remodel:
    #####:  614:		return 4;
        -:  615:	case smithy:
    #####:  616:		return 4;
        -:  617:	case village:
    #####:  618:		return 3;
        -:  619:	case baron:
    #####:  620:		return 4;
        -:  621:	case great_hall:
    #####:  622:		return 3;
        -:  623:	case minion:
    #####:  624:		return 5;
        -:  625:	case steward:
    #####:  626:		return 3;
        -:  627:	case tribute:
    #####:  628:		return 5;
        -:  629:	case ambassador:
    #####:  630:		return 3;
        -:  631:	case cutpurse:
    #####:  632:		return 4;
        -:  633:	case embargo:
    #####:  634:		return 2;
        -:  635:	case outpost:
    #####:  636:		return 5;
        -:  637:	case salvager:
    #####:  638:		return 4;
        -:  639:	case sea_hag:
    #####:  640:		return 4;
        -:  641:	case treasure_map:
    #####:  642:		return 4;
        -:  643:	}
        -:  644:
    #####:  645:	return -1;
    #####:  646:}
        -:  647:
        -:  648:int gardensEffect()
        -:  649:{
    #####:  650:	return -1;
        -:  651:}
        -:  652:
    #####:  653:int smithyEffect(int i, int currentPlayer, struct gameState *state, int handPos)
        -:  654:{
        -:  655:	//+3 Cards
    #####:  656:	for (i = 0; i < 1; i++)
        -:  657:	{
    #####:  658:		drawCard(currentPlayer, state);
    #####:  659:	}
        -:  660:
        -:  661:	//discard card from hand
    #####:  662:	discardCard(handPos, currentPlayer, state, 0);
    #####:  663:	return 0;
        -:  664:}
        -:  665:
     6000:  666:int villageEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  667:{
        -:  668:	//+1 Card
     6000:  669:	drawCard(currentPlayer, state);
        -:  670:
        -:  671:	//+2 Actions
     6000:  672:	state->numActions = state->numActions + 2;
        -:  673:
        -:  674:	//discard played card from hand
     6000:  675:	discardCard(handPos, currentPlayer, state, 0);
     6000:  676:	return 0;
        -:  677:}
        -:  678:
    #####:  679:int great_hallEffect(int currentPlayer,struct gameState *state,int handPos)
        -:  680:{
        -:  681:	//+1 Card
    #####:  682:	drawCard(currentPlayer, state);
        -:  683:
        -:  684:	//+1 Actions
    #####:  685:	state->numActions++;
        -:  686:
    #####:  687:	return 0;
        -:  688:}
        -:  689:
    #####:  690:int outpostEffect(struct gameState *state, int handPos, int currentPlayer)
        -:  691:{
        -:  692:	//set outpost flag
    #####:  693:	state->outpostPlayed++;
        -:  694:
        -:  695:	//discard card
    #####:  696:	discardCard(handPos, currentPlayer, state, 0);
    #####:  697:	return 0;
        -:  698:}
        -:  699:
        -:  700://assignment 1 done
     9036:  701:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  702:{
     9036:  703:	int i;
     9036:  704:	int j;
     9036:  705:	int k;
     9036:  706:	int x;
     9036:  707:	int index;
     9036:  708:	int currentPlayer = whoseTurn(state);
     9036:  709:	int nextPlayer = currentPlayer + 1;
        -:  710:
     9036:  711:	int tributeRevealedCards[2] = {-1, -1};
     9036:  712:	int temphand[MAX_HAND];// moved above the if statement
     9036:  713:	int drawntreasure=0;
     9036:  714:	int cardDrawn;
     9036:  715:	int z = 0;// this is the counter for the temp hand
     9036:  716:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  717:		nextPlayer = 0;
    #####:  718:	}
        -:  719:
        -:  720:
        -:  721:	//uses switch to select card and perform actions
        -:  722:	//refactored garden, smithy, village, great_hall, outpost
     9036:  723:	switch( card )
        -:  724:	{
        -:  725:	case adventurer:
   252450:  726:		while(drawntreasure<2){
   246378:  727:			if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  728:				shuffle(currentPlayer, state);
    #####:  729:			}
   246378:  730:			drawCard(currentPlayer, state);
   246378:  731:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   726990:  732:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     6072:  733:				drawntreasure++;
        -:  734:			else{
   240306:  735:				temphand[z]=cardDrawn;
   240306:  736:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   240306:  737:				z++;
        -:  738:			}
   246378:  739:		}
   246378:  740:		while(z-1>=0){
   240306:  741:			state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   240306:  742:			z=z-1;
   240306:  743:		}
     3036:  744:		return 0;
        -:  745:
        -:  746:	case council_room:
        -:  747:		//+4 Cards
    #####:  748:		for (i = 0; i < 4; i++)
        -:  749:		{
    #####:  750:			drawCard(currentPlayer, state);
    #####:  751:		}
        -:  752:
        -:  753:		//+1 Buy
    #####:  754:		state->numBuys++;
        -:  755:
        -:  756:		//Each other player draws a card
    #####:  757:		for (i = 0; i < state->numPlayers; i++)
        -:  758:		{
    #####:  759:			if ( i != currentPlayer )
        -:  760:			{
    #####:  761:				drawCard(i, state);
    #####:  762:			}
    #####:  763:		}
        -:  764:
        -:  765:		//put played card in played card pile
    #####:  766:		discardCard(handPos, currentPlayer, state, 0);
        -:  767:
    #####:  768:		return 0;
        -:  769:
        -:  770:	case feast:
        -:  771:		//gain card with cost up to 5
        -:  772:		//Backup hand
    #####:  773:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  774:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  775:			state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  776:		}
        -:  777:		//Backup hand
        -:  778:
        -:  779:		//Update Coins for Buy
    #####:  780:		updateCoins(currentPlayer, state, 5);
    #####:  781:		x = 1;//Condition to loop on
    #####:  782:		while( x == 1) {//Buy one card
    #####:  783:			if (supplyCount(choice1, state) <= 0){
        -:  784:				if (DEBUG)
        -:  785:					printf("None of that card left, sorry!\n");
        -:  786:
        -:  787:				if (DEBUG){
        -:  788:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  789:				}
    #####:  790:			}
    #####:  791:			else if (state->coins < getCost(choice1)){
    #####:  792:				printf("That card is too expensive!\n");
        -:  793:
        -:  794:				if (DEBUG){
        -:  795:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  796:				}
    #####:  797:			}
        -:  798:			else{
        -:  799:
        -:  800:				if (DEBUG){
        -:  801:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  802:				}
        -:  803:
    #####:  804:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  805:				x = 0;//No more buying cards
        -:  806:
        -:  807:				if (DEBUG){
        -:  808:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  809:				}
        -:  810:
        -:  811:			}
    #####:  812:		}
        -:  813:
        -:  814:		//Reset Hand
    #####:  815:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  816:			state->hand[currentPlayer][i] = temphand[i];
    #####:  817:			temphand[i] = -1;
    #####:  818:		}
        -:  819:		//Reset Hand
        -:  820:
    #####:  821:		return 0;
        -:  822:
        -:  823:	case gardens:
    #####:  824:		return gardensEffect();
        -:  825:
        -:  826:	case mine:
    #####:  827:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  828:
    #####:  829:		if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  830:		{
    #####:  831:			return -1;
        -:  832:		}
        -:  833:
    #####:  834:		if (choice2 > treasure_map || choice2 < curse)
        -:  835:		{
    #####:  836:			return -1;
        -:  837:		}
        -:  838:
    #####:  839:		if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  840:		{
    #####:  841:			return -1;
        -:  842:		}
        -:  843:
    #####:  844:		gainCard(choice2, state, 2, currentPlayer);
        -:  845:
        -:  846:		//discard card from hand
    #####:  847:		discardCard(handPos, currentPlayer, state, 0);
        -:  848:
        -:  849:		//discard trashed card
    #####:  850:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  851:		{
    #####:  852:			if (state->hand[currentPlayer][i] == j)
        -:  853:			{
    #####:  854:				discardCard(i, currentPlayer, state, 0);
    #####:  855:				break;
        -:  856:			}
    #####:  857:		}
        -:  858:
    #####:  859:		return 0;
        -:  860:
        -:  861:	case remodel:
    #####:  862:		j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  863:
    #####:  864:		if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  865:		{
    #####:  866:			return -1;
        -:  867:		}
        -:  868:
    #####:  869:		gainCard(choice2, state, 0, currentPlayer);
        -:  870:
        -:  871:		//discard card from hand
    #####:  872:		discardCard(handPos, currentPlayer, state, 0);
        -:  873:
        -:  874:		//discard trashed card
    #####:  875:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  876:		{
    #####:  877:			if (state->hand[currentPlayer][i] == j)
        -:  878:			{
    #####:  879:				discardCard(i, currentPlayer, state, 0);
    #####:  880:				break;
        -:  881:			}
    #####:  882:		}
        -:  883:
        -:  884:
    #####:  885:		return 0;
        -:  886:
        -:  887:	case smithy:
    #####:  888:		return smithyEffect(i, currentPlayer, state, handPos);
        -:  889:
        -:  890:	case village:
     6000:  891:		return villageEffect(currentPlayer, state, handPos);
        -:  892:
        -:  893:	case baron:
    #####:  894:		state->numBuys++;//Increase buys by 1!
    #####:  895:		if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  896:			int p = 0;//Iterator for hand!
    #####:  897:			int card_not_discarded = 1;//Flag for discard set!
    #####:  898:			while(card_not_discarded){
    #####:  899:				if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  900:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:					state->discardCount[currentPlayer]++;
    #####:  903:					for (;p < state->handCount[currentPlayer]; p++){
    #####:  904:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  905:					}
    #####:  906:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:					state->handCount[currentPlayer]--;
    #####:  908:					card_not_discarded = 0;//Exit the loop
    #####:  909:				}
    #####:  910:				else if (p > state->handCount[currentPlayer]){
        -:  911:					if(DEBUG) {
        -:  912:						printf("No estate cards in your hand, invalid choice\n");
        -:  913:						printf("Must gain an estate if there are any\n");
        -:  914:					}
    #####:  915:					if (supplyCount(estate, state) > 0){
    #####:  916:						gainCard(estate, state, 0, currentPlayer);
    #####:  917:						state->supplyCount[estate]--;//Decrement estates
    #####:  918:						if (supplyCount(estate, state) == 0){
    #####:  919:							isGameOver(state);
    #####:  920:						}
    #####:  921:					}
    #####:  922:					card_not_discarded = 0;//Exit the loop
    #####:  923:				}
        -:  924:
        -:  925:				else{
    #####:  926:					p++;//Next card
        -:  927:				}
    #####:  928:			}
    #####:  929:		}
        -:  930:
        -:  931:		else{
    #####:  932:			if (supplyCount(estate, state) > 0){
    #####:  933:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  934:				state->supplyCount[estate]--;//Decrement Estates
    #####:  935:				if (supplyCount(estate, state) == 0){
    #####:  936:					isGameOver(state);
    #####:  937:				}
    #####:  938:			}
        -:  939:		}
        -:  940:
        -:  941:
    #####:  942:		return 0;
        -:  943:
        -:  944:	case great_hall:
    #####:  945:		return great_hallEffect(currentPlayer, state, handPos);
        -:  946:
        -:  947:	case minion:
        -:  948:		//+1 action
    #####:  949:		state->numActions++;
        -:  950:
        -:  951:		//discard card from hand
    #####:  952:		discardCard(handPos, currentPlayer, state, 0);
        -:  953:
    #####:  954:		if (choice1)		//+2 coins
        -:  955:		{
    #####:  956:			state->coins = state->coins + 2;
    #####:  957:		}
        -:  958:
    #####:  959:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  960:		{
        -:  961:			//discard hand
    #####:  962:			while(numHandCards(state) > 0)
        -:  963:			{
    #####:  964:				discardCard(handPos, currentPlayer, state, 0);
    #####:  965:			}
        -:  966:
        -:  967:			//draw 4
    #####:  968:			for (i = 0; i < 4; i++)
        -:  969:			{
    #####:  970:				drawCard(currentPlayer, state);
    #####:  971:			}
        -:  972:
        -:  973:			//other players discard hand and redraw if hand size > 4
    #####:  974:			for (i = 0; i < state->numPlayers; i++)
        -:  975:			{
    #####:  976:				if (i != currentPlayer)
        -:  977:				{
    #####:  978:					if ( state->handCount[i] > 4 )
        -:  979:					{
        -:  980:						//discard hand
    #####:  981:						while( state->handCount[i] > 0 )
        -:  982:						{
    #####:  983:							discardCard(handPos, i, state, 0);
    #####:  984:						}
        -:  985:
        -:  986:						//draw 4
    #####:  987:						for (j = 0; j < 4; j++)
        -:  988:						{
    #####:  989:							drawCard(i, state);
    #####:  990:						}
    #####:  991:					}
    #####:  992:				}
    #####:  993:			}
        -:  994:
    #####:  995:		}
    #####:  996:		return 0;
        -:  997:
        -:  998:	case steward:
    #####:  999:		if (choice1 == 1)
        -: 1000:		{
        -: 1001:			//+2 cards
    #####: 1002:			drawCard(currentPlayer, state);
    #####: 1003:			drawCard(currentPlayer, state);
    #####: 1004:		}
    #####: 1005:		else if (choice1 == 2)
        -: 1006:		{
        -: 1007:			//+2 coins
    #####: 1008:			state->coins = state->coins + 2;
    #####: 1009:		}
        -: 1010:		else
        -: 1011:		{
        -: 1012:			//trash 2 cards in hand
    #####: 1013:			discardCard(choice2, currentPlayer, state, 1);
    #####: 1014:			discardCard(choice3, currentPlayer, state, 1);
        -: 1015:		}
        -: 1016:
        -: 1017:		//discard card from hand
    #####: 1018:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1019:		return 0;
        -: 1020:
        -: 1021:	case tribute:
    #####: 1022:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1023:			if (state->deckCount[nextPlayer] > 0){
    #####: 1024:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1025:				state->deckCount[nextPlayer]--;
    #####: 1026:			}
    #####: 1027:			else if (state->discardCount[nextPlayer] > 0){
    #####: 1028:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1029:				state->discardCount[nextPlayer]--;
    #####: 1030:			}
        -: 1031:			else{
        -: 1032:				//No Card to Reveal
        -: 1033:				if (DEBUG){
        -: 1034:					printf("No cards to reveal\n");
        -: 1035:				}
        -: 1036:			}
    #####: 1037:		}
        -: 1038:
        -: 1039:		else{
    #####: 1040:			if (state->deckCount[nextPlayer] == 0){
    #####: 1041:				for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1042:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1043:					state->deckCount[nextPlayer]++;
    #####: 1044:					state->discard[nextPlayer][i] = -1;
    #####: 1045:					state->discardCount[nextPlayer]--;
    #####: 1046:				}
        -: 1047:
    #####: 1048:				shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1049:			}
    #####: 1050:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:			state->deckCount[nextPlayer]--;
    #####: 1053:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:			state->deckCount[nextPlayer]--;
        -: 1056:		}
        -: 1057:
    #####: 1058:		if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1059:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1060:			state->playedCardCount++;
    #####: 1061:			tributeRevealedCards[1] = -1;
    #####: 1062:		}
        -: 1063:
    #####: 1064:		for (i = 0; i <= 2; i ++){
    #####: 1065:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1066:				state->coins += 2;
    #####: 1067:			}
        -: 1068:
    #####: 1069:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1070:				drawCard(currentPlayer, state);
    #####: 1071:				drawCard(currentPlayer, state);
    #####: 1072:			}
        -: 1073:			else{//Action Card
    #####: 1074:				state->numActions = state->numActions + 2;
        -: 1075:			}
    #####: 1076:		}
        -: 1077:
    #####: 1078:		return 0;
        -: 1079:
        -: 1080:	case ambassador:
    #####: 1081:		j = 0;		//used to check if player has enough cards to discard
        -: 1082:
    #####: 1083:		if (choice2 > 2 || choice2 < 0)
        -: 1084:		{
    #####: 1085:			return -1;
        -: 1086:		}
        -: 1087:
    #####: 1088:		if (choice1 == handPos)
        -: 1089:		{
    #####: 1090:			return -1;
        -: 1091:		}
        -: 1092:
    #####: 1093:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:		{
    #####: 1095:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1096:			{
    #####: 1097:				j++;
    #####: 1098:			}
    #####: 1099:		}
    #####: 1100:		if (j < choice2)
        -: 1101:		{
    #####: 1102:			return -1;
        -: 1103:		}
        -: 1104:
        -: 1105:		if (DEBUG)
        -: 1106:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1107:
        -: 1108:		//increase supply count for choosen card by amount being discarded
    #####: 1109:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1110:
        -: 1111:		//each other player gains a copy of revealed card
    #####: 1112:		for (i = 0; i < state->numPlayers; i++)
        -: 1113:		{
    #####: 1114:			if (i != currentPlayer)
        -: 1115:			{
    #####: 1116:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1117:			}
    #####: 1118:		}
        -: 1119:
        -: 1120:		//discard played card from hand
    #####: 1121:		discardCard(handPos, currentPlayer, state, 0);
        -: 1122:
        -: 1123:		//trash copies of cards returned to supply
    #####: 1124:		for (j = 0; j < choice2; j++)
        -: 1125:		{
    #####: 1126:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1127:			{
    #####: 1128:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1129:				{
    #####: 1130:					discardCard(i, currentPlayer, state, 1);
    #####: 1131:					break;
        -: 1132:				}
    #####: 1133:			}
    #####: 1134:		}
        -: 1135:
    #####: 1136:		return 0;
        -: 1137:
        -: 1138:	case cutpurse:
        -: 1139:
    #####: 1140:		updateCoins(currentPlayer, state, 2);
    #####: 1141:		for (i = 0; i < state->numPlayers; i++)
        -: 1142:		{
    #####: 1143:			if (i != currentPlayer)
        -: 1144:			{
    #####: 1145:				for (j = 0; j < state->handCount[i]; j++)
        -: 1146:				{
    #####: 1147:					if (state->hand[i][j] == copper)
        -: 1148:					{
    #####: 1149:						discardCard(j, i, state, 0);
    #####: 1150:						break;
        -: 1151:					}
    #####: 1152:					if (j == state->handCount[i])
        -: 1153:					{
    #####: 1154:						for (k = 0; k < state->handCount[i]; k++)
        -: 1155:						{
        -: 1156:							if (DEBUG)
        -: 1157:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1158:						}
    #####: 1159:						break;
        -: 1160:					}
    #####: 1161:				}
        -: 1162:
    #####: 1163:			}
        -: 1164:
    #####: 1165:		}
        -: 1166:
        -: 1167:		//discard played card from hand
    #####: 1168:		discardCard(handPos, currentPlayer, state, 0);
        -: 1169:
    #####: 1170:		return 0;
        -: 1171:
        -: 1172:
        -: 1173:	case embargo:
        -: 1174:		//+2 Coins
    #####: 1175:		state->coins = state->coins + 2;
        -: 1176:
        -: 1177:		//see if selected pile is in play
    #####: 1178:		if ( state->supplyCount[choice1] == -1 )
        -: 1179:		{
    #####: 1180:			return -1;
        -: 1181:		}
        -: 1182:
        -: 1183:		//add embargo token to selected supply pile
    #####: 1184:		state->embargoTokens[choice1]++;
        -: 1185:
        -: 1186:		//trash card
    #####: 1187:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1188:		return 0;
        -: 1189:
        -: 1190:	case outpost:
    #####: 1191:		return outpostEffect(state, handPos, currentPlayer);
        -: 1192:
        -: 1193:	case salvager:
        -: 1194:		//+1 buy
    #####: 1195:		state->numBuys++;
        -: 1196:
    #####: 1197:		if (choice1)
        -: 1198:		{
        -: 1199:			//gain coins equal to trashed card
    #####: 1200:			state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:			//trash card
    #####: 1202:			discardCard(choice1, currentPlayer, state, 1);
    #####: 1203:		}
        -: 1204:
        -: 1205:		//discard card
    #####: 1206:		discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:		return 0;
        -: 1208:
        -: 1209:	case sea_hag:
    #####: 1210:		for (i = 0; i < state->numPlayers; i++){
    #####: 1211:			if (i != currentPlayer){
    #####: 1212:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:				state->discardCount[i]++;
    #####: 1214:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1215:			}
    #####: 1216:		}
    #####: 1217:		return 0;
        -: 1218:
        -: 1219:	case treasure_map:
        -: 1220:		//search hand for another treasure_map
    #####: 1221:		index = -1;
    #####: 1222:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:		{
    #####: 1224:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:			{
    #####: 1226:				index = i;
    #####: 1227:				break;
        -: 1228:			}
    #####: 1229:		}
    #####: 1230:		if (index > -1)
        -: 1231:		{
        -: 1232:			//trash both treasure cards
    #####: 1233:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:			discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:			//gain 4 Gold cards
    #####: 1237:			for (i = 0; i < 4; i++)
        -: 1238:			{
    #####: 1239:				gainCard(gold, state, 1, currentPlayer);
    #####: 1240:			}
        -: 1241:
        -: 1242:			//return success
    #####: 1243:			return 1;
        -: 1244:		}
        -: 1245:
        -: 1246:		//no second treasure_map found in hand
    #####: 1247:		return -1;
        -: 1248:	}
        -: 1249:
    #####: 1250:	return -1;
     9036: 1251:}
        -: 1252:
     6000: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:
        -: 1256:	//if card is not trashed, added to Played pile
     6000: 1257:	if (trashFlag < 1)
        -: 1258:	{
        -: 1259:		//add card to played pile
     6000: 1260:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     6000: 1261:		state->playedCardCount++;
     6000: 1262:	}
        -: 1263:
        -: 1264:	//set played card to -1
     6000: 1265:	state->hand[currentPlayer][handPos] = -1;
        -: 1266:
        -: 1267:	//remove card from player's hand
     6000: 1268:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:	{
        -: 1270:		//reduce number of cards in hand
       24: 1271:		state->handCount[currentPlayer]--;
       24: 1272:	}
     5976: 1273:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:	{
        -: 1275:		//reduce number of cards in hand
        6: 1276:		state->handCount[currentPlayer]--;
        6: 1277:	}
        -: 1278:	else
        -: 1279:	{
        -: 1280:		//replace discarded card with last card in hand
     5970: 1281:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:		//set last card to -1
     5970: 1283:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:		//reduce number of cards in hand
     5970: 1285:		state->handCount[currentPlayer]--;
        -: 1286:	}
        -: 1287:
     6000: 1288:	return 0;
        -: 1289:}
        -: 1290:
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:	//Note: supplyPos is enum of choosen card
        -: 1294:
        -: 1295:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:	{
    #####: 1298:		return -1;
        -: 1299:	}
        -: 1300:
        -: 1301:	//added card for [whoseTurn] current player:
        -: 1302:	// toFlag = 0 : add to discard
        -: 1303:	// toFlag = 1 : add to deck
        -: 1304:	// toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:	if (toFlag == 1)
        -: 1307:	{
    #####: 1308:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:		state->deckCount[player]++;
    #####: 1310:	}
    #####: 1311:	else if (toFlag == 2)
        -: 1312:	{
    #####: 1313:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:		state->handCount[player]++;
    #####: 1315:	}
        -: 1316:	else
        -: 1317:	{
    #####: 1318:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:		state->discardCount[player]++;
        -: 1320:	}
        -: 1321:
        -: 1322:	//decrease number in supply pile
    #####: 1323:	state->supplyCount[supplyPos]--;
        -: 1324:
    #####: 1325:	return 0;
    #####: 1326:}
        -: 1327:
     9036: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
     9036: 1330:	int i;
        -: 1331:
        -: 1332:	//reset coin count
     9036: 1333:	state->coins = 0;
        -: 1334:
        -: 1335:	//add coins for each Treasure card in player's hand
   108432: 1336:	for (i = 0; i < state->handCount[player]; i++)
        -: 1337:	{
    45180: 1338:		if (state->hand[player][i] == copper)
        -: 1339:		{
    31437: 1340:			state->coins += 1;
    31437: 1341:		}
    13743: 1342:		else if (state->hand[player][i] == silver)
        -: 1343:		{
    #####: 1344:			state->coins += 2;
    #####: 1345:		}
    13743: 1346:		else if (state->hand[player][i] == gold)
        -: 1347:		{
    #####: 1348:			state->coins += 3;
    #####: 1349:		}
    45180: 1350:	}	
        -: 1351:
        -: 1352:	//add bonus
     9036: 1353:	state->coins += bonus;
        -: 1354:
     9036: 1355:	return 0;
        -: 1356:}
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:
