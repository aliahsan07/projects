Starting to test cards ......
Round 1: 
Player Number: 1	Seed: 1061366059	Initial: -1
Handle Card: 18	Discard Card: 173	Total Card: 232	-----	Result: -1
Round 2: 
Player Number: 2	Seed: 1451299197	Initial: 0
Handle Card: 406	Discard Card: 499	Total Card: 397	-----	Result: 0
Round 3: 
Player Number: 1	Seed: 1761619141	Initial: -1
Handle Card: 245	Discard Card: 17	Total Card: 393	-----	Result: 0
Round 4: 
Player Number: 0	Seed: 1465671491	Initial: -1
Handle Card: 295	Discard Card: 146	Total Card: 129	-----	Result: 0
Round 5: 
Player Number: 3	Seed: 1768908365	Initial: 0
Handle Card: 460	Discard Card: 56	Total Card: 408	-----	Result: -1
Round 6: 
Player Number: 2	Seed: 634515389	Initial: 0
Handle Card: 19	Discard Card: 295	Total Card: 458	-----	Result: 0
Round 7: 
Player Number: 3	Seed: 480920671	Initial: 0
Handle Card: 125	Discard Card: 238	Total Card: 253	-----	Result: 0
Round 8: 
Player Number: 1	Seed: 2125010886	Initial: -1
Handle Card: 312	Discard Card: 410	Total Card: 374	-----	Result: -1
Round 9: 
Player Number: 2	Seed: 1710638576	Initial: 0
Handle Card: 483	Discard Card: 30	Total Card: 163	-----	Result: 0
Round 10: 
Player Number: 3	Seed: 1562951938	Initial: 0
Handle Card: 393	Discard Card: 391	Total Card: 332	-----	Result: -1
Passing Coverage: 6 out of total 10
Ending to test cards ......
File 'randomtestcard.c'
Lines executed:100.00% of 29
randomtestcard.c:creating 'randomtestcard.c.gcov'

        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <math.h>
        -:    4:#include <time.h>
        -:    5:#include <assert.h>
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:#define MAX_TEST 10
        -:   11:
        1:   12:int main(int argc, char *argv[])
        -:   13:{
        -:   14:	struct gameState state;
        -:   15:
        1:   16:	int card_array[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   17:	int choice1, choice2, choice3;
        -:   18:	int i, seed, player_num, temp_hand, player, pos, card;	
        -:   19:	int handle, sum, discard, result, init;
        1:   20:	int fail = 0;
        -:   21:	
        1:   22:	srand(time(0));
        1:   23:	printf("Starting to test cards ......\n");
        -:   24:
       11:   25:	for(i = 0; i < MAX_TEST; i ++)
        -:   26:	{
       10:   27:		printf("Round %d: \n", i + 1);
        -:   28:		
       10:   29:		player_num = rand() % 4;
       10:   30:		seed = rand();		
       10:   31:		init = initializeGame(player_num, card_array, seed, &state);
       10:   32:		printf("Player Number: %d\tSeed: %d\tInitial: %d\n", player_num, seed, init);
        -:   33:
       10:   34:		player = rand() % 4;
       10:   35:		card = card_array[rand() % 10];
       10:   36:		choice1 = card_array[rand() % 10];
       10:   37:		choice2 = card_array[rand() % 10];
       10:   38:		choice3 = card_array[rand() % 10];
        -:   39:		
       10:   40:		state.deckCount[player] = rand() % MAX_DECK;
       10:   41:		state.discardCount[player] = rand() % MAX_DECK;
       10:   42:		state.handCount[player] = rand() % MAX_HAND;
        -:   43:		
       10:   44:		handle = state.handCount[player];
       10:   45:		discard = state.discardCount[player];
       10:   46:		sum = state.deckCount[player];
        -:   47:		
       10:   48:		result = cardEffect(card, choice1, choice2, choice3, &state, temp_hand, &pos);
       10:   49:		printf("Handle Card: %d\tDiscard Card: %d\tTotal Card: %d\t-----\tResult: %d\n", handle, discard, sum, result);
        -:   50:		
       10:   51:		if(handle == state.handCount[player] + 1 || discard == state.discardCount[player] + 1 || sum == state.deckCount[player] + 1 || result == -1)
        4:   52:			fail += 1;
        -:   53:	}
        -:   54:	
        1:   55:	printf("Passing Coverage: %d out of total %d\n", MAX_TEST - fail, MAX_TEST);	
        1:   56:	printf("Ending to test cards ......\n");
        -:   57:	
        1:   58:	return EXIT_SUCCESS;
        -:   59:}
File 'dominion.c'
Lines executed:30.96% of 575
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <math.h>
        -:    3:#include <stdlib.h>
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
      225:    9:int compare(const void* a, const void* b) {
      225:   10:  if (*(int*)a > *(int*)b)
    #####:   11:    return 1;
      225:   12:  if (*(int*)a < *(int*)b)
       60:   13:    return -1;
      165:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
       10:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
       10:   45:  SelectStream(1);
       10:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
       10:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
        4:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        6:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       66:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
      660:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
      600:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        6:   74:  if (numPlayers == 2)
        -:   75:    {
        3:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
        3:   78:  else if (numPlayers == 3)
        -:   79:    {
        3:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        6:   88:  if (numPlayers == 2)
        -:   89:    {
        3:   90:      state->supplyCount[estate] = 8;
        3:   91:      state->supplyCount[duchy] = 8;
        3:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
        3:   96:      state->supplyCount[estate] = 12;
        3:   97:      state->supplyCount[duchy] = 12;
        3:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        6:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  103:  state->supplyCount[silver] = 40;
        6:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
      126:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
      990:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
      930:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       66:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
        6:  116:		  if (numPlayers == 2){ 
        3:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
        3:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
       54:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       60:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      870:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
       21:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
       15:  141:      state->deckCount[i] = 0;
       60:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
       45:  144:	  state->deck[i][j] = estate;
       45:  145:	  state->deckCount[i]++;
        -:  146:	}
      120:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
      105:  149:	  state->deck[i][j] = copper;
      105:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
       21:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
       15:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
       21:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
       15:  167:      state->handCount[i] = 0;
       15:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
      168:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
      162:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        6:  183:  state->outpostPlayed = 0;
        6:  184:  state->phase = 0;
        6:  185:  state->numActions = 1;
        6:  186:  state->numBuys = 1;
        6:  187:  state->playedCardCount = 0;
        6:  188:  state->whoseTurn = 0;
        6:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
       36:  193:  for (it = 0; it < 5; it++){
       30:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
        6:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        6:  199:  return 0;
        -:  200:}
        -:  201:
       15:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       15:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       15:  210:  if (state->deckCount[player] < 1)
    #####:  211:    return -1;
       15:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
      180:  215:  while (state->deckCount[player] > 0) {
      150:  216:    card = floor(Random() * state->deckCount[player]);
      150:  217:    newDeck[newDeckPos] = state->deck[player][card];
      150:  218:    newDeckPos++;
      456:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
      306:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
      150:  222:    state->deckCount[player]--;
        -:  223:  }
      165:  224:  for (i = 0; i < newDeckPos; i++) {
      150:  225:    state->deck[player][i] = newDeck[i];
      150:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
       15:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
    #####:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
    #####:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
    #####:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
    #####:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
    #####:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
    #####:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
       10:  347:int whoseTurn(struct gameState *state) {
       10:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
      424:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
      424:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    #####:  534:    for (i = 0; i < state->discardCount[player];i++){
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    #####:  539:    state->deckCount[player] = state->discardCount[player];
    #####:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    #####:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
    #####:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
    #####:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    #####:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
    #####:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
    #####:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
      424:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
      424:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
      424:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
      424:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      424:  577:    state->deckCount[player]--;
      424:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
      424:  581:  return 0;
        -:  582:}
        -:  583:
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:/*Set function for adventurer*/
        1:  647:int func_adventurer(int currentPlayer, int cardDrawn, int drawntreasure, int *temphand, struct gameState *state)
        -:  648:{
        -:  649:	int z;
        -:  650:	
      391:  651:	while(drawntreasure<2){
      389:  652:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  653:			 shuffle(currentPlayer, state);
        -:  654:		}
        -:  655:		
      389:  656:		drawCard(currentPlayer, state);
      389:  657:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  658:		
      391:  659:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  660:			drawntreasure++;
        -:  661:		else{
      387:  662:			temphand[z]=cardDrawn;
      387:  663:			state -> handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      387:  664:			z ++;
        -:  665:		}
        -:  666:	}
        -:  667:	
      389:  668:	while(z-1>=0){
      387:  669:		state -> discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      387:  670:		z --;
        -:  671:	}
        -:  672:	
        1:  673:	return 0;
        -:  674:}
        -:  675:/*Set function for council_room*/
    #####:  676:int func_council_room(int currentPlayer, int handPos, struct gameState *state)
        -:  677:{
        -:  678:	int i;
        -:  679:	//+4 Cards
    #####:  680:	for (i = 0; i < 4; i ++)
    #####:  681:		drawCard(currentPlayer, state);
        -:  682:	//+1 Buy
    #####:  683:	state -> numBuys ++;
        -:  684:	//Each other player draws a card
    #####:  685:	for (i = 0; i < state -> numPlayers; i ++)
        -:  686:	{
    #####:  687:		if ( i != currentPlayer )
    #####:  688:			drawCard(i, state);
        -:  689:	}
        -:  690:	//put played card in played card pile
    #####:  691:	discardCard(handPos, currentPlayer, state, 0);
    #####:  692:	return 0;
        -:  693:}
        -:  694:/*Set function for feast*/
    #####:  695:int func_feast(int currentPlayer, int *temphand, int choice1, struct gameState *state)
        -:  696:{
        -:  697:	int i, x;
        -:  698:	//gain card with cost up to 5
        -:  699:	//Backup hand
    #####:  700:	for (i = 0; i <= state -> handCount[currentPlayer]; i ++){
    #####:  701:		temphand[i] = state -> hand[currentPlayer][i];//Backup card
    #####:  702:		state -> hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:	}
        -:  704:	//Backup hand
        -:  705:	//Update Coins for Buy
    #####:  706:	updateCoins(currentPlayer, state, 5);
    #####:  707:	x = 1;//Condition to loop on
        -:  708:	
    #####:  709:	while( x == 1) 
        -:  710:	{//Buy one card
    #####:  711:		if (supplyCount(choice1, state) <= 0)
        -:  712:		{
    #####:  713:			if (DEBUG)
        -:  714:				printf("None of that card left, sorry!\n");
        -:  715:
    #####:  716:			if (DEBUG)
        -:  717:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  718:		}
    #####:  719:		else if (state->coins < getCost(choice1))
        -:  720:		{
    #####:  721:			printf("That card is too expensive!\n");
        -:  722:
    #####:  723:			if (DEBUG)
        -:  724:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  725:		}
        -:  726:		else
        -:  727:		{
    #####:  728:			if (DEBUG)
        -:  729:				printf("Deck Count: %d\n", state -> handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:
    #####:  731:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:			x = 0;//No more buying cards
        -:  733:
    #####:  734:			if (DEBUG)
        -:  735:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:		}
        -:  737:	}
        -:  738:	//Reset Hand
    #####:  739:	for (i = 0; i <= state -> handCount[currentPlayer]; i++)
        -:  740:	{
    #####:  741:		state->hand[currentPlayer][i] = temphand[i];
    #####:  742:		temphand[i] = -1;
        -:  743:	}
        -:  744:	//Reset Hand
        -:  745:		  			
    #####:  746:	return 0;
        -:  747:}
        -:  748:/*Set function for mine*/
        3:  749:int func_mine(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state)
        -:  750:{
        3:  751:	int i, j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  752:
        3:  753:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        3:  754:		return -1;
        -:  755:		
    #####:  756:	if (choice2 > treasure_map || choice2 < curse)
    #####:  757:		return -1;
        -:  758:
    #####:  759:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
    #####:  760:		return -1;
        -:  761:
    #####:  762:	gainCard(choice2, state, 2, currentPlayer);
        -:  763:	//discard card from hand
    #####:  764:	discardCard(handPos, currentPlayer, state, 0);
        -:  765:	//discard trashed card
    #####:  766:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  767:	{
    #####:  768:		if (state->hand[currentPlayer][i] == j)
        -:  769:		{
    #####:  770:			discardCard(i, currentPlayer, state, 0);			
    #####:  771:			break;
        -:  772:		}
        -:  773:	}
        -:  774:			
    #####:  775:	return 0;
        -:  776:}
        -:  777:/*Set function for embargo*/
        1:  778:int func_embargo(int currentPlayer, int choice1, int handPos, struct gameState *state)
        -:  779:{
        -:  780:	//+2 Coins
        1:  781:	state -> coins += 2;
        -:  782:	//see if selected pile is in play
        1:  783:	if ( state -> supplyCount[choice1] == -1 )
    #####:  784:		return -1;
        -:  785:	//add embargo token to selected supply pile
        1:  786:	state -> embargoTokens[choice1]++;
        -:  787:	//trash card
        1:  788:	discardCard(handPos, currentPlayer, state, 1);		
        1:  789:	return 0;
        -:  790:}
        -:  791:
       10:  792:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  793:{
        -:  794:  int i;
        -:  795:  int j;
        -:  796:  int k;
        -:  797:  //int x;
        -:  798:  int index;
       10:  799:  int currentPlayer = whoseTurn(state);
       10:  800:  int nextPlayer = currentPlayer + 1;
        -:  801:
       10:  802:  int tributeRevealedCards[2] = {-1, -1};
        -:  803:  int temphand[MAX_HAND];// moved above the if statement
       10:  804:  int drawntreasure=0;
        -:  805:  int cardDrawn;
        -:  806:  //int z = 0;// this is the counter for the temp hand
       10:  807:  if (nextPlayer > (state->numPlayers - 1)){
        1:  808:    nextPlayer = 0;
        -:  809:  }
        -:  810:  
        -:  811:  //uses switch to select card and perform actions
       10:  812:	switch( card ) 
        -:  813:    {
        -:  814:		case adventurer:
        1:  815:			return func_adventurer(currentPlayer, cardDrawn, drawntreasure, temphand, state);
        -:  816:			break;
        -:  817:		case council_room:
    #####:  818:			return func_council_room(currentPlayer, handPos, state);
        -:  819:			break;
        -:  820:		case feast:
    #####:  821:			return func_feast(currentPlayer, temphand, choice1, state);
        -:  822:			break;
        -:  823:		case gardens:
    #####:  824:			return -1;
        -:  825:			break;
        -:  826:		case mine:
        3:  827:			return func_mine(currentPlayer, choice1, choice2, handPos, state);
        -:  828:			break;
        -:  829:		case remodel:
    #####:  830:		  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  831:
    #####:  832:		  if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  833:			{
    #####:  834:			  return -1;
        -:  835:			}
        -:  836:
    #####:  837:		  gainCard(choice2, state, 0, currentPlayer);
        -:  838:
        -:  839:		  //discard card from hand
    #####:  840:		  discardCard(handPos, currentPlayer, state, 0);
        -:  841:
        -:  842:		  //discard trashed card
    #####:  843:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  844:			{
    #####:  845:			  if (state->hand[currentPlayer][i] == j)
        -:  846:				{
    #####:  847:				  discardCard(i, currentPlayer, state, 0);			
    #####:  848:				  break;
        -:  849:				}
        -:  850:			}
        -:  851:
    #####:  852:		  return 0;
        -:  853:		case smithy:
        -:  854:			//+3 Cards
    #####:  855:			for (i = 0; i < 3; i++)
    #####:  856:				drawCard(currentPlayer, state);
        -:  857:			//discard card from hand
    #####:  858:			discardCard(handPos, currentPlayer, state, 0);
    #####:  859:			return 0;
        -:  860:			break;
        -:  861:		case village:
        -:  862:			//+1 Card
        1:  863:			drawCard(currentPlayer, state);
        -:  864:			//+2 Actions
        1:  865:			state -> numActions += 2;
        -:  866:			//discard played card from hand
        1:  867:			discardCard(handPos, currentPlayer, state, 0);
        1:  868:			return 0;
        -:  869:			break;
        -:  870:		case baron:
    #####:  871:		  state->numBuys++;//Increase buys by 1!
    #####:  872:		  if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  873:			int p = 0;//Iterator for hand!
    #####:  874:			int card_not_discarded = 1;//Flag for discard set!
    #####:  875:			while(card_not_discarded){
    #####:  876:			  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  877:				state->coins += 4;//Add 4 coins to the amount of coins
    #####:  878:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  879:				state->discardCount[currentPlayer]++;
    #####:  880:				for (;p < state->handCount[currentPlayer]; p++){
    #####:  881:				  state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  882:				}
    #####:  883:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  884:				state->handCount[currentPlayer]--;
    #####:  885:				card_not_discarded = 0;//Exit the loop
        -:  886:			  }
    #####:  887:			  else if (p > state->handCount[currentPlayer]){
    #####:  888:				if(DEBUG) {
        -:  889:				  printf("No estate cards in your hand, invalid choice\n");
        -:  890:				  printf("Must gain an estate if there are any\n");
        -:  891:				}
    #####:  892:				if (supplyCount(estate, state) > 0){
    #####:  893:				  gainCard(estate, state, 0, currentPlayer);
    #####:  894:				  state->supplyCount[estate]--;//Decrement estates
    #####:  895:				  if (supplyCount(estate, state) == 0){
    #####:  896:				isGameOver(state);
        -:  897:				  }
        -:  898:				}
    #####:  899:				card_not_discarded = 0;//Exit the loop
        -:  900:		  }
        -:  901:					
        -:  902:		  else{
    #####:  903:			p++;//Next card
        -:  904:		  }
        -:  905:		}
        -:  906:		  }
        -:  907:					
        -:  908:		  else{
    #####:  909:			if (supplyCount(estate, state) > 0){
    #####:  910:			  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  911:			  state->supplyCount[estate]--;//Decrement Estates
    #####:  912:			  if (supplyCount(estate, state) == 0){
    #####:  913:				isGameOver(state);
        -:  914:			  }
        -:  915:			}
        -:  916:		  }
        -:  917:			
        -:  918:		  
    #####:  919:		  return 0;
        -:  920:		
        -:  921:		case great_hall:
        -:  922:		  //+1 Card
    #####:  923:		  drawCard(currentPlayer, state);
        -:  924:			
        -:  925:		  //+1 Actions
    #####:  926:		  state->numActions++;
        -:  927:			
        -:  928:		  //discard card from hand
    #####:  929:		  discardCard(handPos, currentPlayer, state, 0);
    #####:  930:		  return 0;
        -:  931:		
        -:  932:		case minion:
        -:  933:		  //+1 action
        1:  934:		  state->numActions++;
        -:  935:			
        -:  936:		  //discard card from hand
        1:  937:		  discardCard(handPos, currentPlayer, state, 0);
        -:  938:			
        1:  939:		  if (choice1)		//+2 coins
        -:  940:			{
        1:  941:			  state->coins = state->coins + 2;
        -:  942:			}
        -:  943:			
    #####:  944:		  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  945:			{
        -:  946:			  //discard hand
    #####:  947:			  while(numHandCards(state) > 0)
        -:  948:				{
    #####:  949:				  discardCard(handPos, currentPlayer, state, 0);
        -:  950:				}
        -:  951:				
        -:  952:			  //draw 4
    #####:  953:			  for (i = 0; i < 4; i++)
        -:  954:				{
    #####:  955:				  drawCard(currentPlayer, state);
        -:  956:				}
        -:  957:				
        -:  958:			  //other players discard hand and redraw if hand size > 4
    #####:  959:			  for (i = 0; i < state->numPlayers; i++)
        -:  960:				{
    #####:  961:				  if (i != currentPlayer)
        -:  962:					{
    #####:  963:					  if ( state->handCount[i] > 4 )
        -:  964:						{
        -:  965:						  //discard hand
    #####:  966:						  while( state->handCount[i] > 0 )
        -:  967:							{
    #####:  968:							  discardCard(handPos, i, state, 0);
        -:  969:							}
        -:  970:							
        -:  971:						  //draw 4
    #####:  972:						  for (j = 0; j < 4; j++)
        -:  973:							{
    #####:  974:							  drawCard(i, state);
        -:  975:							}
        -:  976:						}
        -:  977:					}
        -:  978:				}
        -:  979:				
        -:  980:			}
        1:  981:		  return 0;
        -:  982:		
        -:  983:		case steward:
    #####:  984:		  if (choice1 == 1)
        -:  985:			{
        -:  986:			  //+2 cards
    #####:  987:			  drawCard(currentPlayer, state);
    #####:  988:			  drawCard(currentPlayer, state);
        -:  989:			}
    #####:  990:		  else if (choice1 == 2)
        -:  991:			{
        -:  992:			  //+2 coins
    #####:  993:			  state->coins = state->coins + 2;
        -:  994:			}
        -:  995:		  else
        -:  996:			{
        -:  997:			  //trash 2 cards in hand
    #####:  998:			  discardCard(choice2, currentPlayer, state, 1);
    #####:  999:			  discardCard(choice3, currentPlayer, state, 1);
        -: 1000:			}
        -: 1001:			
        -: 1002:		  //discard card from hand
    #####: 1003:		  discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:		  return 0;
        -: 1005:		
        -: 1006:		case tribute:
        1: 1007:		  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1008:			if (state->deckCount[nextPlayer] > 0){
    #####: 1009:			  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1010:			  state->deckCount[nextPlayer]--;
        -: 1011:			}
    #####: 1012:			else if (state->discardCount[nextPlayer] > 0){
    #####: 1013:			  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1014:			  state->discardCount[nextPlayer]--;
        -: 1015:			}
        -: 1016:			else{
        -: 1017:			  //No Card to Reveal
    #####: 1018:			  if (DEBUG){
        -: 1019:				printf("No cards to reveal\n");
        -: 1020:			  }
        -: 1021:			}
        -: 1022:		  }
        -: 1023:			
        -: 1024:		  else{
        1: 1025:			if (state->deckCount[nextPlayer] == 0){
    #####: 1026:			  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1027:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1028:				state->deckCount[nextPlayer]++;
    #####: 1029:				state->discard[nextPlayer][i] = -1;
    #####: 1030:				state->discardCount[nextPlayer]--;
        -: 1031:			  }
        -: 1032:					
    #####: 1033:			  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1034:			} 
        1: 1035:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1036:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1037:				state->deckCount[nextPlayer]--;
        1: 1038:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1039:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1040:				state->deckCount[nextPlayer]--;
        -: 1041:			  }    
        -: 1042:					   
        1: 1043:			  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1044:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1045:				state->playedCardCount++;
    #####: 1046:				tributeRevealedCards[1] = -1;
        -: 1047:			  }
        -: 1048:
        4: 1049:			  for (i = 0; i <= 2; i ++){
        4: 1050:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        1: 1051:				  state->coins += 2;
        -: 1052:			}
        -: 1053:				
        4: 1054:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        2: 1055:			  drawCard(currentPlayer, state);
        2: 1056:			  drawCard(currentPlayer, state);
        -: 1057:			}
        -: 1058:			else{//Action Card
    #####: 1059:			  state->numActions = state->numActions + 2;
        -: 1060:			}
        -: 1061:		  }
        -: 1062:			
        1: 1063:		  return 0;
        -: 1064:		
        -: 1065:		case ambassador:
    #####: 1066:		  j = 0;		//used to check if player has enough cards to discard
        -: 1067:
    #####: 1068:		  if (choice2 > 2 || choice2 < 0)
        -: 1069:			{
    #####: 1070:			  return -1;				
        -: 1071:			}
        -: 1072:
    #####: 1073:		  if (choice1 == handPos)
        -: 1074:			{
    #####: 1075:			  return -1;
        -: 1076:			}
        -: 1077:
    #####: 1078:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1079:			{
    #####: 1080:			  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1081:				{
    #####: 1082:				  j++;
        -: 1083:				}
        -: 1084:			}
    #####: 1085:		  if (j < choice2)
        -: 1086:			{
    #####: 1087:			  return -1;				
        -: 1088:			}
        -: 1089:
    #####: 1090:		  if (DEBUG) 
        -: 1091:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1092:
        -: 1093:		 	 //increase supply count for choosen card by amount being discarded
    #####: 1094:		  	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1095:			
        -: 1096:		 	 //each other player gains a copy of revealed card
    #####: 1097:		  for (i = 0; i < state->numPlayers; i++)
        -: 1098:			{
    #####: 1099:			  if (i != currentPlayer)
        -: 1100:				{
    #####: 1101:				  gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1102:				}
        -: 1103:			}
        -: 1104:
        -: 1105:		  //discard played card from hand
    #####: 1106:		  discardCard(handPos, currentPlayer, state, 0);			
        -: 1107:
        -: 1108:		  //trash copies of cards returned to supply
    #####: 1109:		  for (j = 0; j < choice2; j++)
        -: 1110:			{
    #####: 1111:			  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:				{
    #####: 1113:				  if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1114:				{
    #####: 1115:				  discardCard(i, currentPlayer, state, 1);
    #####: 1116:				  break;
        -: 1117:				}
        -: 1118:				}
        -: 1119:			}			
        -: 1120:
    #####: 1121:		  return 0;
        -: 1122:		
        -: 1123:		case cutpurse:
        -: 1124:
    #####: 1125:		  updateCoins(currentPlayer, state, 2);
    #####: 1126:		  for (i = 0; i < state->numPlayers; i++)
        -: 1127:			{
    #####: 1128:			  if (i != currentPlayer)
        -: 1129:				{
    #####: 1130:				  for (j = 0; j < state->handCount[i]; j++)
        -: 1131:				{
    #####: 1132:				  if (state->hand[i][j] == copper)
        -: 1133:					{
    #####: 1134:					  discardCard(j, i, state, 0);
    #####: 1135:					  break;
        -: 1136:					}
    #####: 1137:				  if (j == state->handCount[i])
        -: 1138:					{
    #####: 1139:					  for (k = 0; k < state->handCount[i]; k++)
        -: 1140:					{
    #####: 1141:					  if (DEBUG)
        -: 1142:						printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1143:					}	
    #####: 1144:					  break;
        -: 1145:					}		
        -: 1146:				}
        -: 1147:					
        -: 1148:				}
        -: 1149:				
        -: 1150:			}				
        -: 1151:
        -: 1152:		  //discard played card from hand
    #####: 1153:		  discardCard(handPos, currentPlayer, state, 0);			
        -: 1154:
    #####: 1155:		  return 0;
        -: 1156:
        -: 1157:		
        -: 1158:		case embargo: 
        1: 1159:			func_embargo(currentPlayer, choice1, handPos, state);
        1: 1160:			break;	
        -: 1161:		case outpost:
        -: 1162:		  //set outpost flag
    #####: 1163:		  state->outpostPlayed++;
        -: 1164:			
        -: 1165:		  //discard card
    #####: 1166:		  discardCard(handPos, currentPlayer, state, 0);
    #####: 1167:		  return 0;
        -: 1168:		
        -: 1169:		case salvager:
        -: 1170:		  //+1 buy
    #####: 1171:		  state->numBuys++;
        -: 1172:			
    #####: 1173:		  if (choice1)
        -: 1174:			{
        -: 1175:			  //gain coins equal to trashed card
    #####: 1176:			  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1177:			  //trash card
    #####: 1178:			  discardCard(choice1, currentPlayer, state, 1);	
        -: 1179:			}
        -: 1180:			
        -: 1181:		  //discard card
    #####: 1182:		  discardCard(handPos, currentPlayer, state, 0);
    #####: 1183:		  return 0;
        -: 1184:
        -: 1185:		case sea_hag:
        6: 1186:		  for (i = 0; i < state->numPlayers; i++){
        4: 1187:			if (i != currentPlayer){
        2: 1188:			  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        2: 1189:			  state->discardCount[i]++;
        2: 1190:			  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1191:			}
        -: 1192:		  }
        2: 1193:		  return 0;
        -: 1194:		
        -: 1195:		case treasure_map:
        -: 1196:		  //search hand for another treasure_map
    #####: 1197:		  index = -1;
    #####: 1198:		  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1199:			{
    #####: 1200:			  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1201:				{
    #####: 1202:				  index = i;
    #####: 1203:				  break;
        -: 1204:				}
        -: 1205:			}
    #####: 1206:		  if (index > -1)
        -: 1207:			{
        -: 1208:			  //trash both treasure cards
    #####: 1209:			  discardCard(handPos, currentPlayer, state, 1);
    #####: 1210:			  discardCard(index, currentPlayer, state, 1);
        -: 1211:
        -: 1212:			  //gain 4 Gold cards
    #####: 1213:			  for (i = 0; i < 4; i++)
        -: 1214:				{
    #####: 1215:				  gainCard(gold, state, 1, currentPlayer);
        -: 1216:				}
        -: 1217:				
        -: 1218:			  //return success
    #####: 1219:			  return 1;
        -: 1220:			}
        -: 1221:			
        -: 1222:		  //no second treasure_map found in hand
    #####: 1223:		  return -1;
        -: 1224:		}
        -: 1225:	
        1: 1226:  return -1;
        -: 1227:}
        -: 1228:
        3: 1229:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1230:{
        -: 1231:	
        -: 1232:  //if card is not trashed, added to Played pile 
        3: 1233:  if (trashFlag < 1)
        -: 1234:    {
        -: 1235:      //add card to played pile
        2: 1236:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1237:      state->playedCardCount++;
        -: 1238:    }
        -: 1239:	
        -: 1240:  //set played card to -1
        3: 1241:  state->hand[currentPlayer][handPos] = -1;
        -: 1242:	
        -: 1243:  //remove card from player's hand
        3: 1244:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1245:    {
        -: 1246:      //reduce number of cards in hand
    #####: 1247:      state->handCount[currentPlayer]--;
        -: 1248:    }
        3: 1249:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1250:    {
        -: 1251:      //reduce number of cards in hand
    #####: 1252:      state->handCount[currentPlayer]--;
        -: 1253:    }
        -: 1254:  else 	
        -: 1255:    {
        -: 1256:      //replace discarded card with last card in hand
        3: 1257:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1258:      //set last card to -1
        3: 1259:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1260:      //reduce number of cards in hand
        3: 1261:      state->handCount[currentPlayer]--;
        -: 1262:    }
        -: 1263:	
        3: 1264:  return 0;
        -: 1265:}
        -: 1266:
    #####: 1267:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1268:{
        -: 1269:  //Note: supplyPos is enum of choosen card
        -: 1270:	
        -: 1271:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1272:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1273:    {
    #####: 1274:      return -1;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //added card for [whoseTurn] current player:
        -: 1278:  // toFlag = 0 : add to discard
        -: 1279:  // toFlag = 1 : add to deck
        -: 1280:  // toFlag = 2 : add to hand
        -: 1281:
    #####: 1282:  if (toFlag == 1)
        -: 1283:    {
    #####: 1284:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1285:      state->deckCount[player]++;
        -: 1286:    }
    #####: 1287:  else if (toFlag == 2)
        -: 1288:    {
    #####: 1289:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1290:      state->handCount[player]++;
        -: 1291:    }
        -: 1292:  else
        -: 1293:    {
    #####: 1294:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1295:      state->discardCount[player]++;
        -: 1296:    }
        -: 1297:	
        -: 1298:  //decrease number in supply pile
    #####: 1299:  state->supplyCount[supplyPos]--;
        -: 1300:	 
    #####: 1301:  return 0;
        -: 1302:}
        -: 1303:
        6: 1304:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1305:{
        -: 1306:  int i;
        -: 1307:  //reset coin count
        6: 1308:  state->coins = 0;
        -: 1309:  //add coins for each Treasure card in player's hand
       36: 1310:  for (i = 0; i < state->handCount[player]; i++)
        -: 1311:    {
       30: 1312:      if (state->hand[player][i] == copper)
        -: 1313:	{
       21: 1314:	  state->coins += 1;
        -: 1315:	}
        9: 1316:      else if (state->hand[player][i] == silver)
        -: 1317:	{
    #####: 1318:	  state->coins += 2;
        -: 1319:	}
        9: 1320:      else if (state->hand[player][i] == gold)
        -: 1321:	{
    #####: 1322:	  state->coins += 3;
        -: 1323:	}	
        -: 1324:    }	
        -: 1325:  //add bonus
        6: 1326:  state->coins += bonus;
        6: 1327:  return 0;
        -: 1328:}
        -: 1329:
        -: 1330:
        -: 1331://end of dominion.c
        -: 1332:
