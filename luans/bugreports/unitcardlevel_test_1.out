$$$$$ Starting to test cards-level ...... $$$$$
If no coins...
*** No Coins Correct ***
Continue if no coins counted...
Check with coins and kingdom cards...
*** 8 Coins Incorrect ***
Continue if 8 coins in hand...
$$$$$ Ending to test cards-level ...... $$$$$
File 'unittest_card.c'
Lines executed:100.00% of 23
unittest_card.c:creating 'unittest_card.c.gcov'

        -:    0:Source:unittest_card.c
        -:    0:Graph:unittest_card.gcno
        -:    0:Data:unittest_card.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:
        -:    4:#include "rngs.h"
        -:    5:#include "assert.h"
        -:    6:#include "dominion.h"
        -:    7:
        1:    8:int main (int argc, char** argv) {
        -:    9:	struct gameState G;
        -:   10:	
        1:   11:	int k[10] = {adventurer, council_room, feast, gardens, mine, baron, steward, tribute, embargo, sea_hag};
        1:   12:	int player = 5;
        1:   13:	int bonus = 0;
        -:   14:	int r;
        -:   15:	
        1:   16:	printf("$$$$$ Starting to test cards-level ...... $$$$$\n");	
        -:   17:	
        1:   18:	initializeGame(2, k, 8, &G);	
        -:   19:
        5:   20:	for(int i = 0; i < G.handCount[player]; i++)
        4:   21:		G.hand[player][i] = -1;
        -:   22:
        1:   23:	G.handCount[player] = 0;
        -:   24:
        1:   25:	printf("If no coins...\n");
        -:   26:	
        1:   27:	r = updateCoins(player, &G, bonus);
        1:   28:	printf((G.coins == 0) ? "*** No Coins Correct ***\n" : "*** No Coins Incorrect ***\n");
        -:   29:	
        1:   30:	printf("Continue if no coins counted...\n");
        1:   31:	printf("Check with coins and kingdom cards...\n");
        -:   32:	
       11:   33:	for(int i = 0; i < 10; i ++)
       10:   34:		G.hand[player][i] = k[i];
        -:   35:
        1:   36:	bonus = 0;
        1:   37:	G.handCount[player] = 10;	
        1:   38:	r = updateCoins(player, &G, bonus);	
        -:   39:	
        1:   40:	printf((G.coins == 8) ? "*** 8 Coins Correct ***\n" : "*** 8 Coins Incorrect ***\n");	
        1:   41:	printf("Continue if 8 coins in hand...\n");
        -:   42:
        1:   43:	printf("$$$$$ Ending to test cards-level ...... $$$$$\n");
        -:   44:	
        1:   45:	return EXIT_SUCCESS;
        -:   46:}File 'dominion.c'
No executable lines
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
        -:    9:  if (*(int*)a > *(int*)b)
        -:   10:    return 1;
        -:   11:  if (*(int*)a < *(int*)b)
        -:   12:    return -1;
        -:   13:  return 0;
        -:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
        -:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        -:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        -:   23:  int* k = malloc(10 * sizeof(int));
        -:   24:  k[0] = k1;
        -:   25:  k[1] = k2;
        -:   26:  k[2] = k3;
        -:   27:  k[3] = k4;
        -:   28:  k[4] = k5;
        -:   29:  k[5] = k6;
        -:   30:  k[6] = k7;
        -:   31:  k[7] = k8;
        -:   32:  k[8] = k9;
        -:   33:  k[9] = k10;
        -:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        -:   44:  SelectStream(1);
        -:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        -:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        -:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        -:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
        -:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
        -:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
        -:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        -:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        -:   73:  if (numPlayers == 2)
        -:   74:    {
        -:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        -:   77:  else if (numPlayers == 3)
        -:   78:    {
        -:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        -:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        -:   87:  if (numPlayers == 2)
        -:   88:    {
        -:   89:      state->supplyCount[estate] = 8;
        -:   90:      state->supplyCount[duchy] = 8;
        -:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        -:   95:      state->supplyCount[estate] = 12;
        -:   96:      state->supplyCount[duchy] = 12;
        -:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        -:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        -:  102:  state->supplyCount[silver] = 40;
        -:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
        -:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
        -:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
        -:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
        -:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        -:  115:		  if (numPlayers == 2){ 
        -:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        -:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        -:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
        -:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
        -:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        -:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        -:  140:      state->deckCount[i] = 0;
        -:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        -:  143:	  state->deck[i][j] = estate;
        -:  144:	  state->deckCount[i]++;
        -:  145:	}
        -:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
        -:  148:	  state->deck[i][j] = copper;
        -:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        -:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        -:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
        -:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        -:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        -:  166:      state->handCount[i] = 0;
        -:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
        -:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
        -:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        -:  182:  state->outpostPlayed = 0;
        -:  183:  state->phase = 0;
        -:  184:  state->numActions = 1;
        -:  185:  state->numBuys = 1;
        -:  186:  state->playedCardCount = 0;
        -:  187:  state->whoseTurn = 0;
        -:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        -:  192:  for (it = 0; it < 5; it++){
        -:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        -:  196:  //updateCoins(state->whoseTurn, state, 0);
        -:  197:
        -:  198:  return 0;
        -:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        -:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        -:  209:  if (state->deckCount[player] < 1)
        -:  210:    return -1;
        -:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
        -:  214:  while (state->deckCount[player] > 0) {
        -:  215:    card = floor(Random() * state->deckCount[player]);
        -:  216:    newDeck[newDeckPos] = state->deck[player][card];
        -:  217:    newDeckPos++;
        -:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
        -:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
        -:  221:    state->deckCount[player]--;
        -:  222:  }
        -:  223:  for (i = 0; i < newDeckPos; i++) {
        -:  224:    state->deck[player][i] = newDeck[i];
        -:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        -:  228:  return 0;
        -:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        -:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        -:  237:  if (state->phase != 0)
        -:  238:    {
        -:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        -:  243:  if ( state->numActions < 1 )
        -:  244:    {
        -:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        -:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        -:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
        -:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        -:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
        -:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        -:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        -:  267:  //updateCoins(state->whoseTurn, state, coin_bonus);  THIS LINE IS INCORRECT, SO IT HAS BEEN COMMENTED OUT
        -:  268:	
        -:  269:  return 0;
        -:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        -:  280:  who = state->whoseTurn;
        -:  281:
        -:  282:  if (state->numBuys < 1)
        -:  283:  {
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
        -:  286:    return -1;
        -:  287:  }
        -:  288:
        -:  289:  else if (supplyCount(supplyPos, state) <1)
        -:  290:  {
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
        -:  293:    return -1;
        -:  294:  }
        -:  295:
        -:  296:  else if (state->coins < getCost(supplyPos))
        -:  297:  {
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        -:  300:    return -1;
        -:  301:  }
        -:  302:
        -:  303:  else
        -:  304:  {
        -:  305:    state->phase=1;
        -:  306:    //state->supplyCount[supplyPos]--;
        -:  307:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  308:  
        -:  309:    state->coins = (state->coins) - (getCost(supplyPos));
        -:  310:    state->numBuys--;
        -:  311:    if (DEBUG)
        -:  312:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  313:  }
        -:  314:
        -:  315:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  316:  //state->discardCount[who]++;
        -:  317:    
        -:  318:  return 0;
        -:  319:}
        -:  320:
        -:  321:int numHandCards(struct gameState *state) {
        -:  322:  return state->handCount[ whoseTurn(state) ];
        -:  323:}
        -:  324:
        -:  325:int handCard(int handPos, struct gameState *state) {
        -:  326:  int currentPlayer = whoseTurn(state);
        -:  327:  return state->hand[currentPlayer][handPos];
        -:  328:}
        -:  329:
        -:  330:int supplyCount(int card, struct gameState *state) {
        -:  331:  return state->supplyCount[card];
        -:  332:}
        -:  333:
        -:  334:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  335:  int i;
        -:  336:  int count = 0;
        -:  337:
        -:  338:  for (i = 0; i < state->deckCount[player]; i++)
        -:  339:    {
        -:  340:      if (state->deck[player][i] == card) count++;
        -:  341:    }
        -:  342:
        -:  343:  for (i = 0; i < state->handCount[player]; i++)
        -:  344:    {
        -:  345:      if (state->hand[player][i] == card) count++;
        -:  346:    }
        -:  347:
        -:  348:  for (i = 0; i < state->discardCount[player]; i++)
        -:  349:    {
        -:  350:      if (state->discard[player][i] == card) count++;
        -:  351:    }
        -:  352:
        -:  353:  return count;
        -:  354:}
        -:  355:
        -:  356:int whoseTurn(struct gameState *state) {
        -:  357:  return state->whoseTurn;
        -:  358:}
        -:  359:
        -:  360:int endTurn(struct gameState *state) {
        -:  361:  int k;
        -:  362:  int i;
        -:  363:  int currentPlayer = whoseTurn(state);
        -:  364:  
        -:  365:  //Discard hand
        -:  366:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        -:  367:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        -:  368:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  369:  }
        -:  370:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  371:    
        -:  372:  //Code for determining the player
        -:  373:  if (currentPlayer < (state->numPlayers - 1)){ 
        -:  374:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  375:  }
        -:  376:  else{
        -:  377:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  378:  }
        -:  379:
        -:  380:  state->outpostPlayed = 0;
        -:  381:  state->phase = 0;
        -:  382:  state->numActions = 1;
        -:  383:  state->coins = 0;
        -:  384:  state->numBuys = 1;
        -:  385:  state->playedCardCount = 0;
        -:  386:  state->handCount[state->whoseTurn] = 0;
        -:  387:
        -:  388:  //int k; move to top
        -:  389:  //Next player draws hand
        -:  390:  for (k = 0; k < 5; k++){
        -:  391:    drawCard(state->whoseTurn, state);//Draw a card
        -:  392:  }
        -:  393:
        -:  394:  //Update money
        -:  395:  //updateCoins(state->whoseTurn, state , 0);
        -:  396:
        -:  397:  return 0;
        -:  398:}
        -:  399:
        -:  400:int isGameOver(struct gameState *state) {
        -:  401:  int i;
        -:  402:  int j;
        -:  403:	
        -:  404:  //if stack of Province cards is empty, the game ends
        -:  405:  if (state->supplyCount[province] == 0)
        -:  406:    {
        -:  407:      return 1;
        -:  408:    }
        -:  409:
        -:  410:  //if three supply pile are at 0, the game ends
        -:  411:  j = 0;
        -:  412:  for (i = 0; i < 25; i++)
        -:  413:    {
        -:  414:      if (state->supplyCount[i] == 0)
        -:  415:	{
        -:  416:	  j++;
        -:  417:	}
        -:  418:    }
        -:  419:  if ( j >= 3)
        -:  420:    {
        -:  421:      return 1;
        -:  422:    }
        -:  423:
        -:  424:  return 0;
        -:  425:}
        -:  426:
        -:  427:int scoreFor (int player, struct gameState *state) {
        -:  428:
        -:  429:  int i;
        -:  430:  int score = 0;
        -:  431:  //score from hand
        -:  432:  for (i = 0; i < state->handCount[player]; i++)
        -:  433:    {
        -:  434:      if (state->hand[player][i] == curse) { score = score - 1; };
        -:  435:      if (state->hand[player][i] == estate) { score = score + 1; };
        -:  436:      if (state->hand[player][i] == duchy) { score = score + 3; };
        -:  437:      if (state->hand[player][i] == province) { score = score + 6; };
        -:  438:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        -:  439:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from discard
        -:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
        -:  445:      if (state->discard[player][i] == curse) { score = score - 1; };
        -:  446:      if (state->discard[player][i] == estate) { score = score + 1; };
        -:  447:      if (state->discard[player][i] == duchy) { score = score + 3; };
        -:  448:      if (state->discard[player][i] == province) { score = score + 6; };
        -:  449:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        -:  450:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
        -:  453:  //score from deck
        -:  454:  for (i = 0; i < state->discardCount[player]; i++)
        -:  455:    {
        -:  456:      if (state->deck[player][i] == curse) { score = score - 1; };
        -:  457:      if (state->deck[player][i] == estate) { score = score + 1; };
        -:  458:      if (state->deck[player][i] == duchy) { score = score + 3; };
        -:  459:      if (state->deck[player][i] == province) { score = score + 6; };
        -:  460:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        -:  461:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  462:    }
        -:  463:
        -:  464:  return score;
        -:  465:}
        -:  466:
        -:  467:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  468:  int i;	
        -:  469:  int j;
        -:  470:  int highScore;
        -:  471:  int currentPlayer;
        -:  472:
        -:  473:  //get score for each player
        -:  474:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  475:    {
        -:  476:      //set unused player scores to -9999
        -:  477:      if (i >= state->numPlayers)
        -:  478:	{
        -:  479:	  players[i] = -9999;
        -:  480:	}
        -:  481:      else
        -:  482:	{
        -:  483:	  players[i] = scoreFor (i, state);
        -:  484:	}
        -:  485:    }
        -:  486:
        -:  487:  //find highest score
        -:  488:  j = 0;
        -:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
        -:  491:      if (players[i] > players[j])
        -:  492:	{
        -:  493:	  j = i;
        -:  494:	}
        -:  495:    }
        -:  496:  highScore = players[j];
        -:  497:
        -:  498:  //add 1 to players who had less turns
        -:  499:  currentPlayer = whoseTurn(state);
        -:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
        -:  502:      if ( players[i] == highScore && i > currentPlayer )
        -:  503:	{
        -:  504:	  players[i]++;
        -:  505:	}
        -:  506:    }
        -:  507:
        -:  508:  //find new highest score
        -:  509:  j = 0;
        -:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
        -:  512:      if ( players[i] > players[j] )
        -:  513:	{
        -:  514:	  j = i;
        -:  515:	}
        -:  516:    }
        -:  517:  highScore = players[j];
        -:  518:
        -:  519:  //set winners in array to 1 and rest to 0
        -:  520:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  521:    {
        -:  522:      if ( players[i] == highScore )
        -:  523:	{
        -:  524:	  players[i] = 1;
        -:  525:	}
        -:  526:      else
        -:  527:	{
        -:  528:	  players[i] = 0;
        -:  529:	}
        -:  530:    }
        -:  531:
        -:  532:  return 0;
        -:  533:}
        -:  534:
        -:  535:int drawCard(int player, struct gameState *state)
        -:  536:{	int count;
        -:  537:  int deckCounter;
        -:  538:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  539:    
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
        -:  543:    for (i = 0; i < state->discardCount[player];i++){
        -:  544:      state->deck[player][i] = state->discard[player][i];
        -:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
        -:  548:    state->deckCount[player] = state->discardCount[player];
        -:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shufffle the deck
        -:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  553:   
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:    
        -:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
        -:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:    
        -:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:    
        -:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
        -:  569:    if (deckCounter == 0)
        -:  570:      return -1;
        -:  571:
        -:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        -:  573:    state->deckCount[player]--;
        -:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
        -:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
        -:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
        -:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
        -:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        -:  586:    state->deckCount[player]--;
        -:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
        -:  590:  return 0;
        -:  591:}
        -:  592:
        -:  593:int getCost(int cardNumber)
        -:  594:{
        -:  595:  switch( cardNumber ) 
        -:  596:    {
        -:  597:    case curse:
        -:  598:      return 0;
        -:  599:    case estate:
        -:  600:      return 2;
        -:  601:    case duchy:
        -:  602:      return 5;
        -:  603:    case province:
        -:  604:      return 8;
        -:  605:    case copper:
        -:  606:      return 0;
        -:  607:    case silver:
        -:  608:      return 3;
        -:  609:    case gold:
        -:  610:      return 6;
        -:  611:    case adventurer:
        -:  612:      return 6;
        -:  613:    case council_room:
        -:  614:      return 5;
        -:  615:    case feast:
        -:  616:      return 4;
        -:  617:    case gardens:
        -:  618:      return 4;
        -:  619:    case mine:
        -:  620:      return 5;
        -:  621:    case remodel:
        -:  622:      return 4;
        -:  623:    case smithy:
        -:  624:      return 4;
        -:  625:    case village:
        -:  626:      return 3;
        -:  627:    case baron:
        -:  628:      return 4;
        -:  629:    case great_hall:
        -:  630:      return 3;
        -:  631:    case minion:
        -:  632:      return 5;
        -:  633:    case steward:
        -:  634:      return 3;
        -:  635:    case tribute:
        -:  636:      return 5;
        -:  637:    case ambassador:
        -:  638:      return 3;
        -:  639:    case cutpurse:
        -:  640:      return 4;
        -:  641:    case embargo: 
        -:  642:      return 2;
        -:  643:    case outpost:
        -:  644:      return 5;
        -:  645:    case salvager:
        -:  646:      return 4;
        -:  647:    case sea_hag:
        -:  648:      return 4;
        -:  649:    case treasure_map:
        -:  650:      return 4;
        -:  651:    }
        -:  652:	
        -:  653:  return -1;
        -:  654:}
        -:  655:
        -:  656:int card_Mine(int i, int j, int choice1, int choice2, struct gameState *state, int currentPlayer, int handPos, int z){
        -:  657:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  658:
        -:  659:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  660:	{
        -:  661:		return -1;
        -:  662:	}
        -:  663:
        -:  664:	if (choice2 > treasure_map || choice2 < curse)
        -:  665:	{
        -:  666:		return -1;
        -:  667:	}
        -:  668:
        -:  669:	if ((getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2))
        -:  670:	{
        -:  671:		return -1;
        -:  672:	}
        -:  673:
        -:  674:	gainCard(choice2, state, 2, currentPlayer);
        -:  675:
        -:  676:	//discard card from hand
        -:  677:	discardCard(handPos, currentPlayer, state, 0);
        -:  678:
        -:  679:	//discard trashed card
        -:  680:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  681:	{
        -:  682:		if (state->hand[currentPlayer][i] == j)
        -:  683:		{
        -:  684:			discardCard(i, currentPlayer, state, 0);
        -:  685:			break;
        -:  686:		}
        -:  687:	}
        -:  688:
        -:  689:	return 0;
        -:  690:}
        -:  691:
        -:  692:
        -:  693:int card_Feast(int i, int x, int currentPlayer, int temphand [], struct gameState *state, int choice1, int z, int handPos){
        -:  694:	//gain card with cost up to 5
        -:  695:	//Backup hand
        -:  696:	//for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  697:	//	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  698:	//	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  699:	//}
        -:  700:	//Backup hand
        -:  701:
        -:  702:	//Update Coins for Buy
        -:  703:	//updateCoins(currentPlayer, state, 5);
        -:  704:
        -:  705:  if (supplyCount(choice1, state) <= 0)
        -:  706:  {
        -:  707:    if (DEBUG)
        -:  708:			printf("None of that card left, sorry!\n");
        -:  709:
        -:  710:		if (DEBUG)
        -:  711:  		printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  712:	
        -:  713:    return -1;
        -:  714:	}
        -:  715:	else if (5 < getCost(choice1))
        -:  716:  {
        -:  717:		printf("That card is too expensive!\n");
        -:  718:
        -:  719:		if (DEBUG)
        -:  720:  		printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:  
        -:  722:    return -1;
        -:  723:	}
        -:  724:	else
        -:  725:  {
        -:  726:		if (DEBUG)
        -:  727:  		printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	
        -:  729:		gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  730:    discardCard(handPos, currentPlayer, state, 1);//Trash Feast
        -:  731:	
        -:  732:			if (DEBUG)
        -:  733:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:  }
        -:  735:
        -:  736:
        -:  737:	//Reset Hand
        -:  738:	//for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  739:	//	state->hand[currentPlayer][i] = temphand[i];
        -:  740:	//	temphand[i] = -1;
        -:  741:	//}
        -:  742:	//Reset Hand
        -:  743:
        -:  744:	return 0;
        -:  745:}
        -:  746:
        -:  747:int card_Ambassador(int i, int j, int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer){
        -:  748:  j = 0;		//used to check if player has enough cards to discard
        -:  749:
        -:  750:	if (choice2 > 2 || choice2 < 0 || choice1 < 0)
        -:  751:	{
        -:  752:		return -1;
        -:  753:	}
        -:  754:
        -:  755:	if (choice1 == handPos)
        -:  756:	{
        -:  757:		return -1;
        -:  758:	}
        -:  759:
        -:  760:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  761:	{
        -:  762:		if (i != handPos && state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  763:		{
        -:  764:			j++;
        -:  765:		}
        -:  766:	}
        -:  767:	if (j < choice2)
        -:  768:	{
        -:  769:		return -1;
        -:  770:	}
        -:  771:
        -:  772:	if (DEBUG)
        -:  773:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  774:
        -:  775:	//increase supply count for choosen card by amount being discarded
        -:  776:	state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  777:
        -:  778:	//each other player gains a copy of revealed card
        -:  779:	for (i = 0; i < state->numPlayers; i++)
        -:  780:	{
        -:  781:		if (i != currentPlayer)
        -:  782:		{
        -:  783:			gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  784:		}
        -:  785:	}
        -:  786:
        -:  787:	//discard played card from hand
        -:  788:	discardCard(handPos, currentPlayer, state, 0);
        -:  789:
        -:  790:	//trash copies of cards returned to supply
        -:  791:	for (j = 0; j < choice2; j++)
        -:  792:	{
        -:  793:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  794:		{
        -:  795:			if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  796:			{
        -:  797:				discardCard(i, currentPlayer, state, 1);
        -:  798:				break;
        -:  799:			}
        -:  800:		}
        -:  801:	}
        -:  802:
        -:  803:	return 0;
        -:  804:}
        -:  805:
        -:  806:
        -:  807:int card_Tribute(int i, struct gameState *state, int currentPlayer, int tributeRevealedCards [], int nextPlayer,int handPos){
        -:  808:	discardCard(handPos, currentPlayer, state, 0);//Discard card
        -:  809:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -:  810:		if (state->deckCount[nextPlayer] > 0){
        -:  811:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        -:  812:			state->deckCount[nextPlayer]--;
        -:  813:		}
        -:  814:		else if (state->discardCount[nextPlayer] > 0){
        -:  815:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
        -:  816:			state->discardCount[nextPlayer]--;
        -:  817:		}
        -:  818:		else{
        -:  819:			//No Card to Reveal
        -:  820:			if (DEBUG){
        -:  821:				printf("No cards to reveal\n");
        -:  822:			}
        -:  823:		}
        -:  824:	}
        -:  825:
        -:  826:	else{
        -:  827:		if (state->deckCount[nextPlayer] == 0){
        -:  828:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -:  829:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -:  830:				state->deckCount[nextPlayer]++;
        -:  831:				state->discard[nextPlayer][i] = -1;
        -:  832:				state->discardCount[nextPlayer]--;
        -:  833:			}
        -:  834:
        -:  835:			shuffle(nextPlayer, state);//Shuffle the deck
        -:  836:		}
        -:  837:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        -:  838:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -:  839:		state->deckCount[nextPlayer]--;
        -:  840:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
        -:  841:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -:  842:		state->deckCount[nextPlayer]--;
        -:  843:	}
        -:  844:
        -:  845:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -:  846:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -:  847:		state->playedCardCount++;
        -:  848:		tributeRevealedCards[1] = -1;
        -:  849:	}
        -:  850:
        -:  851:	for (i = 0; i <= 2; i++){
        -:  852:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -:  853:			state->coins += 2;
        -:  854:		}
        -:  855:
        -:  856:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -:  857:			drawCard(currentPlayer, state);
        -:  858:			drawCard(currentPlayer, state);
        -:  859:		}
        -:  860:		else{//Action Card
        -:  861:			state->numActions = state->numActions + 2;
        -:  862:		}
        -:  863:	}
        -:  864:	return 0;
        -:  865:}
        -:  866:
        -:  867:int card_Baron(int i, int choice1, struct gameState *state, int currentPlayer, int handPos){
        -:  868:	state->numBuys++;//Increase buys by 1!
        -:  869:	if (choice1 > 0){//Boolean true or going to discard an estate
        -:  870:		int p = 0;//Iterator for hand!
        -:  871:		int card_not_discarded = 1;//Flag for discard set!
        -:  872:		while (card_not_discarded){
        -:  873:			if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -:  874:				state->coins += 4;//Add 4 coins to the amount of coins
        -:  875:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -:  876:				state->discardCount[currentPlayer]++;
        -:  877:				for (; p < state->handCount[currentPlayer]; p++){
        -:  878:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  879:				}
        -:  880:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  881:				state->handCount[currentPlayer]--;
        -:  882:				card_not_discarded = 0;//Exit the loop
        -:  883:			}
        -:  884:			else if (p > state->handCount[currentPlayer]){
        -:  885:				if (DEBUG) {
        -:  886:					printf("No estate cards in your hand, invalid choice\n");
        -:  887:					printf("Must gain an estate if there are any\n");
        -:  888:				}
        -:  889:				if (supplyCount(estate, state) > 0){
        -:  890:					gainCard(estate, state, 0, currentPlayer);
        -:  891:					state->supplyCount[estate]--;//Decrement estates
        -:  892:					if (supplyCount(estate, state) == 0){
        -:  893:						isGameOver(state);
        -:  894:					}
        -:  895:				}
        -:  896:				card_not_discarded = 0;//Exit the loop
        -:  897:			}
        -:  898:
        -:  899:			else{
        -:  900:				p++;//Next card
        -:  901:			}
        -:  902:		}
        -:  903:	}
        -:  904:
        -:  905:	else{
        -:  906:		if (supplyCount(estate, state) > 0){
        -:  907:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  908:			state->supplyCount[estate]--;//Decrement Estates
        -:  909:			if (supplyCount(estate, state) == 0){
        -:  910:				isGameOver(state);
        -:  911:			}
        -:  912:		}
        -:  913:	}
        -:  914:  discardCard(handPos, currentPlayer, state, 0);//Discard card
        -:  915:	return 0;
        -:  916:}
        -:  917:
        -:  918:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  919:{
        -:  920:  int i;
        -:  921:  int j;
        -:  922:  int k;
        -:  923:  int x;
        -:  924:  int index;
        -:  925:  int currentPlayer = whoseTurn(state);
        -:  926:  int nextPlayer = currentPlayer + 1;
        -:  927:
        -:  928:  int tributeRevealedCards[2] = {-1, -1};
        -:  929:  int temphand[MAX_HAND];// moved above the if statement
        -:  930:  int drawntreasure=0;
        -:  931:  int cardDrawn;
        -:  932:  int z = 0;// this is the counter for the temp hand
        -:  933:  if (nextPlayer > (state->numPlayers - 1)){
        -:  934:    nextPlayer = 0;
        -:  935:  }
        -:  936:  
        -:  937:	
        -:  938:  //uses switch to select card and perform actions
        -:  939:  switch( card ) 
        -:  940:    {
        -:  941:	//Refactored card #1
        -:  942:	case mine:
        -:  943:		return card_Mine(i, j, choice1, choice2, state, currentPlayer, handPos, z);
        -:  944:
        -:  945:	//Refactored card #2
        -:  946:	case feast:
        -:  947:		return card_Feast(i, x,currentPlayer, temphand, state, choice1, z, handPos);
        -:  948:
        -:  949:	//Refactored card #3
        -:  950:	case ambassador:
        -:  951:		return card_Ambassador(i, j, choice1, choice2, handPos, state, currentPlayer);
        -:  952:
        -:  953:	//Refactored card #4
        -:  954:	case tribute:
        -:  955:		return card_Tribute(i, state, currentPlayer, tributeRevealedCards, nextPlayer,handPos);
        -:  956:
        -:  957:	//Refactored card #5
        -:  958:	case baron:
        -:  959:		return card_Baron(i, choice1, state, currentPlayer, handPos);
        -:  960:
        -:  961:    case adventurer:
        -:  962:      //discard card from hand
        -:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:      while(drawntreasure<2){
        -:  965:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  966:	  shuffle(currentPlayer, state);
        -:  967:	}
        -:  968:	drawCard(currentPlayer, state);
        -:  969:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  970:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  971:	  drawntreasure++;
        -:  972:	else{
        -:  973:	  temphand[z]=cardDrawn;
        -:  974:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  975:	  z++;
        -:  976:	}
        -:  977:      }
        -:  978:      while(z-1>=0){
        -:  979:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  980:	z=z-1;
        -:  981:      }
        -:  982:      return 0;
        -:  983:			
        -:  984:    case council_room:
        -:  985:      //+4 Cards
        -:  986:      for (i = 0; i < 4; i++)
        -:  987:	{
        -:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
        -:  990:			
        -:  991:      //+1 Buy
        -:  992:      state->numBuys++;
        -:  993:			
        -:  994:      //Each other player draws a card
        -:  995:      for (i = 0; i < state->numPlayers; i++)
        -:  996:	{
        -:  997:	  if ( i != currentPlayer )
        -:  998:	    {
        -:  999:	      drawCard(i, state);
        -: 1000:	    }
        -: 1001:	}
        -: 1002:			
        -: 1003:      //put played card in played card pile
        -: 1004:      discardCard(handPos, currentPlayer, state, 0);
        -: 1005:			
        -: 1006:      return 0;
        -: 1007:				
        -: 1008:    case gardens:
        -: 1009:      return -1;
        -: 1010:			
        -: 1011:    case remodel:
        -: 1012:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1013:
        -: 1014:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) )
        -: 1015:	{
        -: 1016:	  return -1;
        -: 1017:	}
        -: 1018:
        -: 1019:      gainCard(choice2, state, 0, currentPlayer);
        -: 1020:
        -: 1021:      //discard card from hand
        -: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:
        -: 1024:      //discard trashed card
        -: 1025:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1026:	{
        -: 1027:	  if (state->hand[currentPlayer][i] == j)
        -: 1028:	    {
        -: 1029:	      discardCard(i, currentPlayer, state, 0);			
        -: 1030:	      break;
        -: 1031:	    }
        -: 1032:	}
        -: 1033:
        -: 1034:
        -: 1035:      return 0;
        -: 1036:		
        -: 1037:    case smithy:
        -: 1038:      //+3 Cards
        -: 1039:      for (i = 0; i < 3; i++)
        -: 1040:	{
        -: 1041:	  drawCard(currentPlayer, state);
        -: 1042:	}
        -: 1043:			
        -: 1044:      //discard card from hand
        -: 1045:      discardCard(handPos, currentPlayer, state, 0);
        -: 1046:      return 0;
        -: 1047:		
        -: 1048:    case village:
        -: 1049:      //+1 Card
        -: 1050:      drawCard(currentPlayer, state);
        -: 1051:			
        -: 1052:      //+2 Actions
        -: 1053:      state->numActions = state->numActions + 2;
        -: 1054:			
        -: 1055:      //discard played card from hand
        -: 1056:      discardCard(handPos, currentPlayer, state, 0);
        -: 1057:      return 0;
        -: 1058:	
        -: 1059:		
        -: 1060:    case great_hall:
        -: 1061:      //+1 Card
        -: 1062:      drawCard(currentPlayer, state);
        -: 1063:			
        -: 1064:      //+1 Actions
        -: 1065:      state->numActions++;
        -: 1066:			
        -: 1067:      //discard card from hand
        -: 1068:      discardCard(handPos, currentPlayer, state, 0);
        -: 1069:      return 0;
        -: 1070:		
        -: 1071:    case minion:
        -: 1072:      //+1 action
        -: 1073:      state->numActions++;
        -: 1074:			
        -: 1075:      //discard card from hand
        -: 1076:      discardCard(handPos, currentPlayer, state, 0);
        -: 1077:			
        -: 1078:      if (choice1 == 1)		//+2 coins
        -: 1079:	{
        -: 1080:	  state->coins = state->coins + 2;
        -: 1081:	}
        -: 1082:			
        -: 1083:      else if (choice1 == 2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1084:	{
        -: 1085:    //discard hand
        -: 1086:	  while(state->handCount[currentPlayer] > 0)
        -: 1087:	    {
        -: 1088:	      discardCard(0, currentPlayer, state, 0);
        -: 1089:	    }
        -: 1090:				
        -: 1091:	  //draw 4
        -: 1092:	  for (i = 0; i < 4; i++)
        -: 1093:	    {
        -: 1094:	      drawCard(currentPlayer, state);
        -: 1095:	    }
        -: 1096:				
        -: 1097:	  //other players discard hand and redraw if hand size > 4
        -: 1098:	  for (i = 0; i < state->numPlayers; i++)
        -: 1099:	    {
        -: 1100:	      if (i != currentPlayer)
        -: 1101:		      {
        -: 1102:		      if ( state->handCount[i] > 4 )
        -: 1103:		      {
        -: 1104:		        //discard hand
        -: 1105:		        while( state->handCount[i] > 0 )
        -: 1106:		        {
        -: 1107:              discardCard(0, i, state, 0);
        -: 1108:			      }
        -: 1109:							
        -: 1110:		      //draw 4
        -: 1111:		      for (j = 0; j < 4; j++)
        -: 1112:			{
        -: 1113:			  drawCard(i, state);
        -: 1114:			}
        -: 1115:		    }
        -: 1116:		}
        -: 1117:	    }
        -: 1118:				
        -: 1119:	}
        -: 1120:      return 0;
        -: 1121:		
        -: 1122:    case steward:
        -: 1123:      //discard card from hand
        -: 1124:      discardCard(handPos, currentPlayer, state, 0);
        -: 1125:
        -: 1126:      if (choice1 == 1)
        -: 1127:	{
        -: 1128:	  //+2 cards
        -: 1129:	  drawCard(currentPlayer, state);
        -: 1130:	  drawCard(currentPlayer, state);
        -: 1131:	}
        -: 1132:      else if (choice1 == 2)
        -: 1133:	{
        -: 1134:	  //+2 coins
        -: 1135:	  state->coins = state->coins + 2;
        -: 1136:	}
        -: 1137:      else
        -: 1138:	{
        -: 1139:	  //trash 2 cards in hand
        -: 1140:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1141:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1142:	}
        -: 1143:			
        -: 1144:
        -: 1145:      return 0;
        -: 1146:		
        -: 1147:
        -: 1148:    case cutpurse:
        -: 1149:
        -: 1150:      updateCoins(currentPlayer, state, 2);
        -: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	     {
        -: 1153:	       if (i != currentPlayer)
        -: 1154:	       {
        -: 1155:	        for (j = 0; j < state->handCount[i]; j++)
        -: 1156:		      {
        -: 1157:		       if (state->hand[i][j] == copper)
        -: 1158:		     {
        -: 1159:		      discardCard(j, i, state, 0);
        -: 1160:		      break;
        -: 1161:		    }
        -: 1162:		  if (j == state->handCount[i])
        -: 1163:		    {
        -: 1164:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1168:			}	
        -: 1169:		      break;
        -: 1170:		    }		
        -: 1171:		}
        -: 1172:					
        -: 1173:	    }
        -: 1174:				
        -: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
        -: 1178:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1179:
        -: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
        -: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
        -: 1188:      if ( state->supplyCount[choice1] == -1 )
        -: 1189:	{
        -: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
        -: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
        -: 1197:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
        -: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
        -: 1205:      discardCard(handPos, currentPlayer, state, 0);
        -: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
        -: 1210:      state->numBuys++;
        -: 1211:			
        -: 1212:      if (choice1)
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
        -: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1216:	  //trash card
        -: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
        -: 1221:      discardCard(handPos, currentPlayer, state, 0);
        -: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
        -: 1225:      for (i = 0; i < state->numPlayers; i++){
        -: 1226:	if (i != currentPlayer){
        -: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1228:	  state->discardCount[i]++;
        -: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1230:	}
        -: 1231:      }
        -: 1232:      return 0;
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:    printf("In treasure_map\n");
        -: 1236:      //search hand for another treasure_map
        -: 1237:      index = -1;
        -: 1238:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1239:	    {
        -: 1240:	      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1241:	      {
        -: 1242:	        index = i;
        -: 1243:	        break;
        -: 1244:	      }
        -: 1245:	    }
        -: 1246:      if (index > -1)
        -: 1247:	    {
        -: 1248:	      //trash both treasure cards
        -: 1249:	      discardCard(handPos, currentPlayer, state, 1);
        -: 1250:	      discardCard(index, currentPlayer, state, 1);
        -: 1251:
        -: 1252:	      //gain 4 Gold cards
        -: 1253:	      for (i = 0; i < 4; i++)
        -: 1254:	      {
        -: 1255:	        gainCard(gold, state, 1, currentPlayer);
        -: 1256:	      }
        -: 1257:				
        -: 1258:	      //return success
        -: 1259:	      return 1;
        -: 1260:	    }
        -: 1261:			
        -: 1262:      //no second treasure_map found in hand
        -: 1263:      return -1;
        -: 1264:    }
        -: 1265:	
        -: 1266:  return -1;
        -: 1267:}
        -: 1268:
        -: 1269:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1270:{
        -: 1271:  //if card is not trashed, added to Played pile and Discard pile
        -: 1272:  if (trashFlag < 1)
        -: 1273:    {
        -: 1274:      //add card to played pile
        -: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        -: 1276:      state->playedCardCount++;
        -: 1277:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][handPos];
        -: 1278:      state->discardCount[currentPlayer]++;
        -: 1279:    }
        -: 1280:	
        -: 1281:  //set played card to -1
        -: 1282:  state->hand[currentPlayer][handPos] = -1;
        -: 1283:	
        -: 1284:  //remove card from player's hand
        -: 1285:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
        -: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
        -: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:  else 	
        -: 1296:    {
        -: 1297:      //replace discarded card with last card in hand
        -: 1298:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1299:      //set last card to -1
        -: 1300:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1301:      //reduce number of cards in hand
        -: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:  return 0;
        -: 1305:}
        -: 1306:
        -: 1307:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1308:{
        -: 1309:  //Note: supplyPos is enum of choosen card
        -: 1310:	
        -: 1311:  //check if supply pile is empty (0) or card is not used in game (-1)
        -: 1312:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1313:    {
        -: 1314:      return -1;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //added card for [whoseTurn] current player:
        -: 1318:  // toFlag = 0 : add to discard
        -: 1319:  // toFlag = 1 : add to deck
        -: 1320:  // toFlag = 2 : add to hand
        -: 1321:
        -: 1322:  if (toFlag == 1)
        -: 1323:    {
        -: 1324:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        -: 1325:      state->deckCount[player]++;
        -: 1326:    }
        -: 1327:  else if (toFlag == 2)
        -: 1328:    {
        -: 1329:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        -: 1330:      state->handCount[player]++;
        -: 1331:    }
        -: 1332:  else
        -: 1333:    {
        -: 1334:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        -: 1335:      state->discardCount[player]++;
        -: 1336:    }
        -: 1337:	
        -: 1338:  //decrease number in supply pile
        -: 1339:  state->supplyCount[supplyPos]--;
        -: 1340:	 
        -: 1341:  return 0;
        -: 1342:}
        -: 1343:
        -: 1344:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1345:{
        -: 1346:  int i;
        -: 1347:	
        -: 1348:  //reset coin count
        -: 1349:  state->coins = 0;
        -: 1350:
        -: 1351:  //add coins for each Treasure card in player's hand
        -: 1352:  for (i = 0; i < state->handCount[player]; i++)
        -: 1353:    {
        -: 1354:      if (state->hand[player][i] == copper)
        -: 1355:	     {
        -: 1356:	        state->coins += 1;
        -: 1357:	     }
        -: 1358:      else if (state->hand[player][i] == silver)
        -: 1359:	     {
        -: 1360:	       state->coins += 2;
        -: 1361:	     }
        -: 1362:      else if (state->hand[player][i] == gold)
        -: 1363:	     {
        -: 1364:      	  state->coins += 3;
        -: 1365:	     }	
        -: 1366:    }	
        -: 1367:
        -: 1368:  //add bonus
        -: 1369:  state->coins += bonus;
        -: 1370:
        -: 1371:  return 0;
        -: 1372:}
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
