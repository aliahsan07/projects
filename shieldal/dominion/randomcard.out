        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int councilRoomEffect(int, struct gameState*, int);
        -:    9:int mineEffect(int, int, int, struct gameState*, int);
        -:   10:int remodelEffect(int, int, int, struct gameState*, int);
        -:   11:int smithyEffect(int, struct gameState*, int);
        -:   12:int villageEffect(int, struct gameState*, int);
        -:   13:
     6525:   14:int compare(const void* a, const void* b) {
     6525:   15:  if (*(int*)a > *(int*)b)
    #####:   16:    return 1;
     6525:   17:  if (*(int*)a < *(int*)b)
     1740:   18:    return -1;
     4785:   19:  return 0;
        -:   20:}
        -:   21:
      151:   22:struct gameState* newGame() {
      151:   23:  struct gameState* g = malloc(sizeof(struct gameState));
      151:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
      150:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
      150:   50:  SelectStream(1);
      150:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
      150:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
      150:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
     1650:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
    16500:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
    15000:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
      150:   79:  if (numPlayers == 2)
        -:   80:    {
       56:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
       94:   83:  else if (numPlayers == 3)
        -:   84:    {
       53:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
       41:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
      150:   93:  if (numPlayers == 2)
        -:   94:    {
       56:   95:      state->supplyCount[estate] = 8;
       56:   96:      state->supplyCount[duchy] = 8;
       56:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
       94:  101:      state->supplyCount[estate] = 12;
       94:  102:      state->supplyCount[duchy] = 12;
       94:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
      150:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      150:  108:  state->supplyCount[silver] = 40;
      150:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
     3150:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
    24750:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
    23250:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
     1650:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
      150:  121:		  if (numPlayers == 2){ 
       56:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
       94:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
     1350:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
     1500:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
    21750:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
      585:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
      435:  146:      state->deckCount[i] = 0;
     1740:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
     1305:  149:	  state->deck[i][j] = estate;
     1305:  150:	  state->deckCount[i]++;
        -:  151:	}
     3480:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
     3045:  154:	  state->deck[i][j] = copper;
     3045:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
      585:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
      435:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
      585:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
      435:  172:      state->handCount[i] = 0;
      435:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
     4200:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
     4050:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
      150:  188:  state->outpostPlayed = 0;
      150:  189:  state->phase = 0;
      150:  190:  state->numActions = 1;
      150:  191:  state->numBuys = 1;
      150:  192:  state->playedCardCount = 0;
      150:  193:  state->whoseTurn = 0;
      150:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      900:  198:  for (it = 0; it < 5; it++){
      750:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
      150:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
      150:  204:  return 0;
        -:  205:}
        -:  206:
      435:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
      435:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
      435:  215:  if (state->deckCount[player] < 1)
    #####:  216:    return -1;
      435:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
     5220:  220:  while (state->deckCount[player] > 0) {
     4350:  221:    card = floor(Random() * state->deckCount[player]);
     4350:  222:    newDeck[newDeckPos] = state->deck[player][card];
     4350:  223:    newDeckPos++;
    14237:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
     9887:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
     4350:  227:    state->deckCount[player]--;
        -:  228:  }
     4785:  229:  for (i = 0; i < newDeckPos; i++) {
     4350:  230:    state->deck[player][i] = newDeck[i];
     4350:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
      435:  234:  return 0;
        -:  235:}
        -:  236:
      150:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
      150:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
      150:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
      150:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
      150:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
      150:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
      150:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
      150:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
      150:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
      150:  275:  return 0;
        -:  276:}
        -:  277:
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
    #####:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
    #####:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
    #####:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
    #####:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
    #####:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
      150:  321:int handCard(int handPos, struct gameState *state) {
      150:  322:  int currentPlayer = whoseTurn(state);
      150:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
      300:  352:int whoseTurn(struct gameState *state) {
      300:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
     1635:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
     1635:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
    #####:  539:    for (i = 0; i < state->discardCount[player];i++){
    #####:  540:      state->deck[player][i] = state->discard[player][i];
    #####:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
    #####:  544:    state->deckCount[player] = state->discardCount[player];
    #####:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
    #####:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
    #####:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
    #####:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
    #####:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
    #####:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
    #####:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:    if (deckCounter == 0)
    #####:  566:      return -1;
        -:  567:
    #####:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:    state->deckCount[player]--;
    #####:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
     1635:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
     1635:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
     1635:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1635:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1635:  582:    state->deckCount[player]--;
     1635:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
     1635:  586:  return 0;
        -:  587:}
        -:  588:
    #####:  589:int getCost(int cardNumber)
        -:  590:{
    #####:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
    #####:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
      150:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
      150:  659:  int currentPlayer = whoseTurn(state);
      150:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
      150:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
      150:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
      150:  666:  int z = 0;// this is the counter for the temp hand
      150:  667:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
      150:  673:  switch( card ) 
        -:  674:    {
        -:  675:    case adventurer:
    #####:  676:      while(drawntreasure<2){
    #####:  677:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  678:	  shuffle(currentPlayer, state);
        -:  679:	}
    #####:  680:	drawCard(currentPlayer, state);
    #####:  681:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  682:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  683:	  drawntreasure++;
        -:  684:	else{
    #####:  685:	  temphand[z]=cardDrawn;
    #####:  686:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  687:	  z++;
        -:  688:	}
        -:  689:      }
    #####:  690:      while(z-1>=0){
    #####:  691:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  692:	z=z-1;
        -:  693:      }
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case council_room:
      150:  697:      return councilRoomEffect(currentPlayer, state, handPos);
        -:  698:    case feast:
        -:  699:      //gain card with cost up to 5
        -:  700:      //Backup hand
    #####:  701:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  702:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  703:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  704:      }
        -:  705:      //Backup hand
        -:  706:
        -:  707:      //Update Coins for Buy
    #####:  708:      updateCoins(currentPlayer, state, 5);
    #####:  709:      x = 1;//Condition to loop on
    #####:  710:      while( x == 1) {//Buy one card
    #####:  711:	if (supplyCount(choice1, state) <= 0){
    #####:  712:	  if (DEBUG)
        -:  713:	    printf("None of that card left, sorry!\n");
        -:  714:
    #####:  715:	  if (DEBUG){
        -:  716:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  717:	  }
        -:  718:	}
    #####:  719:	else if (state->coins < getCost(choice1)){
    #####:  720:	  printf("That card is too expensive!\n");
        -:  721:
    #####:  722:	  if (DEBUG){
        -:  723:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  724:	  }
        -:  725:	}
        -:  726:	else{
        -:  727:
    #####:  728:	  if (DEBUG){
        -:  729:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  730:	  }
        -:  731:
    #####:  732:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  733:	  x = 0;//No more buying cards
        -:  734:
    #####:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
        -:  739:	}
        -:  740:      }     
        -:  741:
        -:  742:      //Reset Hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  744:	state->hand[currentPlayer][i] = temphand[i];
    #####:  745:	temphand[i] = -1;
        -:  746:      }
        -:  747:      //Reset Hand
        -:  748:      			
    #####:  749:      return 0;
        -:  750:			
        -:  751:    case gardens:
    #####:  752:      return -1;
        -:  753:			
        -:  754:    case mine:
    #####:  755:      return mineEffect(currentPlayer, choice1, choice2, state, handPos);
        -:  756:    case remodel:
    #####:  757:      return remodelEffect(currentPlayer, choice1, choice2, state, handPos);
        -:  758:    case smithy:
    #####:  759:      return smithyEffect(currentPlayer, state, handPos);
        -:  760:    case village:
    #####:  761:     return villageEffect(currentPlayer, state, handPos);      
        -:  762:    case baron:
    #####:  763:      state->numBuys++;//Increase buys by 1!
    #####:  764:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  765:	int p = 0;//Iterator for hand!
    #####:  766:	int card_not_discarded = 1;//Flag for discard set!
    #####:  767:	while(card_not_discarded){
    #####:  768:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  769:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  770:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  771:	    state->discardCount[currentPlayer]++;
    #####:  772:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  773:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  774:	    }
    #####:  775:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  776:	    state->handCount[currentPlayer]--;
    #####:  777:	    card_not_discarded = 0;//Exit the loop
        -:  778:	  }
    #####:  779:	  else if (p > state->handCount[currentPlayer]){
    #####:  780:	    if(DEBUG) {
        -:  781:	      printf("No estate cards in your hand, invalid choice\n");
        -:  782:	      printf("Must gain an estate if there are any\n");
        -:  783:	    }
    #####:  784:	    if (supplyCount(estate, state) > 0){
    #####:  785:	      gainCard(estate, state, 0, currentPlayer);
    #####:  786:	      state->supplyCount[estate]--;//Decrement estates
    #####:  787:	      if (supplyCount(estate, state) == 0){
    #####:  788:		isGameOver(state);
        -:  789:	      }
        -:  790:	    }
    #####:  791:	    card_not_discarded = 0;//Exit the loop
        -:  792:	  }
        -:  793:			    
        -:  794:	  else{
    #####:  795:	    p++;//Next card
        -:  796:	  }
        -:  797:	}
        -:  798:      }
        -:  799:			    
        -:  800:      else{
    #####:  801:	if (supplyCount(estate, state) > 0){
    #####:  802:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  803:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  804:	  if (supplyCount(estate, state) == 0){
    #####:  805:	    isGameOver(state);
        -:  806:	  }
        -:  807:	}
        -:  808:      }
        -:  809:	    
        -:  810:      
    #####:  811:      return 0;
        -:  812:		
        -:  813:    case great_hall:
        -:  814:      //+1 Card
    #####:  815:      drawCard(currentPlayer, state);
        -:  816:			
        -:  817:      //+1 Actions
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
    #####:  822:      return 0;
        -:  823:		
        -:  824:    case minion:
        -:  825:      //+1 action
    #####:  826:      state->numActions++;
        -:  827:			
        -:  828:      //discard card from hand
    #####:  829:      discardCard(handPos, currentPlayer, state, 0);
        -:  830:			
    #####:  831:      if (choice1)		//+2 coins
        -:  832:	{
    #####:  833:	  state->coins = state->coins + 2;
        -:  834:	}
        -:  835:			
    #####:  836:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  837:	{
        -:  838:	  //discard hand
    #####:  839:	  while(numHandCards(state) > 0)
        -:  840:	    {
    #####:  841:	      discardCard(handPos, currentPlayer, state, 0);
        -:  842:	    }
        -:  843:				
        -:  844:	  //draw 4
    #####:  845:	  for (i = 0; i < 4; i++)
        -:  846:	    {
    #####:  847:	      drawCard(currentPlayer, state);
        -:  848:	    }
        -:  849:				
        -:  850:	  //other players discard hand and redraw if hand size > 4
    #####:  851:	  for (i = 0; i < state->numPlayers; i++)
        -:  852:	    {
    #####:  853:	      if (i != currentPlayer)
        -:  854:		{
    #####:  855:		  if ( state->handCount[i] > 4 )
        -:  856:		    {
        -:  857:		      //discard hand
    #####:  858:		      while( state->handCount[i] > 0 )
        -:  859:			{
    #####:  860:			  discardCard(handPos, i, state, 0);
        -:  861:			}
        -:  862:							
        -:  863:		      //draw 4
    #####:  864:		      for (j = 0; j < 4; j++)
        -:  865:			{
    #####:  866:			  drawCard(i, state);
        -:  867:			}
        -:  868:		    }
        -:  869:		}
        -:  870:	    }
        -:  871:				
        -:  872:	}
    #####:  873:      return 0;
        -:  874:		
        -:  875:    case steward:
    #####:  876:      if (choice1 == 1)
        -:  877:	{
        -:  878:	  //+2 cards
    #####:  879:	  drawCard(currentPlayer, state);
    #####:  880:	  drawCard(currentPlayer, state);
        -:  881:	}
    #####:  882:      else if (choice1 == 2)
        -:  883:	{
        -:  884:	  //+2 coins
    #####:  885:	  state->coins = state->coins + 2;
        -:  886:	}
        -:  887:      else
        -:  888:	{
        -:  889:	  //trash 2 cards in hand
    #####:  890:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  891:	  discardCard(choice3, currentPlayer, state, 1);
        -:  892:	}
        -:  893:			
        -:  894:      //discard card from hand
    #####:  895:      discardCard(handPos, currentPlayer, state, 0);
    #####:  896:      return 0;
        -:  897:		
        -:  898:    case tribute:
    #####:  899:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  900:	if (state->deckCount[nextPlayer] > 0){
    #####:  901:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  902:	  state->deckCount[nextPlayer]--;
        -:  903:	}
    #####:  904:	else if (state->discardCount[nextPlayer] > 0){
    #####:  905:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  906:	  state->discardCount[nextPlayer]--;
        -:  907:	}
        -:  908:	else{
        -:  909:	  //No Card to Reveal
    #####:  910:	  if (DEBUG){
        -:  911:	    printf("No cards to reveal\n");
        -:  912:	  }
        -:  913:	}
        -:  914:      }
        -:  915:	    
        -:  916:      else{
    #####:  917:	if (state->deckCount[nextPlayer] == 0){
    #####:  918:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  919:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  920:	    state->deckCount[nextPlayer]++;
    #####:  921:	    state->discard[nextPlayer][i] = -1;
    #####:  922:	    state->discardCount[nextPlayer]--;
        -:  923:	  }
        -:  924:			    
    #####:  925:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  926:	} 
    #####:  927:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  928:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  929:	state->deckCount[nextPlayer]--;
    #####:  930:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  931:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  932:	state->deckCount[nextPlayer]--;
        -:  933:      }    
        -:  934:		       
    #####:  935:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  936:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  937:	state->playedCardCount++;
    #####:  938:	tributeRevealedCards[1] = -1;
        -:  939:      }
        -:  940:
    #####:  941:      for (i = 0; i <= 2; i ++){
    #####:  942:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  943:	  state->coins += 2;
        -:  944:	}
        -:  945:		    
    #####:  946:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  947:	  drawCard(currentPlayer, state);
    #####:  948:	  drawCard(currentPlayer, state);
        -:  949:	}
        -:  950:	else{//Action Card
    #####:  951:	  state->numActions = state->numActions + 2;
        -:  952:	}
        -:  953:      }
        -:  954:	    
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case ambassador:
    #####:  958:      j = 0;		//used to check if player has enough cards to discard
        -:  959:
    #####:  960:      if (choice2 > 2 || choice2 < 0)
        -:  961:	{
    #####:  962:	  return -1;				
        -:  963:	}
        -:  964:
    #####:  965:      if (choice1 == handPos)
        -:  966:	{
    #####:  967:	  return -1;
        -:  968:	}
        -:  969:
    #####:  970:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  971:	{
    #####:  972:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  973:	    {
    #####:  974:	      j++;
        -:  975:	    }
        -:  976:	}
    #####:  977:      if (j < choice2)
        -:  978:	{
    #####:  979:	  return -1;				
        -:  980:	}
        -:  981:
    #####:  982:      if (DEBUG) 
        -:  983:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  984:
        -:  985:      //increase supply count for choosen card by amount being discarded
    #####:  986:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  987:			
        -:  988:      //each other player gains a copy of revealed card
    #####:  989:      for (i = 0; i < state->numPlayers; i++)
        -:  990:	{
    #####:  991:	  if (i != currentPlayer)
        -:  992:	    {
    #####:  993:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  994:	    }
        -:  995:	}
        -:  996:
        -:  997:      //discard played card from hand
    #####:  998:      discardCard(handPos, currentPlayer, state, 0);			
        -:  999:
        -: 1000:      //trash copies of cards returned to supply
    #####: 1001:      for (j = 0; j < choice2; j++)
        -: 1002:	{
    #####: 1003:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1004:	    {
    #####: 1005:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1006:		{
    #####: 1007:		  discardCard(i, currentPlayer, state, 1);
    #####: 1008:		  break;
        -: 1009:		}
        -: 1010:	    }
        -: 1011:	}			
        -: 1012:
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case cutpurse:
        -: 1016:
    #####: 1017:      updateCoins(currentPlayer, state, 2);
    #####: 1018:      for (i = 0; i < state->numPlayers; i++)
        -: 1019:	{
    #####: 1020:	  if (i != currentPlayer)
        -: 1021:	    {
    #####: 1022:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1023:		{
    #####: 1024:		  if (state->hand[i][j] == copper)
        -: 1025:		    {
    #####: 1026:		      discardCard(j, i, state, 0);
    #####: 1027:		      break;
        -: 1028:		    }
    #####: 1029:		  if (j == state->handCount[i])
        -: 1030:		    {
    #####: 1031:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1032:			{
    #####: 1033:			  if (DEBUG)
        -: 1034:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1035:			}	
    #####: 1036:		      break;
        -: 1037:		    }		
        -: 1038:		}
        -: 1039:					
        -: 1040:	    }
        -: 1041:				
        -: 1042:	}				
        -: 1043:
        -: 1044:      //discard played card from hand
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1046:
    #####: 1047:      return 0;
        -: 1048:
        -: 1049:		
        -: 1050:    case embargo: 
        -: 1051:      //+2 Coins
    #####: 1052:      state->coins = state->coins + 2;
        -: 1053:			
        -: 1054:      //see if selected pile is in play
    #####: 1055:      if ( state->supplyCount[choice1] == -1 )
        -: 1056:	{
    #####: 1057:	  return -1;
        -: 1058:	}
        -: 1059:			
        -: 1060:      //add embargo token to selected supply pile
    #####: 1061:      state->embargoTokens[choice1]++;
        -: 1062:			
        -: 1063:      //trash card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case outpost:
        -: 1068:      //set outpost flag
    #####: 1069:      state->outpostPlayed++;
        -: 1070:			
        -: 1071:      //discard card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case salvager:
        -: 1076:      //+1 buy
    #####: 1077:      state->numBuys++;
        -: 1078:			
    #####: 1079:      if (choice1)
        -: 1080:	{
        -: 1081:	  //gain coins equal to trashed card
    #####: 1082:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1083:	  //trash card
    #####: 1084:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1085:	}
        -: 1086:			
        -: 1087:      //discard card
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case sea_hag:
    #####: 1092:      for (i = 0; i < state->numPlayers; i++){
    #####: 1093:	if (i != currentPlayer){
    #####: 1094:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1095:	  state->discardCount[i]++;
    #####: 1096:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1097:	}
        -: 1098:      }
    #####: 1099:      return 0;
        -: 1100:		
        -: 1101:    case treasure_map:
        -: 1102:      //search hand for another treasure_map
    #####: 1103:      index = -1;
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1107:	    {
    #####: 1108:	      index = i;
    #####: 1109:	      break;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (index > -1)
        -: 1113:	{
        -: 1114:	  //trash both treasure cards
    #####: 1115:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1116:	  discardCard(index, currentPlayer, state, 1);
        -: 1117:
        -: 1118:	  //gain 4 Gold cards
    #####: 1119:	  for (i = 0; i < 4; i++)
        -: 1120:	    {
    #####: 1121:	      gainCard(gold, state, 1, currentPlayer);
        -: 1122:	    }
        -: 1123:				
        -: 1124:	  //return success
    #####: 1125:	  return 1;
        -: 1126:	}
        -: 1127:			
        -: 1128:      //no second treasure_map found in hand
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
    #####: 1132:  return -1;
        -: 1133:}
        -: 1134:
      150: 1135:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1136:{
        -: 1137:	
        -: 1138:  //if card is not trashed, added to Played pile 
      150: 1139:  if (trashFlag < 1)
        -: 1140:    {
        -: 1141:      //add card to played pile
      150: 1142:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      150: 1143:      state->playedCardCount++;
        -: 1144:    }
        -: 1145:	
        -: 1146:  //set played card to -1
      150: 1147:  state->hand[currentPlayer][handPos] = -1;
        -: 1148:	
        -: 1149:  //remove card from player's hand
      150: 1150:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
    #####: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
      150: 1155:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1156:    {
        -: 1157:      //reduce number of cards in hand
    #####: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
        -: 1160:  else 	
        -: 1161:    {
        -: 1162:      //replace discarded card with last card in hand
      150: 1163:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1164:      //set last card to -1
      150: 1165:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1166:      //reduce number of cards in hand
      150: 1167:      state->handCount[currentPlayer]--;
        -: 1168:    }
        -: 1169:	
      150: 1170:  return 0;
        -: 1171:}
        -: 1172:
    #####: 1173:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1174:{
        -: 1175:  //Note: supplyPos is enum of choosen card
        -: 1176:	
        -: 1177:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1178:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1179:    {
    #####: 1180:      return -1;
        -: 1181:    }
        -: 1182:	
        -: 1183:  //added card for [whoseTurn] current player:
        -: 1184:  // toFlag = 0 : add to discard
        -: 1185:  // toFlag = 1 : add to deck
        -: 1186:  // toFlag = 2 : add to hand
        -: 1187:
    #####: 1188:  if (toFlag == 1)
        -: 1189:    {
    #####: 1190:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1191:      state->deckCount[player]++;
        -: 1192:    }
    #####: 1193:  else if (toFlag == 2)
        -: 1194:    {
    #####: 1195:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1196:      state->handCount[player]++;
        -: 1197:    }
        -: 1198:  else
        -: 1199:    {
    #####: 1200:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1201:      state->discardCount[player]++;
        -: 1202:    }
        -: 1203:	
        -: 1204:  //decrease number in supply pile
    #####: 1205:  state->supplyCount[supplyPos]--;
        -: 1206:	 
    #####: 1207:  return 0;
        -: 1208:}
        -: 1209:
      300: 1210:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1211:{
        -: 1212:  int i;
        -: 1213:	
        -: 1214:  //reset coin count
      300: 1215:  state->coins = 0;
        -: 1216:
        -: 1217:  //add coins for each Treasure card in player's hand
    40973: 1218:  for (i = 0; i < state->handCount[player]; i++)
        -: 1219:    {
    40673: 1220:      if (state->hand[player][i] == copper)
        -: 1221:	{
      947: 1222:	  state->coins += 1;
        -: 1223:	}
    39726: 1224:      else if (state->hand[player][i] == silver)
        -: 1225:	{
    #####: 1226:	  state->coins += 2;
        -: 1227:	}
    39726: 1228:      else if (state->hand[player][i] == gold)
        -: 1229:	{
    #####: 1230:	  state->coins += 3;
        -: 1231:	}	
        -: 1232:    }	
        -: 1233:
        -: 1234:  //add bonus
      300: 1235:  state->coins += bonus;
        -: 1236:
      300: 1237:  return 0;
        -: 1238:}
        -: 1239:
        -: 1240:
      150: 1241:int councilRoomEffect(int currentPlayer, struct gameState* state, int handPos)
        -: 1242:{
        -: 1243:  int i;
        -: 1244:  //+4 Cards
      750: 1245:  for (i = 0; i < 4; i++)
        -: 1246:  {
      600: 1247:    drawCard(currentPlayer, state);
        -: 1248:  }
        -: 1249:		
        -: 1250:  //+1 Buy
      150: 1251:  state->numBuys++;
        -: 1252:
        -: 1253:  //Each other player draws a card
      585: 1254:  for (i = 0; i < state->numPlayers; i++)
        -: 1255:  {
      435: 1256:    if ( i != currentPlayer )
        -: 1257:    {
      285: 1258:      drawCard(i, state);
        -: 1259:    }
        -: 1260:  }
        -: 1261:			
        -: 1262:  //put played card in played card pile
      150: 1263:  discardCard(handPos, currentPlayer, state, 0);
        -: 1264:  
      150: 1265:  return 0;
        -: 1266:}
        -: 1267:
    #####: 1268:int mineEffect(int currentPlayer, int choice1, int choice2, struct gameState* state, int handPos)
        -: 1269:{
        -: 1270:  int i, j;
    #####: 1271:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1272:
    #####: 1273:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1274:	{
    #####: 1275:	  return -1;
        -: 1276:	}
        -: 1277:		
    #####: 1278:      if (choice2 > treasure_map || choice2 < curse)
        -: 1279:	{
    #####: 1280:	  return -1;
        -: 1281:	}
        -: 1282:
    #####: 1283:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2) )
        -: 1284:	{
    #####: 1285:	  return -1;
        -: 1286:	}
        -: 1287:
    #####: 1288:      gainCard(choice2, state, 2, currentPlayer);
        -: 1289:
        -: 1290:      //discard card from hand
    #####: 1291:      discardCard(handPos, currentPlayer, state, 0);
        -: 1292:
        -: 1293:      //discard trashed card
    #####: 1294:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1295:	{
    #####: 1296:	  if (state->hand[currentPlayer][i] == j)
        -: 1297:	    {
    #####: 1298:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1299:	      break;
        -: 1300:	    }
        -: 1301:	}
        -: 1302:			
    #####: 1303:      return 0;
        -: 1304:
        -: 1305:  return 0;
        -: 1306:}
        -: 1307:
    #####: 1308:int remodelEffect(int currentPlayer, int choice1, int choice2, struct gameState* state, int handPos)
        -: 1309:{
        -: 1310:      int i, j;
    #####: 1311:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1312:
    #####: 1313:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1314:	{
    #####: 1315:	  return -1;
        -: 1316:	}
        -: 1317:
    #####: 1318:      gainCard(choice2, state, 0, currentPlayer);
        -: 1319:
        -: 1320:      //discard card from hand
    #####: 1321:      discardCard(handPos, currentPlayer, state, 0);
        -: 1322:
        -: 1323:      //discard trashed card
    #####: 1324:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1325:	{
    #####: 1326:	  if (state->hand[currentPlayer][i] == j)
        -: 1327:	    {
    #####: 1328:	      discardCard(i, currentPlayer, state, 0);			
    #####: 1329:	      break;
        -: 1330:	    }
        -: 1331:	}
        -: 1332:
        -: 1333:
    #####: 1334:      return 0;
        -: 1335:}
        -: 1336:
    #####: 1337:int smithyEffect(int currentPlayer, struct gameState* state, int handPos)
        -: 1338:{
        -: 1339:      int i;
        -: 1340:      //+3 Cards
    #####: 1341:      for (i = 0; i < 3; i++)
        -: 1342:	{
    #####: 1343:	  drawCard(currentPlayer, state);
        -: 1344:	}
        -: 1345:			
        -: 1346:      //discard card from hand
    #####: 1347:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1348:      return 0;
        -: 1349:}
        -: 1350:
    #####: 1351:int villageEffect(int currentPlayer, struct gameState* state, int handPos)
        -: 1352:{
        -: 1353:      //+1 Card
    #####: 1354:      drawCard(currentPlayer, state);
        -: 1355:			
        -: 1356:      //+2 Actions
    #####: 1357:      state->numActions = state->numActions + 2;
        -: 1358:			
        -: 1359:      //discard played card from hand
    #####: 1360:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1361:      return 0;
        -: 1362:}
        -: 1363:
        -: 1364://end of dominion.c
        -: 1365:
