

Beginning Council Room test 0
Players: 2
Selected Player: 0

TEST FAILED
Hand Count increase failed.
Expected handCount value: 250, found: 247

TEST FAILED
Other player card count increase failed.
Expected value: 133, found:135


Beginning Council Room test 1
Players: 3
Selected Player: 2

TEST FAILED
Hand Count increase failed.
Expected handCount value: 252, found: 251


Beginning Council Room test 2
Players: 3
Selected Player: 3

TEST FAILED
Hand Count increase failed.
Expected handCount value: 18, found: 15


Beginning Council Room test 3
Players: 2
Selected Player: 3

TEST FAILED
Hand Count increase failed.
Expected handCount value: 128, found: 125


Beginning Council Room test 4
Players: 2
Selected Player: 2

TEST FAILED
Hand Count increase failed.
Expected handCount value: 57, found: 54

***END TESTS***
Number of failures: 5
Percentage failed: 100.000000
File 'dominion.c'
Lines executed:23.83% of 579
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:
        5:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       55:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        5:  115:		  if (numPlayers == 2){ 
        3:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       45:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       17:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       17:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       17:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
       24:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       24:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       24:  208:  if (state->deckCount[player] < 1) //If 0 players, or negative (error)
       12:  209:    return -1;
        -:  210:                //base                          n-items                      The function used to compare two elements
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      377:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      257:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
    #####:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    #####:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    #####:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    #####:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    #####:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
        -:  313:
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317: 
    #####:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
    #####:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++) //deck
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
        -:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++) //hand
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
        -:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++) //Discard 
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
        -:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
        -:  349:
        -:  350://just a get function
        5:  351:int whoseTurn(struct gameState *state) {
        5:  352:  return state->whoseTurn;
        -:  353:}
        -:  354:
    #####:  355:int endTurn(struct gameState *state) {
        -:  356:  int k;
        -:  357:  int i;
    #####:  358:  int currentPlayer = whoseTurn(state);
        -:  359:  
        -:  360:  //Discard hand
    #####:  361:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  362:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  363:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  364:  }
    #####:  365:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  366:
        -:  367:
        -:  368:
        -:  369://How whoseTurn Operates
        -:  370:
        -:  371:  //Code for determining the player
    #####:  372:  if (currentPlayer < (state->numPlayers - 1)){  //Since we have player 0, 1, ... , n numPlayers - 1 gives the number of players [0-n].
    #####:  373:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  374:  }
        -:  375:  else{
    #####:  376:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 0
        -:  377:  }
        -:  378:
    #####:  379:  state->outpostPlayed = 0;
    #####:  380:  state->phase = 0;
    #####:  381:  state->numActions = 1;
    #####:  382:  state->coins = 0;
    #####:  383:  state->numBuys = 1;
    #####:  384:  state->playedCardCount = 0;
    #####:  385:  state->handCount[state->whoseTurn] = 0;
        -:  386:
        -:  387:  //int k; move to top
        -:  388:  //Next player draws hand
    #####:  389:  for (k = 0; k < 5; k++){
    #####:  390:    drawCard(state->whoseTurn, state);//Draw a card
        -:  391:  }
        -:  392:
        -:  393:  //Update money
    #####:  394:  updateCoins(state->whoseTurn, state , 0);
        -:  395:
    #####:  396:  return 0;
        -:  397:}
        -:  398:
    #####:  399:int isGameOver(struct gameState *state) {
        -:  400:  int i;
        -:  401:  int j;
        -:  402:	
        -:  403:  //if stack of Province cards is empty, the game ends
    #####:  404:  if (state->supplyCount[province] == 0)
        -:  405:    {
    #####:  406:      return 1;
        -:  407:    }
        -:  408:
        -:  409:  //if three supply pile are at 0, the game ends
    #####:  410:  j = 0;
    #####:  411:  for (i = 0; i < 25; i++)
        -:  412:    {
    #####:  413:      if (state->supplyCount[i] == 0)
        -:  414:	{
    #####:  415:	  j++;
        -:  416:	}
        -:  417:    }
    #####:  418:  if ( j >= 3)
        -:  419:    {
    #####:  420:      return 1;
        -:  421:    }
        -:  422:
    #####:  423:  return 0;
        -:  424:}
        -:  425:
    #####:  426:int scoreFor (int player, struct gameState *state) {
        -:  427:
        -:  428:  int i;
    #####:  429:  int score = 0;
        -:  430:  //score from hand
    #####:  431:  for (i = 0; i < state->handCount[player]; i++)
        -:  432:    {
    #####:  433:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  434:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  436:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  437:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  438:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  439:    }
        -:  440:
        -:  441:  //score from discard
    #####:  442:  for (i = 0; i < state->discardCount[player]; i++)
        -:  443:    {
    #####:  444:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  445:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  447:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  448:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  449:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  450:    }
        -:  451:
        -:  452:  //score from deck
    #####:  453:  for (i = 0; i < state->discardCount[player]; i++)
        -:  454:    {
    #####:  455:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  456:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  458:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  459:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  460:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  461:    }
        -:  462:
    #####:  463:  return score;
        -:  464:}
        -:  465:
    #####:  466:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  467:  int i;	
        -:  468:  int j;
        -:  469:  int highScore;
        -:  470:  int currentPlayer;
        -:  471:
        -:  472:  //get score for each player
    #####:  473:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  474:    {
        -:  475:      //set unused player scores to -9999
    #####:  476:      if (i >= state->numPlayers)
        -:  477:	{
    #####:  478:	  players[i] = -9999;
        -:  479:	}
        -:  480:      else
        -:  481:	{
    #####:  482:	  players[i] = scoreFor (i, state);
        -:  483:	}
        -:  484:    }
        -:  485:
        -:  486:  //find highest score
    #####:  487:  j = 0;
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
    #####:  490:      if (players[i] > players[j])
        -:  491:	{
    #####:  492:	  j = i;
        -:  493:	}
        -:  494:    }
    #####:  495:  highScore = players[j];
        -:  496:
        -:  497:  //add 1 to players who had less turns
    #####:  498:  currentPlayer = whoseTurn(state);
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] == highScore && i > currentPlayer )
        -:  502:	{
    #####:  503:	  players[i]++;
        -:  504:	}
        -:  505:    }
        -:  506:
        -:  507:  //find new highest score
    #####:  508:  j = 0;
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] > players[j] )
        -:  512:	{
    #####:  513:	  j = i;
        -:  514:	}
        -:  515:    }
    #####:  516:  highScore = players[j];
        -:  517:
        -:  518:  //set winners in array to 1 and rest to 0
    #####:  519:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  520:    {
    #####:  521:      if ( players[i] == highScore )
        -:  522:	{
    #####:  523:	  players[i] = 1;
        -:  524:	}
        -:  525:      else
        -:  526:	{
    #####:  527:	  players[i] = 0;
        -:  528:	}
        -:  529:    }
        -:  530:
    #####:  531:  return 0;
        -:  532:}
        -:  533:
       55:  534:int drawCard(int player, struct gameState *state)
        -:  535:{	int count;
        -:  536:  int deckCounter;
       55:  537:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  538:    
        -:  539:    //Step 1 Shuffle the discard pile back into a deck
        -:  540:    int i;
        -:  541:    //Move discard to deck
       12:  542:    for (i = 0; i < state->discardCount[player];i++){
    #####:  543:      state->deck[player][i] = state->discard[player][i];
    #####:  544:      state->discard[player][i] = -1;
        -:  545:    }
        -:  546:
       12:  547:    state->deckCount[player] = state->discardCount[player];
       12:  548:    state->discardCount[player] = 0;//Reset discard
        -:  549:
        -:  550:    //Shufffle the deck
       12:  551:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  552:   
       12:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  555:    }
        -:  556:    
       12:  557:    state->discardCount[player] = 0;
        -:  558:
        -:  559:    //Step 2 Draw Card
       12:  560:    count = state->handCount[player];//Get current player's hand count
        -:  561:    
       12:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Current hand count: %d\n", count);
        -:  564:    }
        -:  565:    
       12:  566:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  567:
       12:  568:    if (deckCounter == 0)
       12:  569:      return -1;
        -:  570:
    #####:  571:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  572:    state->deckCount[player]--;
    #####:  573:    state->handCount[player]++;//Increment hand count
        -:  574:  }
        -:  575:
        -:  576:  else{
       43:  577:    int count = state->handCount[player];//Get current hand count for player
        -:  578:    int deckCounter;
       43:  579:    if (DEBUG){//Debug statements
        -:  580:      printf("Current hand count: %d\n", count);
        -:  581:    }
        -:  582:
       43:  583:    deckCounter = state->deckCount[player];//Create holder for the deck count
       43:  584:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       43:  585:    state->deckCount[player]--;
       43:  586:    state->handCount[player]++;//Increment hand count
        -:  587:  }
        -:  588:
       43:  589:  return 0;
        -:  590:}
        -:  591:
    #####:  592:int getCost(int cardNumber)
        -:  593:{
    #####:  594:  switch( cardNumber ) 
        -:  595:    {
        -:  596:    case curse:
    #####:  597:      return 0;
        -:  598:    case estate:
    #####:  599:      return 2;
        -:  600:    case duchy:
    #####:  601:      return 5;
        -:  602:    case province:
    #####:  603:      return 8;
        -:  604:    case copper:
    #####:  605:      return 0;
        -:  606:    case silver:
    #####:  607:      return 3;
        -:  608:    case gold:
    #####:  609:      return 6;
        -:  610:    case adventurer:
    #####:  611:      return 6;
        -:  612:    case council_room:
    #####:  613:      return 5;
        -:  614:    case feast:
    #####:  615:      return 4;
        -:  616:    case gardens:
    #####:  617:      return 4;
        -:  618:    case mine:
    #####:  619:      return 5;
        -:  620:    case remodel:
    #####:  621:      return 4;
        -:  622:    case smithy:
    #####:  623:      return 4;
        -:  624:    case village:
    #####:  625:      return 3;
        -:  626:    case baron:
    #####:  627:      return 4;
        -:  628:    case great_hall:
    #####:  629:      return 3;
        -:  630:    case minion:
    #####:  631:      return 5;
        -:  632:    case steward:
    #####:  633:      return 3;
        -:  634:    case tribute:
    #####:  635:      return 5;
        -:  636:    case ambassador:
    #####:  637:      return 3;
        -:  638:    case cutpurse:
    #####:  639:      return 4;
        -:  640:    case embargo: 
    #####:  641:      return 2;
        -:  642:    case outpost:
    #####:  643:      return 5;
        -:  644:    case salvager:
    #####:  645:      return 4;
        -:  646:    case sea_hag:
    #####:  647:      return 4;
        -:  648:    case treasure_map:
    #####:  649:      return 4;
        -:  650:    }
        -:  651:	
    #####:  652:  return -1;
        -:  653:}
        -:  654:
        -:  655:
        -:  656:
    #####:  657:int feastCard(struct gameState *state, int temphand[MAX_HAND], int currentPlayer, int choice1) {
        -:  658:
    #####:  659:    int i,x = 0;
        -:  660:      //gain card with cost up to 5
        -:  661:      //Backup hand
    #####:  662:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  663:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  664:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  665:      }
        -:  666:      //Backup hand
        -:  667:
        -:  668:      //Update Coins for Buy
    #####:  669:      updateCoins(currentPlayer, state, 5);
    #####:  670:      x = 1;//Condition to loop on
    #####:  671:      while( x == 1) {//Buy one card
    #####:  672:	if (supplyCount(choice1, state) <= 0){
    #####:  673:	  if (DEBUG)
        -:  674:	    printf("None of that card left, sorry!\n");
        -:  675:
    #####:  676:	  if (DEBUG){
        -:  677:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  678:	  }
        -:  679:	}
    #####:  680:	else if (state->coins < getCost(choice1)){
    #####:  681:	  printf("That card is too expensive!\n");
        -:  682:
    #####:  683:	  if (DEBUG){
        -:  684:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  685:	  }
        -:  686:	}
        -:  687:	else{
        -:  688:
    #####:  689:	  if (DEBUG){
        -:  690:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  691:	  }
        -:  692:
    #####:  693:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  694:	  x = 0;//No more buying cards
        -:  695:
    #####:  696:	  if (DEBUG){
        -:  697:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  698:	  }
        -:  699:
        -:  700:	}
        -:  701:      }     
        -:  702:
        -:  703:      //Reset Hand
    #####:  704:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  705:	state->hand[currentPlayer][i] = temphand[i];
    #####:  706:	temphand[i] = -1;
        -:  707:      }
        -:  708:      //Reset Hand
        -:  709:      			
    #####:  710:return 0;
        -:  711:}
        -:  712:
        -:  713:
    #####:  714:int remodelCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  715:    int j, i = 0;
        -:  716:
    #####:  717:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  718:      // if (new_card > card_to_be_trashed +2): illegal move 
    #####:  719:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) //changed
        -:  720:    {
    #####:  721:      return -1;
        -:  722:    }
        -:  723:
    #####:  724:  gainCard(choice2, state, 0, currentPlayer);
        -:  725:
        -:  726:  //discard card from hand
    #####:  727:  discardCard(handPos, currentPlayer, state, 0);
        -:  728:
        -:  729:      //discard trashed card
    #####:  730:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  731:	{
    #####:  732:	  if (state->hand[currentPlayer][i] == j)
        -:  733:	    {
    #####:  734:	      discardCard(i, currentPlayer, state, 0);			
    #####:  735:	      break;
        -:  736:	    }
        -:  737:	}
    #####:  738:return 0;
        -:  739:}
        -:  740:
    #####:  741:int ambassadorCard(int choice1, int choice2, int handPos, struct gameState *state, int currentPlayer) {
        -:  742:
        -:  743:      int i;
    #####:  744:      int j = 0;		//used to check if player has enough cards to discard
        -:  745:
    #####:  746:      if (choice2 > 2 || choice2 < 0)
        -:  747:	{
    #####:  748:	  return -1;				
        -:  749:	}
        -:  750:
    #####:  751:      if (choice1 == handPos) 
        -:  752:	{
    #####:  753:	  return -1;
        -:  754:	}
        -:  755:
    #####:  756:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  757:	{
    #####:  758:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  759:	    {
    #####:  760:	      j++;
        -:  761:	    }
        -:  762:	}
    #####:  763:      if (j < choice2)
        -:  764:	{
    #####:  765:	  return -1;				
        -:  766:	}
        -:  767:
    #####:  768:      if (DEBUG) 
        -:  769:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  770:
        -:  771:      //increase supply count for choosen card by amount being discarded
    #####:  772:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  773:			
        -:  774:      //each other player gains a copy of revealed card
    #####:  775:      for (i = 0; i < state->numPlayers; i++)
        -:  776:	{
    #####:  777:	  if (i != currentPlayer)
        -:  778:	    {
    #####:  779:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  780:	    }
        -:  781:	}
        -:  782:
        -:  783:      //discard played card from hand.
    #####:  784:      discardCard(handPos, currentPlayer, state, 0);			
        -:  785:
        -:  786:      //trash copies of cards returned to supply
    #####:  787:      for (j = 0; j < choice2; j++)
        -:  788:	{
    #####:  789:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  790:	    {
    #####:  791:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  792:		{
    #####:  793:		  discardCard(i, currentPlayer, state, 1);
    #####:  794:		  break;
        -:  795:		}
        -:  796:	    }
        -:  797:	}			
        -:  798:
    #####:  799:return 0;
        -:  800:}
        -:  801:	
        -:  802:
    #####:  803:int adventurerCard(int currentPlayer, struct gameState *state, int choice1, int choice2, int drawntreasure, int z, int cardDrawn, int temphand[MAX_HAND], int handPos) {
        -:  804: 
    #####:  805:    while(drawntreasure<2){
    #####:  806:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  807:          shuffle(currentPlayer, state);
        -:  808:    }
        -:  809:
    #####:  810:    drawCard(currentPlayer, state);
    #####:  811:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  812:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
    #####:  813:      drawntreasure++; 
        -:  814:    }
        -:  815:
        -:  816:    else{
    #####:  817:      temphand[z]=cardDrawn;
    #####:  818:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  819:      z++;
        -:  820:    }
        -:  821:  }
        -:  822:
    #####:  823:   while(z-1>=0){
    #####:  824:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  825:        z=z-1;
        -:  826:                  }
    #####:  827: return 0;
        -:  828:}
        -:  829:
        -:  830:
    #####:  831:int smithyCard(int currentPlayer, struct gameState *state, int handPos) {
        -:  832:    int i;
    #####:  833:    int cards_counter=0;
        -:  834:      //+3 Cards
    #####:  835:      for (i = 0; i < 35; i++) //my bug
        -:  836:	{
    #####:  837:      drawCard(currentPlayer, state);
    #####:  838:      ++cards_counter; //added for testing purposes
        -:  839:	}
        -:  840:			
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
    #####:  843:      return cards_counter; //added for testing purposes
        -:  844:}
        -:  845:
        -:  846:
        5:  847:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  848:{
        -:  849:  int i;
        -:  850:  int j;
        -:  851:  int k;
        -:  852:  int x;
        -:  853:  int index;
        5:  854:  int currentPlayer = whoseTurn(state);
        5:  855:  int nextPlayer = currentPlayer + 1;
        -:  856:
        5:  857:  int tributeRevealedCards[2] = {-1, -1};
        -:  858:  int temphand[MAX_HAND];// moved above the if statement
        5:  859:  int drawntreasure=0;
        -:  860:  int cardDrawn;
        5:  861:  int z = 0;// this is the counter for the temp hand
        5:  862:  if (nextPlayer > (state->numPlayers - 1)){
        4:  863:    nextPlayer = 0;
        -:  864:  }
        -:  865:  
        -:  866:	
        -:  867:  //uses switch to select card and perform actions
        5:  868:  switch( card ) 
        -:  869:    {
        -:  870:    case adventurer:
    #####:  871:       return adventurerCard(currentPlayer, state, choice1, choice2, drawntreasure, z, cardDrawn, temphand, handPos);
        -:  872:			
        -:  873:    case council_room:
        -:  874:      //+4 Cards
       25:  875:      for (i = 0; i < 4; i++)
        -:  876:	{
       20:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:			
        -:  880:      //+1 Buy
        5:  881:      state->numBuys++;
        -:  882:			
        -:  883:      //Each other player draws a card
       17:  884:      for (i = 0; i < state->numPlayers; i++)
        -:  885:	{
       12:  886:	  if ( i != currentPlayer )
        -:  887:	    {
       10:  888:	      drawCard(i, state);
        -:  889:	    }
        -:  890:	}
        -:  891:			
        -:  892:      //put played card in played card pile
        5:  893:      discardCard(handPos, currentPlayer, state, 0);
        -:  894:			
        5:  895:      return 0;
        -:  896:			
        -:  897:    case feast:
    #####:  898:      return feastCard(state,temphand,currentPlayer,choice1);
        -:  899:		
        -:  900:    case gardens:
    #####:  901:      return -1;
        -:  902:			
        -:  903:    case mine:
    #####:  904:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  905:
    #####:  906:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  907:	{
    #####:  908:	  return -1;
        -:  909:	}
        -:  910:		
    #####:  911:      if (choice2 > treasure_map || choice2 < curse)
        -:  912:	{
    #####:  913:	  return -1;
        -:  914:	}
        -:  915:
    #####:  916:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  917:	{
    #####:  918:	  return -1;
        -:  919:	}
        -:  920:
    #####:  921:      gainCard(choice2, state, 2, currentPlayer);
        -:  922:
        -:  923:      //discard card from hand
    #####:  924:      discardCard(handPos, currentPlayer, state, 0);
        -:  925:
        -:  926:      //discard trashed card
    #####:  927:      for (i = 0; i > state->handCount[currentPlayer]; i++)
        -:  928:	{
    #####:  929:	  if (state->hand[currentPlayer][i] == j)
        -:  930:	    {
    #####:  931:	      discardCard(i, currentPlayer, state, 0);			
    #####:  932:	      break;
        -:  933:	    }
        -:  934:	}			
    #####:  935:    return 0;
        -:  936:
        -:  937:
        -:  938:    case remodel:
    #####:  939:      return remodelCard(currentPlayer, state, choice1, choice2, handPos);
        -:  940:		
        -:  941:    case smithy:
    #####:  942:      return smithyCard(currentPlayer, state, handPos); 
        -:  943:
        -:  944:    case village:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
        -:  947:			
        -:  948:      //+2 Actions
    #####:  949:      state->numActions = state->numActions + 2;
        -:  950:			
        -:  951:      //discard played card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case baron:
    #####:  956:      state->numBuys++;//Increase buys by 1!
    #####:  957:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  958:	int p = 0;//Iterator for hand!
    #####:  959:	int card_not_discarded = 1;//Flag for discard set!
    #####:  960:	while(card_not_discarded){
    #####:  961:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  962:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  963:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  964:	    state->discardCount[currentPlayer]++;
    #####:  965:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  966:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  967:	    }
    #####:  968:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  969:	    state->handCount[currentPlayer]--;
    #####:  970:	    card_not_discarded = 0;//Exit the loop
        -:  971:	  }
    #####:  972:	  else if (p > state->handCount[currentPlayer]){
    #####:  973:	    if(DEBUG) {
        -:  974:	      printf("No estate cards in your hand, invalid choice\n");
        -:  975:	      printf("Must gain an estate if there are any\n");
        -:  976:	    }
    #####:  977:	    if (supplyCount(estate, state) > 0){
    #####:  978:	      gainCard(estate, state, 0, currentPlayer);
    #####:  979:	      state->supplyCount[estate]--;//Decrement estates
    #####:  980:	      if (supplyCount(estate, state) == 0){
    #####:  981:		isGameOver(state);
        -:  982:	      }
        -:  983:	    }
    #####:  984:	    card_not_discarded = 0;//Exit the loop
        -:  985:	  }
        -:  986:			    
        -:  987:	  else{
    #####:  988:	    p++;//Next card
        -:  989:	  }
        -:  990:	}
        -:  991:      }
        -:  992:			    
        -:  993:      else{
    #####:  994:	if (supplyCount(estate, state) > 0){
    #####:  995:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  996:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  997:	  if (supplyCount(estate, state) == 0){
    #####:  998:	    isGameOver(state);
        -:  999:	  }
        -: 1000:	}
        -: 1001:      }
        -: 1002:	    
        -: 1003:      
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case great_hall:
        -: 1007:      //+1 Card
    #####: 1008:      drawCard(currentPlayer, state);
        -: 1009:			
        -: 1010:      //+1 Actions
    #####: 1011:      state->numActions++;
        -: 1012:			
        -: 1013:      //discard card from hand
    #####: 1014:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:      return 0;
        -: 1016:		
        -: 1017:    case minion:
        -: 1018:      //+1 action
    #####: 1019:      state->numActions++;
        -: 1020:			
        -: 1021:      //discard card from hand
    #####: 1022:      discardCard(handPos, currentPlayer, state, 0);
        -: 1023:			
    #####: 1024:      if (choice1)		//+2 coins
        -: 1025:	{
    #####: 1026:	  state->coins = state->coins + 2;
        -: 1027:	}
        -: 1028:			
    #####: 1029:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1030:	{
        -: 1031:	  //discard hand
    #####: 1032:	  while(numHandCards(state) > 0)
        -: 1033:	    {
    #####: 1034:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1035:	    }
        -: 1036:				
        -: 1037:	  //draw 4
    #####: 1038:	  for (i = 0; i < 4; i++)
        -: 1039:	    {
    #####: 1040:	      drawCard(currentPlayer, state);
        -: 1041:	    }
        -: 1042:				
        -: 1043:	  //other players discard hand and redraw if hand size > 4
    #####: 1044:	  for (i = 0; i < state->numPlayers; i++)
        -: 1045:	    {
    #####: 1046:	      if (i != currentPlayer)
        -: 1047:		{
    #####: 1048:		  if ( state->handCount[i] > 4 )
        -: 1049:		    {
        -: 1050:		      //discard hand
    #####: 1051:		      while( state->handCount[i] > 0 )
        -: 1052:			{
    #####: 1053:			  discardCard(handPos, i, state, 0);
        -: 1054:			}
        -: 1055:							
        -: 1056:		      //draw 4
    #####: 1057:		      for (j = 0; j < 4; j++)
        -: 1058:			{
    #####: 1059:			  drawCard(i, state);
        -: 1060:			}
        -: 1061:		    }
        -: 1062:		}
        -: 1063:	    }
        -: 1064:				
        -: 1065:	}
    #####: 1066:      return 0;
        -: 1067:		
        -: 1068:    case steward:
    #####: 1069:      if (choice1 == 1)
        -: 1070:	{
        -: 1071:	  //+2 cards
    #####: 1072:	  drawCard(currentPlayer, state);
    #####: 1073:	  drawCard(currentPlayer, state);
        -: 1074:	}
    #####: 1075:      else if (choice1 == 2)
        -: 1076:	{
        -: 1077:	  //+2 coins
    #####: 1078:	  state->coins = state->coins + 2;
        -: 1079:	}
        -: 1080:      else
        -: 1081:	{
        -: 1082:	  //trash 2 cards in hand
    #####: 1083:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1084:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1085:	}
        -: 1086:			
        -: 1087:      //discard card from hand
    #####: 1088:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case tribute:
    #####: 1092:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1093:	if (state->deckCount[nextPlayer] > 0){
    #####: 1094:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1095:	  state->deckCount[nextPlayer]--;
        -: 1096:	}
    #####: 1097:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1098:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1099:	  state->discardCount[nextPlayer]--;
        -: 1100:	}
        -: 1101:	else{
        -: 1102:	  //No Card to Reveal
    #####: 1103:	  if (DEBUG){
        -: 1104:	    printf("No cards to reveal\n");
        -: 1105:	  }
        -: 1106:	}
        -: 1107:      }
        -: 1108:	    
        -: 1109:      else{
    #####: 1110:	if (state->deckCount[nextPlayer] == 0){
    #####: 1111:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1112:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1113:	    state->deckCount[nextPlayer]++;
    #####: 1114:	    state->discard[nextPlayer][i] = -1;
    #####: 1115:	    state->discardCount[nextPlayer]--;
        -: 1116:	  }
        -: 1117:			    
    #####: 1118:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1119:	} 
    #####: 1120:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1121:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1122:	state->deckCount[nextPlayer]--;
    #####: 1123:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1125:	state->deckCount[nextPlayer]--;
        -: 1126:      }    
        -: 1127:		       
    #####: 1128:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1129:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1130:	state->playedCardCount++;
    #####: 1131:	tributeRevealedCards[1] = -1;
        -: 1132:      }
        -: 1133:
    #####: 1134:      for (i = 0; i <= 2; i ++){
    #####: 1135:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1136:	  state->coins += 2;
        -: 1137:	}
        -: 1138:		    
    #####: 1139:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1140:	  drawCard(currentPlayer, state);
    #####: 1141:	  drawCard(currentPlayer, state);
        -: 1142:	}
        -: 1143:	else{//Action Card
    #####: 1144:	  state->numActions = state->numActions + 2;
        -: 1145:	}
        -: 1146:      }
        -: 1147:	    
    #####: 1148:      return 0;
        -: 1149:		
        -: 1150:    case ambassador:
    #####: 1151:      return ambassadorCard(choice1, choice2, handPos, state, currentPlayer);
        -: 1152:	
        -: 1153:    case cutpurse: 
    #####: 1154:      updateCoins(currentPlayer, state, 2);
    #####: 1155:      for (i = 0; i < state->numPlayers; i++)
        -: 1156:	{
    #####: 1157:	  if (i != currentPlayer)
        -: 1158:	    {
    #####: 1159:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1160:		{
    #####: 1161:		  if (state->hand[i][j] == copper)
        -: 1162:		    {
    #####: 1163:		      discardCard(j, i, state, 0);
    #####: 1164:		      break;
        -: 1165:		    }
    #####: 1166:		  if (j == state->handCount[i])
        -: 1167:		    {
    #####: 1168:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1169:			{
    #####: 1170:			  if (DEBUG)
        -: 1171:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1172:			}	
    #####: 1173:		      break;
        -: 1174:		    }		
        -: 1175:		}
        -: 1176:					
        -: 1177:	    }
        -: 1178:				
        -: 1179:	}				
        -: 1180:
        -: 1181:      //discard played card from hand
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);			
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case embargo: 
        -: 1186:      //+2 Coins
    #####: 1187:      state->coins = state->coins + 2;
        -: 1188:
        -: 1189:      //see if selected pile is in play
    #####: 1190:      if ( state->supplyCount[choice1] == -1 )
        -: 1191:	{
    #####: 1192:	  return -1;
        -: 1193:	}
        -: 1194:			
        -: 1195:      //add embargo token to selected supply pile
    #####: 1196:      state->embargoTokens[choice1]++;
        -: 1197:			
        -: 1198:      //trash card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case outpost:
        -: 1203:      //set outpost flag
    #####: 1204:      state->outpostPlayed++;
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case salvager:
        -: 1211:      //+1 buy
    #####: 1212:      state->numBuys++;
        -: 1213:			
    #####: 1214:      if (choice1)
        -: 1215:	{
        -: 1216:	  //gain coins equal to trashed card
    #####: 1217:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1218:	  //trash card
    #####: 1219:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1220:	}
        -: 1221:			
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case sea_hag:
    #####: 1227:      for (i = 0; i < state->numPlayers; i++){
    #####: 1228:	if (i != currentPlayer){
    #####: 1229:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1230:	  state->discardCount[i]++;
    #####: 1231:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1232:	}
        -: 1233:      }
    #####: 1234:      return 0;
        -: 1235:		
        -: 1236:    case treasure_map:
        -: 1237:      //search hand for another treasure_map
    #####: 1238:      index = -1;
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1240:	{
    #####: 1241:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1242:	    {
    #####: 1243:	      index = i;
    #####: 1244:	      break;
        -: 1245:	    }
        -: 1246:	}
    #####: 1247:      if (index > -1)
        -: 1248:	{
        -: 1249:	  //trash both treasure cards
    #####: 1250:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1251:	  discardCard(index, currentPlayer, state, 1);
        -: 1252:
        -: 1253:	  //gain 4 Gold cards
    #####: 1254:	  for (i = 0; i < 4; i++)
        -: 1255:	    {
    #####: 1256:	      gainCard(gold, state, 1, currentPlayer);
        -: 1257:	    }
        -: 1258:				
        -: 1259:	  //return success
    #####: 1260:	  return 1;
        -: 1261:	}
        -: 1262:			
        -: 1263:      //no second treasure_map found in hand
    #####: 1264:      return -1;
        -: 1265:    }
        -: 1266:	
    #####: 1267:  return -1;
        -: 1268:}
        -: 1269:
        5: 1270:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1271:{
        -: 1272:	
        -: 1273:  //if card is not trashed, added to Played pile 
        5: 1274:  if (trashFlag < 1)
        -: 1275:    {
        -: 1276:      //add card to played pile
        5: 1277:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1278:      state->playedCardCount++;
        -: 1279:    }
        -: 1280:	
        -: 1281:  //set played card to -1
        5: 1282:  state->hand[currentPlayer][handPos] = -1;
        -: 1283:	
        -: 1284:  //remove card from player's hand
        5: 1285:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        5: 1290:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:  else 	
        -: 1296:    {
        -: 1297:      //replace discarded card with last card in hand
        5: 1298:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1299:      //set last card to -1
        5: 1300:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1301:      //reduce number of cards in hand
        5: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:	
        5: 1305:  return 0;
        -: 1306:}
        -: 1307:
    #####: 1308:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1309:{
        -: 1310:  //Note: supplyPos is enum of choosen card
        -: 1311:	
        -: 1312:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1313:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1314:    {
    #####: 1315:      return -1;
        -: 1316:    }
        -: 1317:	
        -: 1318:  //added card for [whoseTurn] current player:
        -: 1319:  // toFlag = 0 : add to discard
        -: 1320:  // toFlag = 1 : add to deck
        -: 1321:  // toFlag = 2 : add to hand
        -: 1322:
    #####: 1323:  if (toFlag == 1)
        -: 1324:    {
    #####: 1325:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1326:      state->deckCount[player]++;
        -: 1327:    }
    #####: 1328:  else if (toFlag == 2)
        -: 1329:    {
    #####: 1330:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1331:      state->handCount[player]++;
        -: 1332:    }
        -: 1333:  else
        -: 1334:    {
    #####: 1335:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1336:      state->discardCount[player]++;
        -: 1337:    }
        -: 1338:	
        -: 1339:  //decrease number in supply pile
    #####: 1340:  state->supplyCount[supplyPos]--;
        -: 1341:	 
    #####: 1342:  return 0;
        -: 1343:}
        -: 1344:
        5: 1345:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1346:{
        -: 1347:  int i;
        -: 1348:	
        -: 1349:  //reset coin count
        5: 1350:  state->coins = 0;
        -: 1351:
        -: 1352:  //add coins for each Treasure card in player's hand
       30: 1353:  for (i = 0; i < state->handCount[player]; i++)
        -: 1354:    {
       25: 1355:      if (state->hand[player][i] == copper)
        -: 1356:	{
       16: 1357:	  state->coins += 1;
        -: 1358:	}
        9: 1359:      else if (state->hand[player][i] == silver)
        -: 1360:	{
    #####: 1361:	  state->coins += 2;
        -: 1362:	}
        9: 1363:      else if (state->hand[player][i] == gold)
        -: 1364:	{
    #####: 1365:	  state->coins += 3;
        -: 1366:	}	
        -: 1367:    }	
        -: 1368:
        -: 1369:  //add bonus
        5: 1370:  state->coins += bonus;
        -: 1371:
        5: 1372:  return 0;
        -: 1373:}
        -: 1374:
        -: 1375:
        -: 1376://end of dominion.c
        -: 1377:
