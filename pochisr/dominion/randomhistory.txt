Writing the random testers was fairly straightforward. randomtestadventurer and
randomtestcard each run a single test case determined by a random seed passed
in the argument list. randomtestadventurer.sh and randomtestcard.sh call their
respective random testers with every seed from 1 to 1000000 and log the output,
including any nonzero exit statuses (indicating a test failure or segfault).
This ended up being slow but robust, and I found one bug for each card.

I think both my random testers were fairly successful. The Adventurer tester
got 100% statement coverage of play_adventurer, and the Baron tester got close
to 100% coverage of the Baron implementation in cardEffect. There's a lot of
duplicate code between the two random testers, and if this were a real-world
project I would try to factor out that common code.

Bugs found:
    - The Adventurer function play_adventurer in card.c segfaults under certain
        conditions. This is a bug I intentionally introduced in Assignment 1.
        There are no curly braces around the else clause in the second
        conditional, although the indentation suggests there should be. This
        causes the second and third indented lines to run every iteration,
        making z grow beyond the maximum index of temphand. If the deck and
        discard don't contain at least two treasure cards, this results in a
        buffer overrun and the program usually segfaults.
    - The Baron handler in cardEffect changes state->coins directly. It's
        obviously supposed to change *bonus instead, since playCards then
        uses the value of *bonus to recalculate state->coins.
