Running Random Adventurer Test
Test #1 
ERROR: Initialization 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #2 
Initial treasure in hand: 4 
Expected treasure in hand after card activation: 4 
ERROR: Did not add two treasure to hand 
Test #3 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #4 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #5 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #6 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #7 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #8 
ERROR: Initialization 
Initial treasure in hand: 7 
Expected treasure in hand after card activation: 9 
Two treasures were properly added to hand. 
Test #9 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #10 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #11 
Initial treasure in hand: 6 
Expected treasure in hand after card activation: 8 
Two treasures were properly added to hand. 
Test #12 
Initial treasure in hand: 7 
Expected treasure in hand after card activation: 9 
Two treasures were properly added to hand. 
Test #13 
Initial treasure in hand: 7 
Expected treasure in hand after card activation: 9 
Two treasures were properly added to hand. 
Test #14 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #15 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #16 
Initial treasure in hand: 12 
Expected treasure in hand after card activation: 14 
Two treasures were properly added to hand. 
Test #17 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 2 
Two treasures were properly added to hand. 
Test #18 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #19 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #20 
ERROR: Initialization 
Initial treasure in hand: 15 
Expected treasure in hand after card activation: 15 
ERROR: Did not add two treasure to hand 
Test #21 
Initial treasure in hand: 9 
Expected treasure in hand after card activation: 9 
ERROR: Did not add two treasure to hand 
Test #22 
ERROR: Initialization 
Initial treasure in hand: 7 
Expected treasure in hand after card activation: 7 
ERROR: Did not add two treasure to hand 
Test #23 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #24 
Initial treasure in hand: 8 
Expected treasure in hand after card activation: 8 
ERROR: Did not add two treasure to hand 
Test #25 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #26 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #27 
Initial treasure in hand: 7 
Expected treasure in hand after card activation: 7 
ERROR: Did not add two treasure to hand 
Test #28 
ERROR: Initialization 
Initial treasure in hand: 15 
Expected treasure in hand after card activation: 15 
ERROR: Did not add two treasure to hand 
Test #29 
Initial treasure in hand: 6 
Expected treasure in hand after card activation: 8 
Two treasures were properly added to hand. 
Test #30 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #31 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #32 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #33 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #34 
Initial treasure in hand: 17 
Expected treasure in hand after card activation: 19 
Two treasures were properly added to hand. 
Test #35 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #36 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #37 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #38 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #39 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #40 
ERROR: Initialization 
Initial treasure in hand: 19 
Expected treasure in hand after card activation: 19 
ERROR: Did not add two treasure to hand 
Test #41 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #42 
Initial treasure in hand: 11 
Expected treasure in hand after card activation: 13 
Two treasures were properly added to hand. 
Test #43 
Initial treasure in hand: 5 
Expected treasure in hand after card activation: 7 
Two treasures were properly added to hand. 
Test #44 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #45 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #46 
ERROR: Initialization 
Initial treasure in hand: 16 
Expected treasure in hand after card activation: 18 
Two treasures were properly added to hand. 
Test #47 
ERROR: Initialization 
Initial treasure in hand: 12 
Expected treasure in hand after card activation: 14 
Two treasures were properly added to hand. 
Test #48 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #49 
Initial treasure in hand: 11 
Expected treasure in hand after card activation: 13 
Two treasures were properly added to hand. 
Test #50 
ERROR: Initialization 
Initial treasure in hand: 25 
Expected treasure in hand after card activation: 25 
ERROR: Did not add two treasure to hand 
Test #51 
Initial treasure in hand: 12 
Expected treasure in hand after card activation: 12 
ERROR: Did not add two treasure to hand 
Test #52 
Initial treasure in hand: 19 
Expected treasure in hand after card activation: 19 
ERROR: Did not add two treasure to hand 
Test #53 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #54 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #55 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #56 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #57 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #58 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #59 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #60 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #61 
ERROR: Initialization 
Initial treasure in hand: 15 
Expected treasure in hand after card activation: 15 
ERROR: Did not add two treasure to hand 
Test #62 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #63 
Initial treasure in hand: 15 
Expected treasure in hand after card activation: 15 
ERROR: Did not add two treasure to hand 
Test #64 
ERROR: Initialization 
Initial treasure in hand: 13 
Expected treasure in hand after card activation: 13 
ERROR: Did not add two treasure to hand 
Test #65 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #66 
ERROR: Initialization 
Initial treasure in hand: 20 
Expected treasure in hand after card activation: 22 
Two treasures were properly added to hand. 
Test #67 
ERROR: Initialization 
Initial treasure in hand: 16 
Expected treasure in hand after card activation: 18 
Two treasures were properly added to hand. 
Test #68 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #69 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #70 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #71 
Initial treasure in hand: 30 
Expected treasure in hand after card activation: 32 
Two treasures were properly added to hand. 
Test #72 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #73 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #74 
ERROR: Initialization 
Initial treasure in hand: 21 
Expected treasure in hand after card activation: 21 
ERROR: Did not add two treasure to hand 
Test #75 
ERROR: Initialization 
Initial treasure in hand: 17 
Expected treasure in hand after card activation: 17 
ERROR: Did not add two treasure to hand 
Test #76 
Initial treasure in hand: 24 
Expected treasure in hand after card activation: 26 
Two treasures were properly added to hand. 
Test #77 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #78 
ERROR: Initialization 
Initial treasure in hand: 14 
Expected treasure in hand after card activation: 16 
Two treasures were properly added to hand. 
Test #79 
ERROR: Initialization 
Initial treasure in hand: 16 
Expected treasure in hand after card activation: 18 
Two treasures were properly added to hand. 
Test #80 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #81 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #82 
Initial treasure in hand: 21 
Expected treasure in hand after card activation: 23 
Two treasures were properly added to hand. 
Test #83 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #84 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #85 
Initial treasure in hand: 14 
Expected treasure in hand after card activation: 16 
Two treasures were properly added to hand. 
Test #86 
Initial treasure in hand: 40 
Expected treasure in hand after card activation: 42 
Two treasures were properly added to hand. 
Test #87 
Initial treasure in hand: 46 
Expected treasure in hand after card activation: 46 
ERROR: Did not add two treasure to hand 
Test #88 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #89 
ERROR: Initialization 
Initial treasure in hand: 14 
Expected treasure in hand after card activation: 16 
Two treasures were properly added to hand. 
Test #90 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #91 
ERROR: Initialization 
Initial treasure in hand: 31 
Expected treasure in hand after card activation: 31 
ERROR: Did not add two treasure to hand 
Test #92 
ERROR: Initialization 
Initial treasure in hand: 29 
Expected treasure in hand after card activation: 29 
ERROR: Did not add two treasure to hand 
Test #93 
ERROR: Initialization 
Initial treasure in hand: 19 
Expected treasure in hand after card activation: 19 
ERROR: Did not add two treasure to hand 
Test #94 
ERROR: Initialization 
Initial treasure in hand: 44 
Expected treasure in hand after card activation: 44 
ERROR: Did not add two treasure to hand 
Test #95 
Initial treasure in hand: 9 
Expected treasure in hand after card activation: 11 
Two treasures were properly added to hand. 
Test #96 
ERROR: Initialization 
Initial treasure in hand: 17 
Expected treasure in hand after card activation: 17 
ERROR: Did not add two treasure to hand 
Test #97 
ERROR: Initialization 
Initial treasure in hand: 25 
Expected treasure in hand after card activation: 25 
ERROR: Did not add two treasure to hand 
Test #98 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Test #99 
Initial treasure in hand: 46 
Expected treasure in hand after card activation: 48 
Two treasures were properly added to hand. 
Test #100 
Initial treasure in hand: 0 
Expected treasure in hand after card activation: 0 
ERROR: Did not add two treasure to hand 
Tests Complete
File 'dominion.c'
Lines executed:24.52% of 575
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    44073:    8:int compare(const void* a, const void* b) {
    44073:    9:  if (*(int*)a > *(int*)b)
    11054:   10:    return 1;
    33019:   11:  if (*(int*)a < *(int*)b)
     2850:   12:    return -1;
    30169:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      200:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      200:   44:  SelectStream(1);
      200:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      200:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
       48:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      152:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1672:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    16720:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    15200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      152:   73:  if (numPlayers == 2)
        -:   74:    {
       50:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      102:   77:  else if (numPlayers == 3)
        -:   78:    {
       44:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       58:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      152:   87:  if (numPlayers == 2)
        -:   88:    {
       50:   89:      state->supplyCount[estate] = 8;
       50:   90:      state->supplyCount[duchy] = 8;
       50:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      102:   95:      state->supplyCount[estate] = 12;
      102:   96:      state->supplyCount[duchy] = 12;
      102:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      152:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      152:  102:  state->supplyCount[silver] = 40;
      152:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3192:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    25080:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    23560:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1672:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      152:  115:		  if (numPlayers == 2){ 
       50:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      102:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1368:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1520:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    22040:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      616:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      464:  140:      state->deckCount[i] = 0;
     1856:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     1392:  143:	  state->deck[i][j] = estate;
     1392:  144:	  state->deckCount[i]++;
        -:  145:	}
     3712:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     3248:  148:	  state->deck[i][j] = copper;
     3248:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      616:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      464:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      616:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      464:  166:      state->handCount[i] = 0;
      464:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4256:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     4104:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      152:  182:  state->outpostPlayed = 0;
      152:  183:  state->phase = 0;
      152:  184:  state->numActions = 1;
      152:  185:  state->numBuys = 1;
      152:  186:  state->playedCardCount = 0;
      152:  187:  state->whoseTurn = 0;
      152:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      912:  192:  for (it = 0; it < 5; it++){
      760:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      152:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      152:  198:  return 0;
        -:  199:}
        -:  200:
     5910:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     5910:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     5910:  209:  if (state->deckCount[player] < 1)
     5422:  210:    return -1;
      488:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    12329:  214:  while (state->deckCount[player] > 0) {
    11353:  215:    card = floor(Random() * state->deckCount[player]);
    11353:  216:    newDeck[newDeckPos] = state->deck[player][card];
    11353:  217:    newDeckPos++;
   578268:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   566915:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    11353:  221:    state->deckCount[player]--;
        -:  222:  }
    11841:  223:  for (i = 0; i < newDeckPos; i++) {
    11353:  224:    state->deck[player][i] = newDeck[i];
    11353:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      488:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
    #####:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
    #####:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
    #####:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
    #####:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      100:  346:int whoseTurn(struct gameState *state) {
      100:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    18436:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    18436:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     9436:  533:    for (i = 0; i < state->discardCount[player];i++){
     6713:  534:      state->deck[player][i] = state->discard[player][i];
     6713:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     2723:  538:    state->deckCount[player] = state->discardCount[player];
     2723:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     2723:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
     2723:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     2723:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     2723:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
     2723:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     2723:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     2723:  559:    if (deckCounter == 0)
     2699:  560:      return -1;
        -:  561:
       24:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       24:  563:    state->deckCount[player]--;
       24:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    15713:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    15713:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    15713:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    15713:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    15713:  576:    state->deckCount[player]--;
    15713:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    15737:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://Refactored 
    #####:  647:int eff_Remodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -:  648:	int i, j;
        -:  649:	
    #####:  650:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  651:
    #####:  652:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  653:	{
    #####:  654:	  return -1;
        -:  655:	}
        -:  656:
    #####:  657:      gainCard(choice2, state, 0, currentPlayer);
        -:  658:
        -:  659:      //discard card from hand
    #####:  660:      discardCard(handPos, currentPlayer, state, 0);
        -:  661:
        -:  662:      //discard trashed card
    #####:  663:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  664:	{
    #####:  665:	  if (state->hand[currentPlayer][i] == j)
        -:  666:	    {
    #####:  667:	      discardCard(i, currentPlayer, state, 0);			
    #####:  668:	      break;
        -:  669:	    }
        -:  670:	}
        -:  671:
        -:  672:
    #####:  673:      return 0;
        -:  674:}
        -:  675:
        -:  676://Refactored
    #####:  677:int eff_Mine(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2) {
        -:  678:	int i, j;
        -:  679:	
    #####:  680:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  681:
    #####:  682:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  683:	{
    #####:  684:	  return -1;
        -:  685:	}
        -:  686:		
    #####:  687:      if (choice2 > treasure_map || choice2 < curse)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:
    #####:  692:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      gainCard(choice2, state, 2, currentPlayer);
        -:  698:
        -:  699:      //discard card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
        -:  701:
        -:  702:      //discard trashed card
    #####:  703:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  704:	{
    #####:  705:	  if (state->hand[currentPlayer][i] == j)
        -:  706:	    {
    #####:  707:	      discardCard(i, currentPlayer, state, 0);			
    #####:  708:	      break;
        -:  709:	    }
        -:  710:	}
        -:  711:			
    #####:  712:      return 0;
        -:  713:}
        -:  714:
        -:  715://Refactored
    #####:  716:int eff_Council_Room(struct gameState *state, int currentPlayer, int handPos) {
        -:  717:	int i;
        -:  718:	//+4 Cards
    #####:  719:      for (i = 0; i < 4; i++)
        -:  720:	{
    #####:  721:	  drawCard(currentPlayer, state);
        -:  722:	}
        -:  723:			
        -:  724:      //+1 Buy
    #####:  725:      state->numBuys++;
        -:  726:			
        -:  727:      //Each other player draws a card
    #####:  728:      for (i = 0; i < state->numPlayers; i++)
        -:  729:	{
    #####:  730:	  if ( i != currentPlayer )
        -:  731:	    {
    #####:  732:	      drawCard(i, state);
        -:  733:	    }
        -:  734:	}
        -:  735:			
        -:  736:      //put played card in played card pile
    #####:  737:      discardCard(handPos, currentPlayer, state, 0);
        -:  738:			
    #####:  739:      return 0;
        -:  740:}
        -:  741:
        -:  742://Refactored
    #####:  743:int eff_Smithy(struct gameState *state, int currentPlayer, int handPos) {
        -:  744:	int i;
        -:  745:	//+3 Cards
    #####:  746:	for (i = 0; i < 3; i++) {
    #####:  747:		drawCard(currentPlayer, state);
        -:  748:	}
        -:  749:
        -:  750:	//discard card from hand
    #####:  751:	discardCard(handPos, currentPlayer, state, 0);
    #####:  752:	return 0;
        -:  753:}
        -:  754:
        -:  755://Refactored
    #####:  756:int eff_Village(struct gameState *state, int currentPlayer, int handPos) {
        -:  757:	//+1 Card
    #####:  758:	drawCard(currentPlayer, state);
        -:  759:	
        -:  760:	//+2 Actions
    #####:  761:	state->numActions = state->numActions + 2;
        -:  762:	
        -:  763:	//discard played card from hand
    #####:  764:	discardCard(handPos, currentPlayer, state, 0);
        -:  765:	
    #####:  766:	return 0;
        -:  767:}
        -:  768:
        -:  769:
      100:  770:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  771:{
        -:  772:  int i;
        -:  773:  int j;
        -:  774:  int k;
        -:  775:  int x;
        -:  776:  int index;
      100:  777:  int currentPlayer = whoseTurn(state);
      100:  778:  int nextPlayer = currentPlayer + 1;
        -:  779:
      100:  780:  int tributeRevealedCards[2] = {-1, -1};
        -:  781:  int temphand[MAX_HAND];// moved above the if statement
      100:  782:  int drawntreasure=0;
        -:  783:  int cardDrawn;
      100:  784:  int z = 0;// this is the counter for the temp hand
      100:  785:  if (nextPlayer > (state->numPlayers - 1)){
        1:  786:    nextPlayer = 0;
        -:  787:  }
        -:  788:  
        -:  789:	
        -:  790:  //uses switch to select card and perform actions
      100:  791:  switch( card ) 
        -:  792:    {
        -:  793:    case adventurer:
    17876:  794:      while(drawntreasure<2){
    17676:  795:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     2723:  796:	  shuffle(currentPlayer, state);
        -:  797:	}
    17676:  798:	drawCard(currentPlayer, state);
    17676:  799:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    17876:  800:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      200:  801:	  drawntreasure++;
        -:  802:	else{
    17476:  803:	  temphand[z]=cardDrawn;
    17476:  804:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    17476:  805:	  z++;
        -:  806:	}
        -:  807:      }
    14380:  808:      while(z-1>=0){
    14180:  809:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    14180:  810:	z=z-1;
        -:  811:      }
      100:  812:      return 0;
        -:  813:			
        -:  814:    case council_room:
        -:  815:      /*//+4 Cards
        -:  816:      for (i = 0; i < 4; i++)
        -:  817:	{
        -:  818:	  drawCard(currentPlayer, state);
        -:  819:	}
        -:  820:			
        -:  821:      //+1 Buy
        -:  822:      state->numBuys++;
        -:  823:			
        -:  824:      //Each other player draws a card
        -:  825:      for (i = 0; i < state->numPlayers; i++)
        -:  826:	{
        -:  827:	  if ( i != currentPlayer )
        -:  828:	    {
        -:  829:	      drawCard(i, state);
        -:  830:	    }
        -:  831:	}
        -:  832:			
        -:  833:      //put played card in played card pile
        -:  834:      discardCard(handPos, currentPlayer, state, 0);
        -:  835:			
        -:  836:      return 0;*/
    #####:  837:	  return eff_Council_Room(state, currentPlayer, handPos);
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
    #####:  852:	if (supplyCount(choice1, state) <= 0){
    #####:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
    #####:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
    #####:  861:	  printf("That card is too expensive!\n");
        -:  862:
    #####:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
    #####:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
    #####:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
        -:  896:		/*j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
        -:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  899:	{
        -:  900:	  return -1;
        -:  901:	}
        -:  902:		
        -:  903:      if (choice2 > treasure_map || choice2 < curse)
        -:  904:	{
        -:  905:	  return -1;
        -:  906:	}
        -:  907:
        -:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  909:	{
        -:  910:	  return -1;
        -:  911:	}
        -:  912:
        -:  913:      gainCard(choice2, state, 2, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
        -:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
        -:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
        -:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
        -:  923:	      discardCard(i, currentPlayer, state, 0);			
        -:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
        -:  928:      return 0; */
    #####:  929:	  return eff_Mine(state, currentPlayer, handPos, choice1, choice2);
        -:  930:			
        -:  931:    case remodel:
        -:  932:      /*j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  933:
        -:  934:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  935:	{
        -:  936:	  return -1;
        -:  937:	}
        -:  938:
        -:  939:      gainCard(choice2, state, 0, currentPlayer);
        -:  940:
        -:  941:      //discard card from hand
        -:  942:      discardCard(handPos, currentPlayer, state, 0);
        -:  943:
        -:  944:      //discard trashed card
        -:  945:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  946:	{
        -:  947:	  if (state->hand[currentPlayer][i] == j)
        -:  948:	    {
        -:  949:	      discardCard(i, currentPlayer, state, 0);			
        -:  950:	      break;
        -:  951:	    }
        -:  952:	}
        -:  953:
        -:  954:
        -:  955:      return 0;*/
    #####:  956:	  return eff_Remodel(state, currentPlayer, choice1, choice2, handPos);
        -:  957:		
        -:  958:    case smithy:
        -:  959:      //+3 Cards
        -:  960:    /*  for (i = 0; i < 3; i++)
        -:  961:	{
        -:  962:	  drawCard(currentPlayer, state);
        -:  963:	}
        -:  964:			
        -:  965:      //discard card from hand
        -:  966:      discardCard(handPos, currentPlayer, state, 0);
        -:  967:      return 0;
        -:  968:	*/
    #####:  969:		return eff_Smithy(state, currentPlayer, handPos);
        -:  970:		
        -:  971:    case village:
        -:  972:      /*//+1 Card
        -:  973:      drawCard(currentPlayer, state);
        -:  974:			
        -:  975:      //+2 Actions
        -:  976:      state->numActions = state->numActions + 2;
        -:  977:			
        -:  978:      //discard played card from hand
        -:  979:      discardCard(handPos, currentPlayer, state, 0);
        -:  980:      return 0;
        -:  981:		*/
    #####:  982:		return eff_Village(state, currentPlayer, handPos);
        -:  983:		
        -:  984:    case baron:
    #####:  985:      state->numBuys++;//Increase buys by 1!
    #####:  986:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  987:	int p = 0;//Iterator for hand!
    #####:  988:	int card_not_discarded = 1;//Flag for discard set!
    #####:  989:	while(card_not_discarded){
    #####:  990:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  991:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  992:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  993:	    state->discardCount[currentPlayer]++;
    #####:  994:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  995:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  996:	    }
    #####:  997:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  998:	    state->handCount[currentPlayer]--;
    #####:  999:	    card_not_discarded = 0;//Exit the loop
        -: 1000:	  }
    #####: 1001:	  else if (p > state->handCount[currentPlayer]){
    #####: 1002:	    if(DEBUG) {
        -: 1003:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1004:	      printf("Must gain an estate if there are any\n");
        -: 1005:	    }
    #####: 1006:	    if (supplyCount(estate, state) > 0){
    #####: 1007:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1008:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1009:	      if (supplyCount(estate, state) == 0){
    #####: 1010:		isGameOver(state);
        -: 1011:	      }
        -: 1012:	    }
    #####: 1013:	    card_not_discarded = 0;//Exit the loop
        -: 1014:	  }
        -: 1015:			    
        -: 1016:	  else{
    #####: 1017:	    p++;//Next card
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:			    
        -: 1022:      else{
    #####: 1023:	if (supplyCount(estate, state) > 0){
    #####: 1024:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1025:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1026:	  if (supplyCount(estate, state) == 0){
    #####: 1027:	    isGameOver(state);
        -: 1028:	  }
        -: 1029:	}
        -: 1030:      }
        -: 1031:	    
        -: 1032:      
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case great_hall:
        -: 1036:      //+1 Card
    #####: 1037:      drawCard(currentPlayer, state);
        -: 1038:			
        -: 1039:      //+1 Actions
    #####: 1040:      state->numActions++;
        -: 1041:			
        -: 1042:      //discard card from hand
    #####: 1043:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1044:      return 0;
        -: 1045:		
        -: 1046:    case minion:
        -: 1047:      //+1 action
    #####: 1048:      state->numActions++;
        -: 1049:			
        -: 1050:      //discard card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
        -: 1052:			
    #####: 1053:      if (choice1)		//+2 coins
        -: 1054:	{
    #####: 1055:	  state->coins = state->coins + 2;
        -: 1056:	}
        -: 1057:			
    #####: 1058:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1059:	{
        -: 1060:	  //discard hand
    #####: 1061:	  while(numHandCards(state) > 0)
        -: 1062:	    {
    #####: 1063:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //draw 4
    #####: 1067:	  for (i = 0; i < 4; i++)
        -: 1068:	    {
    #####: 1069:	      drawCard(currentPlayer, state);
        -: 1070:	    }
        -: 1071:				
        -: 1072:	  //other players discard hand and redraw if hand size > 4
    #####: 1073:	  for (i = 0; i < state->numPlayers; i++)
        -: 1074:	    {
    #####: 1075:	      if (i != currentPlayer)
        -: 1076:		{
    #####: 1077:		  if ( state->handCount[i] > 4 )
        -: 1078:		    {
        -: 1079:		      //discard hand
    #####: 1080:		      while( state->handCount[i] > 0 )
        -: 1081:			{
    #####: 1082:			  discardCard(handPos, i, state, 0);
        -: 1083:			}
        -: 1084:							
        -: 1085:		      //draw 4
    #####: 1086:		      for (j = 0; j < 4; j++)
        -: 1087:			{
    #####: 1088:			  drawCard(i, state);
        -: 1089:			}
        -: 1090:		    }
        -: 1091:		}
        -: 1092:	    }
        -: 1093:				
        -: 1094:	}
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case steward:
    #####: 1098:      if (choice1 == 1)
        -: 1099:	{
        -: 1100:	  //+2 cards
    #####: 1101:	  drawCard(currentPlayer, state);
    #####: 1102:	  drawCard(currentPlayer, state);
        -: 1103:	}
    #####: 1104:      else if (choice1 == 2)
        -: 1105:	{
        -: 1106:	  //+2 coins
    #####: 1107:	  state->coins = state->coins + 2;
        -: 1108:	}
        -: 1109:      else
        -: 1110:	{
        -: 1111:	  //trash 2 cards in hand
    #####: 1112:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1113:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card from hand
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case tribute:
    #####: 1121:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1122:	if (state->deckCount[nextPlayer] > 0){
    #####: 1123:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1124:	  state->deckCount[nextPlayer]--;
        -: 1125:	}
    #####: 1126:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1127:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1128:	  state->discardCount[nextPlayer]--;
        -: 1129:	}
        -: 1130:	else{
        -: 1131:	  //No Card to Reveal
    #####: 1132:	  if (DEBUG){
        -: 1133:	    printf("No cards to reveal\n");
        -: 1134:	  }
        -: 1135:	}
        -: 1136:      }
        -: 1137:	    
        -: 1138:      else{
    #####: 1139:	if (state->deckCount[nextPlayer] == 0){
    #####: 1140:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1141:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1142:	    state->deckCount[nextPlayer]++;
    #####: 1143:	    state->discard[nextPlayer][i] = -1;
    #####: 1144:	    state->discardCount[nextPlayer]--;
        -: 1145:	  }
        -: 1146:			    
    #####: 1147:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1148:	} 
    #####: 1149:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1150:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1151:	state->deckCount[nextPlayer]--;
    #####: 1152:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1153:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1154:	state->deckCount[nextPlayer]--;
        -: 1155:      }    
        -: 1156:		       
    #####: 1157:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1158:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1159:	state->playedCardCount++;
    #####: 1160:	tributeRevealedCards[1] = -1;
        -: 1161:      }
        -: 1162:
    #####: 1163:      for (i = 0; i <= 2; i ++){
    #####: 1164:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1165:	  state->coins += 2;
        -: 1166:	}
        -: 1167:		    
    #####: 1168:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1169:	  drawCard(currentPlayer, state);
    #####: 1170:	  drawCard(currentPlayer, state);
        -: 1171:	}
        -: 1172:	else{//Action Card
    #####: 1173:	  state->numActions = state->numActions + 2;
        -: 1174:	}
        -: 1175:      }
        -: 1176:	    
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case ambassador:
    #####: 1180:      j = 0;		//used to check if player has enough cards to discard
        -: 1181:
    #####: 1182:      if (choice2 > 2 || choice2 < 0)
        -: 1183:	{
    #####: 1184:	  return -1;				
        -: 1185:	}
        -: 1186:
    #####: 1187:      if (choice1 == handPos)
        -: 1188:	{
    #####: 1189:	  return -1;
        -: 1190:	}
        -: 1191:
    #####: 1192:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1193:	{
    #####: 1194:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1195:	    {
    #####: 1196:	      j++;
        -: 1197:	    }
        -: 1198:	}
    #####: 1199:      if (j < choice2)
        -: 1200:	{
    #####: 1201:	  return -1;				
        -: 1202:	}
        -: 1203:
    #####: 1204:      if (DEBUG) 
        -: 1205:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1206:
        -: 1207:      //increase supply count for choosen card by amount being discarded
    #####: 1208:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1209:			
        -: 1210:      //each other player gains a copy of revealed card
    #####: 1211:      for (i = 0; i < state->numPlayers; i++)
        -: 1212:	{
    #####: 1213:	  if (i != currentPlayer)
        -: 1214:	    {
    #####: 1215:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1216:	    }
        -: 1217:	}
        -: 1218:
        -: 1219:      //discard played card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1221:
        -: 1222:      //trash copies of cards returned to supply
    #####: 1223:      for (j = 0; j < choice2; j++)
        -: 1224:	{
    #####: 1225:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1226:	    {
    #####: 1227:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1228:		{
    #####: 1229:		  discardCard(i, currentPlayer, state, 1);
    #####: 1230:		  break;
        -: 1231:		}
        -: 1232:	    }
        -: 1233:	}			
        -: 1234:
    #####: 1235:      return 0;
        -: 1236:		
        -: 1237:    case cutpurse:
        -: 1238:
    #####: 1239:      updateCoins(currentPlayer, state, 2);
    #####: 1240:      for (i = 0; i < state->numPlayers; i++)
        -: 1241:	{
    #####: 1242:	  if (i != currentPlayer)
        -: 1243:	    {
    #####: 1244:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1245:		{
    #####: 1246:		  if (state->hand[i][j] == copper)
        -: 1247:		    {
    #####: 1248:		      discardCard(j, i, state, 0);
    #####: 1249:		      break;
        -: 1250:		    }
    #####: 1251:		  if (j == state->handCount[i])
        -: 1252:		    {
    #####: 1253:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1254:			{
    #####: 1255:			  if (DEBUG)
        -: 1256:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1257:			}	
    #####: 1258:		      break;
        -: 1259:		    }		
        -: 1260:		}
        -: 1261:					
        -: 1262:	    }
        -: 1263:				
        -: 1264:	}				
        -: 1265:
        -: 1266:      //discard played card from hand
    #####: 1267:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1268:
    #####: 1269:      return 0;
        -: 1270:
        -: 1271:		
        -: 1272:    case embargo: 
        -: 1273:      //+2 Coins
    #####: 1274:      state->coins = state->coins + 2;
        -: 1275:			
        -: 1276:      //see if selected pile is in play
    #####: 1277:      if ( state->supplyCount[choice1] == -1 )
        -: 1278:	{
    #####: 1279:	  return -1;
        -: 1280:	}
        -: 1281:			
        -: 1282:      //add embargo token to selected supply pile
    #####: 1283:      state->embargoTokens[choice1]++;
        -: 1284:			
        -: 1285:      //trash card
    #####: 1286:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1287:      return 0;
        -: 1288:		
        -: 1289:    case outpost:
        -: 1290:      //set outpost flag
    #####: 1291:      state->outpostPlayed++;
        -: 1292:			
        -: 1293:      //discard card
    #####: 1294:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1295:      return 0;
        -: 1296:		
        -: 1297:    case salvager:
        -: 1298:      //+1 buy
    #####: 1299:      state->numBuys++;
        -: 1300:			
    #####: 1301:      if (choice1)
        -: 1302:	{
        -: 1303:	  //gain coins equal to trashed card
    #####: 1304:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1305:	  //trash card
    #####: 1306:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1307:	}
        -: 1308:			
        -: 1309:      //discard card
    #####: 1310:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1311:      return 0;
        -: 1312:		
        -: 1313:    case sea_hag:
    #####: 1314:      for (i = 0; i < state->numPlayers; i++){
    #####: 1315:	if (i != currentPlayer){
    #####: 1316:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1317:	  state->discardCount[i]++;
    #####: 1318:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1319:	}
        -: 1320:      }
    #####: 1321:      return 0;
        -: 1322:		
        -: 1323:    case treasure_map:
        -: 1324:      //search hand for another treasure_map
    #####: 1325:      index = -1;
    #####: 1326:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1327:	{
    #####: 1328:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1329:	    {
    #####: 1330:	      index = i;
    #####: 1331:	      break;
        -: 1332:	    }
        -: 1333:	}
    #####: 1334:      if (index > -1)
        -: 1335:	{
        -: 1336:	  //trash both treasure cards
    #####: 1337:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1338:	  discardCard(index, currentPlayer, state, 1);
        -: 1339:
        -: 1340:	  //gain 4 Gold cards
    #####: 1341:	  for (i = 0; i < 4; i++)
        -: 1342:	    {
    #####: 1343:	      gainCard(gold, state, 1, currentPlayer);
        -: 1344:	    }
        -: 1345:				
        -: 1346:	  //return success
    #####: 1347:	  return 1;
        -: 1348:	}
        -: 1349:			
        -: 1350:      //no second treasure_map found in hand
    #####: 1351:      return -1;
        -: 1352:    }
        -: 1353:	
    #####: 1354:  return -1;
        -: 1355:}
        -: 1356:
    #####: 1357:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1358:{
        -: 1359:	
        -: 1360:  //if card is not trashed, added to Played pile 
    #####: 1361:  if (trashFlag < 1)
        -: 1362:    {
        -: 1363:      //add card to played pile
    #####: 1364:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1365:      state->playedCardCount++;
        -: 1366:    }
        -: 1367:	
        -: 1368:  //set played card to -1
    #####: 1369:  state->hand[currentPlayer][handPos] = -1;
        -: 1370:	
        -: 1371:  //remove card from player's hand
    #####: 1372:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1373:    {
        -: 1374:      //reduce number of cards in hand
    #####: 1375:      state->handCount[currentPlayer]--;
        -: 1376:    }
    #####: 1377:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1378:    {
        -: 1379:      //reduce number of cards in hand
    #####: 1380:      state->handCount[currentPlayer]--;
        -: 1381:    }
        -: 1382:  else 	
        -: 1383:    {
        -: 1384:      //replace discarded card with last card in hand
    #####: 1385:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1386:      //set last card to -1
    #####: 1387:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1388:      //reduce number of cards in hand
    #####: 1389:      state->handCount[currentPlayer]--;
        -: 1390:    }
        -: 1391:	
    #####: 1392:  return 0;
        -: 1393:}
        -: 1394:
    #####: 1395:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1396:{
        -: 1397:  //Note: supplyPos is enum of choosen card
        -: 1398:	
        -: 1399:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1400:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1401:    {
    #####: 1402:      return -1;
        -: 1403:    }
        -: 1404:	
        -: 1405:  //added card for [whoseTurn] current player:
        -: 1406:  // toFlag = 0 : add to discard
        -: 1407:  // toFlag = 1 : add to deck
        -: 1408:  // toFlag = 2 : add to hand
        -: 1409:
    #####: 1410:  if (toFlag == 1)
        -: 1411:    {
    #####: 1412:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1413:      state->deckCount[player]++;
        -: 1414:    }
    #####: 1415:  else if (toFlag == 2)
        -: 1416:    {
    #####: 1417:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1418:      state->handCount[player]++;
        -: 1419:    }
        -: 1420:  else
        -: 1421:    {
    #####: 1422:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1423:      state->discardCount[player]++;
        -: 1424:    }
        -: 1425:	
        -: 1426:  //decrease number in supply pile
    #####: 1427:  state->supplyCount[supplyPos]--;
        -: 1428:	 
    #####: 1429:  return 0;
        -: 1430:}
        -: 1431:
      152: 1432:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1433:{
        -: 1434:  int i;
        -: 1435:	
        -: 1436:  //reset coin count
      152: 1437:  state->coins = 0;
        -: 1438:
        -: 1439:  //add coins for each Treasure card in player's hand
      912: 1440:  for (i = 0; i < state->handCount[player]; i++)
        -: 1441:    {
      760: 1442:      if (state->hand[player][i] == copper)
        -: 1443:	{
      520: 1444:	  state->coins += 1;
        -: 1445:	}
      240: 1446:      else if (state->hand[player][i] == silver)
        -: 1447:	{
    #####: 1448:	  state->coins += 2;
        -: 1449:	}
      240: 1450:      else if (state->hand[player][i] == gold)
        -: 1451:	{
    #####: 1452:	  state->coins += 3;
        -: 1453:	}	
        -: 1454:    }	
        -: 1455:
        -: 1456:  //add bonus
      152: 1457:  state->coins += bonus;
        -: 1458:
      152: 1459:  return 0;
        -: 1460:}
        -: 1461:
        -: 1462:
        -: 1463://end of dominion.c
        -: 1464:
