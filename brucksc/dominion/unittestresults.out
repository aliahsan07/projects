

UnitTest1
FAILURE: did not set the great_hall card to -1
File 'dominion.c'
Lines executed:16.24% of 585
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "helper.h"
    #####:    8:int councilroom(int currentPlayer, struct gameState *  state, int handPos){
    #####:    9:    int i = 0;  
        -:   10:    //+5 Cards
    #####:   11:      for (i = 0; i < 5; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:      //+1 Buy
    #####:   17:      state->numBuys++;
        -:   18:
        -:   19:      //+1 Action
    #####:   20:      state->numActions++;
        -:   21:			
        -:   22:      //Each other player draws a card
    #####:   23:      for (i = 0; i < state->numPlayers; i++)
        -:   24:	{
    #####:   25:	  if ( i != currentPlayer )
        -:   26:	    {
    #####:   27:	      drawCard(i, state);
    #####:   28:	      drawCard(i, state);
        -:   29:	    }
        -:   30:	}
        -:   31:			
        -:   32:      //put played card in played card pile
    #####:   33:      discardCard(handPos, currentPlayer, state, 0);
        -:   34:			
    #####:   35:      return 0;
        -:   36:}
    #####:   37:int mysmithy (int currentPlayer, struct gameState * state, int handPos){
        -:   38:    int i;
        -:   39:    //+3 Cards
    #####:   40:    for (i = 0; i < 9; i++)
        -:   41:    {
    #####:   42:        drawCard(currentPlayer, state);
        -:   43:    }		
        -:   44:    //discard card from hand
    #####:   45:    discardCard(handPos, currentPlayer, state, 0);
    #####:   46:    return 0;
        -:   47:}
        -:   48:
    #####:   49:int myvillage(int currentPlayer, struct gameState * state, int handPos){
        -:   50:    //+1 Card
    #####:   51:    drawCard(currentPlayer, state);
        -:   52:
        -:   53:    //+2 Actions
    #####:   54:    state->numActions = state->numActions + 1;
        -:   55:
        -:   56:    //discard played card from hand
    #####:   57:    discardCard(handPos, currentPlayer, state, 0);
    #####:   58:    return 0;
        -:   59:}
    #####:   60:int mygreathall(int currentPlayer, struct gameState * state, int handPos){
        -:   61:            //+1 Card
    #####:   62:            drawCard(currentPlayer, state);
        -:   63:
        -:   64:            //+1 Actions
    #####:   65:            state->numActions++;
        -:   66:
        -:   67:            //discard card from hand
    #####:   68:            discardCard(handPos, currentPlayer, state, 0);
    #####:   69:            return 0;
        -:   70:}
        -:   71:
    #####:   72:int myoutpost(int currentPlayer, struct gameState * state, int handPos){
        -:   73:            //set outpost flag
    #####:   74:            state->outpostPlayed+2;
        -:   75:
        -:   76:            //discard card
    #####:   77:            discardCard(handPos, currentPlayer, state, 0);
    #####:   78:            return 0;
        -:   79:}
       30:   80:int compare(const void* a, const void* b) {
       30:   81:    if (*(int*)a > *(int*)b)
    #####:   82:        return 1;
       30:   83:    if (*(int*)a < *(int*)b)
        8:   84:        return -1;
       22:   85:    return 0;
        -:   86:}
        -:   87:
        1:   88:struct gameState* newGame() {
        1:   89:    struct gameState* g = malloc(sizeof(struct gameState));
        1:   90:    return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:        int k8, int k9, int k10) {
    #####:   95:    int* k = malloc(10 * sizeof(int));
    #####:   96:    k[0] = k1;
    #####:   97:    k[1] = k2;
    #####:   98:    k[2] = k3;
    #####:   99:    k[3] = k4;
    #####:  100:    k[4] = k5;
    #####:  101:    k[5] = k6;
    #####:  102:    k[6] = k7;
    #####:  103:    k[7] = k8;
    #####:  104:    k[8] = k9;
    #####:  105:    k[9] = k10;
    #####:  106:    return k;
        -:  107:}
        -:  108:
        1:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:        struct gameState *state) {
        -:  111:
        -:  112:    int i;
        -:  113:    int j;
        -:  114:    int it;			
        -:  115:    //set up random number generator
        1:  116:    SelectStream(1);
        1:  117:    PutSeed((long)randomSeed);
        -:  118:
        -:  119:    //check number of players
        1:  120:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
    #####:  122:        return -1;
        -:  123:    }
        -:  124:
        -:  125:    //set number of players
        1:  126:    state->numPlayers = numPlayers;
        -:  127:
        -:  128:    //check selected kingdom cards are different
       11:  129:    for (i = 0; i < 10; i++)
        -:  130:    {
      110:  131:        for (j = 0; j < 10; j++)
        -:  132:        {
      100:  133:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:            {
    #####:  135:                return -1;
        -:  136:            }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:    //initialize supply
        -:  142:    ///////////////////////////////
        -:  143:
        -:  144:    //set number of Curse cards
        1:  145:    if (numPlayers == 2)
        -:  146:    {
        1:  147:        state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:    else if (numPlayers == 3)
        -:  150:    {
    #####:  151:        state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:    else
        -:  154:    {
    #####:  155:        state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:    //set number of Victory cards
        1:  159:    if (numPlayers == 2)
        -:  160:    {
        1:  161:        state->supplyCount[estate] = 8;
        1:  162:        state->supplyCount[duchy] = 8;
        1:  163:        state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:        state->supplyCount[estate] = 12;
    #####:  168:        state->supplyCount[duchy] = 12;
    #####:  169:        state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:    //set number of Treasure cards
        1:  173:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  174:    state->supplyCount[silver] = 40;
        1:  175:    state->supplyCount[gold] = 30;
        -:  176:
        -:  177:    //set number of Kingdom cards
       21:  178:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
      165:  180:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:        {
      155:  182:            if (kingdomCards[j] == i)
        -:  183:            {
        -:  184:                //check if card is a 'Victory' Kingdom card
       12:  185:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:                {
        2:  187:                    if (numPlayers == 2){ 
        2:  188:                        state->supplyCount[i] = 8; 
        -:  189:                    }
    #####:  190:                    else{ state->supplyCount[i] = 12; }
        -:  191:                }
        -:  192:                else
        -:  193:                {
        8:  194:                    state->supplyCount[i] = 10;
        -:  195:                }
       10:  196:                break;
        -:  197:            }
        -:  198:            else    //card is not in the set choosen for the game
        -:  199:            {
      145:  200:                state->supplyCount[i] = -1;
        -:  201:            }
        -:  202:        }
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:    ////////////////////////
        -:  207:    //supply intilization complete
        -:  208:
        -:  209:    //set player decks
        3:  210:    for (i = 0; i < numPlayers; i++)
        -:  211:    {
        2:  212:        state->deckCount[i] = 0;
        8:  213:        for (j = 0; j < 3; j++)
        -:  214:        {
        6:  215:            state->deck[i][j] = estate;
        6:  216:            state->deckCount[i]++;
        -:  217:        }
       16:  218:        for (j = 3; j < 10; j++)
        -:  219:        {
       14:  220:            state->deck[i][j] = copper;
       14:  221:            state->deckCount[i]++;		
        -:  222:        }
        -:  223:    }
        -:  224:
        -:  225:    //shuffle player decks
        3:  226:    for (i = 0; i < numPlayers; i++)
        -:  227:    {
        2:  228:        if ( shuffle(i, state) < 0 )
        -:  229:        {
    #####:  230:            return -1;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    //draw player hands
        3:  235:    for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:        //initialize hand size to zero
        2:  238:        state->handCount[i] = 0;
        2:  239:        state->discardCount[i] = 0;
        -:  240:        //draw 5 cards
       12:  241:         for (j = 0; j < 5; j++)
        -:  242:        	{
       10:  243:        	  drawCard(i, state);
        -:  244:        	}
        -:  245:    }
        -:  246:
        -:  247:    //set embargo tokens to 0 for all supply piles
       28:  248:    for (i = 0; i <= treasure_map; i++)
        -:  249:    {
       27:  250:        state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:    //initialize first player's turn
        1:  254:    state->outpostPlayed = 0;
        1:  255:    state->phase = 0;
        1:  256:    state->numActions = 1;
        1:  257:    state->numBuys = 1;
        1:  258:    state->playedCardCount = 0;
        1:  259:    state->whoseTurn = 0;
        1:  260:    state->handCount[state->whoseTurn] = 0;
        -:  261:    //int it; move to top
        -:  262:
        -:  263:    //Moved draw cards to here, only drawing at the start of a turn
        6:  264:    for (it = 0; it < 5; it++){
        5:  265:        drawCard(state->whoseTurn, state);
        -:  266:    }
        -:  267:
        1:  268:    updateCoins(state->whoseTurn, state, 0);
        -:  269:
        1:  270:    return 0;
        -:  271:}
        -:  272:
        2:  273:int shuffle(int player, struct gameState *state) {
        -:  274:
        -:  275:
        -:  276:    int newDeck[MAX_DECK];
        2:  277:    int newDeckPos = 0;
        -:  278:    int card;
        -:  279:    int i;
        -:  280:
        2:  281:    if (state->deckCount[player] < 1)
    #####:  282:        return -1;
        2:  283:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
       24:  286:    while (state->deckCount[player] > 0) {
       20:  287:        card = floor(Random() * state->deckCount[player]);
       20:  288:        newDeck[newDeckPos] = state->deck[player][card];
       20:  289:        newDeckPos++;
       80:  290:        for (i = card; i < state->deckCount[player]-1; i++) {
       60:  291:            state->deck[player][i] = state->deck[player][i+1];
        -:  292:        }
       20:  293:        state->deckCount[player]--;
        -:  294:    }
       22:  295:    for (i = 0; i < newDeckPos; i++) {
       20:  296:        state->deck[player][i] = newDeck[i];
       20:  297:        state->deckCount[player]++;
        -:  298:    }
        -:  299:
        2:  300:    return 0;
        -:  301:}
        -:  302:
    #####:  303:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  304:{	
        -:  305:    int card;
    #####:  306:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  307:
        -:  308:    //check if it is the right phase
    #####:  309:    if (state->phase != 0)
        -:  310:    {
    #####:  311:        return -1;
        -:  312:    }
        -:  313:
        -:  314:    //check if player has enough actions
    #####:  315:    if ( state->numActions < 1 )
        -:  316:    {
    #####:  317:        return -1;
        -:  318:    }
        -:  319:
        -:  320:    //get card played
    #####:  321:    card = handCard(handPos, state);
        -:  322:
        -:  323:    //check if selected card is an action
    #####:  324:    if ( card < adventurer || card > treasure_map )
        -:  325:    {
    #####:  326:        return -1;
        -:  327:    }
        -:  328:
        -:  329:    //play card
    #####:  330:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  331:    {
    #####:  332:        return -1;
        -:  333:    }
        -:  334:
        -:  335:    //reduce number of actions
    #####:  336:    state->numActions--;
        -:  337:
        -:  338:    //update coins (Treasure cards may be added with card draws)
    #####:  339:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  340:
    #####:  341:    return 0;
        -:  342:}
        -:  343:
    #####:  344:int buyCard(int supplyPos, struct gameState *state) {
        -:  345:    int who;
    #####:  346:    if (DEBUG){
        -:  347:        printf("Entering buyCard...\n");
        -:  348:    }
        -:  349:
        -:  350:    // I don't know what to do about the phase thing.
        -:  351:
    #####:  352:    who = state->whoseTurn;
        -:  353:
    #####:  354:    if (state->numBuys < 1){
    #####:  355:        if (DEBUG)
        -:  356:            printf("You do not have any buys left\n");
    #####:  357:        return -1;
    #####:  358:    } else if (supplyCount(supplyPos, state) <1){
    #####:  359:        if (DEBUG)
        -:  360:            printf("There are not any of that type of card left\n");
    #####:  361:        return -1;
    #####:  362:    } else if (state->coins < getCost(supplyPos)){
    #####:  363:        if (DEBUG) 
        -:  364:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  365:        return -1;
        -:  366:    } else {
    #####:  367:        state->phase=1;
        -:  368:        //state->supplyCount[supplyPos]--;
    #####:  369:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  370:
    #####:  371:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  372:        state->numBuys--;
    #####:  373:        if (DEBUG)
        -:  374:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  375:    }
        -:  376:
        -:  377:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  378:    //state->discardCount[who]++;
        -:  379:
    #####:  380:    return 0;
        -:  381:}
        -:  382:
    #####:  383:int numHandCards(struct gameState *state) {
    #####:  384:    return state->handCount[ whoseTurn(state) ];
        -:  385:}
        -:  386:
    #####:  387:int handCard(int handPos, struct gameState *state) {
    #####:  388:    int currentPlayer = whoseTurn(state);
    #####:  389:    return state->hand[currentPlayer][handPos];
        -:  390:}
        -:  391:
    #####:  392:int supplyCount(int card, struct gameState *state) {
    #####:  393:    return state->supplyCount[card];
        -:  394:}
        -:  395:
    #####:  396:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  397:    int i;
    #####:  398:    int count = 0;
        -:  399:
    #####:  400:    for (i = 0; i < state->deckCount[player]; i++)
        -:  401:    {
    #####:  402:        if (state->deck[player][i] == card) count++;
        -:  403:    }
        -:  404:
    #####:  405:    for (i = 0; i < state->handCount[player]; i++)
        -:  406:    {
    #####:  407:        if (state->hand[player][i] == card) count++;
        -:  408:    }
        -:  409:
    #####:  410:    for (i = 0; i < state->discardCount[player]; i++)
        -:  411:    {
    #####:  412:        if (state->discard[player][i] == card) count++;
        -:  413:    }
        -:  414:
    #####:  415:    return count;
        -:  416:}
        -:  417:
    #####:  418:int whoseTurn(struct gameState *state) {
    #####:  419:    return state->whoseTurn;
        -:  420:}
        -:  421:
    #####:  422:int endTurn(struct gameState *state) {
        -:  423:    int k;
        -:  424:    int i;
    #####:  425:    int currentPlayer = whoseTurn(state);
        -:  426:
        -:  427:    //Discard hand
    #####:  428:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  429:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  430:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  431:    }
    #####:  432:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  433:
        -:  434:    //Code for determining the player
    #####:  435:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  436:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  437:    }
        -:  438:    else{
    #####:  439:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  440:    }
        -:  441:
    #####:  442:    state->outpostPlayed = 0;
    #####:  443:    state->phase = 0;
    #####:  444:    state->numActions = 1;
    #####:  445:    state->coins = 0;
    #####:  446:    state->numBuys = 1;
    #####:  447:    state->playedCardCount = 0;
    #####:  448:    state->handCount[state->whoseTurn] = 0;
        -:  449:
        -:  450:    //int k; move to top
        -:  451:    //Next player draws hand
    #####:  452:    for (k = 0; k < 5; k++){
    #####:  453:        drawCard(state->whoseTurn, state);//Draw a card
        -:  454:    }
        -:  455:
        -:  456:    //Update money
    #####:  457:    updateCoins(state->whoseTurn, state , 0);
        -:  458:
    #####:  459:    return 0;
        -:  460:}
        -:  461:
    #####:  462:int isGameOver(struct gameState *state) {
        -:  463:    int i;
        -:  464:    int j;
        -:  465:
        -:  466:    //if stack of Province cards is empty, the game ends
    #####:  467:    if (state->supplyCount[province] == 0)
        -:  468:    {
    #####:  469:        return 1;
        -:  470:    }
        -:  471:
        -:  472:    //if three supply pile are at 0, the game ends
    #####:  473:    j = 0;
    #####:  474:    for (i = 0; i < 25; i++)
        -:  475:    {
    #####:  476:        if (state->supplyCount[i] == 0)
        -:  477:        {
    #####:  478:            j++;
        -:  479:        }
        -:  480:    }
    #####:  481:    if ( j >= 3)
        -:  482:    {
    #####:  483:        return 1;
        -:  484:    }
        -:  485:
    #####:  486:    return 0;
        -:  487:}
        -:  488:
    #####:  489:int scoreFor (int player, struct gameState *state) {
        -:  490:
        -:  491:    int i;
    #####:  492:    int score = 0;
        -:  493:    //score from hand
    #####:  494:    for (i = 0; i < state->handCount[player]; i++)
        -:  495:    {
    #####:  496:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  497:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  498:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  499:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  500:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  501:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  502:    }
        -:  503:
        -:  504:    //score from discard
    #####:  505:    for (i = 0; i < state->discardCount[player]; i++)
        -:  506:    {
    #####:  507:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  508:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  509:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  510:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  511:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  512:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  519:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  520:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  521:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  522:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  523:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  524:    }
        -:  525:
    #####:  526:    return score;
        -:  527:}
        -:  528:
    #####:  529:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  530:    int i;	
        -:  531:    int j;
        -:  532:    int highScore;
        -:  533:    int currentPlayer;
        -:  534:
        -:  535:    //get score for each player
    #####:  536:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
        -:  538:        //set unused player scores to -9999
    #####:  539:        if (i >= state->numPlayers)
        -:  540:        {
    #####:  541:            players[i] = -9999;
        -:  542:        }
        -:  543:        else
        -:  544:        {
    #####:  545:            players[i] = scoreFor (i, state);
        -:  546:        }
        -:  547:    }
        -:  548:
        -:  549:    //find highest score
    #####:  550:    j = 0;
    #####:  551:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:        if (players[i] > players[j])
        -:  554:        {
    #####:  555:            j = i;
        -:  556:        }
        -:  557:    }
    #####:  558:    highScore = players[j];
        -:  559:
        -:  560:    //add 1 to players who had less turns
    #####:  561:    currentPlayer = whoseTurn(state);
    #####:  562:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  563:    {
    #####:  564:        if ( players[i] == highScore && i > currentPlayer )
        -:  565:        {
    #####:  566:            players[i]++;
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    //find new highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  573:    {
    #####:  574:        if ( players[i] > players[j] )
        -:  575:        {
    #####:  576:            j = i;
        -:  577:        }
        -:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //set winners in array to 1 and rest to 0
    #####:  582:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  583:    {
    #####:  584:        if ( players[i] == highScore )
        -:  585:        {
    #####:  586:            players[i] = 1;
        -:  587:        }
        -:  588:        else
        -:  589:        {
    #####:  590:            players[i] = 0;
        -:  591:        }
        -:  592:    }
        -:  593:
    #####:  594:    return 0;
        -:  595:}
        -:  596:
       15:  597:int drawCard(int player, struct gameState *state)
        -:  598:{	int count;
        -:  599:    int deckCounter;
       15:  600:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  601:
        -:  602:        //Step 1 Shuffle the discard pile back into a deck
        -:  603:        int i;
        -:  604:        //Move discard to deck
    #####:  605:        for (i = 0; i < state->discardCount[player];i++){
    #####:  606:            state->deck[player][i] = state->discard[player][i];
    #####:  607:            state->discard[player][i] = -1;
        -:  608:        }
        -:  609:
    #####:  610:        state->deckCount[player] = state->discardCount[player];
    #####:  611:        state->discardCount[player] = 0;//Reset discard
        -:  612:
        -:  613:        //Shufffle the deck
    #####:  614:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  615:
    #####:  616:        if (DEBUG){//Debug statements
        -:  617:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  618:        }
        -:  619:
    #####:  620:        state->discardCount[player] = 0;
        -:  621:
        -:  622:        //Step 2 Draw Card
    #####:  623:        count = state->handCount[player];//Get current player's hand count
        -:  624:
    #####:  625:        if (DEBUG){//Debug statements
        -:  626:            printf("Current hand count: %d\n", count);
        -:  627:        }
        -:  628:
    #####:  629:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  630:
    #####:  631:        if (deckCounter == 0)
    #####:  632:            return -1;
        -:  633:
    #####:  634:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  635:        state->deckCount[player]--;
    #####:  636:        state->handCount[player]++;//Increment hand count
        -:  637:    }
        -:  638:
        -:  639:    else{
       15:  640:        int count = state->handCount[player];//Get current hand count for player
        -:  641:        int deckCounter;
       15:  642:        if (DEBUG){//Debug statements
        -:  643:            printf("Current hand count: %d\n", count);
        -:  644:        }
        -:  645:
       15:  646:        deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  647:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  648:        state->deckCount[player]--;
       15:  649:        state->handCount[player]++;//Increment hand count
        -:  650:    }
        -:  651:
       15:  652:    return 0;
        -:  653:}
        -:  654:
    #####:  655:int getCost(int cardNumber)
        -:  656:{
    #####:  657:    switch( cardNumber ) 
        -:  658:    {
        -:  659:        case curse:
    #####:  660:            return 0;
        -:  661:        case estate:
    #####:  662:            return 2;
        -:  663:        case duchy:
    #####:  664:            return 5;
        -:  665:        case province:
    #####:  666:            return 8;
        -:  667:        case copper:
    #####:  668:            return 0;
        -:  669:        case silver:
    #####:  670:            return 3;
        -:  671:        case gold:
    #####:  672:            return 6;
        -:  673:        case adventurer:
    #####:  674:            return 6;
        -:  675:        case council_room:
    #####:  676:            return 5;
        -:  677:        case feast:
    #####:  678:            return 4;
        -:  679:        case gardens:
    #####:  680:            return 4;
        -:  681:        case mine:
    #####:  682:            return 5;
        -:  683:        case remodel:
    #####:  684:            return 4;
        -:  685:        case smithy:
    #####:  686:            return 4;
        -:  687:        case village:
    #####:  688:            return 3;
        -:  689:        case baron:
    #####:  690:            return 4;
        -:  691:        case great_hall:
    #####:  692:            return 3;
        -:  693:        case minion:
    #####:  694:            return 5;
        -:  695:        case steward:
    #####:  696:            return 3;
        -:  697:        case tribute:
    #####:  698:            return 5;
        -:  699:        case ambassador:
    #####:  700:            return 3;
        -:  701:        case cutpurse:
    #####:  702:            return 4;
        -:  703:        case embargo: 
    #####:  704:            return 2;
        -:  705:        case outpost:
    #####:  706:            return 5;
        -:  707:        case salvager:
    #####:  708:            return 4;
        -:  709:        case sea_hag:
    #####:  710:            return 4;
        -:  711:        case treasure_map:
    #####:  712:            return 4;
        -:  713:    }
        -:  714:
    #####:  715:    return -1;
        -:  716:}
        -:  717:
    #####:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:    int i;
        -:  721:    int j;
        -:  722:    int k;
        -:  723:    int x;
        -:  724:    int index;
    #####:  725:    int currentPlayer = whoseTurn(state);
    #####:  726:    int nextPlayer = currentPlayer + 1;
        -:  727:
    #####:  728:    int tributeRevealedCards[2] = {-1, -1};
        -:  729:    int temphand[MAX_HAND];// moved above the if statement
    #####:  730:    int drawntreasure=0;
        -:  731:    int cardDrawn;
    #####:  732:    int z = 0;// this is the counter for the temp hand
    #####:  733:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:        nextPlayer = 0;
        -:  735:    }
        -:  736:
        -:  737:
        -:  738:    //uses switch to select card and perform actions
    #####:  739:    switch( card ) 
        -:  740:    {
        -:  741:        case adventurer:
    #####:  742:            while(drawntreasure<2){
    #####:  743:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  744:                    shuffle(currentPlayer, state);
        -:  745:                }
    #####:  746:                drawCard(currentPlayer, state);
    #####:  747:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  748:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  749:                    drawntreasure++;
        -:  750:                else{
    #####:  751:                    temphand[z]=cardDrawn;
    #####:  752:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  753:                    z++;
        -:  754:                }
        -:  755:            }
    #####:  756:            while(z-1>=0){
    #####:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  758:                z=z-1;
        -:  759:            }
    #####:  760:            return 0;			
        -:  761:        case council_room:
    #####:  762:            councilroom(currentPlayer, state, handPos);
    #####:  763:            break;	
        -:  764:            return 0;	
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
    #####:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:
    #####:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:
    #####:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:
    #####:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:
    #####:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:
        -:  806:                }
        -:  807:            }     
        -:  808:
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:
    #####:  816:            return 0;
        -:  817:
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);			
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:
    #####:  854:            return 0;
        -:  855:
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);			
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
    #####:  878:            return 0;	
        -:  879:        
        -:  880:        case smithy:
    #####:  881:            mysmithy(currentPlayer, state, handPos);
    #####:  882:            break;
        -:  883:
        -:  884:        case village:
    #####:  885:            myvillage(currentPlayer, state, handPos);
    #####:  886:            break;
        -:  887:
        -:  888:        case baron:
    #####:  889:            state->numBuys++;//Increase buys by 1!
    #####:  890:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:                int p = 0;//Iterator for hand!
    #####:  892:                int card_not_discarded = 1;//Flag for discard set!
    #####:  893:                while(card_not_discarded){
    #####:  894:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:                        state->discardCount[currentPlayer]++;
    #####:  898:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:                        }
    #####:  901:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:                        state->handCount[currentPlayer]--;
    #####:  903:                        card_not_discarded = 0;//Exit the loop
        -:  904:                    }
    #####:  905:                    else if (p > state->handCount[currentPlayer]){
    #####:  906:                        if(DEBUG) {
        -:  907:                            printf("No estate cards in your hand, invalid choice\n");
        -:  908:                            printf("Must gain an estate if there are any\n");
        -:  909:                        }
    #####:  910:                        if (supplyCount(estate, state) > 0){
    #####:  911:                            gainCard(estate, state, 0, currentPlayer);
    #####:  912:                            state->supplyCount[estate]--;//Decrement estates
    #####:  913:                            if (supplyCount(estate, state) == 0){
    #####:  914:                                isGameOver(state);
        -:  915:                            }
        -:  916:                        }
    #####:  917:                        card_not_discarded = 0;//Exit the loop
        -:  918:                    }
        -:  919:
        -:  920:                    else{
    #####:  921:                        p++;//Next card
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:            else{
    #####:  927:                if (supplyCount(estate, state) > 0){
    #####:  928:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  930:                    if (supplyCount(estate, state) == 0){
    #####:  931:                        isGameOver(state);
        -:  932:                    }
        -:  933:                }
        -:  934:            }
        -:  935:
        -:  936:
    #####:  937:            return 0;
        -:  938:
        -:  939:        case great_hall:
    #####:  940:            mygreathall(currentPlayer, state, handPos);
    #####:  941:            break;
        -:  942:
        -:  943:        case minion:
        -:  944:            //+1 action
    #####:  945:            state->numActions++;
        -:  946:
        -:  947:            //discard card from hand
    #####:  948:            discardCard(handPos, currentPlayer, state, 0);
        -:  949:
    #####:  950:            if (choice1)		//+2 coins
        -:  951:            {
    #####:  952:                state->coins = state->coins + 2;
        -:  953:            }
        -:  954:
    #####:  955:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:            {
        -:  957:                //discard hand
    #####:  958:                while(numHandCards(state) > 0)
        -:  959:                {
    #####:  960:                    discardCard(handPos, currentPlayer, state, 0);
        -:  961:                }
        -:  962:
        -:  963:                //draw 4
    #####:  964:                for (i = 0; i < 4; i++)
        -:  965:                {
    #####:  966:                    drawCard(currentPlayer, state);
        -:  967:                }
        -:  968:
        -:  969:                //other players discard hand and redraw if hand size > 4
    #####:  970:                for (i = 0; i < state->numPlayers; i++)
        -:  971:                {
    #####:  972:                    if (i != currentPlayer)
        -:  973:                    {
    #####:  974:                        if ( state->handCount[i] > 4 )
        -:  975:                        {
        -:  976:                            //discard hand
    #####:  977:                            while( state->handCount[i] > 0 )
        -:  978:                            {
    #####:  979:                                discardCard(handPos, i, state, 0);
        -:  980:                            }
        -:  981:
        -:  982:                            //draw 4
    #####:  983:                            for (j = 0; j < 4; j++)
        -:  984:                            {
    #####:  985:                                drawCard(i, state);
        -:  986:                            }
        -:  987:                        }
        -:  988:                    }
        -:  989:                }
        -:  990:
        -:  991:            }
    #####:  992:            return 0;
        -:  993:
        -:  994:        case steward:
    #####:  995:            if (choice1 == 1)
        -:  996:            {
        -:  997:                //+2 cards
    #####:  998:                drawCard(currentPlayer, state);
    #####:  999:                drawCard(currentPlayer, state);
        -: 1000:            }
    #####: 1001:            else if (choice1 == 2)
        -: 1002:            {
        -: 1003:                //+2 coins
    #####: 1004:                state->coins = state->coins + 2;
        -: 1005:            }
        -: 1006:            else
        -: 1007:            {
        -: 1008:                //trash 2 cards in hand
    #####: 1009:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:                discardCard(choice3, currentPlayer, state, 1);
        -: 1011:            }
        -: 1012:
        -: 1013:            //discard card from hand
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:            return 0;
        -: 1016:
        -: 1017:        case tribute:
    #####: 1018:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:                if (state->deckCount[nextPlayer] > 0){
    #####: 1020:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:                    state->deckCount[nextPlayer]--;
        -: 1022:                }
    #####: 1023:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:                    state->discardCount[nextPlayer]--;
        -: 1026:                }
        -: 1027:                else{
        -: 1028:                    //No Card to Reveal
    #####: 1029:                    if (DEBUG){
        -: 1030:                        printf("No cards to reveal\n");
        -: 1031:                    }
        -: 1032:                }
        -: 1033:            }
        -: 1034:
        -: 1035:            else{
    #####: 1036:                if (state->deckCount[nextPlayer] == 0){
    #####: 1037:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:                        state->deckCount[nextPlayer]++;
    #####: 1040:                        state->discard[nextPlayer][i] = -1;
    #####: 1041:                        state->discardCount[nextPlayer]--;
        -: 1042:                    }
        -: 1043:
    #####: 1044:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:                } 
    #####: 1046:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
    #####: 1049:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
        -: 1052:            }    
        -: 1053:
    #####: 1054:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:                state->playedCardCount++;
    #####: 1057:                tributeRevealedCards[1] = -1;
        -: 1058:            }
        -: 1059:
    #####: 1060:            for (i = 0; i <= 2; i ++){
    #####: 1061:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:                    state->coins += 2;
        -: 1063:                }
        -: 1064:
    #####: 1065:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:                    drawCard(currentPlayer, state);
    #####: 1067:                    drawCard(currentPlayer, state);
        -: 1068:                }
        -: 1069:                else{//Action Card
    #####: 1070:                    state->numActions = state->numActions + 2;
        -: 1071:                }
        -: 1072:            }
        -: 1073:
    #####: 1074:            return 0;
        -: 1075:
        -: 1076:        case ambassador:
    #####: 1077:            j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:            if (choice2 > 2 || choice2 < 0)
        -: 1080:            {
    #####: 1081:                return -1;				
        -: 1082:            }
        -: 1083:
    #####: 1084:            if (choice1 == handPos)
        -: 1085:            {
    #####: 1086:                return -1;
        -: 1087:            }
        -: 1088:
    #####: 1089:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:            {
    #####: 1091:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:                {
    #####: 1093:                    j++;
        -: 1094:                }
        -: 1095:            }
    #####: 1096:            if (j < choice2)
        -: 1097:            {
    #####: 1098:                return -1;				
        -: 1099:            }
        -: 1100:
    #####: 1101:            if (DEBUG) 
        -: 1102:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:            //increase supply count for choosen card by amount being discarded
    #####: 1105:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:            //each other player gains a copy of revealed card
    #####: 1108:            for (i = 0; i < state->numPlayers; i++)
        -: 1109:            {
    #####: 1110:                if (i != currentPlayer)
        -: 1111:                {
    #####: 1112:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:                }
        -: 1114:            }
        -: 1115:
        -: 1116:            //discard played card from hand
    #####: 1117:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:            //trash copies of cards returned to supply
    #####: 1120:            for (j = 0; j < choice2; j++)
        -: 1121:            {
    #####: 1122:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:                {
    #####: 1124:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:                    {
    #####: 1126:                        discardCard(i, currentPlayer, state, 1);
    #####: 1127:                        break;
        -: 1128:                    }
        -: 1129:                }
        -: 1130:            }			
        -: 1131:
    #####: 1132:            return 0;
        -: 1133:
        -: 1134:        case cutpurse:
        -: 1135:
    #####: 1136:            updateCoins(currentPlayer, state, 2);
    #####: 1137:            for (i = 0; i < state->numPlayers; i++)
        -: 1138:            {
    #####: 1139:                if (i != currentPlayer)
        -: 1140:                {
    #####: 1141:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1142:                    {
    #####: 1143:                        if (state->hand[i][j] == copper)
        -: 1144:                        {
    #####: 1145:                            discardCard(j, i, state, 0);
    #####: 1146:                            break;
        -: 1147:                        }
    #####: 1148:                        if (j == state->handCount[i])
        -: 1149:                        {
    #####: 1150:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1151:                            {
    #####: 1152:                                if (DEBUG)
        -: 1153:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:                            }	
    #####: 1155:                            break;
        -: 1156:                        }		
        -: 1157:                    }
        -: 1158:
        -: 1159:                }
        -: 1160:
        -: 1161:            }				
        -: 1162:
        -: 1163:            //discard played card from hand
    #####: 1164:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:
        -: 1169:        case embargo: 
        -: 1170:            //+2 Coins
    #####: 1171:            state->coins = state->coins + 2;
        -: 1172:
        -: 1173:            //see if selected pile is in play
    #####: 1174:            if ( state->supplyCount[choice1] == -1 )
        -: 1175:            {
    #####: 1176:                return -1;
        -: 1177:            }
        -: 1178:
        -: 1179:            //add embargo token to selected supply pile
    #####: 1180:            state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:            //trash card
    #####: 1183:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:        case outpost:
    #####: 1187:           myoutpost(currentPlayer, state, handPos);
    #####: 1188:          break; 
        -: 1189:
        -: 1190:        case salvager:
        -: 1191:            //+1 buy
    #####: 1192:            state->numBuys++;
        -: 1193:
    #####: 1194:            if (choice1)
        -: 1195:            {
        -: 1196:                //gain coins equal to trashed card
    #####: 1197:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:                //trash card
    #####: 1199:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:            }
        -: 1201:
        -: 1202:            //discard card
    #####: 1203:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:        case sea_hag:
    #####: 1207:            for (i = 0; i < state->numPlayers; i++){
    #####: 1208:                if (i != currentPlayer){
    #####: 1209:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:                    state->discardCount[i]++;
    #####: 1211:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:                }
        -: 1213:            }
    #####: 1214:            return 0;
        -: 1215:
        -: 1216:        case treasure_map:
        -: 1217:            //search hand for another treasure_map
    #####: 1218:            index = -1;
    #####: 1219:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:            {
    #####: 1221:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:                {
    #####: 1223:                    index = i;
    #####: 1224:                    break;
        -: 1225:                }
        -: 1226:            }
    #####: 1227:            if (index > -1)
        -: 1228:            {
        -: 1229:                //trash both treasure cards
    #####: 1230:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:                discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:                //gain 4 Gold cards
    #####: 1234:                for (i = 0; i < 4; i++)
        -: 1235:                {
    #####: 1236:                    gainCard(gold, state, 1, currentPlayer);
        -: 1237:                }
        -: 1238:
        -: 1239:                //return success
    #####: 1240:                return 1;
        -: 1241:            }
        -: 1242:
        -: 1243:            //no second treasure_map found in hand
    #####: 1244:            return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:    return -1;
        -: 1248:}
        -: 1249:
    #####: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:    //if card is not trashed, added to Played pile 
    #####: 1254:    if (trashFlag < 1)
        -: 1255:    {
        -: 1256:        //add card to played pile
    #####: 1257:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:        state->playedCardCount++;
        -: 1259:    }
        -: 1260:
        -: 1261:    //set played card to -1
    #####: 1262:    state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:    //remove card from player's hand
    #####: 1265:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:        //reduce number of cards in hand
    #####: 1268:        state->handCount[currentPlayer]--;
        -: 1269:    }
    #####: 1270:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:        //reduce number of cards in hand
    #####: 1273:        state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:    else 	
        -: 1276:    {
        -: 1277:        //replace discarded card with last card in hand
    #####: 1278:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:        //set last card to -1
    #####: 1280:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:        //reduce number of cards in hand
    #####: 1282:        state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:    return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:    //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:        return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //added card for [whoseTurn] current player:
        -: 1299:    // toFlag = 0 : add to discard
        -: 1300:    // toFlag = 1 : add to deck
        -: 1301:    // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:    if (toFlag == 1)
        -: 1304:    {
    #####: 1305:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:        state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:    else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:        state->handCount[player]++;
        -: 1312:    }
        -: 1313:    else
        -: 1314:    {
    #####: 1315:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:        state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:    //decrease number in supply pile
    #####: 1320:    state->supplyCount[supplyPos]--;
        -: 1321:
    #####: 1322:    return 0;
        -: 1323:}
        -: 1324:
        1: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:    int i;
        -: 1328:
        -: 1329:    //reset coin count
        1: 1330:    state->coins = 0;
        -: 1331:
        -: 1332:    //add coins for each Treasure card in player's hand
        6: 1333:    for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
        5: 1335:        if (state->hand[player][i] == copper)
        -: 1336:        {
        4: 1337:            state->coins += 1;
        -: 1338:        }
        1: 1339:        else if (state->hand[player][i] == silver)
        -: 1340:        {
    #####: 1341:            state->coins += 2;
        -: 1342:        }
        1: 1343:        else if (state->hand[player][i] == gold)
        -: 1344:        {
    #####: 1345:            state->coins += 3;
        -: 1346:        }	
        -: 1347:    }	
        -: 1348:
        -: 1349:    //add bonus
        1: 1350:    state->coins += bonus;
        -: 1351:
        1: 1352:    return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:


 UnitTest2
Deals initial hand correctly
File 'dominion.c'
Lines executed:16.24% of 585
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "helper.h"
    #####:    8:int councilroom(int currentPlayer, struct gameState *  state, int handPos){
    #####:    9:    int i = 0;  
        -:   10:    //+5 Cards
    #####:   11:      for (i = 0; i < 5; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:      //+1 Buy
    #####:   17:      state->numBuys++;
        -:   18:
        -:   19:      //+1 Action
    #####:   20:      state->numActions++;
        -:   21:			
        -:   22:      //Each other player draws a card
    #####:   23:      for (i = 0; i < state->numPlayers; i++)
        -:   24:	{
    #####:   25:	  if ( i != currentPlayer )
        -:   26:	    {
    #####:   27:	      drawCard(i, state);
    #####:   28:	      drawCard(i, state);
        -:   29:	    }
        -:   30:	}
        -:   31:			
        -:   32:      //put played card in played card pile
    #####:   33:      discardCard(handPos, currentPlayer, state, 0);
        -:   34:			
    #####:   35:      return 0;
        -:   36:}
    #####:   37:int mysmithy (int currentPlayer, struct gameState * state, int handPos){
        -:   38:    int i;
        -:   39:    //+3 Cards
    #####:   40:    for (i = 0; i < 9; i++)
        -:   41:    {
    #####:   42:        drawCard(currentPlayer, state);
        -:   43:    }		
        -:   44:    //discard card from hand
    #####:   45:    discardCard(handPos, currentPlayer, state, 0);
    #####:   46:    return 0;
        -:   47:}
        -:   48:
    #####:   49:int myvillage(int currentPlayer, struct gameState * state, int handPos){
        -:   50:    //+1 Card
    #####:   51:    drawCard(currentPlayer, state);
        -:   52:
        -:   53:    //+2 Actions
    #####:   54:    state->numActions = state->numActions + 1;
        -:   55:
        -:   56:    //discard played card from hand
    #####:   57:    discardCard(handPos, currentPlayer, state, 0);
    #####:   58:    return 0;
        -:   59:}
    #####:   60:int mygreathall(int currentPlayer, struct gameState * state, int handPos){
        -:   61:            //+1 Card
    #####:   62:            drawCard(currentPlayer, state);
        -:   63:
        -:   64:            //+1 Actions
    #####:   65:            state->numActions++;
        -:   66:
        -:   67:            //discard card from hand
    #####:   68:            discardCard(handPos, currentPlayer, state, 0);
    #####:   69:            return 0;
        -:   70:}
        -:   71:
    #####:   72:int myoutpost(int currentPlayer, struct gameState * state, int handPos){
        -:   73:            //set outpost flag
    #####:   74:            state->outpostPlayed+2;
        -:   75:
        -:   76:            //discard card
    #####:   77:            discardCard(handPos, currentPlayer, state, 0);
    #####:   78:            return 0;
        -:   79:}
       30:   80:int compare(const void* a, const void* b) {
       30:   81:    if (*(int*)a > *(int*)b)
    #####:   82:        return 1;
       30:   83:    if (*(int*)a < *(int*)b)
        8:   84:        return -1;
       22:   85:    return 0;
        -:   86:}
        -:   87:
        3:   88:struct gameState* newGame() {
        3:   89:    struct gameState* g = malloc(sizeof(struct gameState));
        3:   90:    return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:        int k8, int k9, int k10) {
    #####:   95:    int* k = malloc(10 * sizeof(int));
    #####:   96:    k[0] = k1;
    #####:   97:    k[1] = k2;
    #####:   98:    k[2] = k3;
    #####:   99:    k[3] = k4;
    #####:  100:    k[4] = k5;
    #####:  101:    k[5] = k6;
    #####:  102:    k[6] = k7;
    #####:  103:    k[7] = k8;
    #####:  104:    k[8] = k9;
    #####:  105:    k[9] = k10;
    #####:  106:    return k;
        -:  107:}
        -:  108:
        1:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:        struct gameState *state) {
        -:  111:
        -:  112:    int i;
        -:  113:    int j;
        -:  114:    int it;			
        -:  115:    //set up random number generator
        1:  116:    SelectStream(1);
        1:  117:    PutSeed((long)randomSeed);
        -:  118:
        -:  119:    //check number of players
        1:  120:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
    #####:  122:        return -1;
        -:  123:    }
        -:  124:
        -:  125:    //set number of players
        1:  126:    state->numPlayers = numPlayers;
        -:  127:
        -:  128:    //check selected kingdom cards are different
       11:  129:    for (i = 0; i < 10; i++)
        -:  130:    {
      110:  131:        for (j = 0; j < 10; j++)
        -:  132:        {
      100:  133:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:            {
    #####:  135:                return -1;
        -:  136:            }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:    //initialize supply
        -:  142:    ///////////////////////////////
        -:  143:
        -:  144:    //set number of Curse cards
        1:  145:    if (numPlayers == 2)
        -:  146:    {
        1:  147:        state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:    else if (numPlayers == 3)
        -:  150:    {
    #####:  151:        state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:    else
        -:  154:    {
    #####:  155:        state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:    //set number of Victory cards
        1:  159:    if (numPlayers == 2)
        -:  160:    {
        1:  161:        state->supplyCount[estate] = 8;
        1:  162:        state->supplyCount[duchy] = 8;
        1:  163:        state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:        state->supplyCount[estate] = 12;
    #####:  168:        state->supplyCount[duchy] = 12;
    #####:  169:        state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:    //set number of Treasure cards
        1:  173:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  174:    state->supplyCount[silver] = 40;
        1:  175:    state->supplyCount[gold] = 30;
        -:  176:
        -:  177:    //set number of Kingdom cards
       21:  178:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
      165:  180:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:        {
      155:  182:            if (kingdomCards[j] == i)
        -:  183:            {
        -:  184:                //check if card is a 'Victory' Kingdom card
       12:  185:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:                {
        2:  187:                    if (numPlayers == 2){ 
        2:  188:                        state->supplyCount[i] = 8; 
        -:  189:                    }
    #####:  190:                    else{ state->supplyCount[i] = 12; }
        -:  191:                }
        -:  192:                else
        -:  193:                {
        8:  194:                    state->supplyCount[i] = 10;
        -:  195:                }
       10:  196:                break;
        -:  197:            }
        -:  198:            else    //card is not in the set choosen for the game
        -:  199:            {
      145:  200:                state->supplyCount[i] = -1;
        -:  201:            }
        -:  202:        }
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:    ////////////////////////
        -:  207:    //supply intilization complete
        -:  208:
        -:  209:    //set player decks
        3:  210:    for (i = 0; i < numPlayers; i++)
        -:  211:    {
        2:  212:        state->deckCount[i] = 0;
        8:  213:        for (j = 0; j < 3; j++)
        -:  214:        {
        6:  215:            state->deck[i][j] = estate;
        6:  216:            state->deckCount[i]++;
        -:  217:        }
       16:  218:        for (j = 3; j < 10; j++)
        -:  219:        {
       14:  220:            state->deck[i][j] = copper;
       14:  221:            state->deckCount[i]++;		
        -:  222:        }
        -:  223:    }
        -:  224:
        -:  225:    //shuffle player decks
        3:  226:    for (i = 0; i < numPlayers; i++)
        -:  227:    {
        2:  228:        if ( shuffle(i, state) < 0 )
        -:  229:        {
    #####:  230:            return -1;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    //draw player hands
        3:  235:    for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:        //initialize hand size to zero
        2:  238:        state->handCount[i] = 0;
        2:  239:        state->discardCount[i] = 0;
        -:  240:        //draw 5 cards
       12:  241:         for (j = 0; j < 5; j++)
        -:  242:        	{
       10:  243:        	  drawCard(i, state);
        -:  244:        	}
        -:  245:    }
        -:  246:
        -:  247:    //set embargo tokens to 0 for all supply piles
       28:  248:    for (i = 0; i <= treasure_map; i++)
        -:  249:    {
       27:  250:        state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:    //initialize first player's turn
        1:  254:    state->outpostPlayed = 0;
        1:  255:    state->phase = 0;
        1:  256:    state->numActions = 1;
        1:  257:    state->numBuys = 1;
        1:  258:    state->playedCardCount = 0;
        1:  259:    state->whoseTurn = 0;
        1:  260:    state->handCount[state->whoseTurn] = 0;
        -:  261:    //int it; move to top
        -:  262:
        -:  263:    //Moved draw cards to here, only drawing at the start of a turn
        6:  264:    for (it = 0; it < 5; it++){
        5:  265:        drawCard(state->whoseTurn, state);
        -:  266:    }
        -:  267:
        1:  268:    updateCoins(state->whoseTurn, state, 0);
        -:  269:
        1:  270:    return 0;
        -:  271:}
        -:  272:
        2:  273:int shuffle(int player, struct gameState *state) {
        -:  274:
        -:  275:
        -:  276:    int newDeck[MAX_DECK];
        2:  277:    int newDeckPos = 0;
        -:  278:    int card;
        -:  279:    int i;
        -:  280:
        2:  281:    if (state->deckCount[player] < 1)
    #####:  282:        return -1;
        2:  283:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
       24:  286:    while (state->deckCount[player] > 0) {
       20:  287:        card = floor(Random() * state->deckCount[player]);
       20:  288:        newDeck[newDeckPos] = state->deck[player][card];
       20:  289:        newDeckPos++;
       80:  290:        for (i = card; i < state->deckCount[player]-1; i++) {
       60:  291:            state->deck[player][i] = state->deck[player][i+1];
        -:  292:        }
       20:  293:        state->deckCount[player]--;
        -:  294:    }
       22:  295:    for (i = 0; i < newDeckPos; i++) {
       20:  296:        state->deck[player][i] = newDeck[i];
       20:  297:        state->deckCount[player]++;
        -:  298:    }
        -:  299:
        2:  300:    return 0;
        -:  301:}
        -:  302:
    #####:  303:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  304:{	
        -:  305:    int card;
    #####:  306:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  307:
        -:  308:    //check if it is the right phase
    #####:  309:    if (state->phase != 0)
        -:  310:    {
    #####:  311:        return -1;
        -:  312:    }
        -:  313:
        -:  314:    //check if player has enough actions
    #####:  315:    if ( state->numActions < 1 )
        -:  316:    {
    #####:  317:        return -1;
        -:  318:    }
        -:  319:
        -:  320:    //get card played
    #####:  321:    card = handCard(handPos, state);
        -:  322:
        -:  323:    //check if selected card is an action
    #####:  324:    if ( card < adventurer || card > treasure_map )
        -:  325:    {
    #####:  326:        return -1;
        -:  327:    }
        -:  328:
        -:  329:    //play card
    #####:  330:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  331:    {
    #####:  332:        return -1;
        -:  333:    }
        -:  334:
        -:  335:    //reduce number of actions
    #####:  336:    state->numActions--;
        -:  337:
        -:  338:    //update coins (Treasure cards may be added with card draws)
    #####:  339:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  340:
    #####:  341:    return 0;
        -:  342:}
        -:  343:
    #####:  344:int buyCard(int supplyPos, struct gameState *state) {
        -:  345:    int who;
    #####:  346:    if (DEBUG){
        -:  347:        printf("Entering buyCard...\n");
        -:  348:    }
        -:  349:
        -:  350:    // I don't know what to do about the phase thing.
        -:  351:
    #####:  352:    who = state->whoseTurn;
        -:  353:
    #####:  354:    if (state->numBuys < 1){
    #####:  355:        if (DEBUG)
        -:  356:            printf("You do not have any buys left\n");
    #####:  357:        return -1;
    #####:  358:    } else if (supplyCount(supplyPos, state) <1){
    #####:  359:        if (DEBUG)
        -:  360:            printf("There are not any of that type of card left\n");
    #####:  361:        return -1;
    #####:  362:    } else if (state->coins < getCost(supplyPos)){
    #####:  363:        if (DEBUG) 
        -:  364:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  365:        return -1;
        -:  366:    } else {
    #####:  367:        state->phase=1;
        -:  368:        //state->supplyCount[supplyPos]--;
    #####:  369:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  370:
    #####:  371:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  372:        state->numBuys--;
    #####:  373:        if (DEBUG)
        -:  374:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  375:    }
        -:  376:
        -:  377:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  378:    //state->discardCount[who]++;
        -:  379:
    #####:  380:    return 0;
        -:  381:}
        -:  382:
    #####:  383:int numHandCards(struct gameState *state) {
    #####:  384:    return state->handCount[ whoseTurn(state) ];
        -:  385:}
        -:  386:
    #####:  387:int handCard(int handPos, struct gameState *state) {
    #####:  388:    int currentPlayer = whoseTurn(state);
    #####:  389:    return state->hand[currentPlayer][handPos];
        -:  390:}
        -:  391:
    #####:  392:int supplyCount(int card, struct gameState *state) {
    #####:  393:    return state->supplyCount[card];
        -:  394:}
        -:  395:
    #####:  396:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  397:    int i;
    #####:  398:    int count = 0;
        -:  399:
    #####:  400:    for (i = 0; i < state->deckCount[player]; i++)
        -:  401:    {
    #####:  402:        if (state->deck[player][i] == card) count++;
        -:  403:    }
        -:  404:
    #####:  405:    for (i = 0; i < state->handCount[player]; i++)
        -:  406:    {
    #####:  407:        if (state->hand[player][i] == card) count++;
        -:  408:    }
        -:  409:
    #####:  410:    for (i = 0; i < state->discardCount[player]; i++)
        -:  411:    {
    #####:  412:        if (state->discard[player][i] == card) count++;
        -:  413:    }
        -:  414:
    #####:  415:    return count;
        -:  416:}
        -:  417:
    #####:  418:int whoseTurn(struct gameState *state) {
    #####:  419:    return state->whoseTurn;
        -:  420:}
        -:  421:
    #####:  422:int endTurn(struct gameState *state) {
        -:  423:    int k;
        -:  424:    int i;
    #####:  425:    int currentPlayer = whoseTurn(state);
        -:  426:
        -:  427:    //Discard hand
    #####:  428:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  429:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  430:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  431:    }
    #####:  432:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  433:
        -:  434:    //Code for determining the player
    #####:  435:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  436:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  437:    }
        -:  438:    else{
    #####:  439:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  440:    }
        -:  441:
    #####:  442:    state->outpostPlayed = 0;
    #####:  443:    state->phase = 0;
    #####:  444:    state->numActions = 1;
    #####:  445:    state->coins = 0;
    #####:  446:    state->numBuys = 1;
    #####:  447:    state->playedCardCount = 0;
    #####:  448:    state->handCount[state->whoseTurn] = 0;
        -:  449:
        -:  450:    //int k; move to top
        -:  451:    //Next player draws hand
    #####:  452:    for (k = 0; k < 5; k++){
    #####:  453:        drawCard(state->whoseTurn, state);//Draw a card
        -:  454:    }
        -:  455:
        -:  456:    //Update money
    #####:  457:    updateCoins(state->whoseTurn, state , 0);
        -:  458:
    #####:  459:    return 0;
        -:  460:}
        -:  461:
    #####:  462:int isGameOver(struct gameState *state) {
        -:  463:    int i;
        -:  464:    int j;
        -:  465:
        -:  466:    //if stack of Province cards is empty, the game ends
    #####:  467:    if (state->supplyCount[province] == 0)
        -:  468:    {
    #####:  469:        return 1;
        -:  470:    }
        -:  471:
        -:  472:    //if three supply pile are at 0, the game ends
    #####:  473:    j = 0;
    #####:  474:    for (i = 0; i < 25; i++)
        -:  475:    {
    #####:  476:        if (state->supplyCount[i] == 0)
        -:  477:        {
    #####:  478:            j++;
        -:  479:        }
        -:  480:    }
    #####:  481:    if ( j >= 3)
        -:  482:    {
    #####:  483:        return 1;
        -:  484:    }
        -:  485:
    #####:  486:    return 0;
        -:  487:}
        -:  488:
    #####:  489:int scoreFor (int player, struct gameState *state) {
        -:  490:
        -:  491:    int i;
    #####:  492:    int score = 0;
        -:  493:    //score from hand
    #####:  494:    for (i = 0; i < state->handCount[player]; i++)
        -:  495:    {
    #####:  496:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  497:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  498:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  499:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  500:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  501:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  502:    }
        -:  503:
        -:  504:    //score from discard
    #####:  505:    for (i = 0; i < state->discardCount[player]; i++)
        -:  506:    {
    #####:  507:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  508:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  509:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  510:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  511:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  512:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  519:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  520:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  521:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  522:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  523:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  524:    }
        -:  525:
    #####:  526:    return score;
        -:  527:}
        -:  528:
    #####:  529:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  530:    int i;	
        -:  531:    int j;
        -:  532:    int highScore;
        -:  533:    int currentPlayer;
        -:  534:
        -:  535:    //get score for each player
    #####:  536:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
        -:  538:        //set unused player scores to -9999
    #####:  539:        if (i >= state->numPlayers)
        -:  540:        {
    #####:  541:            players[i] = -9999;
        -:  542:        }
        -:  543:        else
        -:  544:        {
    #####:  545:            players[i] = scoreFor (i, state);
        -:  546:        }
        -:  547:    }
        -:  548:
        -:  549:    //find highest score
    #####:  550:    j = 0;
    #####:  551:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:        if (players[i] > players[j])
        -:  554:        {
    #####:  555:            j = i;
        -:  556:        }
        -:  557:    }
    #####:  558:    highScore = players[j];
        -:  559:
        -:  560:    //add 1 to players who had less turns
    #####:  561:    currentPlayer = whoseTurn(state);
    #####:  562:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  563:    {
    #####:  564:        if ( players[i] == highScore && i > currentPlayer )
        -:  565:        {
    #####:  566:            players[i]++;
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    //find new highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  573:    {
    #####:  574:        if ( players[i] > players[j] )
        -:  575:        {
    #####:  576:            j = i;
        -:  577:        }
        -:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //set winners in array to 1 and rest to 0
    #####:  582:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  583:    {
    #####:  584:        if ( players[i] == highScore )
        -:  585:        {
    #####:  586:            players[i] = 1;
        -:  587:        }
        -:  588:        else
        -:  589:        {
    #####:  590:            players[i] = 0;
        -:  591:        }
        -:  592:    }
        -:  593:
    #####:  594:    return 0;
        -:  595:}
        -:  596:
       15:  597:int drawCard(int player, struct gameState *state)
        -:  598:{	int count;
        -:  599:    int deckCounter;
       15:  600:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  601:
        -:  602:        //Step 1 Shuffle the discard pile back into a deck
        -:  603:        int i;
        -:  604:        //Move discard to deck
    #####:  605:        for (i = 0; i < state->discardCount[player];i++){
    #####:  606:            state->deck[player][i] = state->discard[player][i];
    #####:  607:            state->discard[player][i] = -1;
        -:  608:        }
        -:  609:
    #####:  610:        state->deckCount[player] = state->discardCount[player];
    #####:  611:        state->discardCount[player] = 0;//Reset discard
        -:  612:
        -:  613:        //Shufffle the deck
    #####:  614:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  615:
    #####:  616:        if (DEBUG){//Debug statements
        -:  617:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  618:        }
        -:  619:
    #####:  620:        state->discardCount[player] = 0;
        -:  621:
        -:  622:        //Step 2 Draw Card
    #####:  623:        count = state->handCount[player];//Get current player's hand count
        -:  624:
    #####:  625:        if (DEBUG){//Debug statements
        -:  626:            printf("Current hand count: %d\n", count);
        -:  627:        }
        -:  628:
    #####:  629:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  630:
    #####:  631:        if (deckCounter == 0)
    #####:  632:            return -1;
        -:  633:
    #####:  634:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  635:        state->deckCount[player]--;
    #####:  636:        state->handCount[player]++;//Increment hand count
        -:  637:    }
        -:  638:
        -:  639:    else{
       15:  640:        int count = state->handCount[player];//Get current hand count for player
        -:  641:        int deckCounter;
       15:  642:        if (DEBUG){//Debug statements
        -:  643:            printf("Current hand count: %d\n", count);
        -:  644:        }
        -:  645:
       15:  646:        deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  647:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  648:        state->deckCount[player]--;
       15:  649:        state->handCount[player]++;//Increment hand count
        -:  650:    }
        -:  651:
       15:  652:    return 0;
        -:  653:}
        -:  654:
    #####:  655:int getCost(int cardNumber)
        -:  656:{
    #####:  657:    switch( cardNumber ) 
        -:  658:    {
        -:  659:        case curse:
    #####:  660:            return 0;
        -:  661:        case estate:
    #####:  662:            return 2;
        -:  663:        case duchy:
    #####:  664:            return 5;
        -:  665:        case province:
    #####:  666:            return 8;
        -:  667:        case copper:
    #####:  668:            return 0;
        -:  669:        case silver:
    #####:  670:            return 3;
        -:  671:        case gold:
    #####:  672:            return 6;
        -:  673:        case adventurer:
    #####:  674:            return 6;
        -:  675:        case council_room:
    #####:  676:            return 5;
        -:  677:        case feast:
    #####:  678:            return 4;
        -:  679:        case gardens:
    #####:  680:            return 4;
        -:  681:        case mine:
    #####:  682:            return 5;
        -:  683:        case remodel:
    #####:  684:            return 4;
        -:  685:        case smithy:
    #####:  686:            return 4;
        -:  687:        case village:
    #####:  688:            return 3;
        -:  689:        case baron:
    #####:  690:            return 4;
        -:  691:        case great_hall:
    #####:  692:            return 3;
        -:  693:        case minion:
    #####:  694:            return 5;
        -:  695:        case steward:
    #####:  696:            return 3;
        -:  697:        case tribute:
    #####:  698:            return 5;
        -:  699:        case ambassador:
    #####:  700:            return 3;
        -:  701:        case cutpurse:
    #####:  702:            return 4;
        -:  703:        case embargo: 
    #####:  704:            return 2;
        -:  705:        case outpost:
    #####:  706:            return 5;
        -:  707:        case salvager:
    #####:  708:            return 4;
        -:  709:        case sea_hag:
    #####:  710:            return 4;
        -:  711:        case treasure_map:
    #####:  712:            return 4;
        -:  713:    }
        -:  714:
    #####:  715:    return -1;
        -:  716:}
        -:  717:
    #####:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:    int i;
        -:  721:    int j;
        -:  722:    int k;
        -:  723:    int x;
        -:  724:    int index;
    #####:  725:    int currentPlayer = whoseTurn(state);
    #####:  726:    int nextPlayer = currentPlayer + 1;
        -:  727:
    #####:  728:    int tributeRevealedCards[2] = {-1, -1};
        -:  729:    int temphand[MAX_HAND];// moved above the if statement
    #####:  730:    int drawntreasure=0;
        -:  731:    int cardDrawn;
    #####:  732:    int z = 0;// this is the counter for the temp hand
    #####:  733:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:        nextPlayer = 0;
        -:  735:    }
        -:  736:
        -:  737:
        -:  738:    //uses switch to select card and perform actions
    #####:  739:    switch( card ) 
        -:  740:    {
        -:  741:        case adventurer:
    #####:  742:            while(drawntreasure<2){
    #####:  743:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  744:                    shuffle(currentPlayer, state);
        -:  745:                }
    #####:  746:                drawCard(currentPlayer, state);
    #####:  747:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  748:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  749:                    drawntreasure++;
        -:  750:                else{
    #####:  751:                    temphand[z]=cardDrawn;
    #####:  752:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  753:                    z++;
        -:  754:                }
        -:  755:            }
    #####:  756:            while(z-1>=0){
    #####:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  758:                z=z-1;
        -:  759:            }
    #####:  760:            return 0;			
        -:  761:        case council_room:
    #####:  762:            councilroom(currentPlayer, state, handPos);
    #####:  763:            break;	
        -:  764:            return 0;	
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
    #####:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:
    #####:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:
    #####:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:
    #####:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:
    #####:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:
        -:  806:                }
        -:  807:            }     
        -:  808:
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:
    #####:  816:            return 0;
        -:  817:
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);			
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:
    #####:  854:            return 0;
        -:  855:
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);			
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
    #####:  878:            return 0;	
        -:  879:        
        -:  880:        case smithy:
    #####:  881:            mysmithy(currentPlayer, state, handPos);
    #####:  882:            break;
        -:  883:
        -:  884:        case village:
    #####:  885:            myvillage(currentPlayer, state, handPos);
    #####:  886:            break;
        -:  887:
        -:  888:        case baron:
    #####:  889:            state->numBuys++;//Increase buys by 1!
    #####:  890:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:                int p = 0;//Iterator for hand!
    #####:  892:                int card_not_discarded = 1;//Flag for discard set!
    #####:  893:                while(card_not_discarded){
    #####:  894:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:                        state->discardCount[currentPlayer]++;
    #####:  898:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:                        }
    #####:  901:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:                        state->handCount[currentPlayer]--;
    #####:  903:                        card_not_discarded = 0;//Exit the loop
        -:  904:                    }
    #####:  905:                    else if (p > state->handCount[currentPlayer]){
    #####:  906:                        if(DEBUG) {
        -:  907:                            printf("No estate cards in your hand, invalid choice\n");
        -:  908:                            printf("Must gain an estate if there are any\n");
        -:  909:                        }
    #####:  910:                        if (supplyCount(estate, state) > 0){
    #####:  911:                            gainCard(estate, state, 0, currentPlayer);
    #####:  912:                            state->supplyCount[estate]--;//Decrement estates
    #####:  913:                            if (supplyCount(estate, state) == 0){
    #####:  914:                                isGameOver(state);
        -:  915:                            }
        -:  916:                        }
    #####:  917:                        card_not_discarded = 0;//Exit the loop
        -:  918:                    }
        -:  919:
        -:  920:                    else{
    #####:  921:                        p++;//Next card
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:            else{
    #####:  927:                if (supplyCount(estate, state) > 0){
    #####:  928:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  930:                    if (supplyCount(estate, state) == 0){
    #####:  931:                        isGameOver(state);
        -:  932:                    }
        -:  933:                }
        -:  934:            }
        -:  935:
        -:  936:
    #####:  937:            return 0;
        -:  938:
        -:  939:        case great_hall:
    #####:  940:            mygreathall(currentPlayer, state, handPos);
    #####:  941:            break;
        -:  942:
        -:  943:        case minion:
        -:  944:            //+1 action
    #####:  945:            state->numActions++;
        -:  946:
        -:  947:            //discard card from hand
    #####:  948:            discardCard(handPos, currentPlayer, state, 0);
        -:  949:
    #####:  950:            if (choice1)		//+2 coins
        -:  951:            {
    #####:  952:                state->coins = state->coins + 2;
        -:  953:            }
        -:  954:
    #####:  955:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:            {
        -:  957:                //discard hand
    #####:  958:                while(numHandCards(state) > 0)
        -:  959:                {
    #####:  960:                    discardCard(handPos, currentPlayer, state, 0);
        -:  961:                }
        -:  962:
        -:  963:                //draw 4
    #####:  964:                for (i = 0; i < 4; i++)
        -:  965:                {
    #####:  966:                    drawCard(currentPlayer, state);
        -:  967:                }
        -:  968:
        -:  969:                //other players discard hand and redraw if hand size > 4
    #####:  970:                for (i = 0; i < state->numPlayers; i++)
        -:  971:                {
    #####:  972:                    if (i != currentPlayer)
        -:  973:                    {
    #####:  974:                        if ( state->handCount[i] > 4 )
        -:  975:                        {
        -:  976:                            //discard hand
    #####:  977:                            while( state->handCount[i] > 0 )
        -:  978:                            {
    #####:  979:                                discardCard(handPos, i, state, 0);
        -:  980:                            }
        -:  981:
        -:  982:                            //draw 4
    #####:  983:                            for (j = 0; j < 4; j++)
        -:  984:                            {
    #####:  985:                                drawCard(i, state);
        -:  986:                            }
        -:  987:                        }
        -:  988:                    }
        -:  989:                }
        -:  990:
        -:  991:            }
    #####:  992:            return 0;
        -:  993:
        -:  994:        case steward:
    #####:  995:            if (choice1 == 1)
        -:  996:            {
        -:  997:                //+2 cards
    #####:  998:                drawCard(currentPlayer, state);
    #####:  999:                drawCard(currentPlayer, state);
        -: 1000:            }
    #####: 1001:            else if (choice1 == 2)
        -: 1002:            {
        -: 1003:                //+2 coins
    #####: 1004:                state->coins = state->coins + 2;
        -: 1005:            }
        -: 1006:            else
        -: 1007:            {
        -: 1008:                //trash 2 cards in hand
    #####: 1009:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:                discardCard(choice3, currentPlayer, state, 1);
        -: 1011:            }
        -: 1012:
        -: 1013:            //discard card from hand
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:            return 0;
        -: 1016:
        -: 1017:        case tribute:
    #####: 1018:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:                if (state->deckCount[nextPlayer] > 0){
    #####: 1020:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:                    state->deckCount[nextPlayer]--;
        -: 1022:                }
    #####: 1023:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:                    state->discardCount[nextPlayer]--;
        -: 1026:                }
        -: 1027:                else{
        -: 1028:                    //No Card to Reveal
    #####: 1029:                    if (DEBUG){
        -: 1030:                        printf("No cards to reveal\n");
        -: 1031:                    }
        -: 1032:                }
        -: 1033:            }
        -: 1034:
        -: 1035:            else{
    #####: 1036:                if (state->deckCount[nextPlayer] == 0){
    #####: 1037:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:                        state->deckCount[nextPlayer]++;
    #####: 1040:                        state->discard[nextPlayer][i] = -1;
    #####: 1041:                        state->discardCount[nextPlayer]--;
        -: 1042:                    }
        -: 1043:
    #####: 1044:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:                } 
    #####: 1046:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
    #####: 1049:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
        -: 1052:            }    
        -: 1053:
    #####: 1054:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:                state->playedCardCount++;
    #####: 1057:                tributeRevealedCards[1] = -1;
        -: 1058:            }
        -: 1059:
    #####: 1060:            for (i = 0; i <= 2; i ++){
    #####: 1061:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:                    state->coins += 2;
        -: 1063:                }
        -: 1064:
    #####: 1065:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:                    drawCard(currentPlayer, state);
    #####: 1067:                    drawCard(currentPlayer, state);
        -: 1068:                }
        -: 1069:                else{//Action Card
    #####: 1070:                    state->numActions = state->numActions + 2;
        -: 1071:                }
        -: 1072:            }
        -: 1073:
    #####: 1074:            return 0;
        -: 1075:
        -: 1076:        case ambassador:
    #####: 1077:            j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:            if (choice2 > 2 || choice2 < 0)
        -: 1080:            {
    #####: 1081:                return -1;				
        -: 1082:            }
        -: 1083:
    #####: 1084:            if (choice1 == handPos)
        -: 1085:            {
    #####: 1086:                return -1;
        -: 1087:            }
        -: 1088:
    #####: 1089:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:            {
    #####: 1091:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:                {
    #####: 1093:                    j++;
        -: 1094:                }
        -: 1095:            }
    #####: 1096:            if (j < choice2)
        -: 1097:            {
    #####: 1098:                return -1;				
        -: 1099:            }
        -: 1100:
    #####: 1101:            if (DEBUG) 
        -: 1102:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:            //increase supply count for choosen card by amount being discarded
    #####: 1105:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:            //each other player gains a copy of revealed card
    #####: 1108:            for (i = 0; i < state->numPlayers; i++)
        -: 1109:            {
    #####: 1110:                if (i != currentPlayer)
        -: 1111:                {
    #####: 1112:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:                }
        -: 1114:            }
        -: 1115:
        -: 1116:            //discard played card from hand
    #####: 1117:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:            //trash copies of cards returned to supply
    #####: 1120:            for (j = 0; j < choice2; j++)
        -: 1121:            {
    #####: 1122:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:                {
    #####: 1124:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:                    {
    #####: 1126:                        discardCard(i, currentPlayer, state, 1);
    #####: 1127:                        break;
        -: 1128:                    }
        -: 1129:                }
        -: 1130:            }			
        -: 1131:
    #####: 1132:            return 0;
        -: 1133:
        -: 1134:        case cutpurse:
        -: 1135:
    #####: 1136:            updateCoins(currentPlayer, state, 2);
    #####: 1137:            for (i = 0; i < state->numPlayers; i++)
        -: 1138:            {
    #####: 1139:                if (i != currentPlayer)
        -: 1140:                {
    #####: 1141:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1142:                    {
    #####: 1143:                        if (state->hand[i][j] == copper)
        -: 1144:                        {
    #####: 1145:                            discardCard(j, i, state, 0);
    #####: 1146:                            break;
        -: 1147:                        }
    #####: 1148:                        if (j == state->handCount[i])
        -: 1149:                        {
    #####: 1150:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1151:                            {
    #####: 1152:                                if (DEBUG)
        -: 1153:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:                            }	
    #####: 1155:                            break;
        -: 1156:                        }		
        -: 1157:                    }
        -: 1158:
        -: 1159:                }
        -: 1160:
        -: 1161:            }				
        -: 1162:
        -: 1163:            //discard played card from hand
    #####: 1164:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:
        -: 1169:        case embargo: 
        -: 1170:            //+2 Coins
    #####: 1171:            state->coins = state->coins + 2;
        -: 1172:
        -: 1173:            //see if selected pile is in play
    #####: 1174:            if ( state->supplyCount[choice1] == -1 )
        -: 1175:            {
    #####: 1176:                return -1;
        -: 1177:            }
        -: 1178:
        -: 1179:            //add embargo token to selected supply pile
    #####: 1180:            state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:            //trash card
    #####: 1183:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:        case outpost:
    #####: 1187:           myoutpost(currentPlayer, state, handPos);
    #####: 1188:          break; 
        -: 1189:
        -: 1190:        case salvager:
        -: 1191:            //+1 buy
    #####: 1192:            state->numBuys++;
        -: 1193:
    #####: 1194:            if (choice1)
        -: 1195:            {
        -: 1196:                //gain coins equal to trashed card
    #####: 1197:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:                //trash card
    #####: 1199:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:            }
        -: 1201:
        -: 1202:            //discard card
    #####: 1203:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:        case sea_hag:
    #####: 1207:            for (i = 0; i < state->numPlayers; i++){
    #####: 1208:                if (i != currentPlayer){
    #####: 1209:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:                    state->discardCount[i]++;
    #####: 1211:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:                }
        -: 1213:            }
    #####: 1214:            return 0;
        -: 1215:
        -: 1216:        case treasure_map:
        -: 1217:            //search hand for another treasure_map
    #####: 1218:            index = -1;
    #####: 1219:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:            {
    #####: 1221:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:                {
    #####: 1223:                    index = i;
    #####: 1224:                    break;
        -: 1225:                }
        -: 1226:            }
    #####: 1227:            if (index > -1)
        -: 1228:            {
        -: 1229:                //trash both treasure cards
    #####: 1230:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:                discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:                //gain 4 Gold cards
    #####: 1234:                for (i = 0; i < 4; i++)
        -: 1235:                {
    #####: 1236:                    gainCard(gold, state, 1, currentPlayer);
        -: 1237:                }
        -: 1238:
        -: 1239:                //return success
    #####: 1240:                return 1;
        -: 1241:            }
        -: 1242:
        -: 1243:            //no second treasure_map found in hand
    #####: 1244:            return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:    return -1;
        -: 1248:}
        -: 1249:
    #####: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:    //if card is not trashed, added to Played pile 
    #####: 1254:    if (trashFlag < 1)
        -: 1255:    {
        -: 1256:        //add card to played pile
    #####: 1257:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:        state->playedCardCount++;
        -: 1259:    }
        -: 1260:
        -: 1261:    //set played card to -1
    #####: 1262:    state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:    //remove card from player's hand
    #####: 1265:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:        //reduce number of cards in hand
    #####: 1268:        state->handCount[currentPlayer]--;
        -: 1269:    }
    #####: 1270:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:        //reduce number of cards in hand
    #####: 1273:        state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:    else 	
        -: 1276:    {
        -: 1277:        //replace discarded card with last card in hand
    #####: 1278:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:        //set last card to -1
    #####: 1280:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:        //reduce number of cards in hand
    #####: 1282:        state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:    return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:    //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:        return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //added card for [whoseTurn] current player:
        -: 1299:    // toFlag = 0 : add to discard
        -: 1300:    // toFlag = 1 : add to deck
        -: 1301:    // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:    if (toFlag == 1)
        -: 1304:    {
    #####: 1305:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:        state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:    else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:        state->handCount[player]++;
        -: 1312:    }
        -: 1313:    else
        -: 1314:    {
    #####: 1315:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:        state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:    //decrease number in supply pile
    #####: 1320:    state->supplyCount[supplyPos]--;
        -: 1321:
    #####: 1322:    return 0;
        -: 1323:}
        -: 1324:
        1: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:    int i;
        -: 1328:
        -: 1329:    //reset coin count
        1: 1330:    state->coins = 0;
        -: 1331:
        -: 1332:    //add coins for each Treasure card in player's hand
        6: 1333:    for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
        5: 1335:        if (state->hand[player][i] == copper)
        -: 1336:        {
        4: 1337:            state->coins += 1;
        -: 1338:        }
        1: 1339:        else if (state->hand[player][i] == silver)
        -: 1340:        {
    #####: 1341:            state->coins += 2;
        -: 1342:        }
        1: 1343:        else if (state->hand[player][i] == gold)
        -: 1344:        {
    #####: 1345:            state->coins += 3;
        -: 1346:        }	
        -: 1347:    }	
        -: 1348:
        -: 1349:    //add bonus
        1: 1350:    state->coins += bonus;
        -: 1351:
        1: 1352:    return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:


UnitTest3
File 'dominion.c'
Lines executed:2.05% of 585
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "helper.h"
    #####:    8:int councilroom(int currentPlayer, struct gameState *  state, int handPos){
    #####:    9:    int i = 0;  
        -:   10:    //+5 Cards
    #####:   11:      for (i = 0; i < 5; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:      //+1 Buy
    #####:   17:      state->numBuys++;
        -:   18:
        -:   19:      //+1 Action
    #####:   20:      state->numActions++;
        -:   21:			
        -:   22:      //Each other player draws a card
    #####:   23:      for (i = 0; i < state->numPlayers; i++)
        -:   24:	{
    #####:   25:	  if ( i != currentPlayer )
        -:   26:	    {
    #####:   27:	      drawCard(i, state);
    #####:   28:	      drawCard(i, state);
        -:   29:	    }
        -:   30:	}
        -:   31:			
        -:   32:      //put played card in played card pile
    #####:   33:      discardCard(handPos, currentPlayer, state, 0);
        -:   34:			
    #####:   35:      return 0;
        -:   36:}
    #####:   37:int mysmithy (int currentPlayer, struct gameState * state, int handPos){
        -:   38:    int i;
        -:   39:    //+3 Cards
    #####:   40:    for (i = 0; i < 9; i++)
        -:   41:    {
    #####:   42:        drawCard(currentPlayer, state);
        -:   43:    }		
        -:   44:    //discard card from hand
    #####:   45:    discardCard(handPos, currentPlayer, state, 0);
    #####:   46:    return 0;
        -:   47:}
        -:   48:
    #####:   49:int myvillage(int currentPlayer, struct gameState * state, int handPos){
        -:   50:    //+1 Card
    #####:   51:    drawCard(currentPlayer, state);
        -:   52:
        -:   53:    //+2 Actions
    #####:   54:    state->numActions = state->numActions + 1;
        -:   55:
        -:   56:    //discard played card from hand
    #####:   57:    discardCard(handPos, currentPlayer, state, 0);
    #####:   58:    return 0;
        -:   59:}
    #####:   60:int mygreathall(int currentPlayer, struct gameState * state, int handPos){
        -:   61:            //+1 Card
    #####:   62:            drawCard(currentPlayer, state);
        -:   63:
        -:   64:            //+1 Actions
    #####:   65:            state->numActions++;
        -:   66:
        -:   67:            //discard card from hand
    #####:   68:            discardCard(handPos, currentPlayer, state, 0);
    #####:   69:            return 0;
        -:   70:}
        -:   71:
    #####:   72:int myoutpost(int currentPlayer, struct gameState * state, int handPos){
        -:   73:            //set outpost flag
    #####:   74:            state->outpostPlayed+2;
        -:   75:
        -:   76:            //discard card
    #####:   77:            discardCard(handPos, currentPlayer, state, 0);
    #####:   78:            return 0;
        -:   79:}
    #####:   80:int compare(const void* a, const void* b) {
    #####:   81:    if (*(int*)a > *(int*)b)
    #####:   82:        return 1;
    #####:   83:    if (*(int*)a < *(int*)b)
    #####:   84:        return -1;
    #####:   85:    return 0;
        -:   86:}
        -:   87:
        3:   88:struct gameState* newGame() {
        3:   89:    struct gameState* g = malloc(sizeof(struct gameState));
        3:   90:    return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:        int k8, int k9, int k10) {
    #####:   95:    int* k = malloc(10 * sizeof(int));
    #####:   96:    k[0] = k1;
    #####:   97:    k[1] = k2;
    #####:   98:    k[2] = k3;
    #####:   99:    k[3] = k4;
    #####:  100:    k[4] = k5;
    #####:  101:    k[5] = k6;
    #####:  102:    k[6] = k7;
    #####:  103:    k[7] = k8;
    #####:  104:    k[8] = k9;
    #####:  105:    k[9] = k10;
    #####:  106:    return k;
        -:  107:}
        -:  108:
        1:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:        struct gameState *state) {
        -:  111:
        -:  112:    int i;
        -:  113:    int j;
        -:  114:    int it;			
        -:  115:    //set up random number generator
        1:  116:    SelectStream(1);
        1:  117:    PutSeed((long)randomSeed);
        -:  118:
        -:  119:    //check number of players
        1:  120:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
    #####:  122:        return -1;
        -:  123:    }
        -:  124:
        -:  125:    //set number of players
        1:  126:    state->numPlayers = numPlayers;
        -:  127:
        -:  128:    //check selected kingdom cards are different
        1:  129:    for (i = 0; i < 10; i++)
        -:  130:    {
       10:  131:        for (j = 0; j < 10; j++)
        -:  132:        {
       10:  133:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:            {
        1:  135:                return -1;
        -:  136:            }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:    //initialize supply
        -:  142:    ///////////////////////////////
        -:  143:
        -:  144:    //set number of Curse cards
    #####:  145:    if (numPlayers == 2)
        -:  146:    {
    #####:  147:        state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:    else if (numPlayers == 3)
        -:  150:    {
    #####:  151:        state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:    else
        -:  154:    {
    #####:  155:        state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:    //set number of Victory cards
    #####:  159:    if (numPlayers == 2)
        -:  160:    {
    #####:  161:        state->supplyCount[estate] = 8;
    #####:  162:        state->supplyCount[duchy] = 8;
    #####:  163:        state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:        state->supplyCount[estate] = 12;
    #####:  168:        state->supplyCount[duchy] = 12;
    #####:  169:        state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:    //set number of Treasure cards
    #####:  173:    state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  174:    state->supplyCount[silver] = 40;
    #####:  175:    state->supplyCount[gold] = 30;
        -:  176:
        -:  177:    //set number of Kingdom cards
    #####:  178:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
    #####:  180:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:        {
    #####:  182:            if (kingdomCards[j] == i)
        -:  183:            {
        -:  184:                //check if card is a 'Victory' Kingdom card
    #####:  185:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:                {
    #####:  187:                    if (numPlayers == 2){ 
    #####:  188:                        state->supplyCount[i] = 8; 
        -:  189:                    }
    #####:  190:                    else{ state->supplyCount[i] = 12; }
        -:  191:                }
        -:  192:                else
        -:  193:                {
    #####:  194:                    state->supplyCount[i] = 10;
        -:  195:                }
    #####:  196:                break;
        -:  197:            }
        -:  198:            else    //card is not in the set choosen for the game
        -:  199:            {
    #####:  200:                state->supplyCount[i] = -1;
        -:  201:            }
        -:  202:        }
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:    ////////////////////////
        -:  207:    //supply intilization complete
        -:  208:
        -:  209:    //set player decks
    #####:  210:    for (i = 0; i < numPlayers; i++)
        -:  211:    {
    #####:  212:        state->deckCount[i] = 0;
    #####:  213:        for (j = 0; j < 3; j++)
        -:  214:        {
    #####:  215:            state->deck[i][j] = estate;
    #####:  216:            state->deckCount[i]++;
        -:  217:        }
    #####:  218:        for (j = 3; j < 10; j++)
        -:  219:        {
    #####:  220:            state->deck[i][j] = copper;
    #####:  221:            state->deckCount[i]++;		
        -:  222:        }
        -:  223:    }
        -:  224:
        -:  225:    //shuffle player decks
    #####:  226:    for (i = 0; i < numPlayers; i++)
        -:  227:    {
    #####:  228:        if ( shuffle(i, state) < 0 )
        -:  229:        {
    #####:  230:            return -1;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    //draw player hands
    #####:  235:    for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:        //initialize hand size to zero
    #####:  238:        state->handCount[i] = 0;
    #####:  239:        state->discardCount[i] = 0;
        -:  240:        //draw 5 cards
    #####:  241:         for (j = 0; j < 5; j++)
        -:  242:        	{
    #####:  243:        	  drawCard(i, state);
        -:  244:        	}
        -:  245:    }
        -:  246:
        -:  247:    //set embargo tokens to 0 for all supply piles
    #####:  248:    for (i = 0; i <= treasure_map; i++)
        -:  249:    {
    #####:  250:        state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:    //initialize first player's turn
    #####:  254:    state->outpostPlayed = 0;
    #####:  255:    state->phase = 0;
    #####:  256:    state->numActions = 1;
    #####:  257:    state->numBuys = 1;
    #####:  258:    state->playedCardCount = 0;
    #####:  259:    state->whoseTurn = 0;
    #####:  260:    state->handCount[state->whoseTurn] = 0;
        -:  261:    //int it; move to top
        -:  262:
        -:  263:    //Moved draw cards to here, only drawing at the start of a turn
    #####:  264:    for (it = 0; it < 5; it++){
    #####:  265:        drawCard(state->whoseTurn, state);
        -:  266:    }
        -:  267:
    #####:  268:    updateCoins(state->whoseTurn, state, 0);
        -:  269:
    #####:  270:    return 0;
        -:  271:}
        -:  272:
    #####:  273:int shuffle(int player, struct gameState *state) {
        -:  274:
        -:  275:
        -:  276:    int newDeck[MAX_DECK];
    #####:  277:    int newDeckPos = 0;
        -:  278:    int card;
        -:  279:    int i;
        -:  280:
    #####:  281:    if (state->deckCount[player] < 1)
    #####:  282:        return -1;
    #####:  283:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
    #####:  286:    while (state->deckCount[player] > 0) {
    #####:  287:        card = floor(Random() * state->deckCount[player]);
    #####:  288:        newDeck[newDeckPos] = state->deck[player][card];
    #####:  289:        newDeckPos++;
    #####:  290:        for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  291:            state->deck[player][i] = state->deck[player][i+1];
        -:  292:        }
    #####:  293:        state->deckCount[player]--;
        -:  294:    }
    #####:  295:    for (i = 0; i < newDeckPos; i++) {
    #####:  296:        state->deck[player][i] = newDeck[i];
    #####:  297:        state->deckCount[player]++;
        -:  298:    }
        -:  299:
    #####:  300:    return 0;
        -:  301:}
        -:  302:
    #####:  303:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  304:{	
        -:  305:    int card;
    #####:  306:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  307:
        -:  308:    //check if it is the right phase
    #####:  309:    if (state->phase != 0)
        -:  310:    {
    #####:  311:        return -1;
        -:  312:    }
        -:  313:
        -:  314:    //check if player has enough actions
    #####:  315:    if ( state->numActions < 1 )
        -:  316:    {
    #####:  317:        return -1;
        -:  318:    }
        -:  319:
        -:  320:    //get card played
    #####:  321:    card = handCard(handPos, state);
        -:  322:
        -:  323:    //check if selected card is an action
    #####:  324:    if ( card < adventurer || card > treasure_map )
        -:  325:    {
    #####:  326:        return -1;
        -:  327:    }
        -:  328:
        -:  329:    //play card
    #####:  330:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  331:    {
    #####:  332:        return -1;
        -:  333:    }
        -:  334:
        -:  335:    //reduce number of actions
    #####:  336:    state->numActions--;
        -:  337:
        -:  338:    //update coins (Treasure cards may be added with card draws)
    #####:  339:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  340:
    #####:  341:    return 0;
        -:  342:}
        -:  343:
    #####:  344:int buyCard(int supplyPos, struct gameState *state) {
        -:  345:    int who;
    #####:  346:    if (DEBUG){
        -:  347:        printf("Entering buyCard...\n");
        -:  348:    }
        -:  349:
        -:  350:    // I don't know what to do about the phase thing.
        -:  351:
    #####:  352:    who = state->whoseTurn;
        -:  353:
    #####:  354:    if (state->numBuys < 1){
    #####:  355:        if (DEBUG)
        -:  356:            printf("You do not have any buys left\n");
    #####:  357:        return -1;
    #####:  358:    } else if (supplyCount(supplyPos, state) <1){
    #####:  359:        if (DEBUG)
        -:  360:            printf("There are not any of that type of card left\n");
    #####:  361:        return -1;
    #####:  362:    } else if (state->coins < getCost(supplyPos)){
    #####:  363:        if (DEBUG) 
        -:  364:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  365:        return -1;
        -:  366:    } else {
    #####:  367:        state->phase=1;
        -:  368:        //state->supplyCount[supplyPos]--;
    #####:  369:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  370:
    #####:  371:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  372:        state->numBuys--;
    #####:  373:        if (DEBUG)
        -:  374:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  375:    }
        -:  376:
        -:  377:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  378:    //state->discardCount[who]++;
        -:  379:
    #####:  380:    return 0;
        -:  381:}
        -:  382:
    #####:  383:int numHandCards(struct gameState *state) {
    #####:  384:    return state->handCount[ whoseTurn(state) ];
        -:  385:}
        -:  386:
    #####:  387:int handCard(int handPos, struct gameState *state) {
    #####:  388:    int currentPlayer = whoseTurn(state);
    #####:  389:    return state->hand[currentPlayer][handPos];
        -:  390:}
        -:  391:
    #####:  392:int supplyCount(int card, struct gameState *state) {
    #####:  393:    return state->supplyCount[card];
        -:  394:}
        -:  395:
    #####:  396:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  397:    int i;
    #####:  398:    int count = 0;
        -:  399:
    #####:  400:    for (i = 0; i < state->deckCount[player]; i++)
        -:  401:    {
    #####:  402:        if (state->deck[player][i] == card) count++;
        -:  403:    }
        -:  404:
    #####:  405:    for (i = 0; i < state->handCount[player]; i++)
        -:  406:    {
    #####:  407:        if (state->hand[player][i] == card) count++;
        -:  408:    }
        -:  409:
    #####:  410:    for (i = 0; i < state->discardCount[player]; i++)
        -:  411:    {
    #####:  412:        if (state->discard[player][i] == card) count++;
        -:  413:    }
        -:  414:
    #####:  415:    return count;
        -:  416:}
        -:  417:
    #####:  418:int whoseTurn(struct gameState *state) {
    #####:  419:    return state->whoseTurn;
        -:  420:}
        -:  421:
    #####:  422:int endTurn(struct gameState *state) {
        -:  423:    int k;
        -:  424:    int i;
    #####:  425:    int currentPlayer = whoseTurn(state);
        -:  426:
        -:  427:    //Discard hand
    #####:  428:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  429:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  430:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  431:    }
    #####:  432:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  433:
        -:  434:    //Code for determining the player
    #####:  435:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  436:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  437:    }
        -:  438:    else{
    #####:  439:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  440:    }
        -:  441:
    #####:  442:    state->outpostPlayed = 0;
    #####:  443:    state->phase = 0;
    #####:  444:    state->numActions = 1;
    #####:  445:    state->coins = 0;
    #####:  446:    state->numBuys = 1;
    #####:  447:    state->playedCardCount = 0;
    #####:  448:    state->handCount[state->whoseTurn] = 0;
        -:  449:
        -:  450:    //int k; move to top
        -:  451:    //Next player draws hand
    #####:  452:    for (k = 0; k < 5; k++){
    #####:  453:        drawCard(state->whoseTurn, state);//Draw a card
        -:  454:    }
        -:  455:
        -:  456:    //Update money
    #####:  457:    updateCoins(state->whoseTurn, state , 0);
        -:  458:
    #####:  459:    return 0;
        -:  460:}
        -:  461:
    #####:  462:int isGameOver(struct gameState *state) {
        -:  463:    int i;
        -:  464:    int j;
        -:  465:
        -:  466:    //if stack of Province cards is empty, the game ends
    #####:  467:    if (state->supplyCount[province] == 0)
        -:  468:    {
    #####:  469:        return 1;
        -:  470:    }
        -:  471:
        -:  472:    //if three supply pile are at 0, the game ends
    #####:  473:    j = 0;
    #####:  474:    for (i = 0; i < 25; i++)
        -:  475:    {
    #####:  476:        if (state->supplyCount[i] == 0)
        -:  477:        {
    #####:  478:            j++;
        -:  479:        }
        -:  480:    }
    #####:  481:    if ( j >= 3)
        -:  482:    {
    #####:  483:        return 1;
        -:  484:    }
        -:  485:
    #####:  486:    return 0;
        -:  487:}
        -:  488:
    #####:  489:int scoreFor (int player, struct gameState *state) {
        -:  490:
        -:  491:    int i;
    #####:  492:    int score = 0;
        -:  493:    //score from hand
    #####:  494:    for (i = 0; i < state->handCount[player]; i++)
        -:  495:    {
    #####:  496:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  497:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  498:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  499:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  500:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  501:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  502:    }
        -:  503:
        -:  504:    //score from discard
    #####:  505:    for (i = 0; i < state->discardCount[player]; i++)
        -:  506:    {
    #####:  507:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  508:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  509:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  510:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  511:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  512:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  519:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  520:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  521:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  522:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  523:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  524:    }
        -:  525:
    #####:  526:    return score;
        -:  527:}
        -:  528:
    #####:  529:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  530:    int i;	
        -:  531:    int j;
        -:  532:    int highScore;
        -:  533:    int currentPlayer;
        -:  534:
        -:  535:    //get score for each player
    #####:  536:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
        -:  538:        //set unused player scores to -9999
    #####:  539:        if (i >= state->numPlayers)
        -:  540:        {
    #####:  541:            players[i] = -9999;
        -:  542:        }
        -:  543:        else
        -:  544:        {
    #####:  545:            players[i] = scoreFor (i, state);
        -:  546:        }
        -:  547:    }
        -:  548:
        -:  549:    //find highest score
    #####:  550:    j = 0;
    #####:  551:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:        if (players[i] > players[j])
        -:  554:        {
    #####:  555:            j = i;
        -:  556:        }
        -:  557:    }
    #####:  558:    highScore = players[j];
        -:  559:
        -:  560:    //add 1 to players who had less turns
    #####:  561:    currentPlayer = whoseTurn(state);
    #####:  562:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  563:    {
    #####:  564:        if ( players[i] == highScore && i > currentPlayer )
        -:  565:        {
    #####:  566:            players[i]++;
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    //find new highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  573:    {
    #####:  574:        if ( players[i] > players[j] )
        -:  575:        {
    #####:  576:            j = i;
        -:  577:        }
        -:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //set winners in array to 1 and rest to 0
    #####:  582:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  583:    {
    #####:  584:        if ( players[i] == highScore )
        -:  585:        {
    #####:  586:            players[i] = 1;
        -:  587:        }
        -:  588:        else
        -:  589:        {
    #####:  590:            players[i] = 0;
        -:  591:        }
        -:  592:    }
        -:  593:
    #####:  594:    return 0;
        -:  595:}
        -:  596:
    #####:  597:int drawCard(int player, struct gameState *state)
        -:  598:{	int count;
        -:  599:    int deckCounter;
    #####:  600:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  601:
        -:  602:        //Step 1 Shuffle the discard pile back into a deck
        -:  603:        int i;
        -:  604:        //Move discard to deck
    #####:  605:        for (i = 0; i < state->discardCount[player];i++){
    #####:  606:            state->deck[player][i] = state->discard[player][i];
    #####:  607:            state->discard[player][i] = -1;
        -:  608:        }
        -:  609:
    #####:  610:        state->deckCount[player] = state->discardCount[player];
    #####:  611:        state->discardCount[player] = 0;//Reset discard
        -:  612:
        -:  613:        //Shufffle the deck
    #####:  614:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  615:
    #####:  616:        if (DEBUG){//Debug statements
        -:  617:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  618:        }
        -:  619:
    #####:  620:        state->discardCount[player] = 0;
        -:  621:
        -:  622:        //Step 2 Draw Card
    #####:  623:        count = state->handCount[player];//Get current player's hand count
        -:  624:
    #####:  625:        if (DEBUG){//Debug statements
        -:  626:            printf("Current hand count: %d\n", count);
        -:  627:        }
        -:  628:
    #####:  629:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  630:
    #####:  631:        if (deckCounter == 0)
    #####:  632:            return -1;
        -:  633:
    #####:  634:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  635:        state->deckCount[player]--;
    #####:  636:        state->handCount[player]++;//Increment hand count
        -:  637:    }
        -:  638:
        -:  639:    else{
    #####:  640:        int count = state->handCount[player];//Get current hand count for player
        -:  641:        int deckCounter;
    #####:  642:        if (DEBUG){//Debug statements
        -:  643:            printf("Current hand count: %d\n", count);
        -:  644:        }
        -:  645:
    #####:  646:        deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  647:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  648:        state->deckCount[player]--;
    #####:  649:        state->handCount[player]++;//Increment hand count
        -:  650:    }
        -:  651:
    #####:  652:    return 0;
        -:  653:}
        -:  654:
    #####:  655:int getCost(int cardNumber)
        -:  656:{
    #####:  657:    switch( cardNumber ) 
        -:  658:    {
        -:  659:        case curse:
    #####:  660:            return 0;
        -:  661:        case estate:
    #####:  662:            return 2;
        -:  663:        case duchy:
    #####:  664:            return 5;
        -:  665:        case province:
    #####:  666:            return 8;
        -:  667:        case copper:
    #####:  668:            return 0;
        -:  669:        case silver:
    #####:  670:            return 3;
        -:  671:        case gold:
    #####:  672:            return 6;
        -:  673:        case adventurer:
    #####:  674:            return 6;
        -:  675:        case council_room:
    #####:  676:            return 5;
        -:  677:        case feast:
    #####:  678:            return 4;
        -:  679:        case gardens:
    #####:  680:            return 4;
        -:  681:        case mine:
    #####:  682:            return 5;
        -:  683:        case remodel:
    #####:  684:            return 4;
        -:  685:        case smithy:
    #####:  686:            return 4;
        -:  687:        case village:
    #####:  688:            return 3;
        -:  689:        case baron:
    #####:  690:            return 4;
        -:  691:        case great_hall:
    #####:  692:            return 3;
        -:  693:        case minion:
    #####:  694:            return 5;
        -:  695:        case steward:
    #####:  696:            return 3;
        -:  697:        case tribute:
    #####:  698:            return 5;
        -:  699:        case ambassador:
    #####:  700:            return 3;
        -:  701:        case cutpurse:
    #####:  702:            return 4;
        -:  703:        case embargo: 
    #####:  704:            return 2;
        -:  705:        case outpost:
    #####:  706:            return 5;
        -:  707:        case salvager:
    #####:  708:            return 4;
        -:  709:        case sea_hag:
    #####:  710:            return 4;
        -:  711:        case treasure_map:
    #####:  712:            return 4;
        -:  713:    }
        -:  714:
    #####:  715:    return -1;
        -:  716:}
        -:  717:
    #####:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:    int i;
        -:  721:    int j;
        -:  722:    int k;
        -:  723:    int x;
        -:  724:    int index;
    #####:  725:    int currentPlayer = whoseTurn(state);
    #####:  726:    int nextPlayer = currentPlayer + 1;
        -:  727:
    #####:  728:    int tributeRevealedCards[2] = {-1, -1};
        -:  729:    int temphand[MAX_HAND];// moved above the if statement
    #####:  730:    int drawntreasure=0;
        -:  731:    int cardDrawn;
    #####:  732:    int z = 0;// this is the counter for the temp hand
    #####:  733:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:        nextPlayer = 0;
        -:  735:    }
        -:  736:
        -:  737:
        -:  738:    //uses switch to select card and perform actions
    #####:  739:    switch( card ) 
        -:  740:    {
        -:  741:        case adventurer:
    #####:  742:            while(drawntreasure<2){
    #####:  743:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  744:                    shuffle(currentPlayer, state);
        -:  745:                }
    #####:  746:                drawCard(currentPlayer, state);
    #####:  747:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  748:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  749:                    drawntreasure++;
        -:  750:                else{
    #####:  751:                    temphand[z]=cardDrawn;
    #####:  752:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  753:                    z++;
        -:  754:                }
        -:  755:            }
    #####:  756:            while(z-1>=0){
    #####:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  758:                z=z-1;
        -:  759:            }
    #####:  760:            return 0;			
        -:  761:        case council_room:
    #####:  762:            councilroom(currentPlayer, state, handPos);
    #####:  763:            break;	
        -:  764:            return 0;	
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
    #####:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:
    #####:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:
    #####:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:
    #####:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:
    #####:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:
        -:  806:                }
        -:  807:            }     
        -:  808:
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:
    #####:  816:            return 0;
        -:  817:
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);			
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:
    #####:  854:            return 0;
        -:  855:
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);			
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
    #####:  878:            return 0;	
        -:  879:        
        -:  880:        case smithy:
    #####:  881:            mysmithy(currentPlayer, state, handPos);
    #####:  882:            break;
        -:  883:
        -:  884:        case village:
    #####:  885:            myvillage(currentPlayer, state, handPos);
    #####:  886:            break;
        -:  887:
        -:  888:        case baron:
    #####:  889:            state->numBuys++;//Increase buys by 1!
    #####:  890:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:                int p = 0;//Iterator for hand!
    #####:  892:                int card_not_discarded = 1;//Flag for discard set!
    #####:  893:                while(card_not_discarded){
    #####:  894:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:                        state->discardCount[currentPlayer]++;
    #####:  898:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:                        }
    #####:  901:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:                        state->handCount[currentPlayer]--;
    #####:  903:                        card_not_discarded = 0;//Exit the loop
        -:  904:                    }
    #####:  905:                    else if (p > state->handCount[currentPlayer]){
    #####:  906:                        if(DEBUG) {
        -:  907:                            printf("No estate cards in your hand, invalid choice\n");
        -:  908:                            printf("Must gain an estate if there are any\n");
        -:  909:                        }
    #####:  910:                        if (supplyCount(estate, state) > 0){
    #####:  911:                            gainCard(estate, state, 0, currentPlayer);
    #####:  912:                            state->supplyCount[estate]--;//Decrement estates
    #####:  913:                            if (supplyCount(estate, state) == 0){
    #####:  914:                                isGameOver(state);
        -:  915:                            }
        -:  916:                        }
    #####:  917:                        card_not_discarded = 0;//Exit the loop
        -:  918:                    }
        -:  919:
        -:  920:                    else{
    #####:  921:                        p++;//Next card
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:            else{
    #####:  927:                if (supplyCount(estate, state) > 0){
    #####:  928:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  930:                    if (supplyCount(estate, state) == 0){
    #####:  931:                        isGameOver(state);
        -:  932:                    }
        -:  933:                }
        -:  934:            }
        -:  935:
        -:  936:
    #####:  937:            return 0;
        -:  938:
        -:  939:        case great_hall:
    #####:  940:            mygreathall(currentPlayer, state, handPos);
    #####:  941:            break;
        -:  942:
        -:  943:        case minion:
        -:  944:            //+1 action
    #####:  945:            state->numActions++;
        -:  946:
        -:  947:            //discard card from hand
    #####:  948:            discardCard(handPos, currentPlayer, state, 0);
        -:  949:
    #####:  950:            if (choice1)		//+2 coins
        -:  951:            {
    #####:  952:                state->coins = state->coins + 2;
        -:  953:            }
        -:  954:
    #####:  955:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:            {
        -:  957:                //discard hand
    #####:  958:                while(numHandCards(state) > 0)
        -:  959:                {
    #####:  960:                    discardCard(handPos, currentPlayer, state, 0);
        -:  961:                }
        -:  962:
        -:  963:                //draw 4
    #####:  964:                for (i = 0; i < 4; i++)
        -:  965:                {
    #####:  966:                    drawCard(currentPlayer, state);
        -:  967:                }
        -:  968:
        -:  969:                //other players discard hand and redraw if hand size > 4
    #####:  970:                for (i = 0; i < state->numPlayers; i++)
        -:  971:                {
    #####:  972:                    if (i != currentPlayer)
        -:  973:                    {
    #####:  974:                        if ( state->handCount[i] > 4 )
        -:  975:                        {
        -:  976:                            //discard hand
    #####:  977:                            while( state->handCount[i] > 0 )
        -:  978:                            {
    #####:  979:                                discardCard(handPos, i, state, 0);
        -:  980:                            }
        -:  981:
        -:  982:                            //draw 4
    #####:  983:                            for (j = 0; j < 4; j++)
        -:  984:                            {
    #####:  985:                                drawCard(i, state);
        -:  986:                            }
        -:  987:                        }
        -:  988:                    }
        -:  989:                }
        -:  990:
        -:  991:            }
    #####:  992:            return 0;
        -:  993:
        -:  994:        case steward:
    #####:  995:            if (choice1 == 1)
        -:  996:            {
        -:  997:                //+2 cards
    #####:  998:                drawCard(currentPlayer, state);
    #####:  999:                drawCard(currentPlayer, state);
        -: 1000:            }
    #####: 1001:            else if (choice1 == 2)
        -: 1002:            {
        -: 1003:                //+2 coins
    #####: 1004:                state->coins = state->coins + 2;
        -: 1005:            }
        -: 1006:            else
        -: 1007:            {
        -: 1008:                //trash 2 cards in hand
    #####: 1009:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:                discardCard(choice3, currentPlayer, state, 1);
        -: 1011:            }
        -: 1012:
        -: 1013:            //discard card from hand
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:            return 0;
        -: 1016:
        -: 1017:        case tribute:
    #####: 1018:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:                if (state->deckCount[nextPlayer] > 0){
    #####: 1020:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:                    state->deckCount[nextPlayer]--;
        -: 1022:                }
    #####: 1023:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:                    state->discardCount[nextPlayer]--;
        -: 1026:                }
        -: 1027:                else{
        -: 1028:                    //No Card to Reveal
    #####: 1029:                    if (DEBUG){
        -: 1030:                        printf("No cards to reveal\n");
        -: 1031:                    }
        -: 1032:                }
        -: 1033:            }
        -: 1034:
        -: 1035:            else{
    #####: 1036:                if (state->deckCount[nextPlayer] == 0){
    #####: 1037:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:                        state->deckCount[nextPlayer]++;
    #####: 1040:                        state->discard[nextPlayer][i] = -1;
    #####: 1041:                        state->discardCount[nextPlayer]--;
        -: 1042:                    }
        -: 1043:
    #####: 1044:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:                } 
    #####: 1046:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
    #####: 1049:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
        -: 1052:            }    
        -: 1053:
    #####: 1054:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:                state->playedCardCount++;
    #####: 1057:                tributeRevealedCards[1] = -1;
        -: 1058:            }
        -: 1059:
    #####: 1060:            for (i = 0; i <= 2; i ++){
    #####: 1061:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:                    state->coins += 2;
        -: 1063:                }
        -: 1064:
    #####: 1065:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:                    drawCard(currentPlayer, state);
    #####: 1067:                    drawCard(currentPlayer, state);
        -: 1068:                }
        -: 1069:                else{//Action Card
    #####: 1070:                    state->numActions = state->numActions + 2;
        -: 1071:                }
        -: 1072:            }
        -: 1073:
    #####: 1074:            return 0;
        -: 1075:
        -: 1076:        case ambassador:
    #####: 1077:            j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:            if (choice2 > 2 || choice2 < 0)
        -: 1080:            {
    #####: 1081:                return -1;				
        -: 1082:            }
        -: 1083:
    #####: 1084:            if (choice1 == handPos)
        -: 1085:            {
    #####: 1086:                return -1;
        -: 1087:            }
        -: 1088:
    #####: 1089:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:            {
    #####: 1091:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:                {
    #####: 1093:                    j++;
        -: 1094:                }
        -: 1095:            }
    #####: 1096:            if (j < choice2)
        -: 1097:            {
    #####: 1098:                return -1;				
        -: 1099:            }
        -: 1100:
    #####: 1101:            if (DEBUG) 
        -: 1102:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:            //increase supply count for choosen card by amount being discarded
    #####: 1105:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:            //each other player gains a copy of revealed card
    #####: 1108:            for (i = 0; i < state->numPlayers; i++)
        -: 1109:            {
    #####: 1110:                if (i != currentPlayer)
        -: 1111:                {
    #####: 1112:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:                }
        -: 1114:            }
        -: 1115:
        -: 1116:            //discard played card from hand
    #####: 1117:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:            //trash copies of cards returned to supply
    #####: 1120:            for (j = 0; j < choice2; j++)
        -: 1121:            {
    #####: 1122:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:                {
    #####: 1124:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:                    {
    #####: 1126:                        discardCard(i, currentPlayer, state, 1);
    #####: 1127:                        break;
        -: 1128:                    }
        -: 1129:                }
        -: 1130:            }			
        -: 1131:
    #####: 1132:            return 0;
        -: 1133:
        -: 1134:        case cutpurse:
        -: 1135:
    #####: 1136:            updateCoins(currentPlayer, state, 2);
    #####: 1137:            for (i = 0; i < state->numPlayers; i++)
        -: 1138:            {
    #####: 1139:                if (i != currentPlayer)
        -: 1140:                {
    #####: 1141:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1142:                    {
    #####: 1143:                        if (state->hand[i][j] == copper)
        -: 1144:                        {
    #####: 1145:                            discardCard(j, i, state, 0);
    #####: 1146:                            break;
        -: 1147:                        }
    #####: 1148:                        if (j == state->handCount[i])
        -: 1149:                        {
    #####: 1150:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1151:                            {
    #####: 1152:                                if (DEBUG)
        -: 1153:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:                            }	
    #####: 1155:                            break;
        -: 1156:                        }		
        -: 1157:                    }
        -: 1158:
        -: 1159:                }
        -: 1160:
        -: 1161:            }				
        -: 1162:
        -: 1163:            //discard played card from hand
    #####: 1164:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:
        -: 1169:        case embargo: 
        -: 1170:            //+2 Coins
    #####: 1171:            state->coins = state->coins + 2;
        -: 1172:
        -: 1173:            //see if selected pile is in play
    #####: 1174:            if ( state->supplyCount[choice1] == -1 )
        -: 1175:            {
    #####: 1176:                return -1;
        -: 1177:            }
        -: 1178:
        -: 1179:            //add embargo token to selected supply pile
    #####: 1180:            state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:            //trash card
    #####: 1183:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:        case outpost:
    #####: 1187:           myoutpost(currentPlayer, state, handPos);
    #####: 1188:          break; 
        -: 1189:
        -: 1190:        case salvager:
        -: 1191:            //+1 buy
    #####: 1192:            state->numBuys++;
        -: 1193:
    #####: 1194:            if (choice1)
        -: 1195:            {
        -: 1196:                //gain coins equal to trashed card
    #####: 1197:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:                //trash card
    #####: 1199:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:            }
        -: 1201:
        -: 1202:            //discard card
    #####: 1203:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:        case sea_hag:
    #####: 1207:            for (i = 0; i < state->numPlayers; i++){
    #####: 1208:                if (i != currentPlayer){
    #####: 1209:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:                    state->discardCount[i]++;
    #####: 1211:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:                }
        -: 1213:            }
    #####: 1214:            return 0;
        -: 1215:
        -: 1216:        case treasure_map:
        -: 1217:            //search hand for another treasure_map
    #####: 1218:            index = -1;
    #####: 1219:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:            {
    #####: 1221:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:                {
    #####: 1223:                    index = i;
    #####: 1224:                    break;
        -: 1225:                }
        -: 1226:            }
    #####: 1227:            if (index > -1)
        -: 1228:            {
        -: 1229:                //trash both treasure cards
    #####: 1230:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:                discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:                //gain 4 Gold cards
    #####: 1234:                for (i = 0; i < 4; i++)
        -: 1235:                {
    #####: 1236:                    gainCard(gold, state, 1, currentPlayer);
        -: 1237:                }
        -: 1238:
        -: 1239:                //return success
    #####: 1240:                return 1;
        -: 1241:            }
        -: 1242:
        -: 1243:            //no second treasure_map found in hand
    #####: 1244:            return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:    return -1;
        -: 1248:}
        -: 1249:
    #####: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:    //if card is not trashed, added to Played pile 
    #####: 1254:    if (trashFlag < 1)
        -: 1255:    {
        -: 1256:        //add card to played pile
    #####: 1257:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:        state->playedCardCount++;
        -: 1259:    }
        -: 1260:
        -: 1261:    //set played card to -1
    #####: 1262:    state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:    //remove card from player's hand
    #####: 1265:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:        //reduce number of cards in hand
    #####: 1268:        state->handCount[currentPlayer]--;
        -: 1269:    }
    #####: 1270:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:        //reduce number of cards in hand
    #####: 1273:        state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:    else 	
        -: 1276:    {
        -: 1277:        //replace discarded card with last card in hand
    #####: 1278:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:        //set last card to -1
    #####: 1280:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:        //reduce number of cards in hand
    #####: 1282:        state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:    return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:    //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:        return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //added card for [whoseTurn] current player:
        -: 1299:    // toFlag = 0 : add to discard
        -: 1300:    // toFlag = 1 : add to deck
        -: 1301:    // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:    if (toFlag == 1)
        -: 1304:    {
    #####: 1305:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:        state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:    else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:        state->handCount[player]++;
        -: 1312:    }
        -: 1313:    else
        -: 1314:    {
    #####: 1315:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:        state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:    //decrease number in supply pile
    #####: 1320:    state->supplyCount[supplyPos]--;
        -: 1321:
    #####: 1322:    return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:    int i;
        -: 1328:
        -: 1329:    //reset coin count
    #####: 1330:    state->coins = 0;
        -: 1331:
        -: 1332:    //add coins for each Treasure card in player's hand
    #####: 1333:    for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
    #####: 1335:        if (state->hand[player][i] == copper)
        -: 1336:        {
    #####: 1337:            state->coins += 1;
        -: 1338:        }
    #####: 1339:        else if (state->hand[player][i] == silver)
        -: 1340:        {
    #####: 1341:            state->coins += 2;
        -: 1342:        }
    #####: 1343:        else if (state->hand[player][i] == gold)
        -: 1344:        {
    #####: 1345:            state->coins += 3;
        -: 1346:        }	
        -: 1347:    }	
        -: 1348:
        -: 1349:    //add bonus
    #####: 1350:    state->coins += bonus;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:


UnitTest4
File 'dominion.c'
Lines executed:1.37% of 585
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "helper.h"
    #####:    8:int councilroom(int currentPlayer, struct gameState *  state, int handPos){
    #####:    9:    int i = 0;  
        -:   10:    //+5 Cards
    #####:   11:      for (i = 0; i < 5; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:      //+1 Buy
    #####:   17:      state->numBuys++;
        -:   18:
        -:   19:      //+1 Action
    #####:   20:      state->numActions++;
        -:   21:			
        -:   22:      //Each other player draws a card
    #####:   23:      for (i = 0; i < state->numPlayers; i++)
        -:   24:	{
    #####:   25:	  if ( i != currentPlayer )
        -:   26:	    {
    #####:   27:	      drawCard(i, state);
    #####:   28:	      drawCard(i, state);
        -:   29:	    }
        -:   30:	}
        -:   31:			
        -:   32:      //put played card in played card pile
    #####:   33:      discardCard(handPos, currentPlayer, state, 0);
        -:   34:			
    #####:   35:      return 0;
        -:   36:}
    #####:   37:int mysmithy (int currentPlayer, struct gameState * state, int handPos){
        -:   38:    int i;
        -:   39:    //+3 Cards
    #####:   40:    for (i = 0; i < 9; i++)
        -:   41:    {
    #####:   42:        drawCard(currentPlayer, state);
        -:   43:    }		
        -:   44:    //discard card from hand
    #####:   45:    discardCard(handPos, currentPlayer, state, 0);
    #####:   46:    return 0;
        -:   47:}
        -:   48:
    #####:   49:int myvillage(int currentPlayer, struct gameState * state, int handPos){
        -:   50:    //+1 Card
    #####:   51:    drawCard(currentPlayer, state);
        -:   52:
        -:   53:    //+2 Actions
    #####:   54:    state->numActions = state->numActions + 1;
        -:   55:
        -:   56:    //discard played card from hand
    #####:   57:    discardCard(handPos, currentPlayer, state, 0);
    #####:   58:    return 0;
        -:   59:}
    #####:   60:int mygreathall(int currentPlayer, struct gameState * state, int handPos){
        -:   61:            //+1 Card
    #####:   62:            drawCard(currentPlayer, state);
        -:   63:
        -:   64:            //+1 Actions
    #####:   65:            state->numActions++;
        -:   66:
        -:   67:            //discard card from hand
    #####:   68:            discardCard(handPos, currentPlayer, state, 0);
    #####:   69:            return 0;
        -:   70:}
        -:   71:
    #####:   72:int myoutpost(int currentPlayer, struct gameState * state, int handPos){
        -:   73:            //set outpost flag
    #####:   74:            state->outpostPlayed+2;
        -:   75:
        -:   76:            //discard card
    #####:   77:            discardCard(handPos, currentPlayer, state, 0);
    #####:   78:            return 0;
        -:   79:}
    #####:   80:int compare(const void* a, const void* b) {
    #####:   81:    if (*(int*)a > *(int*)b)
    #####:   82:        return 1;
    #####:   83:    if (*(int*)a < *(int*)b)
    #####:   84:        return -1;
    #####:   85:    return 0;
        -:   86:}
        -:   87:
        3:   88:struct gameState* newGame() {
        3:   89:    struct gameState* g = malloc(sizeof(struct gameState));
        3:   90:    return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:        int k8, int k9, int k10) {
    #####:   95:    int* k = malloc(10 * sizeof(int));
    #####:   96:    k[0] = k1;
    #####:   97:    k[1] = k2;
    #####:   98:    k[2] = k3;
    #####:   99:    k[3] = k4;
    #####:  100:    k[4] = k5;
    #####:  101:    k[5] = k6;
    #####:  102:    k[6] = k7;
    #####:  103:    k[7] = k8;
    #####:  104:    k[8] = k9;
    #####:  105:    k[9] = k10;
    #####:  106:    return k;
        -:  107:}
        -:  108:
        1:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:        struct gameState *state) {
        -:  111:
        -:  112:    int i;
        -:  113:    int j;
        -:  114:    int it;			
        -:  115:    //set up random number generator
        1:  116:    SelectStream(1);
        1:  117:    PutSeed((long)randomSeed);
        -:  118:
        -:  119:    //check number of players
        1:  120:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
        1:  122:        return -1;
        -:  123:    }
        -:  124:
        -:  125:    //set number of players
    #####:  126:    state->numPlayers = numPlayers;
        -:  127:
        -:  128:    //check selected kingdom cards are different
    #####:  129:    for (i = 0; i < 10; i++)
        -:  130:    {
    #####:  131:        for (j = 0; j < 10; j++)
        -:  132:        {
    #####:  133:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:            {
    #####:  135:                return -1;
        -:  136:            }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:    //initialize supply
        -:  142:    ///////////////////////////////
        -:  143:
        -:  144:    //set number of Curse cards
    #####:  145:    if (numPlayers == 2)
        -:  146:    {
    #####:  147:        state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:    else if (numPlayers == 3)
        -:  150:    {
    #####:  151:        state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:    else
        -:  154:    {
    #####:  155:        state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:    //set number of Victory cards
    #####:  159:    if (numPlayers == 2)
        -:  160:    {
    #####:  161:        state->supplyCount[estate] = 8;
    #####:  162:        state->supplyCount[duchy] = 8;
    #####:  163:        state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:        state->supplyCount[estate] = 12;
    #####:  168:        state->supplyCount[duchy] = 12;
    #####:  169:        state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:    //set number of Treasure cards
    #####:  173:    state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  174:    state->supplyCount[silver] = 40;
    #####:  175:    state->supplyCount[gold] = 30;
        -:  176:
        -:  177:    //set number of Kingdom cards
    #####:  178:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
    #####:  180:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:        {
    #####:  182:            if (kingdomCards[j] == i)
        -:  183:            {
        -:  184:                //check if card is a 'Victory' Kingdom card
    #####:  185:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:                {
    #####:  187:                    if (numPlayers == 2){ 
    #####:  188:                        state->supplyCount[i] = 8; 
        -:  189:                    }
    #####:  190:                    else{ state->supplyCount[i] = 12; }
        -:  191:                }
        -:  192:                else
        -:  193:                {
    #####:  194:                    state->supplyCount[i] = 10;
        -:  195:                }
    #####:  196:                break;
        -:  197:            }
        -:  198:            else    //card is not in the set choosen for the game
        -:  199:            {
    #####:  200:                state->supplyCount[i] = -1;
        -:  201:            }
        -:  202:        }
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:    ////////////////////////
        -:  207:    //supply intilization complete
        -:  208:
        -:  209:    //set player decks
    #####:  210:    for (i = 0; i < numPlayers; i++)
        -:  211:    {
    #####:  212:        state->deckCount[i] = 0;
    #####:  213:        for (j = 0; j < 3; j++)
        -:  214:        {
    #####:  215:            state->deck[i][j] = estate;
    #####:  216:            state->deckCount[i]++;
        -:  217:        }
    #####:  218:        for (j = 3; j < 10; j++)
        -:  219:        {
    #####:  220:            state->deck[i][j] = copper;
    #####:  221:            state->deckCount[i]++;		
        -:  222:        }
        -:  223:    }
        -:  224:
        -:  225:    //shuffle player decks
    #####:  226:    for (i = 0; i < numPlayers; i++)
        -:  227:    {
    #####:  228:        if ( shuffle(i, state) < 0 )
        -:  229:        {
    #####:  230:            return -1;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    //draw player hands
    #####:  235:    for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:        //initialize hand size to zero
    #####:  238:        state->handCount[i] = 0;
    #####:  239:        state->discardCount[i] = 0;
        -:  240:        //draw 5 cards
    #####:  241:         for (j = 0; j < 5; j++)
        -:  242:        	{
    #####:  243:        	  drawCard(i, state);
        -:  244:        	}
        -:  245:    }
        -:  246:
        -:  247:    //set embargo tokens to 0 for all supply piles
    #####:  248:    for (i = 0; i <= treasure_map; i++)
        -:  249:    {
    #####:  250:        state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:    //initialize first player's turn
    #####:  254:    state->outpostPlayed = 0;
    #####:  255:    state->phase = 0;
    #####:  256:    state->numActions = 1;
    #####:  257:    state->numBuys = 1;
    #####:  258:    state->playedCardCount = 0;
    #####:  259:    state->whoseTurn = 0;
    #####:  260:    state->handCount[state->whoseTurn] = 0;
        -:  261:    //int it; move to top
        -:  262:
        -:  263:    //Moved draw cards to here, only drawing at the start of a turn
    #####:  264:    for (it = 0; it < 5; it++){
    #####:  265:        drawCard(state->whoseTurn, state);
        -:  266:    }
        -:  267:
    #####:  268:    updateCoins(state->whoseTurn, state, 0);
        -:  269:
    #####:  270:    return 0;
        -:  271:}
        -:  272:
    #####:  273:int shuffle(int player, struct gameState *state) {
        -:  274:
        -:  275:
        -:  276:    int newDeck[MAX_DECK];
    #####:  277:    int newDeckPos = 0;
        -:  278:    int card;
        -:  279:    int i;
        -:  280:
    #####:  281:    if (state->deckCount[player] < 1)
    #####:  282:        return -1;
    #####:  283:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
    #####:  286:    while (state->deckCount[player] > 0) {
    #####:  287:        card = floor(Random() * state->deckCount[player]);
    #####:  288:        newDeck[newDeckPos] = state->deck[player][card];
    #####:  289:        newDeckPos++;
    #####:  290:        for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  291:            state->deck[player][i] = state->deck[player][i+1];
        -:  292:        }
    #####:  293:        state->deckCount[player]--;
        -:  294:    }
    #####:  295:    for (i = 0; i < newDeckPos; i++) {
    #####:  296:        state->deck[player][i] = newDeck[i];
    #####:  297:        state->deckCount[player]++;
        -:  298:    }
        -:  299:
    #####:  300:    return 0;
        -:  301:}
        -:  302:
    #####:  303:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  304:{	
        -:  305:    int card;
    #####:  306:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  307:
        -:  308:    //check if it is the right phase
    #####:  309:    if (state->phase != 0)
        -:  310:    {
    #####:  311:        return -1;
        -:  312:    }
        -:  313:
        -:  314:    //check if player has enough actions
    #####:  315:    if ( state->numActions < 1 )
        -:  316:    {
    #####:  317:        return -1;
        -:  318:    }
        -:  319:
        -:  320:    //get card played
    #####:  321:    card = handCard(handPos, state);
        -:  322:
        -:  323:    //check if selected card is an action
    #####:  324:    if ( card < adventurer || card > treasure_map )
        -:  325:    {
    #####:  326:        return -1;
        -:  327:    }
        -:  328:
        -:  329:    //play card
    #####:  330:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  331:    {
    #####:  332:        return -1;
        -:  333:    }
        -:  334:
        -:  335:    //reduce number of actions
    #####:  336:    state->numActions--;
        -:  337:
        -:  338:    //update coins (Treasure cards may be added with card draws)
    #####:  339:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  340:
    #####:  341:    return 0;
        -:  342:}
        -:  343:
    #####:  344:int buyCard(int supplyPos, struct gameState *state) {
        -:  345:    int who;
    #####:  346:    if (DEBUG){
        -:  347:        printf("Entering buyCard...\n");
        -:  348:    }
        -:  349:
        -:  350:    // I don't know what to do about the phase thing.
        -:  351:
    #####:  352:    who = state->whoseTurn;
        -:  353:
    #####:  354:    if (state->numBuys < 1){
    #####:  355:        if (DEBUG)
        -:  356:            printf("You do not have any buys left\n");
    #####:  357:        return -1;
    #####:  358:    } else if (supplyCount(supplyPos, state) <1){
    #####:  359:        if (DEBUG)
        -:  360:            printf("There are not any of that type of card left\n");
    #####:  361:        return -1;
    #####:  362:    } else if (state->coins < getCost(supplyPos)){
    #####:  363:        if (DEBUG) 
        -:  364:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  365:        return -1;
        -:  366:    } else {
    #####:  367:        state->phase=1;
        -:  368:        //state->supplyCount[supplyPos]--;
    #####:  369:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  370:
    #####:  371:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  372:        state->numBuys--;
    #####:  373:        if (DEBUG)
        -:  374:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  375:    }
        -:  376:
        -:  377:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  378:    //state->discardCount[who]++;
        -:  379:
    #####:  380:    return 0;
        -:  381:}
        -:  382:
    #####:  383:int numHandCards(struct gameState *state) {
    #####:  384:    return state->handCount[ whoseTurn(state) ];
        -:  385:}
        -:  386:
    #####:  387:int handCard(int handPos, struct gameState *state) {
    #####:  388:    int currentPlayer = whoseTurn(state);
    #####:  389:    return state->hand[currentPlayer][handPos];
        -:  390:}
        -:  391:
    #####:  392:int supplyCount(int card, struct gameState *state) {
    #####:  393:    return state->supplyCount[card];
        -:  394:}
        -:  395:
    #####:  396:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  397:    int i;
    #####:  398:    int count = 0;
        -:  399:
    #####:  400:    for (i = 0; i < state->deckCount[player]; i++)
        -:  401:    {
    #####:  402:        if (state->deck[player][i] == card) count++;
        -:  403:    }
        -:  404:
    #####:  405:    for (i = 0; i < state->handCount[player]; i++)
        -:  406:    {
    #####:  407:        if (state->hand[player][i] == card) count++;
        -:  408:    }
        -:  409:
    #####:  410:    for (i = 0; i < state->discardCount[player]; i++)
        -:  411:    {
    #####:  412:        if (state->discard[player][i] == card) count++;
        -:  413:    }
        -:  414:
    #####:  415:    return count;
        -:  416:}
        -:  417:
    #####:  418:int whoseTurn(struct gameState *state) {
    #####:  419:    return state->whoseTurn;
        -:  420:}
        -:  421:
    #####:  422:int endTurn(struct gameState *state) {
        -:  423:    int k;
        -:  424:    int i;
    #####:  425:    int currentPlayer = whoseTurn(state);
        -:  426:
        -:  427:    //Discard hand
    #####:  428:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  429:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  430:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  431:    }
    #####:  432:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  433:
        -:  434:    //Code for determining the player
    #####:  435:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  436:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  437:    }
        -:  438:    else{
    #####:  439:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  440:    }
        -:  441:
    #####:  442:    state->outpostPlayed = 0;
    #####:  443:    state->phase = 0;
    #####:  444:    state->numActions = 1;
    #####:  445:    state->coins = 0;
    #####:  446:    state->numBuys = 1;
    #####:  447:    state->playedCardCount = 0;
    #####:  448:    state->handCount[state->whoseTurn] = 0;
        -:  449:
        -:  450:    //int k; move to top
        -:  451:    //Next player draws hand
    #####:  452:    for (k = 0; k < 5; k++){
    #####:  453:        drawCard(state->whoseTurn, state);//Draw a card
        -:  454:    }
        -:  455:
        -:  456:    //Update money
    #####:  457:    updateCoins(state->whoseTurn, state , 0);
        -:  458:
    #####:  459:    return 0;
        -:  460:}
        -:  461:
    #####:  462:int isGameOver(struct gameState *state) {
        -:  463:    int i;
        -:  464:    int j;
        -:  465:
        -:  466:    //if stack of Province cards is empty, the game ends
    #####:  467:    if (state->supplyCount[province] == 0)
        -:  468:    {
    #####:  469:        return 1;
        -:  470:    }
        -:  471:
        -:  472:    //if three supply pile are at 0, the game ends
    #####:  473:    j = 0;
    #####:  474:    for (i = 0; i < 25; i++)
        -:  475:    {
    #####:  476:        if (state->supplyCount[i] == 0)
        -:  477:        {
    #####:  478:            j++;
        -:  479:        }
        -:  480:    }
    #####:  481:    if ( j >= 3)
        -:  482:    {
    #####:  483:        return 1;
        -:  484:    }
        -:  485:
    #####:  486:    return 0;
        -:  487:}
        -:  488:
    #####:  489:int scoreFor (int player, struct gameState *state) {
        -:  490:
        -:  491:    int i;
    #####:  492:    int score = 0;
        -:  493:    //score from hand
    #####:  494:    for (i = 0; i < state->handCount[player]; i++)
        -:  495:    {
    #####:  496:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  497:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  498:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  499:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  500:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  501:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  502:    }
        -:  503:
        -:  504:    //score from discard
    #####:  505:    for (i = 0; i < state->discardCount[player]; i++)
        -:  506:    {
    #####:  507:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  508:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  509:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  510:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  511:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  512:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  519:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  520:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  521:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  522:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  523:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  524:    }
        -:  525:
    #####:  526:    return score;
        -:  527:}
        -:  528:
    #####:  529:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  530:    int i;	
        -:  531:    int j;
        -:  532:    int highScore;
        -:  533:    int currentPlayer;
        -:  534:
        -:  535:    //get score for each player
    #####:  536:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
        -:  538:        //set unused player scores to -9999
    #####:  539:        if (i >= state->numPlayers)
        -:  540:        {
    #####:  541:            players[i] = -9999;
        -:  542:        }
        -:  543:        else
        -:  544:        {
    #####:  545:            players[i] = scoreFor (i, state);
        -:  546:        }
        -:  547:    }
        -:  548:
        -:  549:    //find highest score
    #####:  550:    j = 0;
    #####:  551:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:        if (players[i] > players[j])
        -:  554:        {
    #####:  555:            j = i;
        -:  556:        }
        -:  557:    }
    #####:  558:    highScore = players[j];
        -:  559:
        -:  560:    //add 1 to players who had less turns
    #####:  561:    currentPlayer = whoseTurn(state);
    #####:  562:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  563:    {
    #####:  564:        if ( players[i] == highScore && i > currentPlayer )
        -:  565:        {
    #####:  566:            players[i]++;
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    //find new highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  573:    {
    #####:  574:        if ( players[i] > players[j] )
        -:  575:        {
    #####:  576:            j = i;
        -:  577:        }
        -:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //set winners in array to 1 and rest to 0
    #####:  582:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  583:    {
    #####:  584:        if ( players[i] == highScore )
        -:  585:        {
    #####:  586:            players[i] = 1;
        -:  587:        }
        -:  588:        else
        -:  589:        {
    #####:  590:            players[i] = 0;
        -:  591:        }
        -:  592:    }
        -:  593:
    #####:  594:    return 0;
        -:  595:}
        -:  596:
    #####:  597:int drawCard(int player, struct gameState *state)
        -:  598:{	int count;
        -:  599:    int deckCounter;
    #####:  600:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  601:
        -:  602:        //Step 1 Shuffle the discard pile back into a deck
        -:  603:        int i;
        -:  604:        //Move discard to deck
    #####:  605:        for (i = 0; i < state->discardCount[player];i++){
    #####:  606:            state->deck[player][i] = state->discard[player][i];
    #####:  607:            state->discard[player][i] = -1;
        -:  608:        }
        -:  609:
    #####:  610:        state->deckCount[player] = state->discardCount[player];
    #####:  611:        state->discardCount[player] = 0;//Reset discard
        -:  612:
        -:  613:        //Shufffle the deck
    #####:  614:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  615:
    #####:  616:        if (DEBUG){//Debug statements
        -:  617:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  618:        }
        -:  619:
    #####:  620:        state->discardCount[player] = 0;
        -:  621:
        -:  622:        //Step 2 Draw Card
    #####:  623:        count = state->handCount[player];//Get current player's hand count
        -:  624:
    #####:  625:        if (DEBUG){//Debug statements
        -:  626:            printf("Current hand count: %d\n", count);
        -:  627:        }
        -:  628:
    #####:  629:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  630:
    #####:  631:        if (deckCounter == 0)
    #####:  632:            return -1;
        -:  633:
    #####:  634:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  635:        state->deckCount[player]--;
    #####:  636:        state->handCount[player]++;//Increment hand count
        -:  637:    }
        -:  638:
        -:  639:    else{
    #####:  640:        int count = state->handCount[player];//Get current hand count for player
        -:  641:        int deckCounter;
    #####:  642:        if (DEBUG){//Debug statements
        -:  643:            printf("Current hand count: %d\n", count);
        -:  644:        }
        -:  645:
    #####:  646:        deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  647:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  648:        state->deckCount[player]--;
    #####:  649:        state->handCount[player]++;//Increment hand count
        -:  650:    }
        -:  651:
    #####:  652:    return 0;
        -:  653:}
        -:  654:
    #####:  655:int getCost(int cardNumber)
        -:  656:{
    #####:  657:    switch( cardNumber ) 
        -:  658:    {
        -:  659:        case curse:
    #####:  660:            return 0;
        -:  661:        case estate:
    #####:  662:            return 2;
        -:  663:        case duchy:
    #####:  664:            return 5;
        -:  665:        case province:
    #####:  666:            return 8;
        -:  667:        case copper:
    #####:  668:            return 0;
        -:  669:        case silver:
    #####:  670:            return 3;
        -:  671:        case gold:
    #####:  672:            return 6;
        -:  673:        case adventurer:
    #####:  674:            return 6;
        -:  675:        case council_room:
    #####:  676:            return 5;
        -:  677:        case feast:
    #####:  678:            return 4;
        -:  679:        case gardens:
    #####:  680:            return 4;
        -:  681:        case mine:
    #####:  682:            return 5;
        -:  683:        case remodel:
    #####:  684:            return 4;
        -:  685:        case smithy:
    #####:  686:            return 4;
        -:  687:        case village:
    #####:  688:            return 3;
        -:  689:        case baron:
    #####:  690:            return 4;
        -:  691:        case great_hall:
    #####:  692:            return 3;
        -:  693:        case minion:
    #####:  694:            return 5;
        -:  695:        case steward:
    #####:  696:            return 3;
        -:  697:        case tribute:
    #####:  698:            return 5;
        -:  699:        case ambassador:
    #####:  700:            return 3;
        -:  701:        case cutpurse:
    #####:  702:            return 4;
        -:  703:        case embargo: 
    #####:  704:            return 2;
        -:  705:        case outpost:
    #####:  706:            return 5;
        -:  707:        case salvager:
    #####:  708:            return 4;
        -:  709:        case sea_hag:
    #####:  710:            return 4;
        -:  711:        case treasure_map:
    #####:  712:            return 4;
        -:  713:    }
        -:  714:
    #####:  715:    return -1;
        -:  716:}
        -:  717:
    #####:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:    int i;
        -:  721:    int j;
        -:  722:    int k;
        -:  723:    int x;
        -:  724:    int index;
    #####:  725:    int currentPlayer = whoseTurn(state);
    #####:  726:    int nextPlayer = currentPlayer + 1;
        -:  727:
    #####:  728:    int tributeRevealedCards[2] = {-1, -1};
        -:  729:    int temphand[MAX_HAND];// moved above the if statement
    #####:  730:    int drawntreasure=0;
        -:  731:    int cardDrawn;
    #####:  732:    int z = 0;// this is the counter for the temp hand
    #####:  733:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:        nextPlayer = 0;
        -:  735:    }
        -:  736:
        -:  737:
        -:  738:    //uses switch to select card and perform actions
    #####:  739:    switch( card ) 
        -:  740:    {
        -:  741:        case adventurer:
    #####:  742:            while(drawntreasure<2){
    #####:  743:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  744:                    shuffle(currentPlayer, state);
        -:  745:                }
    #####:  746:                drawCard(currentPlayer, state);
    #####:  747:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  748:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  749:                    drawntreasure++;
        -:  750:                else{
    #####:  751:                    temphand[z]=cardDrawn;
    #####:  752:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  753:                    z++;
        -:  754:                }
        -:  755:            }
    #####:  756:            while(z-1>=0){
    #####:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  758:                z=z-1;
        -:  759:            }
    #####:  760:            return 0;			
        -:  761:        case council_room:
    #####:  762:            councilroom(currentPlayer, state, handPos);
    #####:  763:            break;	
        -:  764:            return 0;	
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
    #####:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:
    #####:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:
    #####:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:
    #####:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:
    #####:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:
        -:  806:                }
        -:  807:            }     
        -:  808:
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:
    #####:  816:            return 0;
        -:  817:
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);			
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:
    #####:  854:            return 0;
        -:  855:
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);			
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
    #####:  878:            return 0;	
        -:  879:        
        -:  880:        case smithy:
    #####:  881:            mysmithy(currentPlayer, state, handPos);
    #####:  882:            break;
        -:  883:
        -:  884:        case village:
    #####:  885:            myvillage(currentPlayer, state, handPos);
    #####:  886:            break;
        -:  887:
        -:  888:        case baron:
    #####:  889:            state->numBuys++;//Increase buys by 1!
    #####:  890:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:                int p = 0;//Iterator for hand!
    #####:  892:                int card_not_discarded = 1;//Flag for discard set!
    #####:  893:                while(card_not_discarded){
    #####:  894:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:                        state->discardCount[currentPlayer]++;
    #####:  898:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:                        }
    #####:  901:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:                        state->handCount[currentPlayer]--;
    #####:  903:                        card_not_discarded = 0;//Exit the loop
        -:  904:                    }
    #####:  905:                    else if (p > state->handCount[currentPlayer]){
    #####:  906:                        if(DEBUG) {
        -:  907:                            printf("No estate cards in your hand, invalid choice\n");
        -:  908:                            printf("Must gain an estate if there are any\n");
        -:  909:                        }
    #####:  910:                        if (supplyCount(estate, state) > 0){
    #####:  911:                            gainCard(estate, state, 0, currentPlayer);
    #####:  912:                            state->supplyCount[estate]--;//Decrement estates
    #####:  913:                            if (supplyCount(estate, state) == 0){
    #####:  914:                                isGameOver(state);
        -:  915:                            }
        -:  916:                        }
    #####:  917:                        card_not_discarded = 0;//Exit the loop
        -:  918:                    }
        -:  919:
        -:  920:                    else{
    #####:  921:                        p++;//Next card
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:            else{
    #####:  927:                if (supplyCount(estate, state) > 0){
    #####:  928:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  930:                    if (supplyCount(estate, state) == 0){
    #####:  931:                        isGameOver(state);
        -:  932:                    }
        -:  933:                }
        -:  934:            }
        -:  935:
        -:  936:
    #####:  937:            return 0;
        -:  938:
        -:  939:        case great_hall:
    #####:  940:            mygreathall(currentPlayer, state, handPos);
    #####:  941:            break;
        -:  942:
        -:  943:        case minion:
        -:  944:            //+1 action
    #####:  945:            state->numActions++;
        -:  946:
        -:  947:            //discard card from hand
    #####:  948:            discardCard(handPos, currentPlayer, state, 0);
        -:  949:
    #####:  950:            if (choice1)		//+2 coins
        -:  951:            {
    #####:  952:                state->coins = state->coins + 2;
        -:  953:            }
        -:  954:
    #####:  955:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:            {
        -:  957:                //discard hand
    #####:  958:                while(numHandCards(state) > 0)
        -:  959:                {
    #####:  960:                    discardCard(handPos, currentPlayer, state, 0);
        -:  961:                }
        -:  962:
        -:  963:                //draw 4
    #####:  964:                for (i = 0; i < 4; i++)
        -:  965:                {
    #####:  966:                    drawCard(currentPlayer, state);
        -:  967:                }
        -:  968:
        -:  969:                //other players discard hand and redraw if hand size > 4
    #####:  970:                for (i = 0; i < state->numPlayers; i++)
        -:  971:                {
    #####:  972:                    if (i != currentPlayer)
        -:  973:                    {
    #####:  974:                        if ( state->handCount[i] > 4 )
        -:  975:                        {
        -:  976:                            //discard hand
    #####:  977:                            while( state->handCount[i] > 0 )
        -:  978:                            {
    #####:  979:                                discardCard(handPos, i, state, 0);
        -:  980:                            }
        -:  981:
        -:  982:                            //draw 4
    #####:  983:                            for (j = 0; j < 4; j++)
        -:  984:                            {
    #####:  985:                                drawCard(i, state);
        -:  986:                            }
        -:  987:                        }
        -:  988:                    }
        -:  989:                }
        -:  990:
        -:  991:            }
    #####:  992:            return 0;
        -:  993:
        -:  994:        case steward:
    #####:  995:            if (choice1 == 1)
        -:  996:            {
        -:  997:                //+2 cards
    #####:  998:                drawCard(currentPlayer, state);
    #####:  999:                drawCard(currentPlayer, state);
        -: 1000:            }
    #####: 1001:            else if (choice1 == 2)
        -: 1002:            {
        -: 1003:                //+2 coins
    #####: 1004:                state->coins = state->coins + 2;
        -: 1005:            }
        -: 1006:            else
        -: 1007:            {
        -: 1008:                //trash 2 cards in hand
    #####: 1009:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:                discardCard(choice3, currentPlayer, state, 1);
        -: 1011:            }
        -: 1012:
        -: 1013:            //discard card from hand
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:            return 0;
        -: 1016:
        -: 1017:        case tribute:
    #####: 1018:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:                if (state->deckCount[nextPlayer] > 0){
    #####: 1020:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:                    state->deckCount[nextPlayer]--;
        -: 1022:                }
    #####: 1023:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:                    state->discardCount[nextPlayer]--;
        -: 1026:                }
        -: 1027:                else{
        -: 1028:                    //No Card to Reveal
    #####: 1029:                    if (DEBUG){
        -: 1030:                        printf("No cards to reveal\n");
        -: 1031:                    }
        -: 1032:                }
        -: 1033:            }
        -: 1034:
        -: 1035:            else{
    #####: 1036:                if (state->deckCount[nextPlayer] == 0){
    #####: 1037:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:                        state->deckCount[nextPlayer]++;
    #####: 1040:                        state->discard[nextPlayer][i] = -1;
    #####: 1041:                        state->discardCount[nextPlayer]--;
        -: 1042:                    }
        -: 1043:
    #####: 1044:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:                } 
    #####: 1046:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
    #####: 1049:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
        -: 1052:            }    
        -: 1053:
    #####: 1054:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:                state->playedCardCount++;
    #####: 1057:                tributeRevealedCards[1] = -1;
        -: 1058:            }
        -: 1059:
    #####: 1060:            for (i = 0; i <= 2; i ++){
    #####: 1061:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:                    state->coins += 2;
        -: 1063:                }
        -: 1064:
    #####: 1065:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:                    drawCard(currentPlayer, state);
    #####: 1067:                    drawCard(currentPlayer, state);
        -: 1068:                }
        -: 1069:                else{//Action Card
    #####: 1070:                    state->numActions = state->numActions + 2;
        -: 1071:                }
        -: 1072:            }
        -: 1073:
    #####: 1074:            return 0;
        -: 1075:
        -: 1076:        case ambassador:
    #####: 1077:            j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:            if (choice2 > 2 || choice2 < 0)
        -: 1080:            {
    #####: 1081:                return -1;				
        -: 1082:            }
        -: 1083:
    #####: 1084:            if (choice1 == handPos)
        -: 1085:            {
    #####: 1086:                return -1;
        -: 1087:            }
        -: 1088:
    #####: 1089:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:            {
    #####: 1091:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:                {
    #####: 1093:                    j++;
        -: 1094:                }
        -: 1095:            }
    #####: 1096:            if (j < choice2)
        -: 1097:            {
    #####: 1098:                return -1;				
        -: 1099:            }
        -: 1100:
    #####: 1101:            if (DEBUG) 
        -: 1102:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:            //increase supply count for choosen card by amount being discarded
    #####: 1105:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:            //each other player gains a copy of revealed card
    #####: 1108:            for (i = 0; i < state->numPlayers; i++)
        -: 1109:            {
    #####: 1110:                if (i != currentPlayer)
        -: 1111:                {
    #####: 1112:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:                }
        -: 1114:            }
        -: 1115:
        -: 1116:            //discard played card from hand
    #####: 1117:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:            //trash copies of cards returned to supply
    #####: 1120:            for (j = 0; j < choice2; j++)
        -: 1121:            {
    #####: 1122:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:                {
    #####: 1124:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:                    {
    #####: 1126:                        discardCard(i, currentPlayer, state, 1);
    #####: 1127:                        break;
        -: 1128:                    }
        -: 1129:                }
        -: 1130:            }			
        -: 1131:
    #####: 1132:            return 0;
        -: 1133:
        -: 1134:        case cutpurse:
        -: 1135:
    #####: 1136:            updateCoins(currentPlayer, state, 2);
    #####: 1137:            for (i = 0; i < state->numPlayers; i++)
        -: 1138:            {
    #####: 1139:                if (i != currentPlayer)
        -: 1140:                {
    #####: 1141:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1142:                    {
    #####: 1143:                        if (state->hand[i][j] == copper)
        -: 1144:                        {
    #####: 1145:                            discardCard(j, i, state, 0);
    #####: 1146:                            break;
        -: 1147:                        }
    #####: 1148:                        if (j == state->handCount[i])
        -: 1149:                        {
    #####: 1150:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1151:                            {
    #####: 1152:                                if (DEBUG)
        -: 1153:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:                            }	
    #####: 1155:                            break;
        -: 1156:                        }		
        -: 1157:                    }
        -: 1158:
        -: 1159:                }
        -: 1160:
        -: 1161:            }				
        -: 1162:
        -: 1163:            //discard played card from hand
    #####: 1164:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:
        -: 1169:        case embargo: 
        -: 1170:            //+2 Coins
    #####: 1171:            state->coins = state->coins + 2;
        -: 1172:
        -: 1173:            //see if selected pile is in play
    #####: 1174:            if ( state->supplyCount[choice1] == -1 )
        -: 1175:            {
    #####: 1176:                return -1;
        -: 1177:            }
        -: 1178:
        -: 1179:            //add embargo token to selected supply pile
    #####: 1180:            state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:            //trash card
    #####: 1183:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:        case outpost:
    #####: 1187:           myoutpost(currentPlayer, state, handPos);
    #####: 1188:          break; 
        -: 1189:
        -: 1190:        case salvager:
        -: 1191:            //+1 buy
    #####: 1192:            state->numBuys++;
        -: 1193:
    #####: 1194:            if (choice1)
        -: 1195:            {
        -: 1196:                //gain coins equal to trashed card
    #####: 1197:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:                //trash card
    #####: 1199:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:            }
        -: 1201:
        -: 1202:            //discard card
    #####: 1203:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:        case sea_hag:
    #####: 1207:            for (i = 0; i < state->numPlayers; i++){
    #####: 1208:                if (i != currentPlayer){
    #####: 1209:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:                    state->discardCount[i]++;
    #####: 1211:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:                }
        -: 1213:            }
    #####: 1214:            return 0;
        -: 1215:
        -: 1216:        case treasure_map:
        -: 1217:            //search hand for another treasure_map
    #####: 1218:            index = -1;
    #####: 1219:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:            {
    #####: 1221:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:                {
    #####: 1223:                    index = i;
    #####: 1224:                    break;
        -: 1225:                }
        -: 1226:            }
    #####: 1227:            if (index > -1)
        -: 1228:            {
        -: 1229:                //trash both treasure cards
    #####: 1230:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:                discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:                //gain 4 Gold cards
    #####: 1234:                for (i = 0; i < 4; i++)
        -: 1235:                {
    #####: 1236:                    gainCard(gold, state, 1, currentPlayer);
        -: 1237:                }
        -: 1238:
        -: 1239:                //return success
    #####: 1240:                return 1;
        -: 1241:            }
        -: 1242:
        -: 1243:            //no second treasure_map found in hand
    #####: 1244:            return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:    return -1;
        -: 1248:}
        -: 1249:
    #####: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:    //if card is not trashed, added to Played pile 
    #####: 1254:    if (trashFlag < 1)
        -: 1255:    {
        -: 1256:        //add card to played pile
    #####: 1257:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:        state->playedCardCount++;
        -: 1259:    }
        -: 1260:
        -: 1261:    //set played card to -1
    #####: 1262:    state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:    //remove card from player's hand
    #####: 1265:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:        //reduce number of cards in hand
    #####: 1268:        state->handCount[currentPlayer]--;
        -: 1269:    }
    #####: 1270:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:        //reduce number of cards in hand
    #####: 1273:        state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:    else 	
        -: 1276:    {
        -: 1277:        //replace discarded card with last card in hand
    #####: 1278:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:        //set last card to -1
    #####: 1280:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:        //reduce number of cards in hand
    #####: 1282:        state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:    return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:    //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:        return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //added card for [whoseTurn] current player:
        -: 1299:    // toFlag = 0 : add to discard
        -: 1300:    // toFlag = 1 : add to deck
        -: 1301:    // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:    if (toFlag == 1)
        -: 1304:    {
    #####: 1305:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:        state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:    else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:        state->handCount[player]++;
        -: 1312:    }
        -: 1313:    else
        -: 1314:    {
    #####: 1315:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:        state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:    //decrease number in supply pile
    #####: 1320:    state->supplyCount[supplyPos]--;
        -: 1321:
    #####: 1322:    return 0;
        -: 1323:}
        -: 1324:
    #####: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:    int i;
        -: 1328:
        -: 1329:    //reset coin count
    #####: 1330:    state->coins = 0;
        -: 1331:
        -: 1332:    //add coins for each Treasure card in player's hand
    #####: 1333:    for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
    #####: 1335:        if (state->hand[player][i] == copper)
        -: 1336:        {
    #####: 1337:            state->coins += 1;
        -: 1338:        }
    #####: 1339:        else if (state->hand[player][i] == silver)
        -: 1340:        {
    #####: 1341:            state->coins += 2;
        -: 1342:        }
    #####: 1343:        else if (state->hand[player][i] == gold)
        -: 1344:        {
    #####: 1345:            state->coins += 3;
        -: 1346:        }	
        -: 1347:    }	
        -: 1348:
        -: 1349:    //add bonus
    #####: 1350:    state->coins += bonus;
        -: 1351:
    #####: 1352:    return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:


CardTest1
FAILURE: Did not deal 3 cards
File 'dominion.c'
Lines executed:23.25% of 585
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "helper.h"
    #####:    8:int councilroom(int currentPlayer, struct gameState *  state, int handPos){
    #####:    9:    int i = 0;  
        -:   10:    //+5 Cards
    #####:   11:      for (i = 0; i < 5; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:      //+1 Buy
    #####:   17:      state->numBuys++;
        -:   18:
        -:   19:      //+1 Action
    #####:   20:      state->numActions++;
        -:   21:			
        -:   22:      //Each other player draws a card
    #####:   23:      for (i = 0; i < state->numPlayers; i++)
        -:   24:	{
    #####:   25:	  if ( i != currentPlayer )
        -:   26:	    {
    #####:   27:	      drawCard(i, state);
    #####:   28:	      drawCard(i, state);
        -:   29:	    }
        -:   30:	}
        -:   31:			
        -:   32:      //put played card in played card pile
    #####:   33:      discardCard(handPos, currentPlayer, state, 0);
        -:   34:			
    #####:   35:      return 0;
        -:   36:}
        1:   37:int mysmithy (int currentPlayer, struct gameState * state, int handPos){
        -:   38:    int i;
        -:   39:    //+3 Cards
       10:   40:    for (i = 0; i < 9; i++)
        -:   41:    {
        9:   42:        drawCard(currentPlayer, state);
        -:   43:    }		
        -:   44:    //discard card from hand
        1:   45:    discardCard(handPos, currentPlayer, state, 0);
        1:   46:    return 0;
        -:   47:}
        -:   48:
    #####:   49:int myvillage(int currentPlayer, struct gameState * state, int handPos){
        -:   50:    //+1 Card
    #####:   51:    drawCard(currentPlayer, state);
        -:   52:
        -:   53:    //+2 Actions
    #####:   54:    state->numActions = state->numActions + 1;
        -:   55:
        -:   56:    //discard played card from hand
    #####:   57:    discardCard(handPos, currentPlayer, state, 0);
    #####:   58:    return 0;
        -:   59:}
    #####:   60:int mygreathall(int currentPlayer, struct gameState * state, int handPos){
        -:   61:            //+1 Card
    #####:   62:            drawCard(currentPlayer, state);
        -:   63:
        -:   64:            //+1 Actions
    #####:   65:            state->numActions++;
        -:   66:
        -:   67:            //discard card from hand
    #####:   68:            discardCard(handPos, currentPlayer, state, 0);
    #####:   69:            return 0;
        -:   70:}
        -:   71:
    #####:   72:int myoutpost(int currentPlayer, struct gameState * state, int handPos){
        -:   73:            //set outpost flag
    #####:   74:            state->outpostPlayed+2;
        -:   75:
        -:   76:            //discard card
    #####:   77:            discardCard(handPos, currentPlayer, state, 0);
    #####:   78:            return 0;
        -:   79:}
       30:   80:int compare(const void* a, const void* b) {
       30:   81:    if (*(int*)a > *(int*)b)
    #####:   82:        return 1;
       30:   83:    if (*(int*)a < *(int*)b)
        8:   84:        return -1;
       22:   85:    return 0;
        -:   86:}
        -:   87:
        1:   88:struct gameState* newGame() {
        1:   89:    struct gameState* g = malloc(sizeof(struct gameState));
        1:   90:    return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:        int k8, int k9, int k10) {
    #####:   95:    int* k = malloc(10 * sizeof(int));
    #####:   96:    k[0] = k1;
    #####:   97:    k[1] = k2;
    #####:   98:    k[2] = k3;
    #####:   99:    k[3] = k4;
    #####:  100:    k[4] = k5;
    #####:  101:    k[5] = k6;
    #####:  102:    k[6] = k7;
    #####:  103:    k[7] = k8;
    #####:  104:    k[8] = k9;
    #####:  105:    k[9] = k10;
    #####:  106:    return k;
        -:  107:}
        -:  108:
        1:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:        struct gameState *state) {
        -:  111:
        -:  112:    int i;
        -:  113:    int j;
        -:  114:    int it;			
        -:  115:    //set up random number generator
        1:  116:    SelectStream(1);
        1:  117:    PutSeed((long)randomSeed);
        -:  118:
        -:  119:    //check number of players
        1:  120:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
    #####:  122:        return -1;
        -:  123:    }
        -:  124:
        -:  125:    //set number of players
        1:  126:    state->numPlayers = numPlayers;
        -:  127:
        -:  128:    //check selected kingdom cards are different
       11:  129:    for (i = 0; i < 10; i++)
        -:  130:    {
      110:  131:        for (j = 0; j < 10; j++)
        -:  132:        {
      100:  133:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:            {
    #####:  135:                return -1;
        -:  136:            }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:    //initialize supply
        -:  142:    ///////////////////////////////
        -:  143:
        -:  144:    //set number of Curse cards
        1:  145:    if (numPlayers == 2)
        -:  146:    {
        1:  147:        state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:    else if (numPlayers == 3)
        -:  150:    {
    #####:  151:        state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:    else
        -:  154:    {
    #####:  155:        state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:    //set number of Victory cards
        1:  159:    if (numPlayers == 2)
        -:  160:    {
        1:  161:        state->supplyCount[estate] = 8;
        1:  162:        state->supplyCount[duchy] = 8;
        1:  163:        state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:        state->supplyCount[estate] = 12;
    #####:  168:        state->supplyCount[duchy] = 12;
    #####:  169:        state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:    //set number of Treasure cards
        1:  173:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  174:    state->supplyCount[silver] = 40;
        1:  175:    state->supplyCount[gold] = 30;
        -:  176:
        -:  177:    //set number of Kingdom cards
       21:  178:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
      165:  180:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:        {
      155:  182:            if (kingdomCards[j] == i)
        -:  183:            {
        -:  184:                //check if card is a 'Victory' Kingdom card
       12:  185:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:                {
        2:  187:                    if (numPlayers == 2){ 
        2:  188:                        state->supplyCount[i] = 8; 
        -:  189:                    }
    #####:  190:                    else{ state->supplyCount[i] = 12; }
        -:  191:                }
        -:  192:                else
        -:  193:                {
        8:  194:                    state->supplyCount[i] = 10;
        -:  195:                }
       10:  196:                break;
        -:  197:            }
        -:  198:            else    //card is not in the set choosen for the game
        -:  199:            {
      145:  200:                state->supplyCount[i] = -1;
        -:  201:            }
        -:  202:        }
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:    ////////////////////////
        -:  207:    //supply intilization complete
        -:  208:
        -:  209:    //set player decks
        3:  210:    for (i = 0; i < numPlayers; i++)
        -:  211:    {
        2:  212:        state->deckCount[i] = 0;
        8:  213:        for (j = 0; j < 3; j++)
        -:  214:        {
        6:  215:            state->deck[i][j] = estate;
        6:  216:            state->deckCount[i]++;
        -:  217:        }
       16:  218:        for (j = 3; j < 10; j++)
        -:  219:        {
       14:  220:            state->deck[i][j] = copper;
       14:  221:            state->deckCount[i]++;		
        -:  222:        }
        -:  223:    }
        -:  224:
        -:  225:    //shuffle player decks
        3:  226:    for (i = 0; i < numPlayers; i++)
        -:  227:    {
        2:  228:        if ( shuffle(i, state) < 0 )
        -:  229:        {
    #####:  230:            return -1;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    //draw player hands
        3:  235:    for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:        //initialize hand size to zero
        2:  238:        state->handCount[i] = 0;
        2:  239:        state->discardCount[i] = 0;
        -:  240:        //draw 5 cards
       12:  241:         for (j = 0; j < 5; j++)
        -:  242:        	{
       10:  243:        	  drawCard(i, state);
        -:  244:        	}
        -:  245:    }
        -:  246:
        -:  247:    //set embargo tokens to 0 for all supply piles
       28:  248:    for (i = 0; i <= treasure_map; i++)
        -:  249:    {
       27:  250:        state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:    //initialize first player's turn
        1:  254:    state->outpostPlayed = 0;
        1:  255:    state->phase = 0;
        1:  256:    state->numActions = 1;
        1:  257:    state->numBuys = 1;
        1:  258:    state->playedCardCount = 0;
        1:  259:    state->whoseTurn = 0;
        1:  260:    state->handCount[state->whoseTurn] = 0;
        -:  261:    //int it; move to top
        -:  262:
        -:  263:    //Moved draw cards to here, only drawing at the start of a turn
        6:  264:    for (it = 0; it < 5; it++){
        5:  265:        drawCard(state->whoseTurn, state);
        -:  266:    }
        -:  267:
        1:  268:    updateCoins(state->whoseTurn, state, 0);
        -:  269:
        1:  270:    return 0;
        -:  271:}
        -:  272:
       11:  273:int shuffle(int player, struct gameState *state) {
        -:  274:
        -:  275:
        -:  276:    int newDeck[MAX_DECK];
       11:  277:    int newDeckPos = 0;
        -:  278:    int card;
        -:  279:    int i;
        -:  280:
       11:  281:    if (state->deckCount[player] < 1)
        9:  282:        return -1;
        2:  283:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
       24:  286:    while (state->deckCount[player] > 0) {
       20:  287:        card = floor(Random() * state->deckCount[player]);
       20:  288:        newDeck[newDeckPos] = state->deck[player][card];
       20:  289:        newDeckPos++;
       80:  290:        for (i = card; i < state->deckCount[player]-1; i++) {
       60:  291:            state->deck[player][i] = state->deck[player][i+1];
        -:  292:        }
       20:  293:        state->deckCount[player]--;
        -:  294:    }
       22:  295:    for (i = 0; i < newDeckPos; i++) {
       20:  296:        state->deck[player][i] = newDeck[i];
       20:  297:        state->deckCount[player]++;
        -:  298:    }
        -:  299:
        2:  300:    return 0;
        -:  301:}
        -:  302:
    #####:  303:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  304:{	
        -:  305:    int card;
    #####:  306:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  307:
        -:  308:    //check if it is the right phase
    #####:  309:    if (state->phase != 0)
        -:  310:    {
    #####:  311:        return -1;
        -:  312:    }
        -:  313:
        -:  314:    //check if player has enough actions
    #####:  315:    if ( state->numActions < 1 )
        -:  316:    {
    #####:  317:        return -1;
        -:  318:    }
        -:  319:
        -:  320:    //get card played
    #####:  321:    card = handCard(handPos, state);
        -:  322:
        -:  323:    //check if selected card is an action
    #####:  324:    if ( card < adventurer || card > treasure_map )
        -:  325:    {
    #####:  326:        return -1;
        -:  327:    }
        -:  328:
        -:  329:    //play card
    #####:  330:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  331:    {
    #####:  332:        return -1;
        -:  333:    }
        -:  334:
        -:  335:    //reduce number of actions
    #####:  336:    state->numActions--;
        -:  337:
        -:  338:    //update coins (Treasure cards may be added with card draws)
    #####:  339:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  340:
    #####:  341:    return 0;
        -:  342:}
        -:  343:
    #####:  344:int buyCard(int supplyPos, struct gameState *state) {
        -:  345:    int who;
    #####:  346:    if (DEBUG){
        -:  347:        printf("Entering buyCard...\n");
        -:  348:    }
        -:  349:
        -:  350:    // I don't know what to do about the phase thing.
        -:  351:
    #####:  352:    who = state->whoseTurn;
        -:  353:
    #####:  354:    if (state->numBuys < 1){
    #####:  355:        if (DEBUG)
        -:  356:            printf("You do not have any buys left\n");
    #####:  357:        return -1;
    #####:  358:    } else if (supplyCount(supplyPos, state) <1){
    #####:  359:        if (DEBUG)
        -:  360:            printf("There are not any of that type of card left\n");
    #####:  361:        return -1;
    #####:  362:    } else if (state->coins < getCost(supplyPos)){
    #####:  363:        if (DEBUG) 
        -:  364:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  365:        return -1;
        -:  366:    } else {
    #####:  367:        state->phase=1;
        -:  368:        //state->supplyCount[supplyPos]--;
    #####:  369:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  370:
    #####:  371:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  372:        state->numBuys--;
    #####:  373:        if (DEBUG)
        -:  374:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  375:    }
        -:  376:
        -:  377:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  378:    //state->discardCount[who]++;
        -:  379:
    #####:  380:    return 0;
        -:  381:}
        -:  382:
    #####:  383:int numHandCards(struct gameState *state) {
    #####:  384:    return state->handCount[ whoseTurn(state) ];
        -:  385:}
        -:  386:
    #####:  387:int handCard(int handPos, struct gameState *state) {
    #####:  388:    int currentPlayer = whoseTurn(state);
    #####:  389:    return state->hand[currentPlayer][handPos];
        -:  390:}
        -:  391:
    #####:  392:int supplyCount(int card, struct gameState *state) {
    #####:  393:    return state->supplyCount[card];
        -:  394:}
        -:  395:
    #####:  396:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  397:    int i;
    #####:  398:    int count = 0;
        -:  399:
    #####:  400:    for (i = 0; i < state->deckCount[player]; i++)
        -:  401:    {
    #####:  402:        if (state->deck[player][i] == card) count++;
        -:  403:    }
        -:  404:
    #####:  405:    for (i = 0; i < state->handCount[player]; i++)
        -:  406:    {
    #####:  407:        if (state->hand[player][i] == card) count++;
        -:  408:    }
        -:  409:
    #####:  410:    for (i = 0; i < state->discardCount[player]; i++)
        -:  411:    {
    #####:  412:        if (state->discard[player][i] == card) count++;
        -:  413:    }
        -:  414:
    #####:  415:    return count;
        -:  416:}
        -:  417:
        1:  418:int whoseTurn(struct gameState *state) {
        1:  419:    return state->whoseTurn;
        -:  420:}
        -:  421:
    #####:  422:int endTurn(struct gameState *state) {
        -:  423:    int k;
        -:  424:    int i;
    #####:  425:    int currentPlayer = whoseTurn(state);
        -:  426:
        -:  427:    //Discard hand
    #####:  428:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  429:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  430:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  431:    }
    #####:  432:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  433:
        -:  434:    //Code for determining the player
    #####:  435:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  436:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  437:    }
        -:  438:    else{
    #####:  439:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  440:    }
        -:  441:
    #####:  442:    state->outpostPlayed = 0;
    #####:  443:    state->phase = 0;
    #####:  444:    state->numActions = 1;
    #####:  445:    state->coins = 0;
    #####:  446:    state->numBuys = 1;
    #####:  447:    state->playedCardCount = 0;
    #####:  448:    state->handCount[state->whoseTurn] = 0;
        -:  449:
        -:  450:    //int k; move to top
        -:  451:    //Next player draws hand
    #####:  452:    for (k = 0; k < 5; k++){
    #####:  453:        drawCard(state->whoseTurn, state);//Draw a card
        -:  454:    }
        -:  455:
        -:  456:    //Update money
    #####:  457:    updateCoins(state->whoseTurn, state , 0);
        -:  458:
    #####:  459:    return 0;
        -:  460:}
        -:  461:
    #####:  462:int isGameOver(struct gameState *state) {
        -:  463:    int i;
        -:  464:    int j;
        -:  465:
        -:  466:    //if stack of Province cards is empty, the game ends
    #####:  467:    if (state->supplyCount[province] == 0)
        -:  468:    {
    #####:  469:        return 1;
        -:  470:    }
        -:  471:
        -:  472:    //if three supply pile are at 0, the game ends
    #####:  473:    j = 0;
    #####:  474:    for (i = 0; i < 25; i++)
        -:  475:    {
    #####:  476:        if (state->supplyCount[i] == 0)
        -:  477:        {
    #####:  478:            j++;
        -:  479:        }
        -:  480:    }
    #####:  481:    if ( j >= 3)
        -:  482:    {
    #####:  483:        return 1;
        -:  484:    }
        -:  485:
    #####:  486:    return 0;
        -:  487:}
        -:  488:
    #####:  489:int scoreFor (int player, struct gameState *state) {
        -:  490:
        -:  491:    int i;
    #####:  492:    int score = 0;
        -:  493:    //score from hand
    #####:  494:    for (i = 0; i < state->handCount[player]; i++)
        -:  495:    {
    #####:  496:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  497:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  498:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  499:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  500:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  501:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  502:    }
        -:  503:
        -:  504:    //score from discard
    #####:  505:    for (i = 0; i < state->discardCount[player]; i++)
        -:  506:    {
    #####:  507:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  508:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  509:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  510:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  511:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  512:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  519:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  520:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  521:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  522:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  523:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  524:    }
        -:  525:
    #####:  526:    return score;
        -:  527:}
        -:  528:
    #####:  529:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  530:    int i;	
        -:  531:    int j;
        -:  532:    int highScore;
        -:  533:    int currentPlayer;
        -:  534:
        -:  535:    //get score for each player
    #####:  536:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
        -:  538:        //set unused player scores to -9999
    #####:  539:        if (i >= state->numPlayers)
        -:  540:        {
    #####:  541:            players[i] = -9999;
        -:  542:        }
        -:  543:        else
        -:  544:        {
    #####:  545:            players[i] = scoreFor (i, state);
        -:  546:        }
        -:  547:    }
        -:  548:
        -:  549:    //find highest score
    #####:  550:    j = 0;
    #####:  551:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:        if (players[i] > players[j])
        -:  554:        {
    #####:  555:            j = i;
        -:  556:        }
        -:  557:    }
    #####:  558:    highScore = players[j];
        -:  559:
        -:  560:    //add 1 to players who had less turns
    #####:  561:    currentPlayer = whoseTurn(state);
    #####:  562:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  563:    {
    #####:  564:        if ( players[i] == highScore && i > currentPlayer )
        -:  565:        {
    #####:  566:            players[i]++;
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    //find new highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  573:    {
    #####:  574:        if ( players[i] > players[j] )
        -:  575:        {
    #####:  576:            j = i;
        -:  577:        }
        -:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //set winners in array to 1 and rest to 0
    #####:  582:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  583:    {
    #####:  584:        if ( players[i] == highScore )
        -:  585:        {
    #####:  586:            players[i] = 1;
        -:  587:        }
        -:  588:        else
        -:  589:        {
    #####:  590:            players[i] = 0;
        -:  591:        }
        -:  592:    }
        -:  593:
    #####:  594:    return 0;
        -:  595:}
        -:  596:
       24:  597:int drawCard(int player, struct gameState *state)
        -:  598:{	int count;
        -:  599:    int deckCounter;
       24:  600:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  601:
        -:  602:        //Step 1 Shuffle the discard pile back into a deck
        -:  603:        int i;
        -:  604:        //Move discard to deck
        9:  605:        for (i = 0; i < state->discardCount[player];i++){
    #####:  606:            state->deck[player][i] = state->discard[player][i];
    #####:  607:            state->discard[player][i] = -1;
        -:  608:        }
        -:  609:
        9:  610:        state->deckCount[player] = state->discardCount[player];
        9:  611:        state->discardCount[player] = 0;//Reset discard
        -:  612:
        -:  613:        //Shufffle the deck
        9:  614:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  615:
        9:  616:        if (DEBUG){//Debug statements
        -:  617:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  618:        }
        -:  619:
        9:  620:        state->discardCount[player] = 0;
        -:  621:
        -:  622:        //Step 2 Draw Card
        9:  623:        count = state->handCount[player];//Get current player's hand count
        -:  624:
        9:  625:        if (DEBUG){//Debug statements
        -:  626:            printf("Current hand count: %d\n", count);
        -:  627:        }
        -:  628:
        9:  629:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  630:
        9:  631:        if (deckCounter == 0)
        9:  632:            return -1;
        -:  633:
    #####:  634:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  635:        state->deckCount[player]--;
    #####:  636:        state->handCount[player]++;//Increment hand count
        -:  637:    }
        -:  638:
        -:  639:    else{
       15:  640:        int count = state->handCount[player];//Get current hand count for player
        -:  641:        int deckCounter;
       15:  642:        if (DEBUG){//Debug statements
        -:  643:            printf("Current hand count: %d\n", count);
        -:  644:        }
        -:  645:
       15:  646:        deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  647:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  648:        state->deckCount[player]--;
       15:  649:        state->handCount[player]++;//Increment hand count
        -:  650:    }
        -:  651:
       15:  652:    return 0;
        -:  653:}
        -:  654:
    #####:  655:int getCost(int cardNumber)
        -:  656:{
    #####:  657:    switch( cardNumber ) 
        -:  658:    {
        -:  659:        case curse:
    #####:  660:            return 0;
        -:  661:        case estate:
    #####:  662:            return 2;
        -:  663:        case duchy:
    #####:  664:            return 5;
        -:  665:        case province:
    #####:  666:            return 8;
        -:  667:        case copper:
    #####:  668:            return 0;
        -:  669:        case silver:
    #####:  670:            return 3;
        -:  671:        case gold:
    #####:  672:            return 6;
        -:  673:        case adventurer:
    #####:  674:            return 6;
        -:  675:        case council_room:
    #####:  676:            return 5;
        -:  677:        case feast:
    #####:  678:            return 4;
        -:  679:        case gardens:
    #####:  680:            return 4;
        -:  681:        case mine:
    #####:  682:            return 5;
        -:  683:        case remodel:
    #####:  684:            return 4;
        -:  685:        case smithy:
    #####:  686:            return 4;
        -:  687:        case village:
    #####:  688:            return 3;
        -:  689:        case baron:
    #####:  690:            return 4;
        -:  691:        case great_hall:
    #####:  692:            return 3;
        -:  693:        case minion:
    #####:  694:            return 5;
        -:  695:        case steward:
    #####:  696:            return 3;
        -:  697:        case tribute:
    #####:  698:            return 5;
        -:  699:        case ambassador:
    #####:  700:            return 3;
        -:  701:        case cutpurse:
    #####:  702:            return 4;
        -:  703:        case embargo: 
    #####:  704:            return 2;
        -:  705:        case outpost:
    #####:  706:            return 5;
        -:  707:        case salvager:
    #####:  708:            return 4;
        -:  709:        case sea_hag:
    #####:  710:            return 4;
        -:  711:        case treasure_map:
    #####:  712:            return 4;
        -:  713:    }
        -:  714:
    #####:  715:    return -1;
        -:  716:}
        -:  717:
        1:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:    int i;
        -:  721:    int j;
        -:  722:    int k;
        -:  723:    int x;
        -:  724:    int index;
        1:  725:    int currentPlayer = whoseTurn(state);
        1:  726:    int nextPlayer = currentPlayer + 1;
        -:  727:
        1:  728:    int tributeRevealedCards[2] = {-1, -1};
        -:  729:    int temphand[MAX_HAND];// moved above the if statement
        1:  730:    int drawntreasure=0;
        -:  731:    int cardDrawn;
        1:  732:    int z = 0;// this is the counter for the temp hand
        1:  733:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:        nextPlayer = 0;
        -:  735:    }
        -:  736:
        -:  737:
        -:  738:    //uses switch to select card and perform actions
        1:  739:    switch( card ) 
        -:  740:    {
        -:  741:        case adventurer:
    #####:  742:            while(drawntreasure<2){
    #####:  743:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  744:                    shuffle(currentPlayer, state);
        -:  745:                }
    #####:  746:                drawCard(currentPlayer, state);
    #####:  747:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  748:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  749:                    drawntreasure++;
        -:  750:                else{
    #####:  751:                    temphand[z]=cardDrawn;
    #####:  752:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  753:                    z++;
        -:  754:                }
        -:  755:            }
    #####:  756:            while(z-1>=0){
    #####:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  758:                z=z-1;
        -:  759:            }
    #####:  760:            return 0;			
        -:  761:        case council_room:
    #####:  762:            councilroom(currentPlayer, state, handPos);
    #####:  763:            break;	
        -:  764:            return 0;	
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
    #####:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:
    #####:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:
    #####:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:
    #####:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:
    #####:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:
        -:  806:                }
        -:  807:            }     
        -:  808:
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:
    #####:  816:            return 0;
        -:  817:
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);			
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:
    #####:  854:            return 0;
        -:  855:
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);			
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
    #####:  878:            return 0;	
        -:  879:        
        -:  880:        case smithy:
        1:  881:            mysmithy(currentPlayer, state, handPos);
        1:  882:            break;
        -:  883:
        -:  884:        case village:
    #####:  885:            myvillage(currentPlayer, state, handPos);
    #####:  886:            break;
        -:  887:
        -:  888:        case baron:
    #####:  889:            state->numBuys++;//Increase buys by 1!
    #####:  890:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:                int p = 0;//Iterator for hand!
    #####:  892:                int card_not_discarded = 1;//Flag for discard set!
    #####:  893:                while(card_not_discarded){
    #####:  894:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:                        state->discardCount[currentPlayer]++;
    #####:  898:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:                        }
    #####:  901:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:                        state->handCount[currentPlayer]--;
    #####:  903:                        card_not_discarded = 0;//Exit the loop
        -:  904:                    }
    #####:  905:                    else if (p > state->handCount[currentPlayer]){
    #####:  906:                        if(DEBUG) {
        -:  907:                            printf("No estate cards in your hand, invalid choice\n");
        -:  908:                            printf("Must gain an estate if there are any\n");
        -:  909:                        }
    #####:  910:                        if (supplyCount(estate, state) > 0){
    #####:  911:                            gainCard(estate, state, 0, currentPlayer);
    #####:  912:                            state->supplyCount[estate]--;//Decrement estates
    #####:  913:                            if (supplyCount(estate, state) == 0){
    #####:  914:                                isGameOver(state);
        -:  915:                            }
        -:  916:                        }
    #####:  917:                        card_not_discarded = 0;//Exit the loop
        -:  918:                    }
        -:  919:
        -:  920:                    else{
    #####:  921:                        p++;//Next card
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:            else{
    #####:  927:                if (supplyCount(estate, state) > 0){
    #####:  928:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  930:                    if (supplyCount(estate, state) == 0){
    #####:  931:                        isGameOver(state);
        -:  932:                    }
        -:  933:                }
        -:  934:            }
        -:  935:
        -:  936:
    #####:  937:            return 0;
        -:  938:
        -:  939:        case great_hall:
    #####:  940:            mygreathall(currentPlayer, state, handPos);
    #####:  941:            break;
        -:  942:
        -:  943:        case minion:
        -:  944:            //+1 action
    #####:  945:            state->numActions++;
        -:  946:
        -:  947:            //discard card from hand
    #####:  948:            discardCard(handPos, currentPlayer, state, 0);
        -:  949:
    #####:  950:            if (choice1)		//+2 coins
        -:  951:            {
    #####:  952:                state->coins = state->coins + 2;
        -:  953:            }
        -:  954:
    #####:  955:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:            {
        -:  957:                //discard hand
    #####:  958:                while(numHandCards(state) > 0)
        -:  959:                {
    #####:  960:                    discardCard(handPos, currentPlayer, state, 0);
        -:  961:                }
        -:  962:
        -:  963:                //draw 4
    #####:  964:                for (i = 0; i < 4; i++)
        -:  965:                {
    #####:  966:                    drawCard(currentPlayer, state);
        -:  967:                }
        -:  968:
        -:  969:                //other players discard hand and redraw if hand size > 4
    #####:  970:                for (i = 0; i < state->numPlayers; i++)
        -:  971:                {
    #####:  972:                    if (i != currentPlayer)
        -:  973:                    {
    #####:  974:                        if ( state->handCount[i] > 4 )
        -:  975:                        {
        -:  976:                            //discard hand
    #####:  977:                            while( state->handCount[i] > 0 )
        -:  978:                            {
    #####:  979:                                discardCard(handPos, i, state, 0);
        -:  980:                            }
        -:  981:
        -:  982:                            //draw 4
    #####:  983:                            for (j = 0; j < 4; j++)
        -:  984:                            {
    #####:  985:                                drawCard(i, state);
        -:  986:                            }
        -:  987:                        }
        -:  988:                    }
        -:  989:                }
        -:  990:
        -:  991:            }
    #####:  992:            return 0;
        -:  993:
        -:  994:        case steward:
    #####:  995:            if (choice1 == 1)
        -:  996:            {
        -:  997:                //+2 cards
    #####:  998:                drawCard(currentPlayer, state);
    #####:  999:                drawCard(currentPlayer, state);
        -: 1000:            }
    #####: 1001:            else if (choice1 == 2)
        -: 1002:            {
        -: 1003:                //+2 coins
    #####: 1004:                state->coins = state->coins + 2;
        -: 1005:            }
        -: 1006:            else
        -: 1007:            {
        -: 1008:                //trash 2 cards in hand
    #####: 1009:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:                discardCard(choice3, currentPlayer, state, 1);
        -: 1011:            }
        -: 1012:
        -: 1013:            //discard card from hand
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:            return 0;
        -: 1016:
        -: 1017:        case tribute:
    #####: 1018:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:                if (state->deckCount[nextPlayer] > 0){
    #####: 1020:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:                    state->deckCount[nextPlayer]--;
        -: 1022:                }
    #####: 1023:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:                    state->discardCount[nextPlayer]--;
        -: 1026:                }
        -: 1027:                else{
        -: 1028:                    //No Card to Reveal
    #####: 1029:                    if (DEBUG){
        -: 1030:                        printf("No cards to reveal\n");
        -: 1031:                    }
        -: 1032:                }
        -: 1033:            }
        -: 1034:
        -: 1035:            else{
    #####: 1036:                if (state->deckCount[nextPlayer] == 0){
    #####: 1037:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:                        state->deckCount[nextPlayer]++;
    #####: 1040:                        state->discard[nextPlayer][i] = -1;
    #####: 1041:                        state->discardCount[nextPlayer]--;
        -: 1042:                    }
        -: 1043:
    #####: 1044:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:                } 
    #####: 1046:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
    #####: 1049:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
        -: 1052:            }    
        -: 1053:
    #####: 1054:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:                state->playedCardCount++;
    #####: 1057:                tributeRevealedCards[1] = -1;
        -: 1058:            }
        -: 1059:
    #####: 1060:            for (i = 0; i <= 2; i ++){
    #####: 1061:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:                    state->coins += 2;
        -: 1063:                }
        -: 1064:
    #####: 1065:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:                    drawCard(currentPlayer, state);
    #####: 1067:                    drawCard(currentPlayer, state);
        -: 1068:                }
        -: 1069:                else{//Action Card
    #####: 1070:                    state->numActions = state->numActions + 2;
        -: 1071:                }
        -: 1072:            }
        -: 1073:
    #####: 1074:            return 0;
        -: 1075:
        -: 1076:        case ambassador:
    #####: 1077:            j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:            if (choice2 > 2 || choice2 < 0)
        -: 1080:            {
    #####: 1081:                return -1;				
        -: 1082:            }
        -: 1083:
    #####: 1084:            if (choice1 == handPos)
        -: 1085:            {
    #####: 1086:                return -1;
        -: 1087:            }
        -: 1088:
    #####: 1089:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:            {
    #####: 1091:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:                {
    #####: 1093:                    j++;
        -: 1094:                }
        -: 1095:            }
    #####: 1096:            if (j < choice2)
        -: 1097:            {
    #####: 1098:                return -1;				
        -: 1099:            }
        -: 1100:
    #####: 1101:            if (DEBUG) 
        -: 1102:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:            //increase supply count for choosen card by amount being discarded
    #####: 1105:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:            //each other player gains a copy of revealed card
    #####: 1108:            for (i = 0; i < state->numPlayers; i++)
        -: 1109:            {
    #####: 1110:                if (i != currentPlayer)
        -: 1111:                {
    #####: 1112:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:                }
        -: 1114:            }
        -: 1115:
        -: 1116:            //discard played card from hand
    #####: 1117:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:            //trash copies of cards returned to supply
    #####: 1120:            for (j = 0; j < choice2; j++)
        -: 1121:            {
    #####: 1122:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:                {
    #####: 1124:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:                    {
    #####: 1126:                        discardCard(i, currentPlayer, state, 1);
    #####: 1127:                        break;
        -: 1128:                    }
        -: 1129:                }
        -: 1130:            }			
        -: 1131:
    #####: 1132:            return 0;
        -: 1133:
        -: 1134:        case cutpurse:
        -: 1135:
    #####: 1136:            updateCoins(currentPlayer, state, 2);
    #####: 1137:            for (i = 0; i < state->numPlayers; i++)
        -: 1138:            {
    #####: 1139:                if (i != currentPlayer)
        -: 1140:                {
    #####: 1141:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1142:                    {
    #####: 1143:                        if (state->hand[i][j] == copper)
        -: 1144:                        {
    #####: 1145:                            discardCard(j, i, state, 0);
    #####: 1146:                            break;
        -: 1147:                        }
    #####: 1148:                        if (j == state->handCount[i])
        -: 1149:                        {
    #####: 1150:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1151:                            {
    #####: 1152:                                if (DEBUG)
        -: 1153:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:                            }	
    #####: 1155:                            break;
        -: 1156:                        }		
        -: 1157:                    }
        -: 1158:
        -: 1159:                }
        -: 1160:
        -: 1161:            }				
        -: 1162:
        -: 1163:            //discard played card from hand
    #####: 1164:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:
        -: 1169:        case embargo: 
        -: 1170:            //+2 Coins
    #####: 1171:            state->coins = state->coins + 2;
        -: 1172:
        -: 1173:            //see if selected pile is in play
    #####: 1174:            if ( state->supplyCount[choice1] == -1 )
        -: 1175:            {
    #####: 1176:                return -1;
        -: 1177:            }
        -: 1178:
        -: 1179:            //add embargo token to selected supply pile
    #####: 1180:            state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:            //trash card
    #####: 1183:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:        case outpost:
    #####: 1187:           myoutpost(currentPlayer, state, handPos);
    #####: 1188:          break; 
        -: 1189:
        -: 1190:        case salvager:
        -: 1191:            //+1 buy
    #####: 1192:            state->numBuys++;
        -: 1193:
    #####: 1194:            if (choice1)
        -: 1195:            {
        -: 1196:                //gain coins equal to trashed card
    #####: 1197:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:                //trash card
    #####: 1199:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:            }
        -: 1201:
        -: 1202:            //discard card
    #####: 1203:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:        case sea_hag:
    #####: 1207:            for (i = 0; i < state->numPlayers; i++){
    #####: 1208:                if (i != currentPlayer){
    #####: 1209:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:                    state->discardCount[i]++;
    #####: 1211:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:                }
        -: 1213:            }
    #####: 1214:            return 0;
        -: 1215:
        -: 1216:        case treasure_map:
        -: 1217:            //search hand for another treasure_map
    #####: 1218:            index = -1;
    #####: 1219:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:            {
    #####: 1221:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:                {
    #####: 1223:                    index = i;
    #####: 1224:                    break;
        -: 1225:                }
        -: 1226:            }
    #####: 1227:            if (index > -1)
        -: 1228:            {
        -: 1229:                //trash both treasure cards
    #####: 1230:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:                discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:                //gain 4 Gold cards
    #####: 1234:                for (i = 0; i < 4; i++)
        -: 1235:                {
    #####: 1236:                    gainCard(gold, state, 1, currentPlayer);
        -: 1237:                }
        -: 1238:
        -: 1239:                //return success
    #####: 1240:                return 1;
        -: 1241:            }
        -: 1242:
        -: 1243:            //no second treasure_map found in hand
    #####: 1244:            return -1;
        -: 1245:    }
        -: 1246:
        1: 1247:    return -1;
        -: 1248:}
        -: 1249:
        1: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:    //if card is not trashed, added to Played pile 
        1: 1254:    if (trashFlag < 1)
        -: 1255:    {
        -: 1256:        //add card to played pile
        1: 1257:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1258:        state->playedCardCount++;
        -: 1259:    }
        -: 1260:
        -: 1261:    //set played card to -1
        1: 1262:    state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:    //remove card from player's hand
        1: 1265:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:        //reduce number of cards in hand
    #####: 1268:        state->handCount[currentPlayer]--;
        -: 1269:    }
        1: 1270:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:        //reduce number of cards in hand
    #####: 1273:        state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:    else 	
        -: 1276:    {
        -: 1277:        //replace discarded card with last card in hand
        1: 1278:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:        //set last card to -1
        1: 1280:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:        //reduce number of cards in hand
        1: 1282:        state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
        1: 1285:    return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:    //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:        return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //added card for [whoseTurn] current player:
        -: 1299:    // toFlag = 0 : add to discard
        -: 1300:    // toFlag = 1 : add to deck
        -: 1301:    // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:    if (toFlag == 1)
        -: 1304:    {
    #####: 1305:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:        state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:    else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:        state->handCount[player]++;
        -: 1312:    }
        -: 1313:    else
        -: 1314:    {
    #####: 1315:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:        state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:    //decrease number in supply pile
    #####: 1320:    state->supplyCount[supplyPos]--;
        -: 1321:
    #####: 1322:    return 0;
        -: 1323:}
        -: 1324:
        1: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:    int i;
        -: 1328:
        -: 1329:    //reset coin count
        1: 1330:    state->coins = 0;
        -: 1331:
        -: 1332:    //add coins for each Treasure card in player's hand
        6: 1333:    for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
        5: 1335:        if (state->hand[player][i] == copper)
        -: 1336:        {
        4: 1337:            state->coins += 1;
        -: 1338:        }
        1: 1339:        else if (state->hand[player][i] == silver)
        -: 1340:        {
    #####: 1341:            state->coins += 2;
        -: 1342:        }
        1: 1343:        else if (state->hand[player][i] == gold)
        -: 1344:        {
    #####: 1345:            state->coins += 3;
        -: 1346:        }	
        -: 1347:    }	
        -: 1348:
        -: 1349:    //add bonus
        1: 1350:    state->coins += bonus;
        -: 1351:
        1: 1352:    return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:


CardTest2
FAILURE: Deck count was not increased by 1
File 'dominion.c'
Lines executed:23.25% of 585
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "helper.h"
    #####:    8:int councilroom(int currentPlayer, struct gameState *  state, int handPos){
    #####:    9:    int i = 0;  
        -:   10:    //+5 Cards
    #####:   11:      for (i = 0; i < 5; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:      //+1 Buy
    #####:   17:      state->numBuys++;
        -:   18:
        -:   19:      //+1 Action
    #####:   20:      state->numActions++;
        -:   21:			
        -:   22:      //Each other player draws a card
    #####:   23:      for (i = 0; i < state->numPlayers; i++)
        -:   24:	{
    #####:   25:	  if ( i != currentPlayer )
        -:   26:	    {
    #####:   27:	      drawCard(i, state);
    #####:   28:	      drawCard(i, state);
        -:   29:	    }
        -:   30:	}
        -:   31:			
        -:   32:      //put played card in played card pile
    #####:   33:      discardCard(handPos, currentPlayer, state, 0);
        -:   34:			
    #####:   35:      return 0;
        -:   36:}
    #####:   37:int mysmithy (int currentPlayer, struct gameState * state, int handPos){
        -:   38:    int i;
        -:   39:    //+3 Cards
    #####:   40:    for (i = 0; i < 9; i++)
        -:   41:    {
    #####:   42:        drawCard(currentPlayer, state);
        -:   43:    }		
        -:   44:    //discard card from hand
    #####:   45:    discardCard(handPos, currentPlayer, state, 0);
    #####:   46:    return 0;
        -:   47:}
        -:   48:
        1:   49:int myvillage(int currentPlayer, struct gameState * state, int handPos){
        -:   50:    //+1 Card
        1:   51:    drawCard(currentPlayer, state);
        -:   52:
        -:   53:    //+2 Actions
        1:   54:    state->numActions = state->numActions + 1;
        -:   55:
        -:   56:    //discard played card from hand
        1:   57:    discardCard(handPos, currentPlayer, state, 0);
        1:   58:    return 0;
        -:   59:}
    #####:   60:int mygreathall(int currentPlayer, struct gameState * state, int handPos){
        -:   61:            //+1 Card
    #####:   62:            drawCard(currentPlayer, state);
        -:   63:
        -:   64:            //+1 Actions
    #####:   65:            state->numActions++;
        -:   66:
        -:   67:            //discard card from hand
    #####:   68:            discardCard(handPos, currentPlayer, state, 0);
    #####:   69:            return 0;
        -:   70:}
        -:   71:
    #####:   72:int myoutpost(int currentPlayer, struct gameState * state, int handPos){
        -:   73:            //set outpost flag
    #####:   74:            state->outpostPlayed+2;
        -:   75:
        -:   76:            //discard card
    #####:   77:            discardCard(handPos, currentPlayer, state, 0);
    #####:   78:            return 0;
        -:   79:}
       30:   80:int compare(const void* a, const void* b) {
       30:   81:    if (*(int*)a > *(int*)b)
    #####:   82:        return 1;
       30:   83:    if (*(int*)a < *(int*)b)
        8:   84:        return -1;
       22:   85:    return 0;
        -:   86:}
        -:   87:
        1:   88:struct gameState* newGame() {
        1:   89:    struct gameState* g = malloc(sizeof(struct gameState));
        1:   90:    return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:        int k8, int k9, int k10) {
    #####:   95:    int* k = malloc(10 * sizeof(int));
    #####:   96:    k[0] = k1;
    #####:   97:    k[1] = k2;
    #####:   98:    k[2] = k3;
    #####:   99:    k[3] = k4;
    #####:  100:    k[4] = k5;
    #####:  101:    k[5] = k6;
    #####:  102:    k[6] = k7;
    #####:  103:    k[7] = k8;
    #####:  104:    k[8] = k9;
    #####:  105:    k[9] = k10;
    #####:  106:    return k;
        -:  107:}
        -:  108:
        1:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:        struct gameState *state) {
        -:  111:
        -:  112:    int i;
        -:  113:    int j;
        -:  114:    int it;			
        -:  115:    //set up random number generator
        1:  116:    SelectStream(1);
        1:  117:    PutSeed((long)randomSeed);
        -:  118:
        -:  119:    //check number of players
        1:  120:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
    #####:  122:        return -1;
        -:  123:    }
        -:  124:
        -:  125:    //set number of players
        1:  126:    state->numPlayers = numPlayers;
        -:  127:
        -:  128:    //check selected kingdom cards are different
       11:  129:    for (i = 0; i < 10; i++)
        -:  130:    {
      110:  131:        for (j = 0; j < 10; j++)
        -:  132:        {
      100:  133:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:            {
    #####:  135:                return -1;
        -:  136:            }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:    //initialize supply
        -:  142:    ///////////////////////////////
        -:  143:
        -:  144:    //set number of Curse cards
        1:  145:    if (numPlayers == 2)
        -:  146:    {
        1:  147:        state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:    else if (numPlayers == 3)
        -:  150:    {
    #####:  151:        state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:    else
        -:  154:    {
    #####:  155:        state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:    //set number of Victory cards
        1:  159:    if (numPlayers == 2)
        -:  160:    {
        1:  161:        state->supplyCount[estate] = 8;
        1:  162:        state->supplyCount[duchy] = 8;
        1:  163:        state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:        state->supplyCount[estate] = 12;
    #####:  168:        state->supplyCount[duchy] = 12;
    #####:  169:        state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:    //set number of Treasure cards
        1:  173:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  174:    state->supplyCount[silver] = 40;
        1:  175:    state->supplyCount[gold] = 30;
        -:  176:
        -:  177:    //set number of Kingdom cards
       21:  178:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
      165:  180:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:        {
      155:  182:            if (kingdomCards[j] == i)
        -:  183:            {
        -:  184:                //check if card is a 'Victory' Kingdom card
       12:  185:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:                {
        2:  187:                    if (numPlayers == 2){ 
        2:  188:                        state->supplyCount[i] = 8; 
        -:  189:                    }
    #####:  190:                    else{ state->supplyCount[i] = 12; }
        -:  191:                }
        -:  192:                else
        -:  193:                {
        8:  194:                    state->supplyCount[i] = 10;
        -:  195:                }
       10:  196:                break;
        -:  197:            }
        -:  198:            else    //card is not in the set choosen for the game
        -:  199:            {
      145:  200:                state->supplyCount[i] = -1;
        -:  201:            }
        -:  202:        }
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:    ////////////////////////
        -:  207:    //supply intilization complete
        -:  208:
        -:  209:    //set player decks
        3:  210:    for (i = 0; i < numPlayers; i++)
        -:  211:    {
        2:  212:        state->deckCount[i] = 0;
        8:  213:        for (j = 0; j < 3; j++)
        -:  214:        {
        6:  215:            state->deck[i][j] = estate;
        6:  216:            state->deckCount[i]++;
        -:  217:        }
       16:  218:        for (j = 3; j < 10; j++)
        -:  219:        {
       14:  220:            state->deck[i][j] = copper;
       14:  221:            state->deckCount[i]++;		
        -:  222:        }
        -:  223:    }
        -:  224:
        -:  225:    //shuffle player decks
        3:  226:    for (i = 0; i < numPlayers; i++)
        -:  227:    {
        2:  228:        if ( shuffle(i, state) < 0 )
        -:  229:        {
    #####:  230:            return -1;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    //draw player hands
        3:  235:    for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:        //initialize hand size to zero
        2:  238:        state->handCount[i] = 0;
        2:  239:        state->discardCount[i] = 0;
        -:  240:        //draw 5 cards
       12:  241:         for (j = 0; j < 5; j++)
        -:  242:        	{
       10:  243:        	  drawCard(i, state);
        -:  244:        	}
        -:  245:    }
        -:  246:
        -:  247:    //set embargo tokens to 0 for all supply piles
       28:  248:    for (i = 0; i <= treasure_map; i++)
        -:  249:    {
       27:  250:        state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:    //initialize first player's turn
        1:  254:    state->outpostPlayed = 0;
        1:  255:    state->phase = 0;
        1:  256:    state->numActions = 1;
        1:  257:    state->numBuys = 1;
        1:  258:    state->playedCardCount = 0;
        1:  259:    state->whoseTurn = 0;
        1:  260:    state->handCount[state->whoseTurn] = 0;
        -:  261:    //int it; move to top
        -:  262:
        -:  263:    //Moved draw cards to here, only drawing at the start of a turn
        6:  264:    for (it = 0; it < 5; it++){
        5:  265:        drawCard(state->whoseTurn, state);
        -:  266:    }
        -:  267:
        1:  268:    updateCoins(state->whoseTurn, state, 0);
        -:  269:
        1:  270:    return 0;
        -:  271:}
        -:  272:
        3:  273:int shuffle(int player, struct gameState *state) {
        -:  274:
        -:  275:
        -:  276:    int newDeck[MAX_DECK];
        3:  277:    int newDeckPos = 0;
        -:  278:    int card;
        -:  279:    int i;
        -:  280:
        3:  281:    if (state->deckCount[player] < 1)
        1:  282:        return -1;
        2:  283:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
       24:  286:    while (state->deckCount[player] > 0) {
       20:  287:        card = floor(Random() * state->deckCount[player]);
       20:  288:        newDeck[newDeckPos] = state->deck[player][card];
       20:  289:        newDeckPos++;
       80:  290:        for (i = card; i < state->deckCount[player]-1; i++) {
       60:  291:            state->deck[player][i] = state->deck[player][i+1];
        -:  292:        }
       20:  293:        state->deckCount[player]--;
        -:  294:    }
       22:  295:    for (i = 0; i < newDeckPos; i++) {
       20:  296:        state->deck[player][i] = newDeck[i];
       20:  297:        state->deckCount[player]++;
        -:  298:    }
        -:  299:
        2:  300:    return 0;
        -:  301:}
        -:  302:
    #####:  303:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  304:{	
        -:  305:    int card;
    #####:  306:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  307:
        -:  308:    //check if it is the right phase
    #####:  309:    if (state->phase != 0)
        -:  310:    {
    #####:  311:        return -1;
        -:  312:    }
        -:  313:
        -:  314:    //check if player has enough actions
    #####:  315:    if ( state->numActions < 1 )
        -:  316:    {
    #####:  317:        return -1;
        -:  318:    }
        -:  319:
        -:  320:    //get card played
    #####:  321:    card = handCard(handPos, state);
        -:  322:
        -:  323:    //check if selected card is an action
    #####:  324:    if ( card < adventurer || card > treasure_map )
        -:  325:    {
    #####:  326:        return -1;
        -:  327:    }
        -:  328:
        -:  329:    //play card
    #####:  330:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  331:    {
    #####:  332:        return -1;
        -:  333:    }
        -:  334:
        -:  335:    //reduce number of actions
    #####:  336:    state->numActions--;
        -:  337:
        -:  338:    //update coins (Treasure cards may be added with card draws)
    #####:  339:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  340:
    #####:  341:    return 0;
        -:  342:}
        -:  343:
    #####:  344:int buyCard(int supplyPos, struct gameState *state) {
        -:  345:    int who;
    #####:  346:    if (DEBUG){
        -:  347:        printf("Entering buyCard...\n");
        -:  348:    }
        -:  349:
        -:  350:    // I don't know what to do about the phase thing.
        -:  351:
    #####:  352:    who = state->whoseTurn;
        -:  353:
    #####:  354:    if (state->numBuys < 1){
    #####:  355:        if (DEBUG)
        -:  356:            printf("You do not have any buys left\n");
    #####:  357:        return -1;
    #####:  358:    } else if (supplyCount(supplyPos, state) <1){
    #####:  359:        if (DEBUG)
        -:  360:            printf("There are not any of that type of card left\n");
    #####:  361:        return -1;
    #####:  362:    } else if (state->coins < getCost(supplyPos)){
    #####:  363:        if (DEBUG) 
        -:  364:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  365:        return -1;
        -:  366:    } else {
    #####:  367:        state->phase=1;
        -:  368:        //state->supplyCount[supplyPos]--;
    #####:  369:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  370:
    #####:  371:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  372:        state->numBuys--;
    #####:  373:        if (DEBUG)
        -:  374:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  375:    }
        -:  376:
        -:  377:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  378:    //state->discardCount[who]++;
        -:  379:
    #####:  380:    return 0;
        -:  381:}
        -:  382:
    #####:  383:int numHandCards(struct gameState *state) {
    #####:  384:    return state->handCount[ whoseTurn(state) ];
        -:  385:}
        -:  386:
    #####:  387:int handCard(int handPos, struct gameState *state) {
    #####:  388:    int currentPlayer = whoseTurn(state);
    #####:  389:    return state->hand[currentPlayer][handPos];
        -:  390:}
        -:  391:
    #####:  392:int supplyCount(int card, struct gameState *state) {
    #####:  393:    return state->supplyCount[card];
        -:  394:}
        -:  395:
    #####:  396:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  397:    int i;
    #####:  398:    int count = 0;
        -:  399:
    #####:  400:    for (i = 0; i < state->deckCount[player]; i++)
        -:  401:    {
    #####:  402:        if (state->deck[player][i] == card) count++;
        -:  403:    }
        -:  404:
    #####:  405:    for (i = 0; i < state->handCount[player]; i++)
        -:  406:    {
    #####:  407:        if (state->hand[player][i] == card) count++;
        -:  408:    }
        -:  409:
    #####:  410:    for (i = 0; i < state->discardCount[player]; i++)
        -:  411:    {
    #####:  412:        if (state->discard[player][i] == card) count++;
        -:  413:    }
        -:  414:
    #####:  415:    return count;
        -:  416:}
        -:  417:
        1:  418:int whoseTurn(struct gameState *state) {
        1:  419:    return state->whoseTurn;
        -:  420:}
        -:  421:
    #####:  422:int endTurn(struct gameState *state) {
        -:  423:    int k;
        -:  424:    int i;
    #####:  425:    int currentPlayer = whoseTurn(state);
        -:  426:
        -:  427:    //Discard hand
    #####:  428:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  429:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  430:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  431:    }
    #####:  432:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  433:
        -:  434:    //Code for determining the player
    #####:  435:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  436:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  437:    }
        -:  438:    else{
    #####:  439:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  440:    }
        -:  441:
    #####:  442:    state->outpostPlayed = 0;
    #####:  443:    state->phase = 0;
    #####:  444:    state->numActions = 1;
    #####:  445:    state->coins = 0;
    #####:  446:    state->numBuys = 1;
    #####:  447:    state->playedCardCount = 0;
    #####:  448:    state->handCount[state->whoseTurn] = 0;
        -:  449:
        -:  450:    //int k; move to top
        -:  451:    //Next player draws hand
    #####:  452:    for (k = 0; k < 5; k++){
    #####:  453:        drawCard(state->whoseTurn, state);//Draw a card
        -:  454:    }
        -:  455:
        -:  456:    //Update money
    #####:  457:    updateCoins(state->whoseTurn, state , 0);
        -:  458:
    #####:  459:    return 0;
        -:  460:}
        -:  461:
    #####:  462:int isGameOver(struct gameState *state) {
        -:  463:    int i;
        -:  464:    int j;
        -:  465:
        -:  466:    //if stack of Province cards is empty, the game ends
    #####:  467:    if (state->supplyCount[province] == 0)
        -:  468:    {
    #####:  469:        return 1;
        -:  470:    }
        -:  471:
        -:  472:    //if three supply pile are at 0, the game ends
    #####:  473:    j = 0;
    #####:  474:    for (i = 0; i < 25; i++)
        -:  475:    {
    #####:  476:        if (state->supplyCount[i] == 0)
        -:  477:        {
    #####:  478:            j++;
        -:  479:        }
        -:  480:    }
    #####:  481:    if ( j >= 3)
        -:  482:    {
    #####:  483:        return 1;
        -:  484:    }
        -:  485:
    #####:  486:    return 0;
        -:  487:}
        -:  488:
    #####:  489:int scoreFor (int player, struct gameState *state) {
        -:  490:
        -:  491:    int i;
    #####:  492:    int score = 0;
        -:  493:    //score from hand
    #####:  494:    for (i = 0; i < state->handCount[player]; i++)
        -:  495:    {
    #####:  496:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  497:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  498:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  499:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  500:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  501:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  502:    }
        -:  503:
        -:  504:    //score from discard
    #####:  505:    for (i = 0; i < state->discardCount[player]; i++)
        -:  506:    {
    #####:  507:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  508:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  509:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  510:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  511:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  512:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  519:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  520:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  521:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  522:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  523:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  524:    }
        -:  525:
    #####:  526:    return score;
        -:  527:}
        -:  528:
    #####:  529:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  530:    int i;	
        -:  531:    int j;
        -:  532:    int highScore;
        -:  533:    int currentPlayer;
        -:  534:
        -:  535:    //get score for each player
    #####:  536:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
        -:  538:        //set unused player scores to -9999
    #####:  539:        if (i >= state->numPlayers)
        -:  540:        {
    #####:  541:            players[i] = -9999;
        -:  542:        }
        -:  543:        else
        -:  544:        {
    #####:  545:            players[i] = scoreFor (i, state);
        -:  546:        }
        -:  547:    }
        -:  548:
        -:  549:    //find highest score
    #####:  550:    j = 0;
    #####:  551:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:        if (players[i] > players[j])
        -:  554:        {
    #####:  555:            j = i;
        -:  556:        }
        -:  557:    }
    #####:  558:    highScore = players[j];
        -:  559:
        -:  560:    //add 1 to players who had less turns
    #####:  561:    currentPlayer = whoseTurn(state);
    #####:  562:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  563:    {
    #####:  564:        if ( players[i] == highScore && i > currentPlayer )
        -:  565:        {
    #####:  566:            players[i]++;
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    //find new highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  573:    {
    #####:  574:        if ( players[i] > players[j] )
        -:  575:        {
    #####:  576:            j = i;
        -:  577:        }
        -:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //set winners in array to 1 and rest to 0
    #####:  582:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  583:    {
    #####:  584:        if ( players[i] == highScore )
        -:  585:        {
    #####:  586:            players[i] = 1;
        -:  587:        }
        -:  588:        else
        -:  589:        {
    #####:  590:            players[i] = 0;
        -:  591:        }
        -:  592:    }
        -:  593:
    #####:  594:    return 0;
        -:  595:}
        -:  596:
       16:  597:int drawCard(int player, struct gameState *state)
        -:  598:{	int count;
        -:  599:    int deckCounter;
       16:  600:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  601:
        -:  602:        //Step 1 Shuffle the discard pile back into a deck
        -:  603:        int i;
        -:  604:        //Move discard to deck
        1:  605:        for (i = 0; i < state->discardCount[player];i++){
    #####:  606:            state->deck[player][i] = state->discard[player][i];
    #####:  607:            state->discard[player][i] = -1;
        -:  608:        }
        -:  609:
        1:  610:        state->deckCount[player] = state->discardCount[player];
        1:  611:        state->discardCount[player] = 0;//Reset discard
        -:  612:
        -:  613:        //Shufffle the deck
        1:  614:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  615:
        1:  616:        if (DEBUG){//Debug statements
        -:  617:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  618:        }
        -:  619:
        1:  620:        state->discardCount[player] = 0;
        -:  621:
        -:  622:        //Step 2 Draw Card
        1:  623:        count = state->handCount[player];//Get current player's hand count
        -:  624:
        1:  625:        if (DEBUG){//Debug statements
        -:  626:            printf("Current hand count: %d\n", count);
        -:  627:        }
        -:  628:
        1:  629:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  630:
        1:  631:        if (deckCounter == 0)
        1:  632:            return -1;
        -:  633:
    #####:  634:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  635:        state->deckCount[player]--;
    #####:  636:        state->handCount[player]++;//Increment hand count
        -:  637:    }
        -:  638:
        -:  639:    else{
       15:  640:        int count = state->handCount[player];//Get current hand count for player
        -:  641:        int deckCounter;
       15:  642:        if (DEBUG){//Debug statements
        -:  643:            printf("Current hand count: %d\n", count);
        -:  644:        }
        -:  645:
       15:  646:        deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  647:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  648:        state->deckCount[player]--;
       15:  649:        state->handCount[player]++;//Increment hand count
        -:  650:    }
        -:  651:
       15:  652:    return 0;
        -:  653:}
        -:  654:
    #####:  655:int getCost(int cardNumber)
        -:  656:{
    #####:  657:    switch( cardNumber ) 
        -:  658:    {
        -:  659:        case curse:
    #####:  660:            return 0;
        -:  661:        case estate:
    #####:  662:            return 2;
        -:  663:        case duchy:
    #####:  664:            return 5;
        -:  665:        case province:
    #####:  666:            return 8;
        -:  667:        case copper:
    #####:  668:            return 0;
        -:  669:        case silver:
    #####:  670:            return 3;
        -:  671:        case gold:
    #####:  672:            return 6;
        -:  673:        case adventurer:
    #####:  674:            return 6;
        -:  675:        case council_room:
    #####:  676:            return 5;
        -:  677:        case feast:
    #####:  678:            return 4;
        -:  679:        case gardens:
    #####:  680:            return 4;
        -:  681:        case mine:
    #####:  682:            return 5;
        -:  683:        case remodel:
    #####:  684:            return 4;
        -:  685:        case smithy:
    #####:  686:            return 4;
        -:  687:        case village:
    #####:  688:            return 3;
        -:  689:        case baron:
    #####:  690:            return 4;
        -:  691:        case great_hall:
    #####:  692:            return 3;
        -:  693:        case minion:
    #####:  694:            return 5;
        -:  695:        case steward:
    #####:  696:            return 3;
        -:  697:        case tribute:
    #####:  698:            return 5;
        -:  699:        case ambassador:
    #####:  700:            return 3;
        -:  701:        case cutpurse:
    #####:  702:            return 4;
        -:  703:        case embargo: 
    #####:  704:            return 2;
        -:  705:        case outpost:
    #####:  706:            return 5;
        -:  707:        case salvager:
    #####:  708:            return 4;
        -:  709:        case sea_hag:
    #####:  710:            return 4;
        -:  711:        case treasure_map:
    #####:  712:            return 4;
        -:  713:    }
        -:  714:
    #####:  715:    return -1;
        -:  716:}
        -:  717:
        1:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:    int i;
        -:  721:    int j;
        -:  722:    int k;
        -:  723:    int x;
        -:  724:    int index;
        1:  725:    int currentPlayer = whoseTurn(state);
        1:  726:    int nextPlayer = currentPlayer + 1;
        -:  727:
        1:  728:    int tributeRevealedCards[2] = {-1, -1};
        -:  729:    int temphand[MAX_HAND];// moved above the if statement
        1:  730:    int drawntreasure=0;
        -:  731:    int cardDrawn;
        1:  732:    int z = 0;// this is the counter for the temp hand
        1:  733:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:        nextPlayer = 0;
        -:  735:    }
        -:  736:
        -:  737:
        -:  738:    //uses switch to select card and perform actions
        1:  739:    switch( card ) 
        -:  740:    {
        -:  741:        case adventurer:
    #####:  742:            while(drawntreasure<2){
    #####:  743:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  744:                    shuffle(currentPlayer, state);
        -:  745:                }
    #####:  746:                drawCard(currentPlayer, state);
    #####:  747:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  748:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  749:                    drawntreasure++;
        -:  750:                else{
    #####:  751:                    temphand[z]=cardDrawn;
    #####:  752:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  753:                    z++;
        -:  754:                }
        -:  755:            }
    #####:  756:            while(z-1>=0){
    #####:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  758:                z=z-1;
        -:  759:            }
    #####:  760:            return 0;			
        -:  761:        case council_room:
    #####:  762:            councilroom(currentPlayer, state, handPos);
    #####:  763:            break;	
        -:  764:            return 0;	
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
    #####:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:
    #####:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:
    #####:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:
    #####:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:
    #####:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:
        -:  806:                }
        -:  807:            }     
        -:  808:
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:
    #####:  816:            return 0;
        -:  817:
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);			
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:
    #####:  854:            return 0;
        -:  855:
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);			
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
    #####:  878:            return 0;	
        -:  879:        
        -:  880:        case smithy:
    #####:  881:            mysmithy(currentPlayer, state, handPos);
    #####:  882:            break;
        -:  883:
        -:  884:        case village:
        1:  885:            myvillage(currentPlayer, state, handPos);
        1:  886:            break;
        -:  887:
        -:  888:        case baron:
    #####:  889:            state->numBuys++;//Increase buys by 1!
    #####:  890:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:                int p = 0;//Iterator for hand!
    #####:  892:                int card_not_discarded = 1;//Flag for discard set!
    #####:  893:                while(card_not_discarded){
    #####:  894:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:                        state->discardCount[currentPlayer]++;
    #####:  898:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:                        }
    #####:  901:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:                        state->handCount[currentPlayer]--;
    #####:  903:                        card_not_discarded = 0;//Exit the loop
        -:  904:                    }
    #####:  905:                    else if (p > state->handCount[currentPlayer]){
    #####:  906:                        if(DEBUG) {
        -:  907:                            printf("No estate cards in your hand, invalid choice\n");
        -:  908:                            printf("Must gain an estate if there are any\n");
        -:  909:                        }
    #####:  910:                        if (supplyCount(estate, state) > 0){
    #####:  911:                            gainCard(estate, state, 0, currentPlayer);
    #####:  912:                            state->supplyCount[estate]--;//Decrement estates
    #####:  913:                            if (supplyCount(estate, state) == 0){
    #####:  914:                                isGameOver(state);
        -:  915:                            }
        -:  916:                        }
    #####:  917:                        card_not_discarded = 0;//Exit the loop
        -:  918:                    }
        -:  919:
        -:  920:                    else{
    #####:  921:                        p++;//Next card
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:            else{
    #####:  927:                if (supplyCount(estate, state) > 0){
    #####:  928:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  930:                    if (supplyCount(estate, state) == 0){
    #####:  931:                        isGameOver(state);
        -:  932:                    }
        -:  933:                }
        -:  934:            }
        -:  935:
        -:  936:
    #####:  937:            return 0;
        -:  938:
        -:  939:        case great_hall:
    #####:  940:            mygreathall(currentPlayer, state, handPos);
    #####:  941:            break;
        -:  942:
        -:  943:        case minion:
        -:  944:            //+1 action
    #####:  945:            state->numActions++;
        -:  946:
        -:  947:            //discard card from hand
    #####:  948:            discardCard(handPos, currentPlayer, state, 0);
        -:  949:
    #####:  950:            if (choice1)		//+2 coins
        -:  951:            {
    #####:  952:                state->coins = state->coins + 2;
        -:  953:            }
        -:  954:
    #####:  955:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:            {
        -:  957:                //discard hand
    #####:  958:                while(numHandCards(state) > 0)
        -:  959:                {
    #####:  960:                    discardCard(handPos, currentPlayer, state, 0);
        -:  961:                }
        -:  962:
        -:  963:                //draw 4
    #####:  964:                for (i = 0; i < 4; i++)
        -:  965:                {
    #####:  966:                    drawCard(currentPlayer, state);
        -:  967:                }
        -:  968:
        -:  969:                //other players discard hand and redraw if hand size > 4
    #####:  970:                for (i = 0; i < state->numPlayers; i++)
        -:  971:                {
    #####:  972:                    if (i != currentPlayer)
        -:  973:                    {
    #####:  974:                        if ( state->handCount[i] > 4 )
        -:  975:                        {
        -:  976:                            //discard hand
    #####:  977:                            while( state->handCount[i] > 0 )
        -:  978:                            {
    #####:  979:                                discardCard(handPos, i, state, 0);
        -:  980:                            }
        -:  981:
        -:  982:                            //draw 4
    #####:  983:                            for (j = 0; j < 4; j++)
        -:  984:                            {
    #####:  985:                                drawCard(i, state);
        -:  986:                            }
        -:  987:                        }
        -:  988:                    }
        -:  989:                }
        -:  990:
        -:  991:            }
    #####:  992:            return 0;
        -:  993:
        -:  994:        case steward:
    #####:  995:            if (choice1 == 1)
        -:  996:            {
        -:  997:                //+2 cards
    #####:  998:                drawCard(currentPlayer, state);
    #####:  999:                drawCard(currentPlayer, state);
        -: 1000:            }
    #####: 1001:            else if (choice1 == 2)
        -: 1002:            {
        -: 1003:                //+2 coins
    #####: 1004:                state->coins = state->coins + 2;
        -: 1005:            }
        -: 1006:            else
        -: 1007:            {
        -: 1008:                //trash 2 cards in hand
    #####: 1009:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:                discardCard(choice3, currentPlayer, state, 1);
        -: 1011:            }
        -: 1012:
        -: 1013:            //discard card from hand
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:            return 0;
        -: 1016:
        -: 1017:        case tribute:
    #####: 1018:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:                if (state->deckCount[nextPlayer] > 0){
    #####: 1020:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:                    state->deckCount[nextPlayer]--;
        -: 1022:                }
    #####: 1023:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:                    state->discardCount[nextPlayer]--;
        -: 1026:                }
        -: 1027:                else{
        -: 1028:                    //No Card to Reveal
    #####: 1029:                    if (DEBUG){
        -: 1030:                        printf("No cards to reveal\n");
        -: 1031:                    }
        -: 1032:                }
        -: 1033:            }
        -: 1034:
        -: 1035:            else{
    #####: 1036:                if (state->deckCount[nextPlayer] == 0){
    #####: 1037:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:                        state->deckCount[nextPlayer]++;
    #####: 1040:                        state->discard[nextPlayer][i] = -1;
    #####: 1041:                        state->discardCount[nextPlayer]--;
        -: 1042:                    }
        -: 1043:
    #####: 1044:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:                } 
    #####: 1046:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
    #####: 1049:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
        -: 1052:            }    
        -: 1053:
    #####: 1054:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:                state->playedCardCount++;
    #####: 1057:                tributeRevealedCards[1] = -1;
        -: 1058:            }
        -: 1059:
    #####: 1060:            for (i = 0; i <= 2; i ++){
    #####: 1061:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:                    state->coins += 2;
        -: 1063:                }
        -: 1064:
    #####: 1065:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:                    drawCard(currentPlayer, state);
    #####: 1067:                    drawCard(currentPlayer, state);
        -: 1068:                }
        -: 1069:                else{//Action Card
    #####: 1070:                    state->numActions = state->numActions + 2;
        -: 1071:                }
        -: 1072:            }
        -: 1073:
    #####: 1074:            return 0;
        -: 1075:
        -: 1076:        case ambassador:
    #####: 1077:            j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:            if (choice2 > 2 || choice2 < 0)
        -: 1080:            {
    #####: 1081:                return -1;				
        -: 1082:            }
        -: 1083:
    #####: 1084:            if (choice1 == handPos)
        -: 1085:            {
    #####: 1086:                return -1;
        -: 1087:            }
        -: 1088:
    #####: 1089:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:            {
    #####: 1091:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:                {
    #####: 1093:                    j++;
        -: 1094:                }
        -: 1095:            }
    #####: 1096:            if (j < choice2)
        -: 1097:            {
    #####: 1098:                return -1;				
        -: 1099:            }
        -: 1100:
    #####: 1101:            if (DEBUG) 
        -: 1102:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:            //increase supply count for choosen card by amount being discarded
    #####: 1105:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:            //each other player gains a copy of revealed card
    #####: 1108:            for (i = 0; i < state->numPlayers; i++)
        -: 1109:            {
    #####: 1110:                if (i != currentPlayer)
        -: 1111:                {
    #####: 1112:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:                }
        -: 1114:            }
        -: 1115:
        -: 1116:            //discard played card from hand
    #####: 1117:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:            //trash copies of cards returned to supply
    #####: 1120:            for (j = 0; j < choice2; j++)
        -: 1121:            {
    #####: 1122:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:                {
    #####: 1124:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:                    {
    #####: 1126:                        discardCard(i, currentPlayer, state, 1);
    #####: 1127:                        break;
        -: 1128:                    }
        -: 1129:                }
        -: 1130:            }			
        -: 1131:
    #####: 1132:            return 0;
        -: 1133:
        -: 1134:        case cutpurse:
        -: 1135:
    #####: 1136:            updateCoins(currentPlayer, state, 2);
    #####: 1137:            for (i = 0; i < state->numPlayers; i++)
        -: 1138:            {
    #####: 1139:                if (i != currentPlayer)
        -: 1140:                {
    #####: 1141:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1142:                    {
    #####: 1143:                        if (state->hand[i][j] == copper)
        -: 1144:                        {
    #####: 1145:                            discardCard(j, i, state, 0);
    #####: 1146:                            break;
        -: 1147:                        }
    #####: 1148:                        if (j == state->handCount[i])
        -: 1149:                        {
    #####: 1150:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1151:                            {
    #####: 1152:                                if (DEBUG)
        -: 1153:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:                            }	
    #####: 1155:                            break;
        -: 1156:                        }		
        -: 1157:                    }
        -: 1158:
        -: 1159:                }
        -: 1160:
        -: 1161:            }				
        -: 1162:
        -: 1163:            //discard played card from hand
    #####: 1164:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:
        -: 1169:        case embargo: 
        -: 1170:            //+2 Coins
    #####: 1171:            state->coins = state->coins + 2;
        -: 1172:
        -: 1173:            //see if selected pile is in play
    #####: 1174:            if ( state->supplyCount[choice1] == -1 )
        -: 1175:            {
    #####: 1176:                return -1;
        -: 1177:            }
        -: 1178:
        -: 1179:            //add embargo token to selected supply pile
    #####: 1180:            state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:            //trash card
    #####: 1183:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:        case outpost:
    #####: 1187:           myoutpost(currentPlayer, state, handPos);
    #####: 1188:          break; 
        -: 1189:
        -: 1190:        case salvager:
        -: 1191:            //+1 buy
    #####: 1192:            state->numBuys++;
        -: 1193:
    #####: 1194:            if (choice1)
        -: 1195:            {
        -: 1196:                //gain coins equal to trashed card
    #####: 1197:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:                //trash card
    #####: 1199:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:            }
        -: 1201:
        -: 1202:            //discard card
    #####: 1203:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:        case sea_hag:
    #####: 1207:            for (i = 0; i < state->numPlayers; i++){
    #####: 1208:                if (i != currentPlayer){
    #####: 1209:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:                    state->discardCount[i]++;
    #####: 1211:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:                }
        -: 1213:            }
    #####: 1214:            return 0;
        -: 1215:
        -: 1216:        case treasure_map:
        -: 1217:            //search hand for another treasure_map
    #####: 1218:            index = -1;
    #####: 1219:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:            {
    #####: 1221:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:                {
    #####: 1223:                    index = i;
    #####: 1224:                    break;
        -: 1225:                }
        -: 1226:            }
    #####: 1227:            if (index > -1)
        -: 1228:            {
        -: 1229:                //trash both treasure cards
    #####: 1230:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:                discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:                //gain 4 Gold cards
    #####: 1234:                for (i = 0; i < 4; i++)
        -: 1235:                {
    #####: 1236:                    gainCard(gold, state, 1, currentPlayer);
        -: 1237:                }
        -: 1238:
        -: 1239:                //return success
    #####: 1240:                return 1;
        -: 1241:            }
        -: 1242:
        -: 1243:            //no second treasure_map found in hand
    #####: 1244:            return -1;
        -: 1245:    }
        -: 1246:
        1: 1247:    return -1;
        -: 1248:}
        -: 1249:
        1: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:    //if card is not trashed, added to Played pile 
        1: 1254:    if (trashFlag < 1)
        -: 1255:    {
        -: 1256:        //add card to played pile
        1: 1257:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1258:        state->playedCardCount++;
        -: 1259:    }
        -: 1260:
        -: 1261:    //set played card to -1
        1: 1262:    state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:    //remove card from player's hand
        1: 1265:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:        //reduce number of cards in hand
    #####: 1268:        state->handCount[currentPlayer]--;
        -: 1269:    }
        1: 1270:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:        //reduce number of cards in hand
    #####: 1273:        state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:    else 	
        -: 1276:    {
        -: 1277:        //replace discarded card with last card in hand
        1: 1278:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:        //set last card to -1
        1: 1280:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:        //reduce number of cards in hand
        1: 1282:        state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
        1: 1285:    return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:    //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:        return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //added card for [whoseTurn] current player:
        -: 1299:    // toFlag = 0 : add to discard
        -: 1300:    // toFlag = 1 : add to deck
        -: 1301:    // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:    if (toFlag == 1)
        -: 1304:    {
    #####: 1305:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:        state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:    else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:        state->handCount[player]++;
        -: 1312:    }
        -: 1313:    else
        -: 1314:    {
    #####: 1315:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:        state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:    //decrease number in supply pile
    #####: 1320:    state->supplyCount[supplyPos]--;
        -: 1321:
    #####: 1322:    return 0;
        -: 1323:}
        -: 1324:
        1: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:    int i;
        -: 1328:
        -: 1329:    //reset coin count
        1: 1330:    state->coins = 0;
        -: 1331:
        -: 1332:    //add coins for each Treasure card in player's hand
        6: 1333:    for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
        5: 1335:        if (state->hand[player][i] == copper)
        -: 1336:        {
        4: 1337:            state->coins += 1;
        -: 1338:        }
        1: 1339:        else if (state->hand[player][i] == silver)
        -: 1340:        {
    #####: 1341:            state->coins += 2;
        -: 1342:        }
        1: 1343:        else if (state->hand[player][i] == gold)
        -: 1344:        {
    #####: 1345:            state->coins += 3;
        -: 1346:        }	
        -: 1347:    }	
        -: 1348:
        -: 1349:    //add bonus
        1: 1350:    state->coins += bonus;
        -: 1351:
        1: 1352:    return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:


CardTest3
The total number of estates is: 0
FAILURE: Using the Baron and discarding an estate did not  increase buys by 1
FAILURE: Using a Baron and discarding an estate did not increase coins by 4
FAILURE: Using a Baron did not actually discard the estate
After discarding, the total number of estate is: 1
After keeping, the total number of estates is: 1
File 'dominion.c'
Lines executed:25.47% of 585
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "helper.h"
    #####:    8:int councilroom(int currentPlayer, struct gameState *  state, int handPos){
    #####:    9:    int i = 0;  
        -:   10:    //+5 Cards
    #####:   11:      for (i = 0; i < 5; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:      //+1 Buy
    #####:   17:      state->numBuys++;
        -:   18:
        -:   19:      //+1 Action
    #####:   20:      state->numActions++;
        -:   21:			
        -:   22:      //Each other player draws a card
    #####:   23:      for (i = 0; i < state->numPlayers; i++)
        -:   24:	{
    #####:   25:	  if ( i != currentPlayer )
        -:   26:	    {
    #####:   27:	      drawCard(i, state);
    #####:   28:	      drawCard(i, state);
        -:   29:	    }
        -:   30:	}
        -:   31:			
        -:   32:      //put played card in played card pile
    #####:   33:      discardCard(handPos, currentPlayer, state, 0);
        -:   34:			
    #####:   35:      return 0;
        -:   36:}
    #####:   37:int mysmithy (int currentPlayer, struct gameState * state, int handPos){
        -:   38:    int i;
        -:   39:    //+3 Cards
    #####:   40:    for (i = 0; i < 9; i++)
        -:   41:    {
    #####:   42:        drawCard(currentPlayer, state);
        -:   43:    }		
        -:   44:    //discard card from hand
    #####:   45:    discardCard(handPos, currentPlayer, state, 0);
    #####:   46:    return 0;
        -:   47:}
        -:   48:
    #####:   49:int myvillage(int currentPlayer, struct gameState * state, int handPos){
        -:   50:    //+1 Card
    #####:   51:    drawCard(currentPlayer, state);
        -:   52:
        -:   53:    //+2 Actions
    #####:   54:    state->numActions = state->numActions + 1;
        -:   55:
        -:   56:    //discard played card from hand
    #####:   57:    discardCard(handPos, currentPlayer, state, 0);
    #####:   58:    return 0;
        -:   59:}
    #####:   60:int mygreathall(int currentPlayer, struct gameState * state, int handPos){
        -:   61:            //+1 Card
    #####:   62:            drawCard(currentPlayer, state);
        -:   63:
        -:   64:            //+1 Actions
    #####:   65:            state->numActions++;
        -:   66:
        -:   67:            //discard card from hand
    #####:   68:            discardCard(handPos, currentPlayer, state, 0);
    #####:   69:            return 0;
        -:   70:}
        -:   71:
    #####:   72:int myoutpost(int currentPlayer, struct gameState * state, int handPos){
        -:   73:            //set outpost flag
    #####:   74:            state->outpostPlayed+2;
        -:   75:
        -:   76:            //discard card
    #####:   77:            discardCard(handPos, currentPlayer, state, 0);
    #####:   78:            return 0;
        -:   79:}
       30:   80:int compare(const void* a, const void* b) {
       30:   81:    if (*(int*)a > *(int*)b)
    #####:   82:        return 1;
       30:   83:    if (*(int*)a < *(int*)b)
        8:   84:        return -1;
       22:   85:    return 0;
        -:   86:}
        -:   87:
        1:   88:struct gameState* newGame() {
        1:   89:    struct gameState* g = malloc(sizeof(struct gameState));
        1:   90:    return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:        int k8, int k9, int k10) {
    #####:   95:    int* k = malloc(10 * sizeof(int));
    #####:   96:    k[0] = k1;
    #####:   97:    k[1] = k2;
    #####:   98:    k[2] = k3;
    #####:   99:    k[3] = k4;
    #####:  100:    k[4] = k5;
    #####:  101:    k[5] = k6;
    #####:  102:    k[6] = k7;
    #####:  103:    k[7] = k8;
    #####:  104:    k[8] = k9;
    #####:  105:    k[9] = k10;
    #####:  106:    return k;
        -:  107:}
        -:  108:
        1:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:        struct gameState *state) {
        -:  111:
        -:  112:    int i;
        -:  113:    int j;
        -:  114:    int it;			
        -:  115:    //set up random number generator
        1:  116:    SelectStream(1);
        1:  117:    PutSeed((long)randomSeed);
        -:  118:
        -:  119:    //check number of players
        1:  120:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
    #####:  122:        return -1;
        -:  123:    }
        -:  124:
        -:  125:    //set number of players
        1:  126:    state->numPlayers = numPlayers;
        -:  127:
        -:  128:    //check selected kingdom cards are different
       11:  129:    for (i = 0; i < 10; i++)
        -:  130:    {
      110:  131:        for (j = 0; j < 10; j++)
        -:  132:        {
      100:  133:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:            {
    #####:  135:                return -1;
        -:  136:            }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:    //initialize supply
        -:  142:    ///////////////////////////////
        -:  143:
        -:  144:    //set number of Curse cards
        1:  145:    if (numPlayers == 2)
        -:  146:    {
        1:  147:        state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:    else if (numPlayers == 3)
        -:  150:    {
    #####:  151:        state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:    else
        -:  154:    {
    #####:  155:        state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:    //set number of Victory cards
        1:  159:    if (numPlayers == 2)
        -:  160:    {
        1:  161:        state->supplyCount[estate] = 8;
        1:  162:        state->supplyCount[duchy] = 8;
        1:  163:        state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:        state->supplyCount[estate] = 12;
    #####:  168:        state->supplyCount[duchy] = 12;
    #####:  169:        state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:    //set number of Treasure cards
        1:  173:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  174:    state->supplyCount[silver] = 40;
        1:  175:    state->supplyCount[gold] = 30;
        -:  176:
        -:  177:    //set number of Kingdom cards
       21:  178:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
      165:  180:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:        {
      155:  182:            if (kingdomCards[j] == i)
        -:  183:            {
        -:  184:                //check if card is a 'Victory' Kingdom card
       12:  185:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:                {
        2:  187:                    if (numPlayers == 2){ 
        2:  188:                        state->supplyCount[i] = 8; 
        -:  189:                    }
    #####:  190:                    else{ state->supplyCount[i] = 12; }
        -:  191:                }
        -:  192:                else
        -:  193:                {
        8:  194:                    state->supplyCount[i] = 10;
        -:  195:                }
       10:  196:                break;
        -:  197:            }
        -:  198:            else    //card is not in the set choosen for the game
        -:  199:            {
      145:  200:                state->supplyCount[i] = -1;
        -:  201:            }
        -:  202:        }
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:    ////////////////////////
        -:  207:    //supply intilization complete
        -:  208:
        -:  209:    //set player decks
        3:  210:    for (i = 0; i < numPlayers; i++)
        -:  211:    {
        2:  212:        state->deckCount[i] = 0;
        8:  213:        for (j = 0; j < 3; j++)
        -:  214:        {
        6:  215:            state->deck[i][j] = estate;
        6:  216:            state->deckCount[i]++;
        -:  217:        }
       16:  218:        for (j = 3; j < 10; j++)
        -:  219:        {
       14:  220:            state->deck[i][j] = copper;
       14:  221:            state->deckCount[i]++;		
        -:  222:        }
        -:  223:    }
        -:  224:
        -:  225:    //shuffle player decks
        3:  226:    for (i = 0; i < numPlayers; i++)
        -:  227:    {
        2:  228:        if ( shuffle(i, state) < 0 )
        -:  229:        {
    #####:  230:            return -1;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    //draw player hands
        3:  235:    for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:        //initialize hand size to zero
        2:  238:        state->handCount[i] = 0;
        2:  239:        state->discardCount[i] = 0;
        -:  240:        //draw 5 cards
       12:  241:         for (j = 0; j < 5; j++)
        -:  242:        	{
       10:  243:        	  drawCard(i, state);
        -:  244:        	}
        -:  245:    }
        -:  246:
        -:  247:    //set embargo tokens to 0 for all supply piles
       28:  248:    for (i = 0; i <= treasure_map; i++)
        -:  249:    {
       27:  250:        state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:    //initialize first player's turn
        1:  254:    state->outpostPlayed = 0;
        1:  255:    state->phase = 0;
        1:  256:    state->numActions = 1;
        1:  257:    state->numBuys = 1;
        1:  258:    state->playedCardCount = 0;
        1:  259:    state->whoseTurn = 0;
        1:  260:    state->handCount[state->whoseTurn] = 0;
        -:  261:    //int it; move to top
        -:  262:
        -:  263:    //Moved draw cards to here, only drawing at the start of a turn
        6:  264:    for (it = 0; it < 5; it++){
        5:  265:        drawCard(state->whoseTurn, state);
        -:  266:    }
        -:  267:
        1:  268:    updateCoins(state->whoseTurn, state, 0);
        -:  269:
        1:  270:    return 0;
        -:  271:}
        -:  272:
        2:  273:int shuffle(int player, struct gameState *state) {
        -:  274:
        -:  275:
        -:  276:    int newDeck[MAX_DECK];
        2:  277:    int newDeckPos = 0;
        -:  278:    int card;
        -:  279:    int i;
        -:  280:
        2:  281:    if (state->deckCount[player] < 1)
    #####:  282:        return -1;
        2:  283:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
       24:  286:    while (state->deckCount[player] > 0) {
       20:  287:        card = floor(Random() * state->deckCount[player]);
       20:  288:        newDeck[newDeckPos] = state->deck[player][card];
       20:  289:        newDeckPos++;
       80:  290:        for (i = card; i < state->deckCount[player]-1; i++) {
       60:  291:            state->deck[player][i] = state->deck[player][i+1];
        -:  292:        }
       20:  293:        state->deckCount[player]--;
        -:  294:    }
       22:  295:    for (i = 0; i < newDeckPos; i++) {
       20:  296:        state->deck[player][i] = newDeck[i];
       20:  297:        state->deckCount[player]++;
        -:  298:    }
        -:  299:
        2:  300:    return 0;
        -:  301:}
        -:  302:
    #####:  303:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  304:{	
        -:  305:    int card;
    #####:  306:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  307:
        -:  308:    //check if it is the right phase
    #####:  309:    if (state->phase != 0)
        -:  310:    {
    #####:  311:        return -1;
        -:  312:    }
        -:  313:
        -:  314:    //check if player has enough actions
    #####:  315:    if ( state->numActions < 1 )
        -:  316:    {
    #####:  317:        return -1;
        -:  318:    }
        -:  319:
        -:  320:    //get card played
    #####:  321:    card = handCard(handPos, state);
        -:  322:
        -:  323:    //check if selected card is an action
    #####:  324:    if ( card < adventurer || card > treasure_map )
        -:  325:    {
    #####:  326:        return -1;
        -:  327:    }
        -:  328:
        -:  329:    //play card
    #####:  330:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  331:    {
    #####:  332:        return -1;
        -:  333:    }
        -:  334:
        -:  335:    //reduce number of actions
    #####:  336:    state->numActions--;
        -:  337:
        -:  338:    //update coins (Treasure cards may be added with card draws)
    #####:  339:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  340:
    #####:  341:    return 0;
        -:  342:}
        -:  343:
    #####:  344:int buyCard(int supplyPos, struct gameState *state) {
        -:  345:    int who;
    #####:  346:    if (DEBUG){
        -:  347:        printf("Entering buyCard...\n");
        -:  348:    }
        -:  349:
        -:  350:    // I don't know what to do about the phase thing.
        -:  351:
    #####:  352:    who = state->whoseTurn;
        -:  353:
    #####:  354:    if (state->numBuys < 1){
    #####:  355:        if (DEBUG)
        -:  356:            printf("You do not have any buys left\n");
    #####:  357:        return -1;
    #####:  358:    } else if (supplyCount(supplyPos, state) <1){
    #####:  359:        if (DEBUG)
        -:  360:            printf("There are not any of that type of card left\n");
    #####:  361:        return -1;
    #####:  362:    } else if (state->coins < getCost(supplyPos)){
    #####:  363:        if (DEBUG) 
        -:  364:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  365:        return -1;
        -:  366:    } else {
    #####:  367:        state->phase=1;
        -:  368:        //state->supplyCount[supplyPos]--;
    #####:  369:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  370:
    #####:  371:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  372:        state->numBuys--;
    #####:  373:        if (DEBUG)
        -:  374:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  375:    }
        -:  376:
        -:  377:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  378:    //state->discardCount[who]++;
        -:  379:
    #####:  380:    return 0;
        -:  381:}
        -:  382:
        6:  383:int numHandCards(struct gameState *state) {
        6:  384:    return state->handCount[ whoseTurn(state) ];
        -:  385:}
        -:  386:
        5:  387:int handCard(int handPos, struct gameState *state) {
        5:  388:    int currentPlayer = whoseTurn(state);
        5:  389:    return state->hand[currentPlayer][handPos];
        -:  390:}
        -:  391:
        3:  392:int supplyCount(int card, struct gameState *state) {
        3:  393:    return state->supplyCount[card];
        -:  394:}
        -:  395:
        4:  396:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  397:    int i;
        4:  398:    int count = 0;
        -:  399:
        4:  400:    for (i = 0; i < state->deckCount[player]; i++)
        -:  401:    {
    #####:  402:        if (state->deck[player][i] == card) count++;
        -:  403:    }
        -:  404:
       16:  405:    for (i = 0; i < state->handCount[player]; i++)
        -:  406:    {
       12:  407:        if (state->hand[player][i] == card) count++;
        -:  408:    }
        -:  409:
        8:  410:    for (i = 0; i < state->discardCount[player]; i++)
        -:  411:    {
        4:  412:        if (state->discard[player][i] == card) count++;
        -:  413:    }
        -:  414:
        4:  415:    return count;
        -:  416:}
        -:  417:
       13:  418:int whoseTurn(struct gameState *state) {
       13:  419:    return state->whoseTurn;
        -:  420:}
        -:  421:
    #####:  422:int endTurn(struct gameState *state) {
        -:  423:    int k;
        -:  424:    int i;
    #####:  425:    int currentPlayer = whoseTurn(state);
        -:  426:
        -:  427:    //Discard hand
    #####:  428:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  429:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  430:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  431:    }
    #####:  432:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  433:
        -:  434:    //Code for determining the player
    #####:  435:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  436:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  437:    }
        -:  438:    else{
    #####:  439:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  440:    }
        -:  441:
    #####:  442:    state->outpostPlayed = 0;
    #####:  443:    state->phase = 0;
    #####:  444:    state->numActions = 1;
    #####:  445:    state->coins = 0;
    #####:  446:    state->numBuys = 1;
    #####:  447:    state->playedCardCount = 0;
    #####:  448:    state->handCount[state->whoseTurn] = 0;
        -:  449:
        -:  450:    //int k; move to top
        -:  451:    //Next player draws hand
    #####:  452:    for (k = 0; k < 5; k++){
    #####:  453:        drawCard(state->whoseTurn, state);//Draw a card
        -:  454:    }
        -:  455:
        -:  456:    //Update money
    #####:  457:    updateCoins(state->whoseTurn, state , 0);
        -:  458:
    #####:  459:    return 0;
        -:  460:}
        -:  461:
    #####:  462:int isGameOver(struct gameState *state) {
        -:  463:    int i;
        -:  464:    int j;
        -:  465:
        -:  466:    //if stack of Province cards is empty, the game ends
    #####:  467:    if (state->supplyCount[province] == 0)
        -:  468:    {
    #####:  469:        return 1;
        -:  470:    }
        -:  471:
        -:  472:    //if three supply pile are at 0, the game ends
    #####:  473:    j = 0;
    #####:  474:    for (i = 0; i < 25; i++)
        -:  475:    {
    #####:  476:        if (state->supplyCount[i] == 0)
        -:  477:        {
    #####:  478:            j++;
        -:  479:        }
        -:  480:    }
    #####:  481:    if ( j >= 3)
        -:  482:    {
    #####:  483:        return 1;
        -:  484:    }
        -:  485:
    #####:  486:    return 0;
        -:  487:}
        -:  488:
    #####:  489:int scoreFor (int player, struct gameState *state) {
        -:  490:
        -:  491:    int i;
    #####:  492:    int score = 0;
        -:  493:    //score from hand
    #####:  494:    for (i = 0; i < state->handCount[player]; i++)
        -:  495:    {
    #####:  496:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  497:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  498:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  499:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  500:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  501:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  502:    }
        -:  503:
        -:  504:    //score from discard
    #####:  505:    for (i = 0; i < state->discardCount[player]; i++)
        -:  506:    {
    #####:  507:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  508:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  509:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  510:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  511:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  512:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  519:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  520:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  521:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  522:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  523:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  524:    }
        -:  525:
    #####:  526:    return score;
        -:  527:}
        -:  528:
    #####:  529:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  530:    int i;	
        -:  531:    int j;
        -:  532:    int highScore;
        -:  533:    int currentPlayer;
        -:  534:
        -:  535:    //get score for each player
    #####:  536:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
        -:  538:        //set unused player scores to -9999
    #####:  539:        if (i >= state->numPlayers)
        -:  540:        {
    #####:  541:            players[i] = -9999;
        -:  542:        }
        -:  543:        else
        -:  544:        {
    #####:  545:            players[i] = scoreFor (i, state);
        -:  546:        }
        -:  547:    }
        -:  548:
        -:  549:    //find highest score
    #####:  550:    j = 0;
    #####:  551:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:        if (players[i] > players[j])
        -:  554:        {
    #####:  555:            j = i;
        -:  556:        }
        -:  557:    }
    #####:  558:    highScore = players[j];
        -:  559:
        -:  560:    //add 1 to players who had less turns
    #####:  561:    currentPlayer = whoseTurn(state);
    #####:  562:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  563:    {
    #####:  564:        if ( players[i] == highScore && i > currentPlayer )
        -:  565:        {
    #####:  566:            players[i]++;
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    //find new highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  573:    {
    #####:  574:        if ( players[i] > players[j] )
        -:  575:        {
    #####:  576:            j = i;
        -:  577:        }
        -:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //set winners in array to 1 and rest to 0
    #####:  582:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  583:    {
    #####:  584:        if ( players[i] == highScore )
        -:  585:        {
    #####:  586:            players[i] = 1;
        -:  587:        }
        -:  588:        else
        -:  589:        {
    #####:  590:            players[i] = 0;
        -:  591:        }
        -:  592:    }
        -:  593:
    #####:  594:    return 0;
        -:  595:}
        -:  596:
       15:  597:int drawCard(int player, struct gameState *state)
        -:  598:{	int count;
        -:  599:    int deckCounter;
       15:  600:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  601:
        -:  602:        //Step 1 Shuffle the discard pile back into a deck
        -:  603:        int i;
        -:  604:        //Move discard to deck
    #####:  605:        for (i = 0; i < state->discardCount[player];i++){
    #####:  606:            state->deck[player][i] = state->discard[player][i];
    #####:  607:            state->discard[player][i] = -1;
        -:  608:        }
        -:  609:
    #####:  610:        state->deckCount[player] = state->discardCount[player];
    #####:  611:        state->discardCount[player] = 0;//Reset discard
        -:  612:
        -:  613:        //Shufffle the deck
    #####:  614:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  615:
    #####:  616:        if (DEBUG){//Debug statements
        -:  617:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  618:        }
        -:  619:
    #####:  620:        state->discardCount[player] = 0;
        -:  621:
        -:  622:        //Step 2 Draw Card
    #####:  623:        count = state->handCount[player];//Get current player's hand count
        -:  624:
    #####:  625:        if (DEBUG){//Debug statements
        -:  626:            printf("Current hand count: %d\n", count);
        -:  627:        }
        -:  628:
    #####:  629:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  630:
    #####:  631:        if (deckCounter == 0)
    #####:  632:            return -1;
        -:  633:
    #####:  634:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  635:        state->deckCount[player]--;
    #####:  636:        state->handCount[player]++;//Increment hand count
        -:  637:    }
        -:  638:
        -:  639:    else{
       15:  640:        int count = state->handCount[player];//Get current hand count for player
        -:  641:        int deckCounter;
       15:  642:        if (DEBUG){//Debug statements
        -:  643:            printf("Current hand count: %d\n", count);
        -:  644:        }
        -:  645:
       15:  646:        deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  647:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  648:        state->deckCount[player]--;
       15:  649:        state->handCount[player]++;//Increment hand count
        -:  650:    }
        -:  651:
       15:  652:    return 0;
        -:  653:}
        -:  654:
    #####:  655:int getCost(int cardNumber)
        -:  656:{
    #####:  657:    switch( cardNumber ) 
        -:  658:    {
        -:  659:        case curse:
    #####:  660:            return 0;
        -:  661:        case estate:
    #####:  662:            return 2;
        -:  663:        case duchy:
    #####:  664:            return 5;
        -:  665:        case province:
    #####:  666:            return 8;
        -:  667:        case copper:
    #####:  668:            return 0;
        -:  669:        case silver:
    #####:  670:            return 3;
        -:  671:        case gold:
    #####:  672:            return 6;
        -:  673:        case adventurer:
    #####:  674:            return 6;
        -:  675:        case council_room:
    #####:  676:            return 5;
        -:  677:        case feast:
    #####:  678:            return 4;
        -:  679:        case gardens:
    #####:  680:            return 4;
        -:  681:        case mine:
    #####:  682:            return 5;
        -:  683:        case remodel:
    #####:  684:            return 4;
        -:  685:        case smithy:
    #####:  686:            return 4;
        -:  687:        case village:
    #####:  688:            return 3;
        -:  689:        case baron:
    #####:  690:            return 4;
        -:  691:        case great_hall:
    #####:  692:            return 3;
        -:  693:        case minion:
    #####:  694:            return 5;
        -:  695:        case steward:
    #####:  696:            return 3;
        -:  697:        case tribute:
    #####:  698:            return 5;
        -:  699:        case ambassador:
    #####:  700:            return 3;
        -:  701:        case cutpurse:
    #####:  702:            return 4;
        -:  703:        case embargo: 
    #####:  704:            return 2;
        -:  705:        case outpost:
    #####:  706:            return 5;
        -:  707:        case salvager:
    #####:  708:            return 4;
        -:  709:        case sea_hag:
    #####:  710:            return 4;
        -:  711:        case treasure_map:
    #####:  712:            return 4;
        -:  713:    }
        -:  714:
    #####:  715:    return -1;
        -:  716:}
        -:  717:
        2:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:    int i;
        -:  721:    int j;
        -:  722:    int k;
        -:  723:    int x;
        -:  724:    int index;
        2:  725:    int currentPlayer = whoseTurn(state);
        2:  726:    int nextPlayer = currentPlayer + 1;
        -:  727:
        2:  728:    int tributeRevealedCards[2] = {-1, -1};
        -:  729:    int temphand[MAX_HAND];// moved above the if statement
        2:  730:    int drawntreasure=0;
        -:  731:    int cardDrawn;
        2:  732:    int z = 0;// this is the counter for the temp hand
        2:  733:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:        nextPlayer = 0;
        -:  735:    }
        -:  736:
        -:  737:
        -:  738:    //uses switch to select card and perform actions
        2:  739:    switch( card ) 
        -:  740:    {
        -:  741:        case adventurer:
    #####:  742:            while(drawntreasure<2){
    #####:  743:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  744:                    shuffle(currentPlayer, state);
        -:  745:                }
    #####:  746:                drawCard(currentPlayer, state);
    #####:  747:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  748:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  749:                    drawntreasure++;
        -:  750:                else{
    #####:  751:                    temphand[z]=cardDrawn;
    #####:  752:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  753:                    z++;
        -:  754:                }
        -:  755:            }
    #####:  756:            while(z-1>=0){
    #####:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  758:                z=z-1;
        -:  759:            }
    #####:  760:            return 0;			
        -:  761:        case council_room:
    #####:  762:            councilroom(currentPlayer, state, handPos);
    #####:  763:            break;	
        -:  764:            return 0;	
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
    #####:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:
    #####:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:
    #####:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:
    #####:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:
    #####:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:
        -:  806:                }
        -:  807:            }     
        -:  808:
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:
    #####:  816:            return 0;
        -:  817:
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);			
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:
    #####:  854:            return 0;
        -:  855:
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);			
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
    #####:  878:            return 0;	
        -:  879:        
        -:  880:        case smithy:
    #####:  881:            mysmithy(currentPlayer, state, handPos);
    #####:  882:            break;
        -:  883:
        -:  884:        case village:
    #####:  885:            myvillage(currentPlayer, state, handPos);
    #####:  886:            break;
        -:  887:
        -:  888:        case baron:
        2:  889:            state->numBuys++;//Increase buys by 1!
        2:  890:            if (choice1 > 0){//Boolean true or going to discard an estate
        1:  891:                int p = 0;//Iterator for hand!
        1:  892:                int card_not_discarded = 1;//Flag for discard set!
        6:  893:                while(card_not_discarded){
        4:  894:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        1:  895:                        state->coins += 4;//Add 4 coins to the amount of coins
        1:  896:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  897:                        state->discardCount[currentPlayer]++;
        3:  898:                        for (;p < state->handCount[currentPlayer]; p++){
        2:  899:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:                        }
        1:  901:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  902:                        state->handCount[currentPlayer]--;
        1:  903:                        card_not_discarded = 0;//Exit the loop
        -:  904:                    }
        3:  905:                    else if (p > state->handCount[currentPlayer]){
    #####:  906:                        if(DEBUG) {
        -:  907:                            printf("No estate cards in your hand, invalid choice\n");
        -:  908:                            printf("Must gain an estate if there are any\n");
        -:  909:                        }
    #####:  910:                        if (supplyCount(estate, state) > 0){
    #####:  911:                            gainCard(estate, state, 0, currentPlayer);
    #####:  912:                            state->supplyCount[estate]--;//Decrement estates
    #####:  913:                            if (supplyCount(estate, state) == 0){
    #####:  914:                                isGameOver(state);
        -:  915:                            }
        -:  916:                        }
    #####:  917:                        card_not_discarded = 0;//Exit the loop
        -:  918:                    }
        -:  919:
        -:  920:                    else{
        3:  921:                        p++;//Next card
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:            else{
        1:  927:                if (supplyCount(estate, state) > 0){
        1:  928:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  929:                    state->supplyCount[estate]--;//Decrement Estates
        1:  930:                    if (supplyCount(estate, state) == 0){
    #####:  931:                        isGameOver(state);
        -:  932:                    }
        -:  933:                }
        -:  934:            }
        -:  935:
        -:  936:
        2:  937:            return 0;
        -:  938:
        -:  939:        case great_hall:
    #####:  940:            mygreathall(currentPlayer, state, handPos);
    #####:  941:            break;
        -:  942:
        -:  943:        case minion:
        -:  944:            //+1 action
    #####:  945:            state->numActions++;
        -:  946:
        -:  947:            //discard card from hand
    #####:  948:            discardCard(handPos, currentPlayer, state, 0);
        -:  949:
    #####:  950:            if (choice1)		//+2 coins
        -:  951:            {
    #####:  952:                state->coins = state->coins + 2;
        -:  953:            }
        -:  954:
    #####:  955:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:            {
        -:  957:                //discard hand
    #####:  958:                while(numHandCards(state) > 0)
        -:  959:                {
    #####:  960:                    discardCard(handPos, currentPlayer, state, 0);
        -:  961:                }
        -:  962:
        -:  963:                //draw 4
    #####:  964:                for (i = 0; i < 4; i++)
        -:  965:                {
    #####:  966:                    drawCard(currentPlayer, state);
        -:  967:                }
        -:  968:
        -:  969:                //other players discard hand and redraw if hand size > 4
    #####:  970:                for (i = 0; i < state->numPlayers; i++)
        -:  971:                {
    #####:  972:                    if (i != currentPlayer)
        -:  973:                    {
    #####:  974:                        if ( state->handCount[i] > 4 )
        -:  975:                        {
        -:  976:                            //discard hand
    #####:  977:                            while( state->handCount[i] > 0 )
        -:  978:                            {
    #####:  979:                                discardCard(handPos, i, state, 0);
        -:  980:                            }
        -:  981:
        -:  982:                            //draw 4
    #####:  983:                            for (j = 0; j < 4; j++)
        -:  984:                            {
    #####:  985:                                drawCard(i, state);
        -:  986:                            }
        -:  987:                        }
        -:  988:                    }
        -:  989:                }
        -:  990:
        -:  991:            }
    #####:  992:            return 0;
        -:  993:
        -:  994:        case steward:
    #####:  995:            if (choice1 == 1)
        -:  996:            {
        -:  997:                //+2 cards
    #####:  998:                drawCard(currentPlayer, state);
    #####:  999:                drawCard(currentPlayer, state);
        -: 1000:            }
    #####: 1001:            else if (choice1 == 2)
        -: 1002:            {
        -: 1003:                //+2 coins
    #####: 1004:                state->coins = state->coins + 2;
        -: 1005:            }
        -: 1006:            else
        -: 1007:            {
        -: 1008:                //trash 2 cards in hand
    #####: 1009:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:                discardCard(choice3, currentPlayer, state, 1);
        -: 1011:            }
        -: 1012:
        -: 1013:            //discard card from hand
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:            return 0;
        -: 1016:
        -: 1017:        case tribute:
    #####: 1018:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:                if (state->deckCount[nextPlayer] > 0){
    #####: 1020:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:                    state->deckCount[nextPlayer]--;
        -: 1022:                }
    #####: 1023:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:                    state->discardCount[nextPlayer]--;
        -: 1026:                }
        -: 1027:                else{
        -: 1028:                    //No Card to Reveal
    #####: 1029:                    if (DEBUG){
        -: 1030:                        printf("No cards to reveal\n");
        -: 1031:                    }
        -: 1032:                }
        -: 1033:            }
        -: 1034:
        -: 1035:            else{
    #####: 1036:                if (state->deckCount[nextPlayer] == 0){
    #####: 1037:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:                        state->deckCount[nextPlayer]++;
    #####: 1040:                        state->discard[nextPlayer][i] = -1;
    #####: 1041:                        state->discardCount[nextPlayer]--;
        -: 1042:                    }
        -: 1043:
    #####: 1044:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:                } 
    #####: 1046:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
    #####: 1049:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
        -: 1052:            }    
        -: 1053:
    #####: 1054:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:                state->playedCardCount++;
    #####: 1057:                tributeRevealedCards[1] = -1;
        -: 1058:            }
        -: 1059:
    #####: 1060:            for (i = 0; i <= 2; i ++){
    #####: 1061:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:                    state->coins += 2;
        -: 1063:                }
        -: 1064:
    #####: 1065:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:                    drawCard(currentPlayer, state);
    #####: 1067:                    drawCard(currentPlayer, state);
        -: 1068:                }
        -: 1069:                else{//Action Card
    #####: 1070:                    state->numActions = state->numActions + 2;
        -: 1071:                }
        -: 1072:            }
        -: 1073:
    #####: 1074:            return 0;
        -: 1075:
        -: 1076:        case ambassador:
    #####: 1077:            j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:            if (choice2 > 2 || choice2 < 0)
        -: 1080:            {
    #####: 1081:                return -1;				
        -: 1082:            }
        -: 1083:
    #####: 1084:            if (choice1 == handPos)
        -: 1085:            {
    #####: 1086:                return -1;
        -: 1087:            }
        -: 1088:
    #####: 1089:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:            {
    #####: 1091:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:                {
    #####: 1093:                    j++;
        -: 1094:                }
        -: 1095:            }
    #####: 1096:            if (j < choice2)
        -: 1097:            {
    #####: 1098:                return -1;				
        -: 1099:            }
        -: 1100:
    #####: 1101:            if (DEBUG) 
        -: 1102:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:            //increase supply count for choosen card by amount being discarded
    #####: 1105:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:            //each other player gains a copy of revealed card
    #####: 1108:            for (i = 0; i < state->numPlayers; i++)
        -: 1109:            {
    #####: 1110:                if (i != currentPlayer)
        -: 1111:                {
    #####: 1112:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:                }
        -: 1114:            }
        -: 1115:
        -: 1116:            //discard played card from hand
    #####: 1117:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:            //trash copies of cards returned to supply
    #####: 1120:            for (j = 0; j < choice2; j++)
        -: 1121:            {
    #####: 1122:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:                {
    #####: 1124:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:                    {
    #####: 1126:                        discardCard(i, currentPlayer, state, 1);
    #####: 1127:                        break;
        -: 1128:                    }
        -: 1129:                }
        -: 1130:            }			
        -: 1131:
    #####: 1132:            return 0;
        -: 1133:
        -: 1134:        case cutpurse:
        -: 1135:
    #####: 1136:            updateCoins(currentPlayer, state, 2);
    #####: 1137:            for (i = 0; i < state->numPlayers; i++)
        -: 1138:            {
    #####: 1139:                if (i != currentPlayer)
        -: 1140:                {
    #####: 1141:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1142:                    {
    #####: 1143:                        if (state->hand[i][j] == copper)
        -: 1144:                        {
    #####: 1145:                            discardCard(j, i, state, 0);
    #####: 1146:                            break;
        -: 1147:                        }
    #####: 1148:                        if (j == state->handCount[i])
        -: 1149:                        {
    #####: 1150:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1151:                            {
    #####: 1152:                                if (DEBUG)
        -: 1153:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:                            }	
    #####: 1155:                            break;
        -: 1156:                        }		
        -: 1157:                    }
        -: 1158:
        -: 1159:                }
        -: 1160:
        -: 1161:            }				
        -: 1162:
        -: 1163:            //discard played card from hand
    #####: 1164:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:
        -: 1169:        case embargo: 
        -: 1170:            //+2 Coins
    #####: 1171:            state->coins = state->coins + 2;
        -: 1172:
        -: 1173:            //see if selected pile is in play
    #####: 1174:            if ( state->supplyCount[choice1] == -1 )
        -: 1175:            {
    #####: 1176:                return -1;
        -: 1177:            }
        -: 1178:
        -: 1179:            //add embargo token to selected supply pile
    #####: 1180:            state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:            //trash card
    #####: 1183:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:        case outpost:
    #####: 1187:           myoutpost(currentPlayer, state, handPos);
    #####: 1188:          break; 
        -: 1189:
        -: 1190:        case salvager:
        -: 1191:            //+1 buy
    #####: 1192:            state->numBuys++;
        -: 1193:
    #####: 1194:            if (choice1)
        -: 1195:            {
        -: 1196:                //gain coins equal to trashed card
    #####: 1197:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:                //trash card
    #####: 1199:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:            }
        -: 1201:
        -: 1202:            //discard card
    #####: 1203:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:        case sea_hag:
    #####: 1207:            for (i = 0; i < state->numPlayers; i++){
    #####: 1208:                if (i != currentPlayer){
    #####: 1209:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:                    state->discardCount[i]++;
    #####: 1211:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:                }
        -: 1213:            }
    #####: 1214:            return 0;
        -: 1215:
        -: 1216:        case treasure_map:
        -: 1217:            //search hand for another treasure_map
    #####: 1218:            index = -1;
    #####: 1219:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:            {
    #####: 1221:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:                {
    #####: 1223:                    index = i;
    #####: 1224:                    break;
        -: 1225:                }
        -: 1226:            }
    #####: 1227:            if (index > -1)
        -: 1228:            {
        -: 1229:                //trash both treasure cards
    #####: 1230:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:                discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:                //gain 4 Gold cards
    #####: 1234:                for (i = 0; i < 4; i++)
        -: 1235:                {
    #####: 1236:                    gainCard(gold, state, 1, currentPlayer);
        -: 1237:                }
        -: 1238:
        -: 1239:                //return success
    #####: 1240:                return 1;
        -: 1241:            }
        -: 1242:
        -: 1243:            //no second treasure_map found in hand
    #####: 1244:            return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:    return -1;
        -: 1248:}
        -: 1249:
    #####: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:    //if card is not trashed, added to Played pile 
    #####: 1254:    if (trashFlag < 1)
        -: 1255:    {
        -: 1256:        //add card to played pile
    #####: 1257:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:        state->playedCardCount++;
        -: 1259:    }
        -: 1260:
        -: 1261:    //set played card to -1
    #####: 1262:    state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:    //remove card from player's hand
    #####: 1265:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:        //reduce number of cards in hand
    #####: 1268:        state->handCount[currentPlayer]--;
        -: 1269:    }
    #####: 1270:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:        //reduce number of cards in hand
    #####: 1273:        state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:    else 	
        -: 1276:    {
        -: 1277:        //replace discarded card with last card in hand
    #####: 1278:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:        //set last card to -1
    #####: 1280:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:        //reduce number of cards in hand
    #####: 1282:        state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:    return 0;
        -: 1286:}
        -: 1287:
        1: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:    //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:    //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1293:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:        return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //added card for [whoseTurn] current player:
        -: 1299:    // toFlag = 0 : add to discard
        -: 1300:    // toFlag = 1 : add to deck
        -: 1301:    // toFlag = 2 : add to hand
        -: 1302:
        1: 1303:    if (toFlag == 1)
        -: 1304:    {
    #####: 1305:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:        state->deckCount[player]++;
        -: 1307:    }
        1: 1308:    else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:        state->handCount[player]++;
        -: 1312:    }
        -: 1313:    else
        -: 1314:    {
        1: 1315:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1316:        state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:    //decrease number in supply pile
        1: 1320:    state->supplyCount[supplyPos]--;
        -: 1321:
        1: 1322:    return 0;
        -: 1323:}
        -: 1324:
        1: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:    int i;
        -: 1328:
        -: 1329:    //reset coin count
        1: 1330:    state->coins = 0;
        -: 1331:
        -: 1332:    //add coins for each Treasure card in player's hand
        6: 1333:    for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
        5: 1335:        if (state->hand[player][i] == copper)
        -: 1336:        {
        4: 1337:            state->coins += 1;
        -: 1338:        }
        1: 1339:        else if (state->hand[player][i] == silver)
        -: 1340:        {
    #####: 1341:            state->coins += 2;
        -: 1342:        }
        1: 1343:        else if (state->hand[player][i] == gold)
        -: 1344:        {
    #####: 1345:            state->coins += 3;
        -: 1346:        }	
        -: 1347:    }	
        -: 1348:
        -: 1349:    //add bonus
        1: 1350:    state->coins += bonus;
        -: 1351:
        1: 1352:    return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:


CardTest4
FAILURE: Steward did not incrase cards by 2File 'dominion.c'
Lines executed:18.29% of 585
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "helper.h"
    #####:    8:int councilroom(int currentPlayer, struct gameState *  state, int handPos){
    #####:    9:    int i = 0;  
        -:   10:    //+5 Cards
    #####:   11:      for (i = 0; i < 5; i++)
        -:   12:	{
    #####:   13:	  drawCard(currentPlayer, state);
        -:   14:	}
        -:   15:			
        -:   16:      //+1 Buy
    #####:   17:      state->numBuys++;
        -:   18:
        -:   19:      //+1 Action
    #####:   20:      state->numActions++;
        -:   21:			
        -:   22:      //Each other player draws a card
    #####:   23:      for (i = 0; i < state->numPlayers; i++)
        -:   24:	{
    #####:   25:	  if ( i != currentPlayer )
        -:   26:	    {
    #####:   27:	      drawCard(i, state);
    #####:   28:	      drawCard(i, state);
        -:   29:	    }
        -:   30:	}
        -:   31:			
        -:   32:      //put played card in played card pile
    #####:   33:      discardCard(handPos, currentPlayer, state, 0);
        -:   34:			
    #####:   35:      return 0;
        -:   36:}
    #####:   37:int mysmithy (int currentPlayer, struct gameState * state, int handPos){
        -:   38:    int i;
        -:   39:    //+3 Cards
    #####:   40:    for (i = 0; i < 9; i++)
        -:   41:    {
    #####:   42:        drawCard(currentPlayer, state);
        -:   43:    }		
        -:   44:    //discard card from hand
    #####:   45:    discardCard(handPos, currentPlayer, state, 0);
    #####:   46:    return 0;
        -:   47:}
        -:   48:
    #####:   49:int myvillage(int currentPlayer, struct gameState * state, int handPos){
        -:   50:    //+1 Card
    #####:   51:    drawCard(currentPlayer, state);
        -:   52:
        -:   53:    //+2 Actions
    #####:   54:    state->numActions = state->numActions + 1;
        -:   55:
        -:   56:    //discard played card from hand
    #####:   57:    discardCard(handPos, currentPlayer, state, 0);
    #####:   58:    return 0;
        -:   59:}
    #####:   60:int mygreathall(int currentPlayer, struct gameState * state, int handPos){
        -:   61:            //+1 Card
    #####:   62:            drawCard(currentPlayer, state);
        -:   63:
        -:   64:            //+1 Actions
    #####:   65:            state->numActions++;
        -:   66:
        -:   67:            //discard card from hand
    #####:   68:            discardCard(handPos, currentPlayer, state, 0);
    #####:   69:            return 0;
        -:   70:}
        -:   71:
    #####:   72:int myoutpost(int currentPlayer, struct gameState * state, int handPos){
        -:   73:            //set outpost flag
    #####:   74:            state->outpostPlayed+2;
        -:   75:
        -:   76:            //discard card
    #####:   77:            discardCard(handPos, currentPlayer, state, 0);
    #####:   78:            return 0;
        -:   79:}
       30:   80:int compare(const void* a, const void* b) {
       30:   81:    if (*(int*)a > *(int*)b)
    #####:   82:        return 1;
       30:   83:    if (*(int*)a < *(int*)b)
        8:   84:        return -1;
       22:   85:    return 0;
        -:   86:}
        -:   87:
        1:   88:struct gameState* newGame() {
        1:   89:    struct gameState* g = malloc(sizeof(struct gameState));
        1:   90:    return g;
        -:   91:}
        -:   92:
    #####:   93:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   94:        int k8, int k9, int k10) {
    #####:   95:    int* k = malloc(10 * sizeof(int));
    #####:   96:    k[0] = k1;
    #####:   97:    k[1] = k2;
    #####:   98:    k[2] = k3;
    #####:   99:    k[3] = k4;
    #####:  100:    k[4] = k5;
    #####:  101:    k[5] = k6;
    #####:  102:    k[6] = k7;
    #####:  103:    k[7] = k8;
    #####:  104:    k[8] = k9;
    #####:  105:    k[9] = k10;
    #####:  106:    return k;
        -:  107:}
        -:  108:
        1:  109:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  110:        struct gameState *state) {
        -:  111:
        -:  112:    int i;
        -:  113:    int j;
        -:  114:    int it;			
        -:  115:    //set up random number generator
        1:  116:    SelectStream(1);
        1:  117:    PutSeed((long)randomSeed);
        -:  118:
        -:  119:    //check number of players
        1:  120:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  121:    {
    #####:  122:        return -1;
        -:  123:    }
        -:  124:
        -:  125:    //set number of players
        1:  126:    state->numPlayers = numPlayers;
        -:  127:
        -:  128:    //check selected kingdom cards are different
       11:  129:    for (i = 0; i < 10; i++)
        -:  130:    {
      110:  131:        for (j = 0; j < 10; j++)
        -:  132:        {
      100:  133:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  134:            {
    #####:  135:                return -1;
        -:  136:            }
        -:  137:        }
        -:  138:    }
        -:  139:
        -:  140:
        -:  141:    //initialize supply
        -:  142:    ///////////////////////////////
        -:  143:
        -:  144:    //set number of Curse cards
        1:  145:    if (numPlayers == 2)
        -:  146:    {
        1:  147:        state->supplyCount[curse] = 10;
        -:  148:    }
    #####:  149:    else if (numPlayers == 3)
        -:  150:    {
    #####:  151:        state->supplyCount[curse] = 20;
        -:  152:    }
        -:  153:    else
        -:  154:    {
    #####:  155:        state->supplyCount[curse] = 30;
        -:  156:    }
        -:  157:
        -:  158:    //set number of Victory cards
        1:  159:    if (numPlayers == 2)
        -:  160:    {
        1:  161:        state->supplyCount[estate] = 8;
        1:  162:        state->supplyCount[duchy] = 8;
        1:  163:        state->supplyCount[province] = 8;
        -:  164:    }
        -:  165:    else
        -:  166:    {
    #####:  167:        state->supplyCount[estate] = 12;
    #####:  168:        state->supplyCount[duchy] = 12;
    #####:  169:        state->supplyCount[province] = 12;
        -:  170:    }
        -:  171:
        -:  172:    //set number of Treasure cards
        1:  173:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  174:    state->supplyCount[silver] = 40;
        1:  175:    state->supplyCount[gold] = 30;
        -:  176:
        -:  177:    //set number of Kingdom cards
       21:  178:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  179:    {
      165:  180:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  181:        {
      155:  182:            if (kingdomCards[j] == i)
        -:  183:            {
        -:  184:                //check if card is a 'Victory' Kingdom card
       12:  185:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  186:                {
        2:  187:                    if (numPlayers == 2){ 
        2:  188:                        state->supplyCount[i] = 8; 
        -:  189:                    }
    #####:  190:                    else{ state->supplyCount[i] = 12; }
        -:  191:                }
        -:  192:                else
        -:  193:                {
        8:  194:                    state->supplyCount[i] = 10;
        -:  195:                }
       10:  196:                break;
        -:  197:            }
        -:  198:            else    //card is not in the set choosen for the game
        -:  199:            {
      145:  200:                state->supplyCount[i] = -1;
        -:  201:            }
        -:  202:        }
        -:  203:
        -:  204:    }
        -:  205:
        -:  206:    ////////////////////////
        -:  207:    //supply intilization complete
        -:  208:
        -:  209:    //set player decks
        3:  210:    for (i = 0; i < numPlayers; i++)
        -:  211:    {
        2:  212:        state->deckCount[i] = 0;
        8:  213:        for (j = 0; j < 3; j++)
        -:  214:        {
        6:  215:            state->deck[i][j] = estate;
        6:  216:            state->deckCount[i]++;
        -:  217:        }
       16:  218:        for (j = 3; j < 10; j++)
        -:  219:        {
       14:  220:            state->deck[i][j] = copper;
       14:  221:            state->deckCount[i]++;		
        -:  222:        }
        -:  223:    }
        -:  224:
        -:  225:    //shuffle player decks
        3:  226:    for (i = 0; i < numPlayers; i++)
        -:  227:    {
        2:  228:        if ( shuffle(i, state) < 0 )
        -:  229:        {
    #####:  230:            return -1;
        -:  231:        }
        -:  232:    }
        -:  233:
        -:  234:    //draw player hands
        3:  235:    for (i = 0; i < numPlayers; i++)
        -:  236:    {  
        -:  237:        //initialize hand size to zero
        2:  238:        state->handCount[i] = 0;
        2:  239:        state->discardCount[i] = 0;
        -:  240:        //draw 5 cards
       12:  241:         for (j = 0; j < 5; j++)
        -:  242:        	{
       10:  243:        	  drawCard(i, state);
        -:  244:        	}
        -:  245:    }
        -:  246:
        -:  247:    //set embargo tokens to 0 for all supply piles
       28:  248:    for (i = 0; i <= treasure_map; i++)
        -:  249:    {
       27:  250:        state->embargoTokens[i] = 0;
        -:  251:    }
        -:  252:
        -:  253:    //initialize first player's turn
        1:  254:    state->outpostPlayed = 0;
        1:  255:    state->phase = 0;
        1:  256:    state->numActions = 1;
        1:  257:    state->numBuys = 1;
        1:  258:    state->playedCardCount = 0;
        1:  259:    state->whoseTurn = 0;
        1:  260:    state->handCount[state->whoseTurn] = 0;
        -:  261:    //int it; move to top
        -:  262:
        -:  263:    //Moved draw cards to here, only drawing at the start of a turn
        6:  264:    for (it = 0; it < 5; it++){
        5:  265:        drawCard(state->whoseTurn, state);
        -:  266:    }
        -:  267:
        1:  268:    updateCoins(state->whoseTurn, state, 0);
        -:  269:
        1:  270:    return 0;
        -:  271:}
        -:  272:
        2:  273:int shuffle(int player, struct gameState *state) {
        -:  274:
        -:  275:
        -:  276:    int newDeck[MAX_DECK];
        2:  277:    int newDeckPos = 0;
        -:  278:    int card;
        -:  279:    int i;
        -:  280:
        2:  281:    if (state->deckCount[player] < 1)
    #####:  282:        return -1;
        2:  283:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  284:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  285:
       24:  286:    while (state->deckCount[player] > 0) {
       20:  287:        card = floor(Random() * state->deckCount[player]);
       20:  288:        newDeck[newDeckPos] = state->deck[player][card];
       20:  289:        newDeckPos++;
       80:  290:        for (i = card; i < state->deckCount[player]-1; i++) {
       60:  291:            state->deck[player][i] = state->deck[player][i+1];
        -:  292:        }
       20:  293:        state->deckCount[player]--;
        -:  294:    }
       22:  295:    for (i = 0; i < newDeckPos; i++) {
       20:  296:        state->deck[player][i] = newDeck[i];
       20:  297:        state->deckCount[player]++;
        -:  298:    }
        -:  299:
        2:  300:    return 0;
        -:  301:}
        -:  302:
        1:  303:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  304:{	
        -:  305:    int card;
        1:  306:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  307:
        -:  308:    //check if it is the right phase
        1:  309:    if (state->phase != 0)
        -:  310:    {
    #####:  311:        return -1;
        -:  312:    }
        -:  313:
        -:  314:    //check if player has enough actions
        1:  315:    if ( state->numActions < 1 )
        -:  316:    {
    #####:  317:        return -1;
        -:  318:    }
        -:  319:
        -:  320:    //get card played
        1:  321:    card = handCard(handPos, state);
        -:  322:
        -:  323:    //check if selected card is an action
        1:  324:    if ( card < adventurer || card > treasure_map )
        -:  325:    {
        1:  326:        return -1;
        -:  327:    }
        -:  328:
        -:  329:    //play card
    #####:  330:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  331:    {
    #####:  332:        return -1;
        -:  333:    }
        -:  334:
        -:  335:    //reduce number of actions
    #####:  336:    state->numActions--;
        -:  337:
        -:  338:    //update coins (Treasure cards may be added with card draws)
    #####:  339:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  340:
    #####:  341:    return 0;
        -:  342:}
        -:  343:
    #####:  344:int buyCard(int supplyPos, struct gameState *state) {
        -:  345:    int who;
    #####:  346:    if (DEBUG){
        -:  347:        printf("Entering buyCard...\n");
        -:  348:    }
        -:  349:
        -:  350:    // I don't know what to do about the phase thing.
        -:  351:
    #####:  352:    who = state->whoseTurn;
        -:  353:
    #####:  354:    if (state->numBuys < 1){
    #####:  355:        if (DEBUG)
        -:  356:            printf("You do not have any buys left\n");
    #####:  357:        return -1;
    #####:  358:    } else if (supplyCount(supplyPos, state) <1){
    #####:  359:        if (DEBUG)
        -:  360:            printf("There are not any of that type of card left\n");
    #####:  361:        return -1;
    #####:  362:    } else if (state->coins < getCost(supplyPos)){
    #####:  363:        if (DEBUG) 
        -:  364:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  365:        return -1;
        -:  366:    } else {
    #####:  367:        state->phase=1;
        -:  368:        //state->supplyCount[supplyPos]--;
    #####:  369:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  370:
    #####:  371:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  372:        state->numBuys--;
    #####:  373:        if (DEBUG)
        -:  374:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  375:    }
        -:  376:
        -:  377:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  378:    //state->discardCount[who]++;
        -:  379:
    #####:  380:    return 0;
        -:  381:}
        -:  382:
    #####:  383:int numHandCards(struct gameState *state) {
    #####:  384:    return state->handCount[ whoseTurn(state) ];
        -:  385:}
        -:  386:
        1:  387:int handCard(int handPos, struct gameState *state) {
        1:  388:    int currentPlayer = whoseTurn(state);
        1:  389:    return state->hand[currentPlayer][handPos];
        -:  390:}
        -:  391:
    #####:  392:int supplyCount(int card, struct gameState *state) {
    #####:  393:    return state->supplyCount[card];
        -:  394:}
        -:  395:
    #####:  396:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  397:    int i;
    #####:  398:    int count = 0;
        -:  399:
    #####:  400:    for (i = 0; i < state->deckCount[player]; i++)
        -:  401:    {
    #####:  402:        if (state->deck[player][i] == card) count++;
        -:  403:    }
        -:  404:
    #####:  405:    for (i = 0; i < state->handCount[player]; i++)
        -:  406:    {
    #####:  407:        if (state->hand[player][i] == card) count++;
        -:  408:    }
        -:  409:
    #####:  410:    for (i = 0; i < state->discardCount[player]; i++)
        -:  411:    {
    #####:  412:        if (state->discard[player][i] == card) count++;
        -:  413:    }
        -:  414:
    #####:  415:    return count;
        -:  416:}
        -:  417:
        2:  418:int whoseTurn(struct gameState *state) {
        2:  419:    return state->whoseTurn;
        -:  420:}
        -:  421:
    #####:  422:int endTurn(struct gameState *state) {
        -:  423:    int k;
        -:  424:    int i;
    #####:  425:    int currentPlayer = whoseTurn(state);
        -:  426:
        -:  427:    //Discard hand
    #####:  428:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  429:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  430:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  431:    }
    #####:  432:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  433:
        -:  434:    //Code for determining the player
    #####:  435:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  436:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  437:    }
        -:  438:    else{
    #####:  439:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  440:    }
        -:  441:
    #####:  442:    state->outpostPlayed = 0;
    #####:  443:    state->phase = 0;
    #####:  444:    state->numActions = 1;
    #####:  445:    state->coins = 0;
    #####:  446:    state->numBuys = 1;
    #####:  447:    state->playedCardCount = 0;
    #####:  448:    state->handCount[state->whoseTurn] = 0;
        -:  449:
        -:  450:    //int k; move to top
        -:  451:    //Next player draws hand
    #####:  452:    for (k = 0; k < 5; k++){
    #####:  453:        drawCard(state->whoseTurn, state);//Draw a card
        -:  454:    }
        -:  455:
        -:  456:    //Update money
    #####:  457:    updateCoins(state->whoseTurn, state , 0);
        -:  458:
    #####:  459:    return 0;
        -:  460:}
        -:  461:
    #####:  462:int isGameOver(struct gameState *state) {
        -:  463:    int i;
        -:  464:    int j;
        -:  465:
        -:  466:    //if stack of Province cards is empty, the game ends
    #####:  467:    if (state->supplyCount[province] == 0)
        -:  468:    {
    #####:  469:        return 1;
        -:  470:    }
        -:  471:
        -:  472:    //if three supply pile are at 0, the game ends
    #####:  473:    j = 0;
    #####:  474:    for (i = 0; i < 25; i++)
        -:  475:    {
    #####:  476:        if (state->supplyCount[i] == 0)
        -:  477:        {
    #####:  478:            j++;
        -:  479:        }
        -:  480:    }
    #####:  481:    if ( j >= 3)
        -:  482:    {
    #####:  483:        return 1;
        -:  484:    }
        -:  485:
    #####:  486:    return 0;
        -:  487:}
        -:  488:
    #####:  489:int scoreFor (int player, struct gameState *state) {
        -:  490:
        -:  491:    int i;
    #####:  492:    int score = 0;
        -:  493:    //score from hand
    #####:  494:    for (i = 0; i < state->handCount[player]; i++)
        -:  495:    {
    #####:  496:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  497:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  498:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  499:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  500:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  501:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  502:    }
        -:  503:
        -:  504:    //score from discard
    #####:  505:    for (i = 0; i < state->discardCount[player]; i++)
        -:  506:    {
    #####:  507:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  508:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  509:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  510:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  511:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  512:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  513:    }
        -:  514:
        -:  515:    //score from deck
    #####:  516:    for (i = 0; i < state->discardCount[player]; i++)
        -:  517:    {
    #####:  518:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  519:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  520:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  521:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  522:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  523:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  524:    }
        -:  525:
    #####:  526:    return score;
        -:  527:}
        -:  528:
    #####:  529:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  530:    int i;	
        -:  531:    int j;
        -:  532:    int highScore;
        -:  533:    int currentPlayer;
        -:  534:
        -:  535:    //get score for each player
    #####:  536:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  537:    {
        -:  538:        //set unused player scores to -9999
    #####:  539:        if (i >= state->numPlayers)
        -:  540:        {
    #####:  541:            players[i] = -9999;
        -:  542:        }
        -:  543:        else
        -:  544:        {
    #####:  545:            players[i] = scoreFor (i, state);
        -:  546:        }
        -:  547:    }
        -:  548:
        -:  549:    //find highest score
    #####:  550:    j = 0;
    #####:  551:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  552:    {
    #####:  553:        if (players[i] > players[j])
        -:  554:        {
    #####:  555:            j = i;
        -:  556:        }
        -:  557:    }
    #####:  558:    highScore = players[j];
        -:  559:
        -:  560:    //add 1 to players who had less turns
    #####:  561:    currentPlayer = whoseTurn(state);
    #####:  562:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  563:    {
    #####:  564:        if ( players[i] == highScore && i > currentPlayer )
        -:  565:        {
    #####:  566:            players[i]++;
        -:  567:        }
        -:  568:    }
        -:  569:
        -:  570:    //find new highest score
    #####:  571:    j = 0;
    #####:  572:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  573:    {
    #####:  574:        if ( players[i] > players[j] )
        -:  575:        {
    #####:  576:            j = i;
        -:  577:        }
        -:  578:    }
    #####:  579:    highScore = players[j];
        -:  580:
        -:  581:    //set winners in array to 1 and rest to 0
    #####:  582:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  583:    {
    #####:  584:        if ( players[i] == highScore )
        -:  585:        {
    #####:  586:            players[i] = 1;
        -:  587:        }
        -:  588:        else
        -:  589:        {
    #####:  590:            players[i] = 0;
        -:  591:        }
        -:  592:    }
        -:  593:
    #####:  594:    return 0;
        -:  595:}
        -:  596:
       15:  597:int drawCard(int player, struct gameState *state)
        -:  598:{	int count;
        -:  599:    int deckCounter;
       15:  600:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  601:
        -:  602:        //Step 1 Shuffle the discard pile back into a deck
        -:  603:        int i;
        -:  604:        //Move discard to deck
    #####:  605:        for (i = 0; i < state->discardCount[player];i++){
    #####:  606:            state->deck[player][i] = state->discard[player][i];
    #####:  607:            state->discard[player][i] = -1;
        -:  608:        }
        -:  609:
    #####:  610:        state->deckCount[player] = state->discardCount[player];
    #####:  611:        state->discardCount[player] = 0;//Reset discard
        -:  612:
        -:  613:        //Shufffle the deck
    #####:  614:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  615:
    #####:  616:        if (DEBUG){//Debug statements
        -:  617:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  618:        }
        -:  619:
    #####:  620:        state->discardCount[player] = 0;
        -:  621:
        -:  622:        //Step 2 Draw Card
    #####:  623:        count = state->handCount[player];//Get current player's hand count
        -:  624:
    #####:  625:        if (DEBUG){//Debug statements
        -:  626:            printf("Current hand count: %d\n", count);
        -:  627:        }
        -:  628:
    #####:  629:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  630:
    #####:  631:        if (deckCounter == 0)
    #####:  632:            return -1;
        -:  633:
    #####:  634:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  635:        state->deckCount[player]--;
    #####:  636:        state->handCount[player]++;//Increment hand count
        -:  637:    }
        -:  638:
        -:  639:    else{
       15:  640:        int count = state->handCount[player];//Get current hand count for player
        -:  641:        int deckCounter;
       15:  642:        if (DEBUG){//Debug statements
        -:  643:            printf("Current hand count: %d\n", count);
        -:  644:        }
        -:  645:
       15:  646:        deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  647:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  648:        state->deckCount[player]--;
       15:  649:        state->handCount[player]++;//Increment hand count
        -:  650:    }
        -:  651:
       15:  652:    return 0;
        -:  653:}
        -:  654:
    #####:  655:int getCost(int cardNumber)
        -:  656:{
    #####:  657:    switch( cardNumber ) 
        -:  658:    {
        -:  659:        case curse:
    #####:  660:            return 0;
        -:  661:        case estate:
    #####:  662:            return 2;
        -:  663:        case duchy:
    #####:  664:            return 5;
        -:  665:        case province:
    #####:  666:            return 8;
        -:  667:        case copper:
    #####:  668:            return 0;
        -:  669:        case silver:
    #####:  670:            return 3;
        -:  671:        case gold:
    #####:  672:            return 6;
        -:  673:        case adventurer:
    #####:  674:            return 6;
        -:  675:        case council_room:
    #####:  676:            return 5;
        -:  677:        case feast:
    #####:  678:            return 4;
        -:  679:        case gardens:
    #####:  680:            return 4;
        -:  681:        case mine:
    #####:  682:            return 5;
        -:  683:        case remodel:
    #####:  684:            return 4;
        -:  685:        case smithy:
    #####:  686:            return 4;
        -:  687:        case village:
    #####:  688:            return 3;
        -:  689:        case baron:
    #####:  690:            return 4;
        -:  691:        case great_hall:
    #####:  692:            return 3;
        -:  693:        case minion:
    #####:  694:            return 5;
        -:  695:        case steward:
    #####:  696:            return 3;
        -:  697:        case tribute:
    #####:  698:            return 5;
        -:  699:        case ambassador:
    #####:  700:            return 3;
        -:  701:        case cutpurse:
    #####:  702:            return 4;
        -:  703:        case embargo: 
    #####:  704:            return 2;
        -:  705:        case outpost:
    #####:  706:            return 5;
        -:  707:        case salvager:
    #####:  708:            return 4;
        -:  709:        case sea_hag:
    #####:  710:            return 4;
        -:  711:        case treasure_map:
    #####:  712:            return 4;
        -:  713:    }
        -:  714:
    #####:  715:    return -1;
        -:  716:}
        -:  717:
    #####:  718:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  719:{
        -:  720:    int i;
        -:  721:    int j;
        -:  722:    int k;
        -:  723:    int x;
        -:  724:    int index;
    #####:  725:    int currentPlayer = whoseTurn(state);
    #####:  726:    int nextPlayer = currentPlayer + 1;
        -:  727:
    #####:  728:    int tributeRevealedCards[2] = {-1, -1};
        -:  729:    int temphand[MAX_HAND];// moved above the if statement
    #####:  730:    int drawntreasure=0;
        -:  731:    int cardDrawn;
    #####:  732:    int z = 0;// this is the counter for the temp hand
    #####:  733:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  734:        nextPlayer = 0;
        -:  735:    }
        -:  736:
        -:  737:
        -:  738:    //uses switch to select card and perform actions
    #####:  739:    switch( card ) 
        -:  740:    {
        -:  741:        case adventurer:
    #####:  742:            while(drawntreasure<2){
    #####:  743:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  744:                    shuffle(currentPlayer, state);
        -:  745:                }
    #####:  746:                drawCard(currentPlayer, state);
    #####:  747:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  748:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  749:                    drawntreasure++;
        -:  750:                else{
    #####:  751:                    temphand[z]=cardDrawn;
    #####:  752:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  753:                    z++;
        -:  754:                }
        -:  755:            }
    #####:  756:            while(z-1>=0){
    #####:  757:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  758:                z=z-1;
        -:  759:            }
    #####:  760:            return 0;			
        -:  761:        case council_room:
    #####:  762:            councilroom(currentPlayer, state, handPos);
    #####:  763:            break;	
        -:  764:            return 0;	
        -:  765:        case feast:
        -:  766:            //gain card with cost up to 5
        -:  767:            //Backup hand
    #####:  768:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  769:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  770:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  771:            }
        -:  772:            //Backup hand
        -:  773:
        -:  774:            //Update Coins for Buy
    #####:  775:            updateCoins(currentPlayer, state, 5);
    #####:  776:            x = 1;//Condition to loop on
    #####:  777:            while( x == 1) {//Buy one card
    #####:  778:                if (supplyCount(choice1, state) <= 0){
    #####:  779:                    if (DEBUG)
        -:  780:                        printf("None of that card left, sorry!\n");
        -:  781:
    #####:  782:                    if (DEBUG){
        -:  783:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  784:                    }
        -:  785:                }
    #####:  786:                else if (state->coins < getCost(choice1)){
    #####:  787:                    printf("That card is too expensive!\n");
        -:  788:
    #####:  789:                    if (DEBUG){
        -:  790:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  791:                    }
        -:  792:                }
        -:  793:                else{
        -:  794:
    #####:  795:                    if (DEBUG){
        -:  796:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  797:                    }
        -:  798:
    #####:  799:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  800:                    x = 0;//No more buying cards
        -:  801:
    #####:  802:                    if (DEBUG){
        -:  803:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:                    }
        -:  805:
        -:  806:                }
        -:  807:            }     
        -:  808:
        -:  809:            //Reset Hand
    #####:  810:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:                state->hand[currentPlayer][i] = temphand[i];
    #####:  812:                temphand[i] = -1;
        -:  813:            }
        -:  814:            //Reset Hand
        -:  815:
    #####:  816:            return 0;
        -:  817:
        -:  818:        case gardens:
    #####:  819:            return -1;
        -:  820:
        -:  821:        case mine:
    #####:  822:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  823:
    #####:  824:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  825:            {
    #####:  826:                return -1;
        -:  827:            }
        -:  828:
    #####:  829:            if (choice2 > treasure_map || choice2 < curse)
        -:  830:            {
    #####:  831:                return -1;
        -:  832:            }
        -:  833:
    #####:  834:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  835:            {
    #####:  836:                return -1;
        -:  837:            }
        -:  838:
    #####:  839:            gainCard(choice2, state, 2, currentPlayer);
        -:  840:
        -:  841:            //discard card from hand
    #####:  842:            discardCard(handPos, currentPlayer, state, 0);
        -:  843:
        -:  844:            //discard trashed card
    #####:  845:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  846:            {
    #####:  847:                if (state->hand[currentPlayer][i] == j)
        -:  848:                {
    #####:  849:                    discardCard(i, currentPlayer, state, 0);			
    #####:  850:                    break;
        -:  851:                }
        -:  852:            }
        -:  853:
    #####:  854:            return 0;
        -:  855:
        -:  856:        case remodel:
    #####:  857:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  858:
    #####:  859:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  860:            {
    #####:  861:                return -1;
        -:  862:            }
        -:  863:
    #####:  864:            gainCard(choice2, state, 0, currentPlayer);
        -:  865:
        -:  866:            //discard card from hand
    #####:  867:            discardCard(handPos, currentPlayer, state, 0);
        -:  868:
        -:  869:            //discard trashed card
    #####:  870:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  871:            {
    #####:  872:                if (state->hand[currentPlayer][i] == j)
        -:  873:                {
    #####:  874:                    discardCard(i, currentPlayer, state, 0);			
    #####:  875:                    break;
        -:  876:                }
        -:  877:            }
    #####:  878:            return 0;	
        -:  879:        
        -:  880:        case smithy:
    #####:  881:            mysmithy(currentPlayer, state, handPos);
    #####:  882:            break;
        -:  883:
        -:  884:        case village:
    #####:  885:            myvillage(currentPlayer, state, handPos);
    #####:  886:            break;
        -:  887:
        -:  888:        case baron:
    #####:  889:            state->numBuys++;//Increase buys by 1!
    #####:  890:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  891:                int p = 0;//Iterator for hand!
    #####:  892:                int card_not_discarded = 1;//Flag for discard set!
    #####:  893:                while(card_not_discarded){
    #####:  894:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  895:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  896:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  897:                        state->discardCount[currentPlayer]++;
    #####:  898:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  899:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  900:                        }
    #####:  901:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  902:                        state->handCount[currentPlayer]--;
    #####:  903:                        card_not_discarded = 0;//Exit the loop
        -:  904:                    }
    #####:  905:                    else if (p > state->handCount[currentPlayer]){
    #####:  906:                        if(DEBUG) {
        -:  907:                            printf("No estate cards in your hand, invalid choice\n");
        -:  908:                            printf("Must gain an estate if there are any\n");
        -:  909:                        }
    #####:  910:                        if (supplyCount(estate, state) > 0){
    #####:  911:                            gainCard(estate, state, 0, currentPlayer);
    #####:  912:                            state->supplyCount[estate]--;//Decrement estates
    #####:  913:                            if (supplyCount(estate, state) == 0){
    #####:  914:                                isGameOver(state);
        -:  915:                            }
        -:  916:                        }
    #####:  917:                        card_not_discarded = 0;//Exit the loop
        -:  918:                    }
        -:  919:
        -:  920:                    else{
    #####:  921:                        p++;//Next card
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:            else{
    #####:  927:                if (supplyCount(estate, state) > 0){
    #####:  928:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  929:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  930:                    if (supplyCount(estate, state) == 0){
    #####:  931:                        isGameOver(state);
        -:  932:                    }
        -:  933:                }
        -:  934:            }
        -:  935:
        -:  936:
    #####:  937:            return 0;
        -:  938:
        -:  939:        case great_hall:
    #####:  940:            mygreathall(currentPlayer, state, handPos);
    #####:  941:            break;
        -:  942:
        -:  943:        case minion:
        -:  944:            //+1 action
    #####:  945:            state->numActions++;
        -:  946:
        -:  947:            //discard card from hand
    #####:  948:            discardCard(handPos, currentPlayer, state, 0);
        -:  949:
    #####:  950:            if (choice1)		//+2 coins
        -:  951:            {
    #####:  952:                state->coins = state->coins + 2;
        -:  953:            }
        -:  954:
    #####:  955:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  956:            {
        -:  957:                //discard hand
    #####:  958:                while(numHandCards(state) > 0)
        -:  959:                {
    #####:  960:                    discardCard(handPos, currentPlayer, state, 0);
        -:  961:                }
        -:  962:
        -:  963:                //draw 4
    #####:  964:                for (i = 0; i < 4; i++)
        -:  965:                {
    #####:  966:                    drawCard(currentPlayer, state);
        -:  967:                }
        -:  968:
        -:  969:                //other players discard hand and redraw if hand size > 4
    #####:  970:                for (i = 0; i < state->numPlayers; i++)
        -:  971:                {
    #####:  972:                    if (i != currentPlayer)
        -:  973:                    {
    #####:  974:                        if ( state->handCount[i] > 4 )
        -:  975:                        {
        -:  976:                            //discard hand
    #####:  977:                            while( state->handCount[i] > 0 )
        -:  978:                            {
    #####:  979:                                discardCard(handPos, i, state, 0);
        -:  980:                            }
        -:  981:
        -:  982:                            //draw 4
    #####:  983:                            for (j = 0; j < 4; j++)
        -:  984:                            {
    #####:  985:                                drawCard(i, state);
        -:  986:                            }
        -:  987:                        }
        -:  988:                    }
        -:  989:                }
        -:  990:
        -:  991:            }
    #####:  992:            return 0;
        -:  993:
        -:  994:        case steward:
    #####:  995:            if (choice1 == 1)
        -:  996:            {
        -:  997:                //+2 cards
    #####:  998:                drawCard(currentPlayer, state);
    #####:  999:                drawCard(currentPlayer, state);
        -: 1000:            }
    #####: 1001:            else if (choice1 == 2)
        -: 1002:            {
        -: 1003:                //+2 coins
    #####: 1004:                state->coins = state->coins + 2;
        -: 1005:            }
        -: 1006:            else
        -: 1007:            {
        -: 1008:                //trash 2 cards in hand
    #####: 1009:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1010:                discardCard(choice3, currentPlayer, state, 1);
        -: 1011:            }
        -: 1012:
        -: 1013:            //discard card from hand
    #####: 1014:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1015:            return 0;
        -: 1016:
        -: 1017:        case tribute:
    #####: 1018:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1019:                if (state->deckCount[nextPlayer] > 0){
    #####: 1020:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1021:                    state->deckCount[nextPlayer]--;
        -: 1022:                }
    #####: 1023:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1024:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1025:                    state->discardCount[nextPlayer]--;
        -: 1026:                }
        -: 1027:                else{
        -: 1028:                    //No Card to Reveal
    #####: 1029:                    if (DEBUG){
        -: 1030:                        printf("No cards to reveal\n");
        -: 1031:                    }
        -: 1032:                }
        -: 1033:            }
        -: 1034:
        -: 1035:            else{
    #####: 1036:                if (state->deckCount[nextPlayer] == 0){
    #####: 1037:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1038:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1039:                        state->deckCount[nextPlayer]++;
    #####: 1040:                        state->discard[nextPlayer][i] = -1;
    #####: 1041:                        state->discardCount[nextPlayer]--;
        -: 1042:                    }
        -: 1043:
    #####: 1044:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1045:                } 
    #####: 1046:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
    #####: 1049:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
        -: 1052:            }    
        -: 1053:
    #####: 1054:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1055:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1056:                state->playedCardCount++;
    #####: 1057:                tributeRevealedCards[1] = -1;
        -: 1058:            }
        -: 1059:
    #####: 1060:            for (i = 0; i <= 2; i ++){
    #####: 1061:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1062:                    state->coins += 2;
        -: 1063:                }
        -: 1064:
    #####: 1065:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1066:                    drawCard(currentPlayer, state);
    #####: 1067:                    drawCard(currentPlayer, state);
        -: 1068:                }
        -: 1069:                else{//Action Card
    #####: 1070:                    state->numActions = state->numActions + 2;
        -: 1071:                }
        -: 1072:            }
        -: 1073:
    #####: 1074:            return 0;
        -: 1075:
        -: 1076:        case ambassador:
    #####: 1077:            j = 0;		//used to check if player has enough cards to discard
        -: 1078:
    #####: 1079:            if (choice2 > 2 || choice2 < 0)
        -: 1080:            {
    #####: 1081:                return -1;				
        -: 1082:            }
        -: 1083:
    #####: 1084:            if (choice1 == handPos)
        -: 1085:            {
    #####: 1086:                return -1;
        -: 1087:            }
        -: 1088:
    #####: 1089:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1090:            {
    #####: 1091:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1092:                {
    #####: 1093:                    j++;
        -: 1094:                }
        -: 1095:            }
    #####: 1096:            if (j < choice2)
        -: 1097:            {
    #####: 1098:                return -1;				
        -: 1099:            }
        -: 1100:
    #####: 1101:            if (DEBUG) 
        -: 1102:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1103:
        -: 1104:            //increase supply count for choosen card by amount being discarded
    #####: 1105:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1106:
        -: 1107:            //each other player gains a copy of revealed card
    #####: 1108:            for (i = 0; i < state->numPlayers; i++)
        -: 1109:            {
    #####: 1110:                if (i != currentPlayer)
        -: 1111:                {
    #####: 1112:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1113:                }
        -: 1114:            }
        -: 1115:
        -: 1116:            //discard played card from hand
    #####: 1117:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1118:
        -: 1119:            //trash copies of cards returned to supply
    #####: 1120:            for (j = 0; j < choice2; j++)
        -: 1121:            {
    #####: 1122:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1123:                {
    #####: 1124:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1125:                    {
    #####: 1126:                        discardCard(i, currentPlayer, state, 1);
    #####: 1127:                        break;
        -: 1128:                    }
        -: 1129:                }
        -: 1130:            }			
        -: 1131:
    #####: 1132:            return 0;
        -: 1133:
        -: 1134:        case cutpurse:
        -: 1135:
    #####: 1136:            updateCoins(currentPlayer, state, 2);
    #####: 1137:            for (i = 0; i < state->numPlayers; i++)
        -: 1138:            {
    #####: 1139:                if (i != currentPlayer)
        -: 1140:                {
    #####: 1141:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1142:                    {
    #####: 1143:                        if (state->hand[i][j] == copper)
        -: 1144:                        {
    #####: 1145:                            discardCard(j, i, state, 0);
    #####: 1146:                            break;
        -: 1147:                        }
    #####: 1148:                        if (j == state->handCount[i])
        -: 1149:                        {
    #####: 1150:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1151:                            {
    #####: 1152:                                if (DEBUG)
        -: 1153:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1154:                            }	
    #####: 1155:                            break;
        -: 1156:                        }		
        -: 1157:                    }
        -: 1158:
        -: 1159:                }
        -: 1160:
        -: 1161:            }				
        -: 1162:
        -: 1163:            //discard played card from hand
    #####: 1164:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1165:
    #####: 1166:            return 0;
        -: 1167:
        -: 1168:
        -: 1169:        case embargo: 
        -: 1170:            //+2 Coins
    #####: 1171:            state->coins = state->coins + 2;
        -: 1172:
        -: 1173:            //see if selected pile is in play
    #####: 1174:            if ( state->supplyCount[choice1] == -1 )
        -: 1175:            {
    #####: 1176:                return -1;
        -: 1177:            }
        -: 1178:
        -: 1179:            //add embargo token to selected supply pile
    #####: 1180:            state->embargoTokens[choice1]++;
        -: 1181:
        -: 1182:            //trash card
    #####: 1183:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1184:            return 0;
        -: 1185:
        -: 1186:        case outpost:
    #####: 1187:           myoutpost(currentPlayer, state, handPos);
    #####: 1188:          break; 
        -: 1189:
        -: 1190:        case salvager:
        -: 1191:            //+1 buy
    #####: 1192:            state->numBuys++;
        -: 1193:
    #####: 1194:            if (choice1)
        -: 1195:            {
        -: 1196:                //gain coins equal to trashed card
    #####: 1197:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:                //trash card
    #####: 1199:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1200:            }
        -: 1201:
        -: 1202:            //discard card
    #####: 1203:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:            return 0;
        -: 1205:
        -: 1206:        case sea_hag:
    #####: 1207:            for (i = 0; i < state->numPlayers; i++){
    #####: 1208:                if (i != currentPlayer){
    #####: 1209:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1210:                    state->discardCount[i]++;
    #####: 1211:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1212:                }
        -: 1213:            }
    #####: 1214:            return 0;
        -: 1215:
        -: 1216:        case treasure_map:
        -: 1217:            //search hand for another treasure_map
    #####: 1218:            index = -1;
    #####: 1219:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:            {
    #####: 1221:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:                {
    #####: 1223:                    index = i;
    #####: 1224:                    break;
        -: 1225:                }
        -: 1226:            }
    #####: 1227:            if (index > -1)
        -: 1228:            {
        -: 1229:                //trash both treasure cards
    #####: 1230:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:                discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:                //gain 4 Gold cards
    #####: 1234:                for (i = 0; i < 4; i++)
        -: 1235:                {
    #####: 1236:                    gainCard(gold, state, 1, currentPlayer);
        -: 1237:                }
        -: 1238:
        -: 1239:                //return success
    #####: 1240:                return 1;
        -: 1241:            }
        -: 1242:
        -: 1243:            //no second treasure_map found in hand
    #####: 1244:            return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:    return -1;
        -: 1248:}
        -: 1249:
    #####: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:    //if card is not trashed, added to Played pile 
    #####: 1254:    if (trashFlag < 1)
        -: 1255:    {
        -: 1256:        //add card to played pile
    #####: 1257:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:        state->playedCardCount++;
        -: 1259:    }
        -: 1260:
        -: 1261:    //set played card to -1
    #####: 1262:    state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:    //remove card from player's hand
    #####: 1265:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1266:    {
        -: 1267:        //reduce number of cards in hand
    #####: 1268:        state->handCount[currentPlayer]--;
        -: 1269:    }
    #####: 1270:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:        //reduce number of cards in hand
    #####: 1273:        state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:    else 	
        -: 1276:    {
        -: 1277:        //replace discarded card with last card in hand
    #####: 1278:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:        //set last card to -1
    #####: 1280:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:        //reduce number of cards in hand
    #####: 1282:        state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:    return 0;
        -: 1286:}
        -: 1287:
    #####: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:    //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:        return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //added card for [whoseTurn] current player:
        -: 1299:    // toFlag = 0 : add to discard
        -: 1300:    // toFlag = 1 : add to deck
        -: 1301:    // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:    if (toFlag == 1)
        -: 1304:    {
    #####: 1305:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:        state->deckCount[player]++;
        -: 1307:    }
    #####: 1308:    else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:        state->handCount[player]++;
        -: 1312:    }
        -: 1313:    else
        -: 1314:    {
    #####: 1315:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:        state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:    //decrease number in supply pile
    #####: 1320:    state->supplyCount[supplyPos]--;
        -: 1321:
    #####: 1322:    return 0;
        -: 1323:}
        -: 1324:
        1: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:    int i;
        -: 1328:
        -: 1329:    //reset coin count
        1: 1330:    state->coins = 0;
        -: 1331:
        -: 1332:    //add coins for each Treasure card in player's hand
        6: 1333:    for (i = 0; i < state->handCount[player]; i++)
        -: 1334:    {
        5: 1335:        if (state->hand[player][i] == copper)
        -: 1336:        {
        4: 1337:            state->coins += 1;
        -: 1338:        }
        1: 1339:        else if (state->hand[player][i] == silver)
        -: 1340:        {
    #####: 1341:            state->coins += 2;
        -: 1342:        }
        1: 1343:        else if (state->hand[player][i] == gold)
        -: 1344:        {
    #####: 1345:            state->coins += 3;
        -: 1346:        }	
        -: 1347:    }	
        -: 1348:
        -: 1349:    //add bonus
        1: 1350:    state->coins += bonus;
        -: 1351:
        1: 1352:    return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
