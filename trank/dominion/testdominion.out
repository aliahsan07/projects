File 'dominion.c'
Lines executed:59.22% of 564
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     3720:    8:int compare(const void* a, const void* b) {
     3720:    9:  if (*(int*)a > *(int*)b)
     1826:   10:    return 1;
     1894:   11:  if (*(int*)a < *(int*)b)
      862:   12:    return -1;
     1032:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        2:   44:  SelectStream(1);
        2:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        2:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        2:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       22:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      220:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        2:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        2:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        2:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:  state->supplyCount[silver] = 40;
        2:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       42:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      330:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      310:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       20:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       20:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       20:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      290:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        8:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       24:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
        -:  145:	}
       48:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        8:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        8:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       56:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       54:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        2:  182:  state->outpostPlayed = 0;
        2:  183:  state->phase = 0;
        2:  184:  state->numActions = 1;
        2:  185:  state->numBuys = 1;
        2:  186:  state->playedCardCount = 0;
        2:  187:  state->whoseTurn = 0;
        2:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       12:  192:  for (it = 0; it < 5; it++){
       10:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        2:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:  return 0;
        -:  199:}
        -:  200:
       92:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       92:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       92:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       92:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1530:  214:  while (state->deckCount[player] > 0) {
     1346:  215:    card = floor(Random() * state->deckCount[player]);
     1346:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1346:  217:    newDeckPos++;
     6048:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     4702:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1346:  221:    state->deckCount[player]--;
        -:  222:  }
     1438:  223:  for (i = 0; i < newDeckPos; i++) {
     1346:  224:    state->deck[player][i] = newDeck[i];
     1346:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       92:  228:  return 0;
        -:  229:}
        -:  230:
      110:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
      110:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      110:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
      110:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
      110:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
      110:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
      110:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
       20:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       90:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       90:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       90:  269:  return 0;
        -:  270:}
        -:  271:
      188:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      188:  280:  who = state->whoseTurn;
        -:  281:
      188:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
      188:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
      188:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
      188:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      188:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      188:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      188:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      188:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
      110:  315:int handCard(int handPos, struct gameState *state) {
      110:  316:  int currentPlayer = whoseTurn(state);
      110:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      426:  320:int supplyCount(int card, struct gameState *state) {
      426:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      430:  346:int whoseTurn(struct gameState *state) {
      430:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
      210:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      210:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     1302:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     1092:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     1092:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
      210:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      210:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      140:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       70:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      210:  370:  state->outpostPlayed = 0;
      210:  371:  state->phase = 0;
      210:  372:  state->numActions = 1;
      210:  373:  state->coins = 0;
      210:  374:  state->numBuys = 1;
      210:  375:  state->playedCardCount = 0;
      210:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     1260:  380:  for (k = 0; k < 5; k++){
     1050:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
      210:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      210:  387:  return 0;
        -:  388:}
        -:  389:
      214:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      214:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      212:  401:  j = 0;
     5512:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     5300:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       92:  406:	  j++;
        -:  407:	}
        -:  408:    }
      212:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
      212:  414:  return 0;
        -:  415:}
        -:  416:
      630:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      630:  420:  int score = 0;
        -:  421:  //score from hand
     1686:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
     1056:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
     1056:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
     1056:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
     1056:  427:      if (state->hand[player][i] == province) { score = score + 6; };
     1056:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
     1056:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     6196:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     5566:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     5566:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     5566:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     5566:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     5566:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     5566:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     6196:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     5566:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     5566:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     5566:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     5566:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     5566:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     5566:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
      630:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
     1154:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1154:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1372:  533:    for (i = 0; i < state->discardCount[player];i++){
     1286:  534:      state->deck[player][i] = state->discard[player][i];
     1286:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       86:  538:    state->deckCount[player] = state->discardCount[player];
       86:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       86:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       86:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       86:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       86:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       86:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
       86:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       86:  563:    state->deckCount[player]--;
       86:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1068:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1068:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1068:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1068:  576:    state->deckCount[player]--;
     1068:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1154:  580:  return 0;
        -:  581:}
        -:  582:
      918:  583:int getCost(int cardNumber)
        -:  584:{
      918:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        8:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       48:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
       78:  598:      return 3;
        -:  599:    case gold:
       72:  600:      return 6;
        -:  601:    case adventurer:
       44:  602:      return 6;
        -:  603:    case council_room:
       76:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
       68:  610:      return 5;
        -:  611:    case remodel:
       62:  612:      return 4;
        -:  613:    case smithy:
       92:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
      110:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
       50:  626:      return 5;
        -:  627:    case ambassador:
       68:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
       74:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
       66:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        6:  646:int cardCouncilRoom(struct gameState *state, int currentPlayer, int handPos)
        -:  647:{
        -:  648:  //+4 Cards
        -:  649:  //for (i = 0; i < 4; i++)
        -:  650:  int i;
       36:  651:  for (i = 0; i <= 4; i++)
        -:  652:    {
       30:  653:      drawCard(currentPlayer, state);
        -:  654:    }
        -:  655:		    
        -:  656:  //+1 Buy
        6:  657:  state->numBuys++; //extra
        6:  658:  state->numBuys++;
        -:  659:		    
        -:  660:  //Each other player draws a card
       24:  661:  for (i = 0; i < state->numPlayers; i++)
        -:  662:    {
       18:  663:      if ( i != currentPlayer )
        -:  664:	{
       12:  665:    drawCard(i, state);
        -:  666:	}
        -:  667:    }
        -:  668:		    
        -:  669:  //put played card in played card pile
        6:  670:  discardCard(handPos, currentPlayer, state, 0);
        -:  671:		    
        6:  672:  return 0;
        -:  673:}
        -:  674:
        6:  675:int cardRemodel(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -:  676:{
        -:  677:  int i, j;
        -:  678:  
        6:  679:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  680:  
        -:  681:  //if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        6:  682:  if ( (getCost(state->hand[currentPlayer][choice2]) + 2) > getCost(choice1) )
        -:  683:    {
        6:  684:      return -1;
        -:  685:    }
        -:  686:  
    #####:  687:  gainCard(choice2, state, 0, currentPlayer);
        -:  688:  
        -:  689:  //discard card from hand
    #####:  690:  discardCard(handPos, currentPlayer, state, 0);
        -:  691:  
        -:  692:  //discard trashed card
    #####:  693:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  694:    {
    #####:  695:      if (state->hand[currentPlayer][i] == j)
        -:  696:	{
    #####:  697:	  discardCard(i, currentPlayer, state, 0);			
    #####:  698:	  break;
        -:  699:	}
        -:  700:    }
        -:  701:    
    #####:  702:  return 0;
        -:  703:}
        -:  704:
       10:  705:int cardSmithy(struct gameState *state, int currentPlayer, int handPos)
        -:  706:{
        -:  707:  int i;
        -:  708:  //+3 Cards
        -:  709:  //for (i = 0; i < 3; i++)
       50:  710:  for (i = 0; i <= 3; i++)
        -:  711:    {
       40:  712:      drawCard(currentPlayer, state);
        -:  713:    }
        -:  714:		    
        -:  715:  //discard card from hand
       10:  716:  discardCard(handPos, currentPlayer, state, 0);
       10:  717:  return 0;
        -:  718:}
        -:  719:
    #####:  720:int cardVillage(struct gameState *state, int currentPlayer, int handPos)
        -:  721:{
        -:  722:  //+1 Card
    #####:  723:  drawCard(currentPlayer, state);
        -:  724:		    
        -:  725:  //+2 Actions
        -:  726:  //state->numActions = state->numActions + 2;
    #####:  727:  state->numActions = state->numActions - 2;
        -:  728:		    
        -:  729:  //discard played card from hand
    #####:  730:  discardCard(handPos, currentPlayer, state, 0);
    #####:  731:  return 0;
        -:  732:}
        -:  733:
    #####:  734:int cardGreatHall(struct gameState *state, int currentPlayer, int handPos)
        -:  735:{
        -:  736:  //+1 Card
    #####:  737:  drawCard(currentPlayer, state);
        -:  738:		    
        -:  739:  //+1 Actions
        -:  740:  //state->numActions++;
    #####:  741:  state->numActions = state->numActions + 2;
        -:  742:		    
        -:  743:  //discard card from hand
    #####:  744:  discardCard(handPos, currentPlayer, state, 0);
    #####:  745:  return 0;
        -:  746:}
        -:  747:
      110:  748:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  749:{
        -:  750:  int i;
        -:  751:  int j;
        -:  752:  int k;
        -:  753:  int x;
        -:  754:  int index;
      110:  755:  int currentPlayer = whoseTurn(state);
      110:  756:  int nextPlayer = currentPlayer + 1;
        -:  757:
      110:  758:  int tributeRevealedCards[2] = {-1, -1};
        -:  759:  int temphand[MAX_HAND];// moved above the if statement
      110:  760:  int drawntreasure=0;
        -:  761:  int cardDrawn;
      110:  762:  int z = 0;// this is the counter for the temp hand
      110:  763:  if (nextPlayer > (state->numPlayers - 1)){
       38:  764:    nextPlayer = 0;
        -:  765:  }
        -:  766:  
        -:  767:	
        -:  768:  //uses switch to select card and perform actions
      110:  769:  switch( card ) 
        -:  770:    {
        -:  771:    case council_room:
        6:  772:      cardCouncilRoom(state, currentPlayer, handPos);
        6:  773:      return 0;
        -:  774:      
        -:  775:    case remodel:
        6:  776:      cardRemodel(state, currentPlayer, handPos, choice1, choice2);
        6:  777:      return 0;
        -:  778:		
        -:  779:    case smithy:
       10:  780:      cardSmithy(state, currentPlayer, handPos);
       10:  781:      return 0;
        -:  782:		
        -:  783:    case village:
    #####:  784:      cardVillage(state, currentPlayer, handPos);
    #####:  785:      return 0;
        -:  786:      
        -:  787:    case great_hall:
    #####:  788:      cardGreatHall(state, currentPlayer, handPos);
    #####:  789:      return 0;
        -:  790:      
        -:  791:    case adventurer:
    #####:  792:      while(drawntreasure<2){
    #####:  793:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  794:          shuffle(currentPlayer, state);
        -:  795:        }
    #####:  796:        drawCard(currentPlayer, state);
    #####:  797:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  798:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  799:          drawntreasure++;
        -:  800:        else{
    #####:  801:          temphand[z]=cardDrawn;
    #####:  802:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  803:          z++;
        -:  804:        }
        -:  805:      }
    #####:  806:      while(z-1>=0){
    #####:  807:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  808:        z=z-1;
        -:  809:      }
    #####:  810:      return 0;
        -:  811:      
        -:  812:    case feast:
        -:  813:      //gain card with cost up to 5
        -:  814:      //Backup hand
    #####:  815:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  816:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  817:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  818:      }
        -:  819:      //Backup hand
        -:  820:
        -:  821:      //Update Coins for Buy
    #####:  822:      updateCoins(currentPlayer, state, 5);
    #####:  823:      x = 1;//Condition to loop on
    #####:  824:      while( x == 1) {//Buy one card
    #####:  825:        if (supplyCount(choice1, state) <= 0){
        -:  826:            if (DEBUG)
        -:  827:              printf("None of that card left, sorry!\n");
        -:  828:
        -:  829:            if (DEBUG){
        -:  830:              printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  831:            }
        -:  832:        }
    #####:  833:        else if (state->coins < getCost(choice1)){
    #####:  834:          printf("That card is too expensive!\n");
        -:  835:
        -:  836:          if (DEBUG){
        -:  837:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  838:          }
        -:  839:        }
        -:  840:        else{
        -:  841:
        -:  842:          if (DEBUG){
        -:  843:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  844:          }
        -:  845:
    #####:  846:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  847:          x = 0;//No more buying cards
        -:  848:
        -:  849:          if (DEBUG){
        -:  850:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  851:          }
        -:  852:          
        -:  853:        }
        -:  854:      }
        -:  855:
        -:  856:      //Reset Hand
    #####:  857:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  858:        state->hand[currentPlayer][i] = temphand[i];
    #####:  859:        temphand[i] = -1;
        -:  860:      }
        -:  861:      //Reset Hand
        -:  862:      			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case gardens:
    #####:  866:      return -1;
        -:  867:			
        -:  868:    case mine:
        4:  869:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  870:
        4:  871:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  872:      {
        2:  873:        return -1;
        -:  874:      }
        -:  875:		
        2:  876:      if (choice2 > treasure_map || choice2 < curse)
        -:  877:      {
    #####:  878:        return -1;
        -:  879:      }
        -:  880:
        2:  881:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  882:      {
        2:  883:        return -1;
        -:  884:      }
        -:  885:
    #####:  886:      gainCard(choice2, state, 2, currentPlayer);
        -:  887:
        -:  888:      //discard card from hand
    #####:  889:      discardCard(handPos, currentPlayer, state, 0);
        -:  890:
        -:  891:      //discard trashed card
    #####:  892:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  893:      {
    #####:  894:        if (state->hand[currentPlayer][i] == j)
        -:  895:          {
    #####:  896:            discardCard(i, currentPlayer, state, 0);			
    #####:  897:            break;
        -:  898:          }
        -:  899:      }
        -:  900:			
    #####:  901:      return 0;
        -:  902:			
        -:  903:    case baron:
       32:  904:      state->numBuys++;//Increase buys by 1!
       32:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
       32:  906:        int p = 0;//Iterator for hand!
       32:  907:        int card_not_discarded = 1;//Flag for discard set!
      230:  908:        while(card_not_discarded){
      166:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
       14:  910:            state->coins += 4;//Add 4 coins to the amount of coins
       14:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
       14:  912:            state->discardCount[currentPlayer]++;
       58:  913:            for (;p < state->handCount[currentPlayer]; p++){
       44:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  915:            }
       14:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
       14:  917:            state->handCount[currentPlayer]--;
       14:  918:            card_not_discarded = 0;//Exit the loop
        -:  919:          }
      152:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
       18:  925:            if (supplyCount(estate, state) > 0){
       12:  926:              gainCard(estate, state, 0, currentPlayer);
       12:  927:              state->supplyCount[estate]--;//Decrement estates
       12:  928:              if (supplyCount(estate, state) == 0){
        2:  929:                isGameOver(state);
        -:  930:              }
        -:  931:            }
       18:  932:            card_not_discarded = 0;//Exit the loop
        -:  933:          }
        -:  934:                
        -:  935:          else{
      134:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
        -:  939:      }
        -:  940:			    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
        -:  947:          }
        -:  948:        }
        -:  949:      }
        -:  950:	    
        -:  951:      
       32:  952:      return 0;
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:      {
    #####:  963:        state->coins = state->coins + 2;
        -:  964:      }
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:      {
        -:  968:        //discard hand
    #####:  969:        while(numHandCards(state) > 0)
        -:  970:        {
    #####:  971:          discardCard(handPos, currentPlayer, state, 0);
        -:  972:        }
        -:  973:          
        -:  974:        //draw 4
    #####:  975:        for (i = 0; i < 4; i++)
        -:  976:        {
    #####:  977:          drawCard(currentPlayer, state);
        -:  978:        }
        -:  979:            
        -:  980:        //other players discard hand and redraw if hand size > 4
    #####:  981:        for (i = 0; i < state->numPlayers; i++)
        -:  982:        {
    #####:  983:          if (i != currentPlayer)
        -:  984:          {
    #####:  985:            if ( state->handCount[i] > 4 )
        -:  986:            {
        -:  987:              //discard hand
    #####:  988:              while( state->handCount[i] > 0 )
        -:  989:              {
    #####:  990:                discardCard(handPos, i, state, 0);
        -:  991:              }
        -:  992:              
        -:  993:              //draw 4
    #####:  994:              for (j = 0; j < 4; j++)
        -:  995:              {
    #####:  996:                drawCard(i, state);
        -:  997:              }
        -:  998:            }
        -:  999:          }
        -: 1000:        }
        -: 1001:        
        -: 1002:      }
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:      {
        -: 1008:        //+2 cards
    #####: 1009:        drawCard(currentPlayer, state);
    #####: 1010:        drawCard(currentPlayer, state);
        -: 1011:      }
    #####: 1012:      else if (choice1 == 2)
        -: 1013:      {
        -: 1014:        //+2 coins
    #####: 1015:        state->coins = state->coins + 2;
        -: 1016:      }
        -: 1017:      else
        -: 1018:      {
        -: 1019:        //trash 2 cards in hand
    #####: 1020:        discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:        discardCard(choice3, currentPlayer, state, 1);
        -: 1022:      }
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
       12: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:        if (state->deckCount[nextPlayer] > 0){
    #####: 1031:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:          state->deckCount[nextPlayer]--;
        -: 1033:        }
    #####: 1034:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:          state->discardCount[nextPlayer]--;
        -: 1037:        }
        -: 1038:        else{
        -: 1039:          //No Card to Reveal
        -: 1040:          if (DEBUG){
        -: 1041:            printf("No cards to reveal\n");
        -: 1042:          }
        -: 1043:        }
        -: 1044:      }
        -: 1045:            
        -: 1046:      else{
       12: 1047:        if (state->deckCount[nextPlayer] == 0){
    #####: 1048:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:            state->deckCount[nextPlayer]++;
    #####: 1051:            state->discard[nextPlayer][i] = -1;
    #####: 1052:            state->discardCount[nextPlayer]--;
        -: 1053:          }
        -: 1054:                
    #####: 1055:          shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:        } 
       12: 1057:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       12: 1058:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       12: 1059:        state->deckCount[nextPlayer]--;
       12: 1060:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
       12: 1061:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
       12: 1062:        state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
       12: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        2: 1066:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        2: 1067:        state->playedCardCount++;
        2: 1068:        tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
       48: 1071:      for (i = 0; i <= 2; i ++){
       36: 1072:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        6: 1073:          state->coins += 2;
        -: 1074:        }
        -: 1075:              
       30: 1076:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        6: 1077:          drawCard(currentPlayer, state);
        6: 1078:          drawCard(currentPlayer, state);
        -: 1079:        }
        -: 1080:        else{//Action Card
       24: 1081:          state->numActions = state->numActions + 2;
        -: 1082:        }
        -: 1083:      }
        -: 1084:	    
       12: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
       20: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
       20: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:      {
    #####: 1092:        return -1;				
        -: 1093:      }
        -: 1094:
       20: 1095:      if (choice1 == handPos)
        -: 1096:      {
       10: 1097:        return -1;
        -: 1098:      }
        -: 1099:
       68: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:      {
       58: 1102:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:          {
        4: 1104:            j++;
        -: 1105:          }
        -: 1106:      }
       10: 1107:          if (j < choice2)
        -: 1108:      {
        6: 1109:        return -1;				
        -: 1110:      }
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
        4: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
       16: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:      {
       12: 1121:        if (i != currentPlayer)
        -: 1122:          {
        8: 1123:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:          }
        -: 1125:      }
        -: 1126:
        -: 1127:      //discard played card from hand
        4: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
        8: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:      {
        8: 1133:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:          {
        8: 1135:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:            {
        4: 1137:              discardCard(i, currentPlayer, state, 1);
        4: 1138:              break;
        -: 1139:            }
        -: 1140:          }
        -: 1141:      }			
        -: 1142:
        4: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
    #####: 1146:      updateCoins(currentPlayer, state, 2);
    #####: 1147:      for (i = 0; i < state->numPlayers; i++)
        -: 1148:      {
    #####: 1149:        if (i != currentPlayer)
        -: 1150:        {
    #####: 1151:          for (j = 0; j < state->handCount[i]; j++)
        -: 1152:          {
    #####: 1153:            if (state->hand[i][j] == copper)
        -: 1154:              {
    #####: 1155:                discardCard(j, i, state, 0);
    #####: 1156:                break;
        -: 1157:              }
    #####: 1158:            if (j == state->handCount[i])
        -: 1159:              {
    #####: 1160:                for (k = 0; k < state->handCount[i]; k++)
        -: 1161:                {
        -: 1162:                  if (DEBUG)
        -: 1163:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1164:                }	
    #####: 1165:                break;
        -: 1166:              }		
        -: 1167:          }
        -: 1168:            
        -: 1169:        }
        -: 1170:            
        -: 1171:      }				
        -: 1172:
        -: 1173:      //discard played card from hand
    #####: 1174:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1175:
    #####: 1176:      return 0;
        -: 1177:
        -: 1178:		
        -: 1179:    case embargo: 
        -: 1180:      //+2 Coins
    #####: 1181:      state->coins = state->coins + 2;
        -: 1182:			
        -: 1183:      //see if selected pile is in play
    #####: 1184:      if ( state->supplyCount[choice1] == -1 )
        -: 1185:      {
    #####: 1186:        return -1;
        -: 1187:      }
        -: 1188:			
        -: 1189:      //add embargo token to selected supply pile
    #####: 1190:      state->embargoTokens[choice1]++;
        -: 1191:			
        -: 1192:      //trash card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case outpost:
        -: 1197:      //set outpost flag
        2: 1198:      state->outpostPlayed++;
        -: 1199:			
        -: 1200:      //discard card
        2: 1201:      discardCard(handPos, currentPlayer, state, 0);
        2: 1202:      return 0;
        -: 1203:		
        -: 1204:    case salvager:
        -: 1205:      //+1 buy
    #####: 1206:      state->numBuys++;
        -: 1207:			
    #####: 1208:      if (choice1)
        -: 1209:      {
        -: 1210:        //gain coins equal to trashed card
    #####: 1211:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1212:        //trash card
    #####: 1213:        discardCard(choice1, currentPlayer, state, 1);	
        -: 1214:      }
        -: 1215:			
        -: 1216:      //discard card
    #####: 1217:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case sea_hag:
       72: 1221:      for (i = 0; i < state->numPlayers; i++){
       54: 1222:        if (i != currentPlayer){
       36: 1223:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
       36: 1224:          state->discardCount[i]++;
       36: 1225:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1226:        }
        -: 1227:      }
       18: 1228:      return 0;
        -: 1229:		
        -: 1230:    case treasure_map:
        -: 1231:      //search hand for another treasure_map
    #####: 1232:      index = -1;
    #####: 1233:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1234:      {
    #####: 1235:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1236:          {
    #####: 1237:            index = i;
    #####: 1238:            break;
        -: 1239:          }
        -: 1240:      }
    #####: 1241:      if (index > -1)
        -: 1242:      {
        -: 1243:        //trash both treasure cards
    #####: 1244:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1245:        discardCard(index, currentPlayer, state, 1);
        -: 1246:
        -: 1247:        //gain 4 Gold cards
    #####: 1248:        for (i = 0; i < 4; i++)
        -: 1249:          {
    #####: 1250:            gainCard(gold, state, 1, currentPlayer);
        -: 1251:          }
        -: 1252:            
        -: 1253:        //return success
    #####: 1254:        return 1;
        -: 1255:      }
        -: 1256:			
        -: 1257:      //no second treasure_map found in hand
    #####: 1258:      return -1;
        -: 1259:    }
        -: 1260:	
    #####: 1261:  return -1;
        -: 1262:}
        -: 1263:
       26: 1264:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1265:{
        -: 1266:	
        -: 1267:  //if card is not trashed, added to Played pile 
       26: 1268:  if (trashFlag < 1)
        -: 1269:    {
        -: 1270:      //add card to played pile
       22: 1271:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       22: 1272:      state->playedCardCount++;
        -: 1273:    }
        -: 1274:	
        -: 1275:  //set played card to -1
       26: 1276:  state->hand[currentPlayer][handPos] = -1;
        -: 1277:	
        -: 1278:  //remove card from player's hand
       26: 1279:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1280:    {
        -: 1281:      //reduce number of cards in hand
        2: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
       24: 1284:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1285:    {
        -: 1286:      //reduce number of cards in hand
    #####: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:  else 	
        -: 1290:    {
        -: 1291:      //replace discarded card with last card in hand
       24: 1292:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1293:      //set last card to -1
       24: 1294:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1295:      //reduce number of cards in hand
       24: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
        -: 1298:	
       26: 1299:  return 0;
        -: 1300:}
        -: 1301:
      208: 1302:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1303:{
        -: 1304:  //Note: supplyPos is enum of choosen card
        -: 1305:	
        -: 1306:  //check if supply pile is empty (0) or card is not used in game (-1)
      208: 1307:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1308:    {
    #####: 1309:      return -1;
        -: 1310:    }
        -: 1311:	
        -: 1312:  //added card for [whoseTurn] current player:
        -: 1313:  // toFlag = 0 : add to discard
        -: 1314:  // toFlag = 1 : add to deck
        -: 1315:  // toFlag = 2 : add to hand
        -: 1316:
      208: 1317:  if (toFlag == 1)
        -: 1318:    {
    #####: 1319:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1320:      state->deckCount[player]++;
        -: 1321:    }
      208: 1322:  else if (toFlag == 2)
        -: 1323:    {
    #####: 1324:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1325:      state->handCount[player]++;
        -: 1326:    }
        -: 1327:  else
        -: 1328:    {
      208: 1329:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      208: 1330:      state->discardCount[player]++;
        -: 1331:    }
        -: 1332:	
        -: 1333:  //decrease number in supply pile
      208: 1334:  state->supplyCount[supplyPos]--;
        -: 1335:	 
      208: 1336:  return 0;
        -: 1337:}
        -: 1338:
      302: 1339:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1340:{
        -: 1341:  int i;
        -: 1342:	
        -: 1343:  //reset coin count
      302: 1344:  state->coins = 0;
        -: 1345:
        -: 1346:  //add coins for each Treasure card in player's hand
     1878: 1347:  for (i = 0; i < state->handCount[player]; i++)
        -: 1348:    {
     1576: 1349:      if (state->hand[player][i] == copper)
        -: 1350:	{
      492: 1351:	  state->coins += 1;
        -: 1352:	}
     1084: 1353:      else if (state->hand[player][i] == silver)
        -: 1354:	{
      314: 1355:	  state->coins += 2;
        -: 1356:	}
      770: 1357:      else if (state->hand[player][i] == gold)
        -: 1358:	{
      122: 1359:	  state->coins += 3;
        -: 1360:	}	
        -: 1361:    }	
        -: 1362:
        -: 1363:  //add bonus
      302: 1364:  state->coins += bonus;
        -: 1365:
      302: 1366:  return 0;
        -: 1367:}
        -: 1368:
        -: 1369:
        -: 1370://end of dominion.c
