Name: Duy Nguyen
CS 362
Delta Debugging Project.

I still couldn't figure out how to run the delta debugger from the website: 
https://www.st.cs.uni-saarland.de/dd/ddusage.php3

Hence, I will try to talk about what I had done to try to figure out why I couldn't run the delta debugger. Additionally, I will talk about what would happen if the delta debugger works (the basic idea of delta debugger).

First, this was what I tried to do to run the debugger. I firstly tried to run the example in the in the website which all the files from it. I tried to run it in window with python 2.7, but it got the assertion error. I tried to comment it out and got the input.c file, but it was just a copy of the bug.c. Hence, I believed that was not the right solution. I then tried to run it in the Ubuntu OS with python 2, python, 2.7, and python 3. None of them worked for me and I got the same assertion error. With the help of Dr. Groce, I knew that the bug.c wouldn’t create error unless I used the gcc 2.95.2, which was a really old version of gcc. Hence, I couldn’t test the code or had any test run to see how the program work. Next, I create the bugging program. You could see those two programs as bug.c and bug1.c. For the bug.c program, I used the same testdominion.c program from assignment 4. However, I found a random seed that makes the program froze after it ran for a certain step. For the bug1.c, I based it on the playdom.c program. I changed the smithy function in dominion.c to make it the bug1.c return a segfault. (You wouldn’t find the change in dominion.c because I made it at my local computer as I couldn’t run python 2 in the osu server. I just changed the return value of smithy affect from 0 to -1). Unfortunately, both of them gave me the same assertion error. I tried to find a different delta debugger program online, but it also didn’t work. (The link for that website: http://fmv.jku.at/fuzzddtools/). I was planning to try and make my own delta debugger but I ran out of time.

Second, here was what I learn so far about the delta debugger from the internet. Initially, you needed to have two files, one of them was a working file and the other was a bug file. The program would compare between the two files and create a set of change that would cause the program to fail. Then, the delta debugger would you an algorithm to minimize that set of changes, so we would have a smaller and condense file that gave us the exact error. The algorithm that delta debugger used was interference. Basically, it tried to get the interference between two potential errors (two functions had to be malfunction at the same time in order to produce that error). After, it found any change that would cause the fail, it would remove any changes that cause the problems to go away. Hence, it would make the program become shorter and easier to debug.
