Begin Adventurer Test...

Adventurer Test Complete
File 'dominion.c'
Lines executed:32.76% of 577
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
   336948:    9:int compare(const void* a, const void* b) {
   336948:   10:  if (*(int*)a > *(int*)b)
    #####:   11:    return 1;
   336948:   12:  if (*(int*)a < *(int*)b)
    90141:   13:    return -1;
   246807:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
     7500:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
     7500:   45:  SelectStream(1);
     7500:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
     7500:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
     7500:   53:  memset(state, 0, sizeof(struct gameState));
        -:   54:  //set number of players
     7500:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
    82500:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
   825000:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
   750000:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
     7500:   74:  if (numPlayers == 2)
        -:   75:    {
     2576:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
     4924:   78:  else if (numPlayers == 3)
        -:   79:    {
     2411:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
     2513:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
     7500:   88:  if (numPlayers == 2)
        -:   89:    {
     2576:   90:      state->supplyCount[estate] = 8;
     2576:   91:      state->supplyCount[duchy] = 8;
     2576:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
     4924:   96:      state->supplyCount[estate] = 12;
     4924:   97:      state->supplyCount[duchy] = 12;
     4924:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
     7500:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     7500:  103:  state->supplyCount[silver] = 40;
     7500:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
   157500:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
  1237500:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
  1162500:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
    77500:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
     2500:  116:		  if (numPlayers == 2){ 
      848:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
     1652:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
    72500:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
    75000:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
  1087500:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
    29937:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
    22437:  141:      state->deckCount[i] = 0;
    89748:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
    67311:  144:	  state->deck[i][j] = estate;
    67311:  145:	  state->deckCount[i]++;
        -:  146:	}
   179496:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
   157059:  149:	  state->deck[i][j] = copper;
   157059:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
    29937:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
    22437:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
    29937:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
    22437:  167:      state->handCount[i] = 0;
    22437:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
   210000:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
   202500:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
     7500:  183:  state->outpostPlayed = 0;
     7500:  184:  state->phase = 0;
     7500:  185:  state->numActions = 1;
     7500:  186:  state->numBuys = 1;
     7500:  187:  state->playedCardCount = 0;
     7500:  188:  state->whoseTurn = 0;
     7500:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
    45000:  193:  for (it = 0; it < 5; it++){
    37500:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
     7500:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
     7500:  199:  return 0;
        -:  200:}
        -:  201:
    23093:  202:int shuffle(int player, struct gameState *state){
        -:  203:	int newDeck[MAX_DECK];
    23093:  204:    int newDeckPos = 0;
        -:  205:    int card;
        -:  206:    int i;
        -:  207:
    23093:  208:    if (state->deckCount[player] < 1)
      263:  209:		return -1;
    22830:  210:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
   270816:  212:	while (state->deckCount[player] > 0) {
   225156:  213:		card = floor(Random() * state->deckCount[player]);
   225156:  214:		newDeck[newDeckPos] = state->deck[player][card];
   225156:  215:		newDeckPos++;
   729762:  216:		for (i = card; i < state->deckCount[player]-1; i++) {
   504606:  217:			state->deck[player][i] = state->deck[player][i+1];
        -:  218:		}
   225156:  219:		state->deckCount[player]--;
        -:  220:	}
   247986:  221:	for (i = 0; i < newDeckPos; i++) {
   225156:  222:		state->deck[player][i] = newDeck[i];
   225156:  223:		state->deckCount[player]++;
        -:  224:	}
    22830:  225:	return 0;
        -:  226:}
        -:  227:
     7500:  228:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {	
        -:  229:	int card;
     7500:  230:	int coin_bonus = 0; 	//tracks coins gain from actions
        -:  231:	//check if it is the right phase
     7500:  232:	if (state->phase != 0)
    #####:  233:		return -1;	
        -:  234:	//check if player has enough actions
     7500:  235:	if ( state->numActions < 1 )
    #####:  236:		return -1;	
        -:  237:	//get card played
     7500:  238:	card = handCard(handPos, state);	
        -:  239:	//check if selected card is an action
     7500:  240:	if ( card < adventurer || card > treasure_map )
    #####:  241:		return -1;
        -:  242:	//play card
     7500:  243:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    #####:  244:		return -1;
        -:  245:	//reduce number of actions
     7500:  246:	state->numActions--;
        -:  247:	//update coins (Treasure cards may be added with card draws)
     7500:  248:	updateCoins(state->whoseTurn, state, coin_bonus);	
     7500:  249:	return 0;
        -:  250:}
        -:  251:
    #####:  252:int buyCard(int supplyPos, struct gameState *state) {
        -:  253:	int who;
    #####:  254:	if (DEBUG)
        -:  255:		printf("Entering buyCard...\n");
        -:  256:	// I don't know what to do about the phase thing.
    #####:  257:	who = state->whoseTurn;
        -:  258:
    #####:  259:	if (state->numBuys < 1){
    #####:  260:		if (DEBUG)
        -:  261:			printf("You do not have any buys left\n");
    #####:  262:		return -1;
        -:  263:	} 
    #####:  264:	else if (supplyCount(supplyPos, state) <1){
    #####:  265:		if (DEBUG)
        -:  266:			printf("There are not any of that type of card left\n");
    #####:  267:		return -1;
        -:  268:	} 
    #####:  269:	else if (state->coins < getCost(supplyPos)){
    #####:  270:		if (DEBUG)
        -:  271:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  272:		return -1;
        -:  273:	} 
        -:  274:	else {
    #####:  275:		state->phase=1;
    #####:  276:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    #####:  277:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  278:		state->numBuys--;
    #####:  279:		if (DEBUG)
        -:  280:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  281:	}
        -:  282:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  283:	//state->discardCount[who]++; 
    #####:  284:	return 0;
        -:  285:}
        -:  286:
    #####:  287:int numHandCards(struct gameState *state) {
    #####:  288:  return state->handCount[ whoseTurn(state) ];
        -:  289:}
        -:  290:
     7500:  291:int handCard(int handPos, struct gameState *state) {
     7500:  292:  int currentPlayer = whoseTurn(state);
     7500:  293:  return state->hand[currentPlayer][handPos];
        -:  294:}
        -:  295:
     7990:  296:int supplyCount(int card, struct gameState *state) {
     7990:  297:  return state->supplyCount[card];
        -:  298:}
        -:  299:
    #####:  300:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  301:  int i;
    #####:  302:  int count = 0;
        -:  303:
    #####:  304:  for (i = 0; i < state->deckCount[player]; i++)
        -:  305:    {
    #####:  306:      if (state->deck[player][i] == card) count++;
        -:  307:    }
        -:  308:
    #####:  309:  for (i = 0; i < state->handCount[player]; i++)
        -:  310:    {
    #####:  311:      if (state->hand[player][i] == card) count++;
        -:  312:    }
        -:  313:
    #####:  314:  for (i = 0; i < state->discardCount[player]; i++)
        -:  315:    {
    #####:  316:      if (state->discard[player][i] == card) count++;
        -:  317:    }
        -:  318:
    #####:  319:  return count;
        -:  320:}
        -:  321:
    15000:  322:int whoseTurn(struct gameState *state) {
    15000:  323:	return state->whoseTurn;
        -:  324:}
        -:  325:
    #####:  326:int endTurn(struct gameState *state) {
        -:  327:  int k;
        -:  328:  int i;
    #####:  329:  int currentPlayer = whoseTurn(state);
        -:  330:  
        -:  331:  //Discard hand
    #####:  332:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  333:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  334:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  335:  }
    #####:  336:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  337:    
        -:  338:  //Code for determining the player
    #####:  339:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  340:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  341:  }
        -:  342:  else{
    #####:  343:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  344:  }
        -:  345:
    #####:  346:  state->outpostPlayed = 0;
    #####:  347:  state->phase = 0;
    #####:  348:  state->numActions = 1;
    #####:  349:  state->coins = 0;
    #####:  350:  state->numBuys = 1;
    #####:  351:  state->playedCardCount = 0;
    #####:  352:  state->handCount[state->whoseTurn] = 0;
        -:  353:
        -:  354:  //int k; move to top
        -:  355:  //Next player draws hand
    #####:  356:  for (k = 0; k < 5; k++){
    #####:  357:    drawCard(state->whoseTurn, state);//Draw a card
        -:  358:  }
        -:  359:
        -:  360:  //Update money
    #####:  361:  updateCoins(state->whoseTurn, state , 0);
        -:  362:
    #####:  363:  return 0;
        -:  364:}
        -:  365:
    #####:  366:int isGameOver(struct gameState *state) {
        -:  367:  int i;
        -:  368:  int j;
        -:  369:	
        -:  370:  //if stack of Province cards is empty, the game ends
    #####:  371:  if (state->supplyCount[province] == 0)
        -:  372:    {
    #####:  373:      return 1;
        -:  374:    }
        -:  375:
        -:  376:  //if three supply pile are at 0, the game ends
    #####:  377:  j = 0;
    #####:  378:  for (i = 0; i < 25; i++)
        -:  379:    {
    #####:  380:      if (state->supplyCount[i] == 0)
        -:  381:	{
    #####:  382:	  j++;
        -:  383:	}
        -:  384:    }
    #####:  385:  if ( j >= 3)
        -:  386:    {
    #####:  387:      return 1;
        -:  388:    }
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
    #####:  393:int scoreFor (int player, struct gameState *state) {
        -:  394:
        -:  395:  int i;
    #####:  396:  int score = 0;
        -:  397:  //score from hand
    #####:  398:  for (i = 0; i < state->handCount[player]; i++)
        -:  399:    {
    #####:  400:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  401:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  402:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  403:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  404:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  405:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  406:    }
        -:  407:
        -:  408:  //score from discard
    #####:  409:  for (i = 0; i < state->discardCount[player]; i++)
        -:  410:    {
    #####:  411:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  412:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  413:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  414:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  415:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  416:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  417:    }
        -:  418:
        -:  419:  //score from deck
    #####:  420:  for (i = 0; i < state->discardCount[player]; i++)
        -:  421:    {
    #####:  422:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  423:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  424:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  425:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  426:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  427:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  428:    }
        -:  429:
    #####:  430:  return score;
        -:  431:}
        -:  432:
    #####:  433:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  434:	int i, j, highScore, currentPlayer;
        -:  435:	
        -:  436:	//get score for each player
    #####:  437:	for (i = 0; i < MAX_PLAYERS; i++){
        -:  438:		//set unused player scores to -9999
    #####:  439:		if (i >= state->numPlayers)
    #####:  440:			players[i] = -9999;
        -:  441:		else
    #####:  442:			players[i] = scoreFor (i, state);
        -:  443:    }
        -:  444:	//find highest score
    #####:  445:	j = 0;
    #####:  446:	for (i = 0; i < MAX_PLAYERS; i++){
    #####:  447:		if (players[i] > players[j])
    #####:  448:			j = i;
        -:  449:    }
    #####:  450:	highScore = players[j];
        -:  451:	//add 1 to players who had less turns
    #####:  452:	currentPlayer = whoseTurn(state);
    #####:  453:	for (i = 0; i < MAX_PLAYERS; i++){
    #####:  454:		if ((i > currentPlayer) && (players[i] == highScore))
    #####:  455:			players[i]++;
        -:  456:    }
        -:  457:	//find new highest score
    #####:  458:	j = 0;
    #####:  459:	for (i = 0; i < MAX_PLAYERS; i++){
    #####:  460:		if ( players[i] > players[j] )
    #####:  461:			j = i;
        -:  462:    }
    #####:  463:	highScore = players[j];
        -:  464:	//set winners in array to 1 and rest to 0
    #####:  465:	for (i = 0; i < MAX_PLAYERS; i++){
    #####:  466:		if ( players[i] == highScore )
    #####:  467:			players[i] = 1;
        -:  468:		else
    #####:  469:			players[i] = 0;
        -:  470:    }
    #####:  471:	return 0;
        -:  472:}
        -:  473:
    66348:  474:int drawCard(int player, struct gameState *state)
        -:  475:{	int count;
        -:  476:  int deckCounter;
    66348:  477:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  478:    
        -:  479:    //Step 1 Shuffle the discard pile back into a deck
        -:  480:    int i;
        -:  481:    //Move discard to deck
     1179:  482:    for (i = 0; i < state->discardCount[player];i++){
      786:  483:      state->deck[player][i] = state->discard[player][i];
      786:  484:      state->discard[player][i] = -1;
        -:  485:    }
        -:  486:
      393:  487:    state->deckCount[player] = state->discardCount[player];
      393:  488:    state->discardCount[player] = 0;//Reset discard
        -:  489:
        -:  490:    //Shufffle the deck
      393:  491:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  492:   
      393:  493:    if (DEBUG){//Debug statements
        -:  494:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  495:    }
        -:  496:    
      393:  497:    state->discardCount[player] = 0;
        -:  498:
        -:  499:    //Step 2 Draw Card
      393:  500:    count = state->handCount[player];//Get current player's hand count
        -:  501:    
      393:  502:    if (DEBUG){//Debug statements
        -:  503:      printf("Current hand count: %d\n", count);
        -:  504:    }
        -:  505:    
      393:  506:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  507:
      393:  508:    if (deckCounter == 0)
    #####:  509:      return -1;
        -:  510:
      393:  511:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      393:  512:    state->deckCount[player]--;
      393:  513:    state->handCount[player]++;//Increment hand count
        -:  514:  }
        -:  515:
        -:  516:  else{
    65955:  517:    int count = state->handCount[player];//Get current hand count for player
        -:  518:    int deckCounter;
    65955:  519:    if (DEBUG){//Debug statements
        -:  520:      printf("Current hand count: %d\n", count);
        -:  521:    }
        -:  522:
    65955:  523:    deckCounter = state->deckCount[player];//Create holder for the deck count
    65955:  524:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    65955:  525:    state->deckCount[player]--;
    65955:  526:    state->handCount[player]++;//Increment hand count
        -:  527:  }
        -:  528:
    66348:  529:  return 0;
        -:  530:}
        -:  531:
    #####:  532:int getCost(int cardNumber)
        -:  533:{
    #####:  534:  switch( cardNumber ) 
        -:  535:    {
        -:  536:    case curse:
    #####:  537:      return 0;
        -:  538:    case estate:
    #####:  539:      return 2;
        -:  540:    case duchy:
    #####:  541:      return 5;
        -:  542:    case province:
    #####:  543:      return 8;
        -:  544:    case copper:
    #####:  545:      return 0;
        -:  546:    case silver:
    #####:  547:      return 3;
        -:  548:    case gold:
    #####:  549:      return 6;
        -:  550:    case adventurer:
    #####:  551:      return 6;
        -:  552:    case council_room:
    #####:  553:      return 5;
        -:  554:    case feast:
    #####:  555:      return 4;
        -:  556:    case gardens:
    #####:  557:      return 4;
        -:  558:    case mine:
    #####:  559:      return 5;
        -:  560:    case remodel:
    #####:  561:      return 4;
        -:  562:    case smithy:
    #####:  563:      return 4;
        -:  564:    case village:
    #####:  565:      return 3;
        -:  566:    case baron:
    #####:  567:      return 4;
        -:  568:    case great_hall:
    #####:  569:      return 3;
        -:  570:    case minion:
    #####:  571:      return 5;
        -:  572:    case steward:
    #####:  573:      return 3;
        -:  574:    case tribute:
    #####:  575:      return 5;
        -:  576:    case ambassador:
    #####:  577:      return 3;
        -:  578:    case cutpurse:
    #####:  579:      return 4;
        -:  580:    case embargo: 
    #####:  581:      return 2;
        -:  582:    case outpost:
    #####:  583:      return 5;
        -:  584:    case salvager:
    #####:  585:      return 4;
        -:  586:    case sea_hag:
    #####:  587:      return 4;
        -:  588:    case treasure_map:
    #####:  589:      return 4;
        -:  590:    }
        -:  591:	
    #####:  592:  return -1;
        -:  593:}
        -:  594:
        -:  595://4-15-2015 REFACTORED CARD EFFECTS: mine, remodel, minion, cutpurse, embargo
    #####:  596:int mine_effects(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  597:    int i, j;
    #####:  598:	j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  599:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    #####:  600:		return -1;
    #####:  601:    if (choice2 > treasure_map || choice2 <= curse)
    #####:  602:		return -1;
    #####:  603:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
    #####:  604:		return -1;
    #####:  605:    gainCard(choice2, state, 1, currentPlayer);
        -:  606:    //discard card from hand
    #####:  607:    discardCard(handPos, currentPlayer, state, 0);
        -:  608:    //discard trashed card
    #####:  609:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  610:		if (state->hand[currentPlayer][i] == j){
    #####:  611:			discardCard(i, currentPlayer, state, 0);
    #####:  612:			break;
        -:  613:	    }
        -:  614:	}
    #####:  615:    return 0;
        -:  616:}
        -:  617:
    #####:  618:int remodel_effects(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  619:    int i, j;
    #####:  620:	j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  621:	if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
    #####:  622:		return -1;
    #####:  623:    gainCard(choice2, state, 2, currentPlayer);
        -:  624:    //discard card from hand
    #####:  625:    discardCard(handPos, currentPlayer, state, 0);
        -:  626:    //discard trashed card
    #####:  627:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  628:		if (state->hand[currentPlayer][i] == j){
    #####:  629:			discardCard(i, currentPlayer, state, 0);			
    #####:  630:			break;
        -:  631:	    }
        -:  632:	}
    #####:  633:    return 0;
        -:  634:}
        -:  635:
    #####:  636:int minion_effects(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2){
        -:  637:	int i, j;
        -:  638://+1 action
    #####:  639:    state->numActions++;
        -:  640://discard card from hand
    #####:  641:    discardCard(handPos, currentPlayer, state, 0);
        -:  642://+2 coins
    #####:  643:	if (choice1)
    #####:  644:		state->coins = state->coins + 2;
    #####:  645:    else if (choice2){		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  646://discard hand
    #####:  647:		while(numHandCards(state) > 0)
    #####:  648:			discardCard(handPos, currentPlayer, state, 0);
        -:  649://draw 4
    #####:  650:		for (i = 0; i < 4; i++)
    #####:  651:			drawCard(currentPlayer, state);
        -:  652://other players discard hand and redraw if hand size > 4
    #####:  653:		for (i = 0; i < state->numPlayers; i++){
    #####:  654:			if (i != currentPlayer){
    #####:  655:				if ( state->handCount[i] > 4 ){
        -:  656:				//discard hand
    #####:  657:					while( state->handCount[i] > 0 )
    #####:  658:						discardCard(handPos, i, state, 0);
        -:  659:					//draw 4
    #####:  660:					for (j = 0; j < 4; j++)
    #####:  661:						drawCard(i, state);
        -:  662:				}
        -:  663:			}
        -:  664:	    }
        -:  665:	}
    #####:  666:    return 0;
        -:  667:}
        -:  668:
    #####:  669:int cutpurse_effects(struct gameState *state, int currentPlayer, int handPos){
        -:  670:	int i, j, k;
    #####:  671:	updateCoins(currentPlayer, state, 2);
    #####:  672:	for (i = 0; i < state->numPlayers; i++){
    #####:  673:		if (i != currentPlayer){
    #####:  674:			for (j = 0; j < state->handCount[i]; j++){
    #####:  675:				if (state->hand[i][j] == copper){
    #####:  676:					discardCard(j, i, state, 0);
    #####:  677:					break;
        -:  678:				}
    #####:  679:				if (j == state->handCount[i]){
    #####:  680:					for (k = 0; k < state->handCount[i]; k++){
    #####:  681:						if (DEBUG)
        -:  682:							printf("Player %d reveals card number %d\n", i+1, state->hand[i][k]);
        -:  683:					}
    #####:  684:				break;
        -:  685:				}
        -:  686:			}
        -:  687:	    }
        -:  688:	}
        -:  689://discard played card from hand
    #####:  690:    discardCard(handPos, currentPlayer, state, 0);
    #####:  691:    return 0;
        -:  692:}
        -:  693:
    #####:  694:int embargo_effects(struct gameState *state, int currentPlayer, int handPos, int choice1){
        -:  695://+2 Coins
    #####:  696:    state->coins = state->coins + 2;
        -:  697://see if selected pile is in play
    #####:  698:    if ( state->supplyCount[choice1] == -1 )
    #####:  699:		return -1;
        -:  700://add embargo token to selected supply pile
    #####:  701:    state->embargoTokens[choice1]++;
        -:  702://discard played card from hand
    #####:  703:    discardCard(handPos, currentPlayer, state, 1);
    #####:  704:    return 0;
        -:  705:}
        -:  706:// END CARD EFFECTS
        -:  707:
     7500:  708:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  709:{
        -:  710:  int i;
        -:  711:  int j;
        -:  712:  int x;
        -:  713:  int index;
     7500:  714:  int currentPlayer = whoseTurn(state);
     7500:  715:  int nextPlayer = currentPlayer + 1;
        -:  716:  
     7500:  717:  int tributeRevealedCards[2] = {-1, -1};
        -:  718:  int temphand[MAX_HAND];// moved above the if statement
     7500:  719:  int drawntreasure=0;
        -:  720:  int cardDrawn;
     7500:  721:  int z = 0;// this is the counter for the temp hand
     7500:  722:  if (nextPlayer > (state->numPlayers - 1)){
     3828:  723:    nextPlayer = 0;
        -:  724:  }
        -:  725:  
        -:  726:	
        -:  727:	//uses switch to select card and perform actions
     7500:  728:  switch(card){
        -:  729:    
        -:  730:	case adventurer:
    11703:  731:		while(drawntreasure < 2){
     6703:  732:			if (state->deckCount[currentPlayer] < 1)//if the deck empty we shuffle discard and add to deck
      263:  733:				shuffle(currentPlayer, state);
     6703:  734:			drawCard(currentPlayer, state);
     6703:  735:			cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    11703:  736:			if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     5000:  737:				drawntreasure++;
        -:  738:			else{
     1703:  739:				temphand[z]=cardDrawn;
     1703:  740:				state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1703:  741:				z++;
        -:  742:			}
        -:  743:		}
     6703:  744:		while(z-1 >= 0){
     1703:  745:			state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1703:  746:			z--;
        -:  747:		}
     2500:  748:		discardCard(handPos, currentPlayer, state, 0);
     2500:  749:		return 0;	
        -:  750:    case council_room:
        -:  751:      //+4 Cards
    #####:  752:      for (i = 0; i < 4; i++)
        -:  753:	{
    #####:  754:	  drawCard(currentPlayer, state);
        -:  755:	}
        -:  756:			
        -:  757:      //+1 Buy
    #####:  758:      state->numBuys++;
        -:  759:			
        -:  760:      //Each other player draws a card
    #####:  761:      for (i = 0; i < state->numPlayers; i++)
        -:  762:	{
    #####:  763:	  if ( i != currentPlayer )
        -:  764:	    {
    #####:  765:	      drawCard(i, state);
        -:  766:	    }
        -:  767:	}
        -:  768:			
        -:  769:      //put played card in played card pile
    #####:  770:      discardCard(handPos, currentPlayer, state, 0);
        -:  771:			
    #####:  772:      return 0;
        -:  773:			
        -:  774:    case feast:
        -:  775:      //gain card with cost up to 5
        -:  776:      //Backup hand
    #####:  777:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  778:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  779:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  780:      }
        -:  781:      //Backup hand
        -:  782:
        -:  783:      //Update Coins for Buy
    #####:  784:      updateCoins(currentPlayer, state, 5);
    #####:  785:      x = 1;//Condition to loop on
    #####:  786:      while( x == 1) {//Buy one card
    #####:  787:	if (supplyCount(choice1, state) <= 0){
    #####:  788:	  if (DEBUG)
        -:  789:	    printf("None of that card left, sorry!\n");
        -:  790:
    #####:  791:	  if (DEBUG){
        -:  792:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:	  }
        -:  794:	}
    #####:  795:	else if (state->coins < getCost(choice1)){
    #####:  796:	  printf("That card is too expensive!\n");
        -:  797:
    #####:  798:	  if (DEBUG){
        -:  799:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:	  }
        -:  801:	}
        -:  802:	else{
        -:  803:
    #####:  804:	  if (DEBUG){
        -:  805:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:	  }
        -:  807:
    #####:  808:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  809:	  x = 0;//No more buying cards
        -:  810:
    #####:  811:	  if (DEBUG){
        -:  812:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:	  }
        -:  814:
        -:  815:	}
        -:  816:      }     
        -:  817:
        -:  818:      //Reset Hand
    #####:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  820:	state->hand[currentPlayer][i] = temphand[i];
    #####:  821:	temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      			
    #####:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      return -1;
        -:  829:			
        -:  830:    case mine:
    #####:  831:		return (mine_effects(state, currentPlayer, handPos, choice1, choice2));
        -:  832:    case remodel:
    #####:  833:		return (remodel_effects(state, currentPlayer, handPos, choice1, choice2));
        -:  834:    case smithy:
        -:  835:		//+3 Cards
    #####:  836:		for (i = 0; i < 3; i++)
    #####:  837:			drawCard(currentPlayer, state);
        -:  838:		//discard card from hand
    #####:  839:		discardCard(handPos, currentPlayer, state, 0);
    #####:  840:		return 0;	
        -:  841:    case village:
        -:  842:		//+1 Card
    #####:  843:		drawCard(currentPlayer, state);		
        -:  844:		//+2 Actions
    #####:  845:		state->numActions = state->numActions + 2;			
        -:  846:		//discard played card from hand
    #####:  847:		discardCard(handPos, currentPlayer, state, 0);
    #####:  848:		return 0;		
        -:  849:    case baron:
    #####:  850:      state->numBuys++;//Increase buys by 1!
    #####:  851:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  852:	int p = 0;//Iterator for hand!
    #####:  853:	int card_not_discarded = 1;//Flag for discard set!
    #####:  854:	while(card_not_discarded){
    #####:  855:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  856:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  857:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  858:	    state->discardCount[currentPlayer]++;
    #####:  859:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  860:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  861:	    }
    #####:  862:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  863:	    state->handCount[currentPlayer]--;
    #####:  864:	    card_not_discarded = 0;//Exit the loop
        -:  865:	  }
    #####:  866:	  else if (p > state->handCount[currentPlayer]){
    #####:  867:	    if(DEBUG) {
        -:  868:	      printf("No estate cards in your hand, invalid choice\n");
        -:  869:	      printf("Must gain an estate if there are any\n");
        -:  870:	    }
    #####:  871:	    if (supplyCount(estate, state) > 0){
    #####:  872:	      gainCard(estate, state, 0, currentPlayer);
    #####:  873:	      state->supplyCount[estate]--;//Decrement estates
    #####:  874:	      if (supplyCount(estate, state) == 0){
    #####:  875:		isGameOver(state);
        -:  876:	      }
        -:  877:	    }
    #####:  878:	    card_not_discarded = 0;//Exit the loop
        -:  879:	  }
        -:  880:			    
        -:  881:	  else{
    #####:  882:	    p++;//Next card
        -:  883:	  }
        -:  884:	}
        -:  885:      }
        -:  886:			    
        -:  887:      else{
    #####:  888:	if (supplyCount(estate, state) > 0){
    #####:  889:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  890:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  891:	  if (supplyCount(estate, state) == 0){
    #####:  892:	    isGameOver(state);
        -:  893:	  }
        -:  894:	}
        -:  895:      }
        -:  896:	    
        -:  897:      
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case great_hall:
        -:  901:      //+1 Card
    #####:  902:      drawCard(currentPlayer, state);
        -:  903:			
        -:  904:      //+1 Actions
    #####:  905:      state->numActions++;
        -:  906:			
        -:  907:      //discard card from hand
    #####:  908:      discardCard(handPos, currentPlayer, state, 0);
    #####:  909:      return 0;
        -:  910:		
        -:  911:    case minion:
    #####:  912:		return (minion_effects(state, currentPlayer, handPos, choice1, choice2));
        -:  913:    case steward:
     5000:  914:		if (choice1 == 1){
        -:  915:		//+2 cards
     1769:  916:			drawCard(currentPlayer, state);
     1769:  917:			drawCard(currentPlayer, state);
        -:  918:		}
     3231:  919:		else if (choice1 == 2)
        -:  920:		//+2 coins
     1737:  921:			*bonus += 2;
        -:  922:		else{
        -:  923:		//trash 2 cards in hand
     1494:  924:			discardCard(choice2, currentPlayer, state, 1);
     1494:  925:			discardCard(choice3, currentPlayer, state, 1);
        -:  926:		}
        -:  927:		//discard card from hand
     5000:  928:		discardCard(handPos, currentPlayer, state, 0);
     5000:  929:		return 0;
        -:  930:		
        -:  931:    case tribute:
    #####:  932:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  933:	if (state->deckCount[nextPlayer] > 0){
    #####:  934:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	  state->deckCount[nextPlayer]--;
        -:  936:	}
    #####:  937:	else if (state->discardCount[nextPlayer] > 0){
    #####:  938:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  939:	  state->discardCount[nextPlayer]--;
        -:  940:	}
        -:  941:	else{
        -:  942:	  //No Card to Reveal
    #####:  943:	  if (DEBUG){
        -:  944:	    printf("No cards to reveal\n");
        -:  945:	  }
        -:  946:	}
        -:  947:      }
        -:  948:	    
        -:  949:      else{
    #####:  950:	if (state->deckCount[nextPlayer] == 0){
    #####:  951:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  952:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  953:	    state->deckCount[nextPlayer]++;
    #####:  954:	    state->discard[nextPlayer][i] = -1;
    #####:  955:	    state->discardCount[nextPlayer]--;
        -:  956:	  }
        -:  957:			    
    #####:  958:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  959:	} 
    #####:  960:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  962:	state->deckCount[nextPlayer]--;
    #####:  963:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  965:	state->deckCount[nextPlayer]--;
        -:  966:      }    
        -:  967:		       
    #####:  968:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  969:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  970:	state->playedCardCount++;
    #####:  971:	tributeRevealedCards[1] = -1;
        -:  972:      }
        -:  973:
    #####:  974:      for (i = 0; i <= 2; i ++){
    #####:  975:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  976:	  state->coins += 2;
        -:  977:	}
        -:  978:		    
    #####:  979:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  980:	  drawCard(currentPlayer, state);
    #####:  981:	  drawCard(currentPlayer, state);
        -:  982:	}
        -:  983:	else{//Action Card
    #####:  984:	  state->numActions = state->numActions + 2;
        -:  985:	}
        -:  986:      }
        -:  987:	    
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case ambassador:
    #####:  991:		j = 0;	//used to check if player has enough cards to discard
    #####:  992:		if (choice2 > 2 || choice2 < 0)
    #####:  993:			return -1;
    #####:  994:		if (choice1 == handPos)
    #####:  995:			return -1;
    #####:  996:		for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  997:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    #####:  998:				j++;
        -:  999:		}
    #####: 1000:		if (j < choice2)
    #####: 1001:			return -1;
    #####: 1002:		if (DEBUG) 
        -: 1003:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1004:		//increase supply count for choosen card by amount being discarded
    #####: 1005:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1006:		//each other player gains a copy of revealed card
    #####: 1007:		for (i = 0; i < state->numPlayers; i++){
    #####: 1008:			if (i != currentPlayer)
    #####: 1009:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1010:		}
        -: 1011:		//discard played card from hand
    #####: 1012:		discardCard(handPos, currentPlayer, state, 0);			
        -: 1013:		//trash copies of cards returned to supply
    #####: 1014:		for (j = 0; j < choice2; j++){
    #####: 1015:			for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####: 1016:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]){
    #####: 1017:					discardCard(i, currentPlayer, state, 1);
    #####: 1018:					break;
        -: 1019:				}
        -: 1020:			}
        -: 1021:		}			
    #####: 1022:		return 0;
        -: 1023:    case cutpurse:
    #####: 1024:		return (cutpurse_effects(state, currentPlayer, handPos));
        -: 1025:    case embargo:
    #####: 1026:		return (embargo_effects(state, currentPlayer, handPos, choice1));
        -: 1027:    case outpost:
        -: 1028:      //set outpost flag
    #####: 1029:      state->outpostPlayed++;
        -: 1030:			
        -: 1031:      //discard card
    #####: 1032:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case salvager:
        -: 1036:      //+1 buy
    #####: 1037:      state->numBuys++;
        -: 1038:			
    #####: 1039:      if (choice1)
        -: 1040:	{
        -: 1041:	  //gain coins equal to trashed card
    #####: 1042:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1043:	  //trash card
    #####: 1044:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1045:	}
        -: 1046:			
        -: 1047:      //discard card
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case sea_hag:
    #####: 1052:      for (i = 0; i < state->numPlayers; i++){
    #####: 1053:	if (i != currentPlayer){
    #####: 1054:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1055:	  state->discardCount[i]++;
    #####: 1056:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1057:	}
        -: 1058:      }
    #####: 1059:      return 0;
        -: 1060:		
        -: 1061:    case treasure_map:
        -: 1062:      //search hand for another treasure_map
    #####: 1063:      index = -1;
    #####: 1064:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1065:	{
    #####: 1066:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1067:	    {
    #####: 1068:	      index = i;
    #####: 1069:	      break;
        -: 1070:	    }
        -: 1071:	}
    #####: 1072:      if (index > -1)
        -: 1073:	{
        -: 1074:	  //trash both treasure cards
    #####: 1075:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1076:	  discardCard(index, currentPlayer, state, 1);
        -: 1077:
        -: 1078:	  //gain 4 Gold cards
    #####: 1079:	  for (i = 0; i < 4; i++)
        -: 1080:	    {
    #####: 1081:	      gainCard(gold, state, 1, currentPlayer);
        -: 1082:	    }
        -: 1083:				
        -: 1084:	  //return success
    #####: 1085:	  return 1;
        -: 1086:	}
        -: 1087:			
        -: 1088:      //no second treasure_map found in hand
    #####: 1089:      return -1;
        -: 1090:    }
        -: 1091:	
    #####: 1092:  return -1;
        -: 1093:}
        -: 1094:
    10488: 1095:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1096:{
        -: 1097:	
        -: 1098:  //if card is not trashed, added to Played pile 
    10488: 1099:  if (trashFlag < 1)
        -: 1100:    {
        -: 1101:      //add card to played pile
     7500: 1102:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     7500: 1103:      state->playedCardCount++;
        -: 1104:    }
        -: 1105:	
        -: 1106:  //set played card to -1
    10488: 1107:  state->hand[currentPlayer][handPos] = -1;
        -: 1108:	
        -: 1109:  //remove card from player's hand
    10488: 1110:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1111:    {
        -: 1112:      //reduce number of cards in hand
     2314: 1113:      state->handCount[currentPlayer]--;
        -: 1114:    }
     8174: 1115:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1116:    {
        -: 1117:      //reduce number of cards in hand
      212: 1118:      state->handCount[currentPlayer]--;
        -: 1119:    }
        -: 1120:  else 	
        -: 1121:    {
        -: 1122:      //replace discarded card with last card in hand
     7962: 1123:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1124:      //set last card to -1
     7962: 1125:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1126:      //reduce number of cards in hand
     7962: 1127:      state->handCount[currentPlayer]--;
        -: 1128:    }
        -: 1129:	
    10488: 1130:  return 0;
        -: 1131:}
        -: 1132:
     7990: 1133:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1134:{
        -: 1135:  //Note: supplyPos is enum of choosen card
        -: 1136:	
        -: 1137:  //check if supply pile is empty (0) or card is not used in game (-1)
     7990: 1138:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1139:    {
    #####: 1140:      return -1;
        -: 1141:    }
        -: 1142:	
        -: 1143:  //added card for [whoseTurn] current player:
        -: 1144:  // toFlag = 0 : add to discard
        -: 1145:  // toFlag = 1 : add to deck
        -: 1146:  // toFlag = 2 : add to hand
        -: 1147:
     7990: 1148:  if (toFlag == 1)
        -: 1149:    {
    #####: 1150:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1151:      state->deckCount[player]++;
        -: 1152:    }
     7990: 1153:  else if (toFlag == 2)
        -: 1154:    {
     5000: 1155:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
     5000: 1156:      state->handCount[player]++;
        -: 1157:    }
        -: 1158:  else
        -: 1159:    {
     2990: 1160:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     2990: 1161:      state->discardCount[player]++;
        -: 1162:    }
        -: 1163:	
        -: 1164:  //decrease number in supply pile
     7990: 1165:  state->supplyCount[supplyPos]--;
        -: 1166:	 
     7990: 1167:  return 0;
        -: 1168:}
        -: 1169:
    25000: 1170:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1171:{
        -: 1172:  int i;
        -: 1173:	
        -: 1174:  //reset coin count
    25000: 1175:  state->coins = 0;
        -: 1176:
        -: 1177:  //add coins for each Treasure card in player's hand
   137646: 1178:  for (i = 0; i < state->handCount[player]; i++)
        -: 1179:    {
   112646: 1180:      if (state->hand[player][i] == copper)
        -: 1181:	{
    80414: 1182:	  state->coins += 1;
        -: 1183:	}
    32232: 1184:      else if (state->hand[player][i] == silver)
        -: 1185:	{
      482: 1186:	  state->coins += 2;
        -: 1187:	}
    31750: 1188:      else if (state->hand[player][i] == gold)
        -: 1189:	{
      496: 1190:	  state->coins += 3;
        -: 1191:	}	
        -: 1192:    }	
        -: 1193:
        -: 1194:  //add bonus
    25000: 1195:  state->coins += bonus;
        -: 1196:
    25000: 1197:  return 0;
        -: 1198:}
        -: 1199:
        -: 1200://
        -: 1201://end of dominion.c
