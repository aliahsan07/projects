        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
        1:    9:int main() {
        -:   10:	int i;
        1:   11:	struct gameState* testState = newGame();
        1:   12:	int* myKingdomCards = kingdomCards(7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
        1:   13:	initializeGame(2, myKingdomCards, 3, testState);
        -:   14:	
        6:   15:	for(i = 0; i < 5; i++) {
        5:   16:		testState->hand[0][i] = (i + 5);
        -:   17:	}
        -:   18:	
        1:   19:	int card = testState->deck[0][testState->deckCount[0] - 1];
        -:   20:	
        1:   21:	assert(testState->handCount[0] == 5);
        1:   22:	assert(testState->deckCount[0] == 5);
        -:   23:	
        1:   24:	drawCard(0, testState);
        -:   25:	
        1:   26:	assert(testState->handCount[0] == 6);
        1:   27:	assert(testState->deckCount[0] == 4);
        1:   28:	assert(testState->hand[0][5] == card);
        -:   29:	
        1:   30:	testState = newGame();
        1:   31:	initializeGame(2, myKingdomCards, 3, testState);
        -:   32:	
        -:   33:	
        6:   34:	for(i = 0; i < 5; i++) {
        5:   35:		testState->discard[0][i] = i;
        5:   36:		testState->hand[0][i] = i + 5;
        5:   37:		testState->deck[0][i] = i + 10;
        -:   38:	}
        -:   39:	
        1:   40:	testState->discardCount[0] = 5;
        -:   41:	
        6:   42:	for(i = 0; i < 5; i++) {
        5:   43:		drawCard(0, testState);
        -:   44:	}
        -:   45:	
        1:   46:	assert(testState->deckCount[0] == 0);
        1:   47:	assert(testState->handCount[0] == 10);
        -:   48:	
        1:   49:	drawCard(0, testState);
        -:   50:	
        1:   51:	assert(testState->deckCount[0] == 4);
        1:   52:	assert(testState->discardCount[0] == 0);
        1:   53:	assert(testState->handCount[0] == 11);
        -:   54:	
        5:   55:	for(i = 0; i < 4; i++) {
        4:   56:		assert(testState->deck[0][i] < 5);
        -:   57:	}
        -:   58:	
        1:   59:	assert(testState->hand[0][testState->handCount[0] - 1] < 5);
        -:   60:	
        1:   61:	return 0;
        -:   62:}
