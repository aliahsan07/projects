        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
        1:    9:int main() {
        -:   10:	int i;
        1:   11:	struct gameState* testState = newGame();
        1:   12:	int* myKingdomCards = kingdomCards(7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
        1:   13:	initializeGame(2, myKingdomCards, 3, testState);
        -:   14:	
        6:   15:	for(i = 0; i < 5; i++) {
        5:   16:		testState->hand[0][i] = i;
        -:   17:	}	
        -:   18:	
        1:   19:	int card = testState->hand[0][0];
        -:   20:	
        1:   21:	assert(testState->handCount[0] == 5);
        1:   22:	assert(testState->playedCardCount == 0);
        1:   23:	assert(testState->hand[0][0] == card);
        1:   24:	assert(testState->hand[0][1] != card);
        1:   25:	assert(testState->hand[0][2] != card);
        1:   26:	assert(testState->hand[0][3] != card);
        1:   27:	assert(testState->hand[0][4] != card);
        -:   28:	
        1:   29:	discardCard(0, 0, testState, 0);
        -:   30:	
        1:   31:	assert(testState->handCount[0] == 4);
        1:   32:	assert(testState->playedCardCount == 1);
        1:   33:	assert(testState->playedCards[0] == card);
        1:   34:	assert(testState->hand[0][0] != card);
        1:   35:	assert(testState->hand[0][1] != card);
        1:   36:	assert(testState->hand[0][2] != card);
        1:   37:	assert(testState->hand[0][3] != card);
        -:   38:
        1:   39:	return 0;
        -:   40:}
