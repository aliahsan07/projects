        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
        1:    9:int main() {
        1:   10:	struct gameState* testState = newGame();
        1:   11:	int* myKingdomCards = kingdomCards(7, 8, 9, 10, 11, 12, 13, 14, 15, 16);
        1:   12:	initializeGame(2, myKingdomCards, 3, testState);
        -:   13:	
        1:   14:	assert(testState->handCount[0] == 5);
        1:   15:	assert(testState->deckCount[0] == 5);
        1:   16:	assert(testState->numActions == 1);
        1:   17:	assert(testState->numBuys == 1);
        1:   18:	assert(testState->coins > 1);
        1:   19:	assert(testState->coins < 6);
        1:   20:	assert(testState->discardCount[0] == 0);
        1:   21:	assert(testState->playedCardCount == 0);
        1:   22:	assert(supplyCount(14, testState) == 10);
        -:   23:	
        1:   24:	buyCard(14, testState);
        -:   25:	
        1:   26:	assert(testState->coins == 0);
        1:   27:	assert(testState->numBuys == 0);
        1:   28:	assert(testState->discardCount[0] == 1);
        1:   29:	assert(supplyCount(14, testState) == 9);
        -:   30:	
        1:   31:	endTurn(testState);
        -:   32:	
        1:   33:	assert(testState->handCount[1] == 5);
        1:   34:	assert(testState->deckCount[1] == 5);
        1:   35:	assert(testState->numActions == 1);
        1:   36:	assert(testState->numBuys == 1);
        1:   37:	assert(testState->coins > 1);
        1:   38:	assert(testState->coins < 6);
        1:   39:	assert(testState->discardCount[1] == 0);
        1:   40:	assert(testState->playedCardCount == 0);
        1:   41:	assert(supplyCount(7, testState) == 10);
        -:   42:	
        1:   43:	buyCard(7, testState);
        -:   44:	
        1:   45:	assert(testState->coins > 1);
        1:   46:	assert(testState->coins < 6);
        1:   47:	assert(testState->numBuys == 1);
        1:   48:	assert(testState->discardCount[1] == 0);
        1:   49:	assert(supplyCount(7, testState) == 10);
        -:   50:	
        1:   51:	return 0;
        -:   52:}
